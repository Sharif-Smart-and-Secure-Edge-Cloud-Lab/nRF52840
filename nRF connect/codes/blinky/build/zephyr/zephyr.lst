
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 14 00 20 a1 18 00 00 69 54 00 00 59 18 00 00     ... ....iT..Y...
  10:	59 18 00 00 59 18 00 00 59 18 00 00 00 00 00 00     Y...Y...Y.......
	...
  2c:	e5 14 00 00 59 18 00 00 00 00 00 00 8d 14 00 00     ....Y...........
  3c:	59 18 00 00                                         Y...

00000040 <_irq_vector_table>:
  40:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  50:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  60:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  70:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  80:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  90:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  a0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  b0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  c0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  d0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  e0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................
  f0:	c5 15 00 00 c5 15 00 00 c5 15 00 00 c5 15 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     3dc:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3de:	4810      	ldr	r0, [pc, #64]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     3e0:	f005 fea1 	bl	6126 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     3e4:	b900      	cbnz	r0, 3e8 <main+0xc>
		if (ret < 0) {
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
     3e6:	bd08      	pop	{r3, pc}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     3e8:	480d      	ldr	r0, [pc, #52]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     3ea:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     3ec:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     3ee:	6813      	ldr	r3, [r2, #0]
     3f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     3f4:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     3f6:	680b      	ldr	r3, [r1, #0]
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_FLASH_SIZE+0x24>)
     3fa:	210e      	movs	r1, #14
     3fc:	4798      	blx	r3
	if (ret < 0) {
     3fe:	2800      	cmp	r0, #0
     400:	da05      	bge.n	40e <CONFIG_FLASH_SIZE+0xe>
     402:	e7f0      	b.n	3e6 <main+0xa>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     404:	f641 109a 	movw	r0, #6554	; 0x199a
     408:	2100      	movs	r1, #0
     40a:	f004 fa41 	bl	4890 <z_impl_k_sleep>
				    gpio_port_pins_t pins);

static inline int z_impl_gpio_port_toggle_bits(const struct device *port,
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
     40e:	4804      	ldr	r0, [pc, #16]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     410:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     412:	695b      	ldr	r3, [r3, #20]
     414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     418:	4798      	blx	r3
		if (ret < 0) {
     41a:	2800      	cmp	r0, #0
     41c:	daf2      	bge.n	404 <CONFIG_FLASH_SIZE+0x4>
     41e:	e7e2      	b.n	3e6 <main+0xa>
     420:	0000665c 	.word	0x0000665c
     424:	00060001 	.word	0x00060001

00000428 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     428:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     42a:	680b      	ldr	r3, [r1, #0]
     42c:	3301      	adds	r3, #1
     42e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     430:	4b01      	ldr	r3, [pc, #4]	; (438 <char_out+0x10>)
     432:	681b      	ldr	r3, [r3, #0]
     434:	4798      	blx	r3
}
     436:	bd08      	pop	{r3, pc}
     438:	20000000 	.word	0x20000000

0000043c <__printk_hook_install>:
	_char_out = fn;
     43c:	4b01      	ldr	r3, [pc, #4]	; (444 <__printk_hook_install+0x8>)
     43e:	6018      	str	r0, [r3, #0]
}
     440:	4770      	bx	lr
     442:	bf00      	nop
     444:	20000000 	.word	0x20000000

00000448 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     448:	b500      	push	{lr}
     44a:	b083      	sub	sp, #12
     44c:	4602      	mov	r2, r0
     44e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     450:	2100      	movs	r1, #0
     452:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     454:	a901      	add	r1, sp, #4
     456:	4803      	ldr	r0, [pc, #12]	; (464 <vprintk+0x1c>)
     458:	f000 fa3c 	bl	8d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     45c:	b003      	add	sp, #12
     45e:	f85d fb04 	ldr.w	pc, [sp], #4
     462:	bf00      	nop
     464:	00000429 	.word	0x00000429

00000468 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     46c:	b083      	sub	sp, #12
     46e:	4604      	mov	r4, r0
     470:	4608      	mov	r0, r1
     472:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     474:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     476:	f013 0f08 	tst.w	r3, #8
     47a:	d105      	bne.n	488 <process_event+0x20>
     47c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     480:	2300      	movs	r3, #0
     482:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     484:	9301      	str	r3, [sp, #4]
}
     486:	e069      	b.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
		if (evt == EVT_COMPLETE) {
     488:	2901      	cmp	r1, #1
     48a:	d009      	beq.n	4a0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     48c:	f043 0320 	orr.w	r3, r3, #32
     490:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     492:	f385 8811 	msr	BASEPRI, r5
     496:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     49a:	b003      	add	sp, #12
     49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4a0:	f043 0310 	orr.w	r3, r3, #16
     4a4:	8323      	strh	r3, [r4, #24]
     4a6:	e7f4      	b.n	492 <process_event+0x2a>
			evt = process_recheck(mgr);
     4a8:	4620      	mov	r0, r4
     4aa:	f004 fdfa 	bl	50a2 <process_recheck>
     4ae:	e057      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
			res = mgr->last_res;
     4b0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4b4:	464a      	mov	r2, r9
     4b6:	4669      	mov	r1, sp
     4b8:	4620      	mov	r0, r4
     4ba:	f004 fe0b 	bl	50d4 <process_complete>
		onoff_transition_fn transit = NULL;
     4be:	2700      	movs	r7, #0
     4c0:	e05a      	b.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
			transit = mgr->transitions->start;
     4c2:	6923      	ldr	r3, [r4, #16]
     4c4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     4c6:	2106      	movs	r1, #6
     4c8:	4620      	mov	r0, r4
     4ca:	f004 fdc3 	bl	5054 <set_state>
		res = 0;
     4ce:	f04f 0900 	mov.w	r9, #0
     4d2:	e051      	b.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
			transit = mgr->transitions->stop;
     4d4:	6923      	ldr	r3, [r4, #16]
     4d6:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     4d8:	2104      	movs	r1, #4
     4da:	4620      	mov	r0, r4
     4dc:	f004 fdba 	bl	5054 <set_state>
		res = 0;
     4e0:	f04f 0900 	mov.w	r9, #0
     4e4:	e048      	b.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
			transit = mgr->transitions->reset;
     4e6:	6923      	ldr	r3, [r4, #16]
     4e8:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     4ea:	2105      	movs	r1, #5
     4ec:	4620      	mov	r0, r4
     4ee:	f004 fdb1 	bl	5054 <set_state>
		res = 0;
     4f2:	f04f 0900 	mov.w	r9, #0
     4f6:	e03f      	b.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
				   && !sys_slist_is_empty(&mgr->monitors);
     4f8:	2200      	movs	r2, #0
     4fa:	e046      	b.n	58a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa2>
     4fc:	2200      	movs	r2, #0
     4fe:	e044      	b.n	58a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     500:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     504:	8323      	strh	r3, [r4, #24]
     506:	f385 8811 	msr	BASEPRI, r5
     50a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     50e:	2900      	cmp	r1, #0
     510:	d144      	bne.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     512:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     514:	b12b      	cbz	r3, 522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
				notify_all(mgr, &clients, state, res);
     516:	464b      	mov	r3, r9
     518:	4642      	mov	r2, r8
     51a:	4669      	mov	r1, sp
     51c:	4620      	mov	r0, r4
     51e:	f004 fe50 	bl	51c2 <notify_all>
			if (transit != NULL) {
     522:	b117      	cbz	r7, 52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
				transit(mgr, transition_complete);
     524:	4925      	ldr	r1, [pc, #148]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     526:	4620      	mov	r0, r4
     528:	47b8      	blx	r7
	__asm__ volatile(
     52a:	f04f 0320 	mov.w	r3, #32
     52e:	f3ef 8511 	mrs	r5, BASEPRI
     532:	f383 8812 	msr	BASEPRI_MAX, r3
     536:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     53a:	8b23      	ldrh	r3, [r4, #24]
     53c:	f023 0308 	bic.w	r3, r3, #8
     540:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     542:	8b23      	ldrh	r3, [r4, #24]
     544:	f013 0f10 	tst.w	r3, #16
     548:	d02e      	beq.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     54a:	f023 0310 	bic.w	r3, r3, #16
     54e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     550:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     552:	8b26      	ldrh	r6, [r4, #24]
     554:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     558:	2800      	cmp	r0, #0
     55a:	d09a      	beq.n	492 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     55c:	2802      	cmp	r0, #2
     55e:	d0a3      	beq.n	4a8 <process_event+0x40>
		if (evt == EVT_NOP) {
     560:	2800      	cmp	r0, #0
     562:	d096      	beq.n	492 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     564:	2801      	cmp	r0, #1
     566:	d0a3      	beq.n	4b0 <process_event+0x48>
		} else if (evt == EVT_START) {
     568:	2803      	cmp	r0, #3
     56a:	d0aa      	beq.n	4c2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     56c:	2804      	cmp	r0, #4
     56e:	d0b1      	beq.n	4d4 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     570:	2805      	cmp	r0, #5
     572:	d0b8      	beq.n	4e6 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     574:	2700      	movs	r7, #0
		res = 0;
     576:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     578:	8b23      	ldrh	r3, [r4, #24]
     57a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     57e:	45b0      	cmp	r8, r6
     580:	d0ba      	beq.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     582:	68a2      	ldr	r2, [r4, #8]
     584:	2a00      	cmp	r2, #0
     586:	d0b9      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     588:	2201      	movs	r2, #1
		if (do_monitors
     58a:	4611      	mov	r1, r2
     58c:	2a00      	cmp	r2, #0
     58e:	d1b7      	bne.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     590:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     592:	2a00      	cmp	r2, #0
     594:	d1b4      	bne.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
		    || (transit != NULL)) {
     596:	2f00      	cmp	r7, #0
     598:	d1b2      	bne.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     59a:	e7d2      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
				notify_monitors(mgr, state, res);
     59c:	464a      	mov	r2, r9
     59e:	4641      	mov	r1, r8
     5a0:	4620      	mov	r0, r4
     5a2:	f004 fd5f 	bl	5064 <notify_monitors>
     5a6:	e7b4      	b.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5a8:	f013 0f20 	tst.w	r3, #32
     5ac:	d004      	beq.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5ae:	f023 0320 	bic.w	r3, r3, #32
     5b2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5b4:	2002      	movs	r0, #2
     5b6:	e7cc      	b.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
		evt = EVT_NOP;
     5b8:	2000      	movs	r0, #0
     5ba:	e7ca      	b.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
     5bc:	000051f1 	.word	0x000051f1

000005c0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     5c6:	2300      	movs	r3, #0
     5c8:	6003      	str	r3, [r0, #0]
     5ca:	6043      	str	r3, [r0, #4]
     5cc:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     5ce:	784b      	ldrb	r3, [r1, #1]
     5d0:	2b25      	cmp	r3, #37	; 0x25
     5d2:	d002      	beq.n	5da <extract_conversion+0x1a>
     5d4:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     5d6:	2501      	movs	r5, #1
     5d8:	e01f      	b.n	61a <extract_conversion+0x5a>
		conv->specifier = *sp++;
     5da:	1c88      	adds	r0, r1, #2
     5dc:	70e3      	strb	r3, [r4, #3]
		return sp;
     5de:	e145      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
			conv->flag_dash = true;
     5e0:	7823      	ldrb	r3, [r4, #0]
     5e2:	f043 0304 	orr.w	r3, r3, #4
     5e6:	7023      	strb	r3, [r4, #0]
		if (loop) {
     5e8:	b1b5      	cbz	r5, 618 <extract_conversion+0x58>
			++sp;
     5ea:	3601      	adds	r6, #1
     5ec:	e014      	b.n	618 <extract_conversion+0x58>
			conv->flag_plus = true;
     5ee:	7823      	ldrb	r3, [r4, #0]
     5f0:	f043 0308 	orr.w	r3, r3, #8
     5f4:	7023      	strb	r3, [r4, #0]
			break;
     5f6:	e7f7      	b.n	5e8 <extract_conversion+0x28>
			conv->flag_space = true;
     5f8:	7823      	ldrb	r3, [r4, #0]
     5fa:	f043 0310 	orr.w	r3, r3, #16
     5fe:	7023      	strb	r3, [r4, #0]
			break;
     600:	e7f2      	b.n	5e8 <extract_conversion+0x28>
			conv->flag_hash = true;
     602:	7823      	ldrb	r3, [r4, #0]
     604:	f043 0320 	orr.w	r3, r3, #32
     608:	7023      	strb	r3, [r4, #0]
			break;
     60a:	e7ed      	b.n	5e8 <extract_conversion+0x28>
			conv->flag_zero = true;
     60c:	7823      	ldrb	r3, [r4, #0]
     60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     612:	7023      	strb	r3, [r4, #0]
			break;
     614:	e7e8      	b.n	5e8 <extract_conversion+0x28>
		switch (*sp) {
     616:	2500      	movs	r5, #0
	} while (loop);
     618:	b345      	cbz	r5, 66c <extract_conversion+0xac>
		switch (*sp) {
     61a:	7833      	ldrb	r3, [r6, #0]
     61c:	3b20      	subs	r3, #32
     61e:	2b10      	cmp	r3, #16
     620:	d8f9      	bhi.n	616 <extract_conversion+0x56>
     622:	a201      	add	r2, pc, #4	; (adr r2, 628 <extract_conversion+0x68>)
     624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     628:	000005f9 	.word	0x000005f9
     62c:	00000617 	.word	0x00000617
     630:	00000617 	.word	0x00000617
     634:	00000603 	.word	0x00000603
     638:	00000617 	.word	0x00000617
     63c:	00000617 	.word	0x00000617
     640:	00000617 	.word	0x00000617
     644:	00000617 	.word	0x00000617
     648:	00000617 	.word	0x00000617
     64c:	00000617 	.word	0x00000617
     650:	00000617 	.word	0x00000617
     654:	000005ef 	.word	0x000005ef
     658:	00000617 	.word	0x00000617
     65c:	000005e1 	.word	0x000005e1
     660:	00000617 	.word	0x00000617
     664:	00000617 	.word	0x00000617
     668:	0000060d 	.word	0x0000060d
	if (conv->flag_zero && conv->flag_dash) {
     66c:	7823      	ldrb	r3, [r4, #0]
     66e:	f003 0344 	and.w	r3, r3, #68	; 0x44
     672:	2b44      	cmp	r3, #68	; 0x44
     674:	d05f      	beq.n	736 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     676:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     678:	7823      	ldrb	r3, [r4, #0]
     67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     67e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     680:	7833      	ldrb	r3, [r6, #0]
     682:	2b2a      	cmp	r3, #42	; 0x2a
     684:	d05c      	beq.n	740 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     686:	a801      	add	r0, sp, #4
     688:	f004 fe43 	bl	5312 <extract_decimal>
	if (sp != wp) {
     68c:	9b01      	ldr	r3, [sp, #4]
     68e:	429e      	cmp	r6, r3
     690:	d00f      	beq.n	6b2 <extract_conversion+0xf2>
		conv->width_present = true;
     692:	7823      	ldrb	r3, [r4, #0]
     694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     698:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     69a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     69c:	b2db      	uxtb	r3, r3
     69e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     6a2:	2800      	cmp	r0, #0
     6a4:	db54      	blt.n	750 <extract_conversion+0x190>
     6a6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     6a8:	4313      	orrs	r3, r2
     6aa:	7822      	ldrb	r2, [r4, #0]
     6ac:	f363 0241 	bfi	r2, r3, #1, #1
     6b0:	7022      	strb	r2, [r4, #0]
	return sp;
     6b2:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     6b4:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     6b6:	781b      	ldrb	r3, [r3, #0]
     6b8:	2b2e      	cmp	r3, #46	; 0x2e
     6ba:	bf14      	ite	ne
     6bc:	2300      	movne	r3, #0
     6be:	2301      	moveq	r3, #1
     6c0:	7862      	ldrb	r2, [r4, #1]
     6c2:	f363 0241 	bfi	r2, r3, #1, #1
     6c6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     6c8:	2b00      	cmp	r3, #0
     6ca:	d043      	beq.n	754 <extract_conversion+0x194>
	++sp;
     6cc:	9b01      	ldr	r3, [sp, #4]
     6ce:	1c5a      	adds	r2, r3, #1
     6d0:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     6d2:	785b      	ldrb	r3, [r3, #1]
     6d4:	2b2a      	cmp	r3, #42	; 0x2a
     6d6:	d03f      	beq.n	758 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     6d8:	a801      	add	r0, sp, #4
     6da:	f004 fe1a 	bl	5312 <extract_decimal>
	conv->prec_value = prec;
     6de:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     6e0:	7823      	ldrb	r3, [r4, #0]
     6e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     6e6:	2800      	cmp	r0, #0
     6e8:	db3e      	blt.n	768 <extract_conversion+0x1a8>
     6ea:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     6ec:	4313      	orrs	r3, r2
     6ee:	7822      	ldrb	r2, [r4, #0]
     6f0:	f363 0241 	bfi	r2, r3, #1, #1
     6f4:	7022      	strb	r2, [r4, #0]
	return sp;
     6f6:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     6f8:	7803      	ldrb	r3, [r0, #0]
     6fa:	3b4c      	subs	r3, #76	; 0x4c
     6fc:	2b2e      	cmp	r3, #46	; 0x2e
     6fe:	f200 809d 	bhi.w	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     702:	e8df f003 	tbb	[pc, r3]
     706:	9b90      	.short	0x9b90
     708:	9b9b9b9b 	.word	0x9b9b9b9b
     70c:	9b9b9b9b 	.word	0x9b9b9b9b
     710:	9b9b9b9b 	.word	0x9b9b9b9b
     714:	9b9b9b9b 	.word	0x9b9b9b9b
     718:	9b9b9b9b 	.word	0x9b9b9b9b
     71c:	9b9b9b9b 	.word	0x9b9b9b9b
     720:	9b339b9b 	.word	0x9b339b9b
     724:	9b459b57 	.word	0x9b459b57
     728:	9b9b9b9b 	.word	0x9b9b9b9b
     72c:	9b899b9b 	.word	0x9b899b9b
     730:	9b9b9b9b 	.word	0x9b9b9b9b
     734:	82          	.byte	0x82
     735:	00          	.byte	0x00
		conv->flag_zero = false;
     736:	7823      	ldrb	r3, [r4, #0]
     738:	f36f 1386 	bfc	r3, #6, #1
     73c:	7023      	strb	r3, [r4, #0]
     73e:	e79a      	b.n	676 <extract_conversion+0xb6>
		conv->width_star = true;
     740:	7863      	ldrb	r3, [r4, #1]
     742:	f043 0301 	orr.w	r3, r3, #1
     746:	7063      	strb	r3, [r4, #1]
		return ++sp;
     748:	4633      	mov	r3, r6
     74a:	3301      	adds	r3, #1
     74c:	9301      	str	r3, [sp, #4]
     74e:	e7b1      	b.n	6b4 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     750:	2201      	movs	r2, #1
     752:	e7a9      	b.n	6a8 <extract_conversion+0xe8>
		return sp;
     754:	9801      	ldr	r0, [sp, #4]
     756:	e7cf      	b.n	6f8 <extract_conversion+0x138>
		conv->prec_star = true;
     758:	7863      	ldrb	r3, [r4, #1]
     75a:	f043 0304 	orr.w	r3, r3, #4
     75e:	7063      	strb	r3, [r4, #1]
		return ++sp;
     760:	4610      	mov	r0, r2
     762:	3001      	adds	r0, #1
     764:	9001      	str	r0, [sp, #4]
     766:	e7c7      	b.n	6f8 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     768:	2201      	movs	r2, #1
     76a:	e7bf      	b.n	6ec <extract_conversion+0x12c>
		if (*++sp == 'h') {
     76c:	1c42      	adds	r2, r0, #1
     76e:	7843      	ldrb	r3, [r0, #1]
     770:	2b68      	cmp	r3, #104	; 0x68
     772:	d006      	beq.n	782 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     774:	7863      	ldrb	r3, [r4, #1]
     776:	2102      	movs	r1, #2
     778:	f361 03c6 	bfi	r3, r1, #3, #4
     77c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     77e:	4610      	mov	r0, r2
     780:	e01e      	b.n	7c0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
     782:	7863      	ldrb	r3, [r4, #1]
     784:	2201      	movs	r2, #1
     786:	f362 03c6 	bfi	r3, r2, #3, #4
     78a:	7063      	strb	r3, [r4, #1]
			++sp;
     78c:	3002      	adds	r0, #2
     78e:	e017      	b.n	7c0 <extract_conversion+0x200>
		if (*++sp == 'l') {
     790:	1c42      	adds	r2, r0, #1
     792:	7843      	ldrb	r3, [r0, #1]
     794:	2b6c      	cmp	r3, #108	; 0x6c
     796:	d006      	beq.n	7a6 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     798:	7863      	ldrb	r3, [r4, #1]
     79a:	2103      	movs	r1, #3
     79c:	f361 03c6 	bfi	r3, r1, #3, #4
     7a0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     7a2:	4610      	mov	r0, r2
     7a4:	e00c      	b.n	7c0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
     7a6:	7863      	ldrb	r3, [r4, #1]
     7a8:	2204      	movs	r2, #4
     7aa:	f362 03c6 	bfi	r3, r2, #3, #4
     7ae:	7063      	strb	r3, [r4, #1]
			++sp;
     7b0:	3002      	adds	r0, #2
     7b2:	e005      	b.n	7c0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
     7b4:	7863      	ldrb	r3, [r4, #1]
     7b6:	2205      	movs	r2, #5
     7b8:	f362 03c6 	bfi	r3, r2, #3, #4
     7bc:	7063      	strb	r3, [r4, #1]
		++sp;
     7be:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     7c0:	f810 3b01 	ldrb.w	r3, [r0], #1
     7c4:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     7c6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     7ca:	2a37      	cmp	r2, #55	; 0x37
     7cc:	d87d      	bhi.n	8ca <CONFIG_ISR_STACK_SIZE+0xca>
     7ce:	e8df f002 	tbb	[pc, r2]
     7d2:	7c5e      	.short	0x7c5e
     7d4:	5e5e7c7c 	.word	0x5e5e7c7c
     7d8:	7c7c7c5e 	.word	0x7c7c7c5e
     7dc:	7c7c7c7c 	.word	0x7c7c7c7c
     7e0:	7c7c7c7c 	.word	0x7c7c7c7c
     7e4:	7c7c7c7c 	.word	0x7c7c7c7c
     7e8:	7c7c4f7c 	.word	0x7c7c4f7c
     7ec:	7c7c7c7c 	.word	0x7c7c7c7c
     7f0:	7c5e7c7c 	.word	0x7c5e7c7c
     7f4:	5e5e3a4f 	.word	0x5e5e3a4f
     7f8:	7c3a7c5e 	.word	0x7c3a7c5e
     7fc:	657c7c7c 	.word	0x657c7c7c
     800:	7c7c714f 	.word	0x7c7c714f
     804:	7c4f7c71 	.word	0x7c4f7c71
     808:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     80a:	7863      	ldrb	r3, [r4, #1]
     80c:	2206      	movs	r2, #6
     80e:	f362 03c6 	bfi	r3, r2, #3, #4
     812:	7063      	strb	r3, [r4, #1]
		++sp;
     814:	3001      	adds	r0, #1
		break;
     816:	e7d3      	b.n	7c0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
     818:	7863      	ldrb	r3, [r4, #1]
     81a:	2207      	movs	r2, #7
     81c:	f362 03c6 	bfi	r3, r2, #3, #4
     820:	7063      	strb	r3, [r4, #1]
		++sp;
     822:	3001      	adds	r0, #1
		break;
     824:	e7cc      	b.n	7c0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
     826:	7863      	ldrb	r3, [r4, #1]
     828:	2208      	movs	r2, #8
     82a:	f362 03c6 	bfi	r3, r2, #3, #4
     82e:	7063      	strb	r3, [r4, #1]
		++sp;
     830:	3001      	adds	r0, #1
		conv->unsupported = true;
     832:	7823      	ldrb	r3, [r4, #0]
     834:	f043 0302 	orr.w	r3, r3, #2
     838:	7023      	strb	r3, [r4, #0]
		break;
     83a:	e7c1      	b.n	7c0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
     83c:	7863      	ldrb	r3, [r4, #1]
     83e:	f36f 03c6 	bfc	r3, #3, #4
     842:	7063      	strb	r3, [r4, #1]
		break;
     844:	e7bc      	b.n	7c0 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
     846:	78a2      	ldrb	r2, [r4, #2]
     848:	2101      	movs	r1, #1
     84a:	f361 0202 	bfi	r2, r1, #0, #3
     84e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     850:	7862      	ldrb	r2, [r4, #1]
     852:	f002 0278 	and.w	r2, r2, #120	; 0x78
     856:	2a40      	cmp	r2, #64	; 0x40
     858:	d010      	beq.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
		if (conv->specifier == 'c') {
     85a:	2b63      	cmp	r3, #99	; 0x63
     85c:	d013      	beq.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
	conv->unsupported |= unsupported;
     85e:	7823      	ldrb	r3, [r4, #0]
     860:	f3c3 0240 	ubfx	r2, r3, #1, #1
     864:	4315      	orrs	r5, r2
     866:	f365 0341 	bfi	r3, r5, #1, #1
     86a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     86c:	b002      	add	sp, #8
     86e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     870:	78a2      	ldrb	r2, [r4, #2]
     872:	2102      	movs	r1, #2
     874:	f361 0202 	bfi	r2, r1, #0, #3
     878:	70a2      	strb	r2, [r4, #2]
     87a:	e7e9      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			conv->invalid = true;
     87c:	7821      	ldrb	r1, [r4, #0]
     87e:	f041 0101 	orr.w	r1, r1, #1
     882:	7021      	strb	r1, [r4, #0]
     884:	e7e9      	b.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     886:	1e15      	subs	r5, r2, #0
     888:	bf18      	it	ne
     88a:	2501      	movne	r5, #1
     88c:	e7e7      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		conv->specifier_cat = SPECIFIER_FP;
     88e:	78a3      	ldrb	r3, [r4, #2]
     890:	2204      	movs	r2, #4
     892:	f362 0302 	bfi	r3, r2, #0, #3
     896:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     898:	2501      	movs	r5, #1
			break;
     89a:	e7e0      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		conv->specifier_cat = SPECIFIER_PTR;
     89c:	78a3      	ldrb	r3, [r4, #2]
     89e:	2203      	movs	r2, #3
     8a0:	f362 0302 	bfi	r3, r2, #0, #3
     8a4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     8a6:	7863      	ldrb	r3, [r4, #1]
     8a8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     8ac:	2b40      	cmp	r3, #64	; 0x40
     8ae:	d1d6      	bne.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
			unsupported = true;
     8b0:	2501      	movs	r5, #1
     8b2:	e7d4      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		conv->specifier_cat = SPECIFIER_PTR;
     8b4:	78a3      	ldrb	r3, [r4, #2]
     8b6:	2203      	movs	r2, #3
     8b8:	f362 0302 	bfi	r3, r2, #0, #3
     8bc:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     8be:	7863      	ldrb	r3, [r4, #1]
     8c0:	f013 0f78 	tst.w	r3, #120	; 0x78
     8c4:	d0cb      	beq.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
			unsupported = true;
     8c6:	2501      	movs	r5, #1
     8c8:	e7c9      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		conv->invalid = true;
     8ca:	7823      	ldrb	r3, [r4, #0]
     8cc:	f043 0301 	orr.w	r3, r3, #1
     8d0:	7023      	strb	r3, [r4, #0]
		break;
     8d2:	e7c4      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>

000008d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8d8:	b091      	sub	sp, #68	; 0x44
     8da:	4606      	mov	r6, r0
     8dc:	460d      	mov	r5, r1
     8de:	4691      	mov	r9, r2
     8e0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     8e2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     8e4:	f899 0000 	ldrb.w	r0, [r9]
     8e8:	2800      	cmp	r0, #0
     8ea:	f000 82d5 	beq.w	e98 <cbvprintf+0x5c4>
		if (*fp != '%') {
     8ee:	2825      	cmp	r0, #37	; 0x25
     8f0:	d008      	beq.n	904 <cbvprintf+0x30>
			OUTC(*fp++);
     8f2:	f109 0901 	add.w	r9, r9, #1
     8f6:	4629      	mov	r1, r5
     8f8:	47b0      	blx	r6
     8fa:	2800      	cmp	r0, #0
     8fc:	f2c0 82cd 	blt.w	e9a <cbvprintf+0x5c6>
     900:	3401      	adds	r4, #1
			continue;
     902:	e7ef      	b.n	8e4 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     904:	2300      	movs	r3, #0
     906:	9304      	str	r3, [sp, #16]
     908:	9305      	str	r3, [sp, #20]
     90a:	9306      	str	r3, [sp, #24]
     90c:	9307      	str	r3, [sp, #28]
     90e:	9308      	str	r3, [sp, #32]
     910:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     912:	4649      	mov	r1, r9
     914:	a806      	add	r0, sp, #24
     916:	f7ff fe53 	bl	5c0 <extract_conversion>
     91a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     91c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     920:	f013 0f01 	tst.w	r3, #1
     924:	f000 8097 	beq.w	a56 <cbvprintf+0x182>
			width = va_arg(ap, int);
     928:	9b03      	ldr	r3, [sp, #12]
     92a:	1d1a      	adds	r2, r3, #4
     92c:	9203      	str	r2, [sp, #12]
     92e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     930:	2f00      	cmp	r7, #0
     932:	f2c0 8088 	blt.w	a46 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     936:	f89d 3019 	ldrb.w	r3, [sp, #25]
     93a:	f013 0f04 	tst.w	r3, #4
     93e:	f000 809c 	beq.w	a7a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
     942:	9b03      	ldr	r3, [sp, #12]
     944:	1d1a      	adds	r2, r3, #4
     946:	9203      	str	r2, [sp, #12]
     948:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     94c:	f1ba 0f00 	cmp.w	sl, #0
     950:	f2c0 808a 	blt.w	a68 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     954:	2300      	movs	r3, #0
     956:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     958:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     95a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     95e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     962:	f89d 1019 	ldrb.w	r1, [sp, #25]
     966:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     96a:	2b01      	cmp	r3, #1
     96c:	f000 808e 	beq.w	a8c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     970:	2b02      	cmp	r3, #2
     972:	f000 80d3 	beq.w	b1c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     976:	2b04      	cmp	r3, #4
     978:	f000 8124 	beq.w	bc4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     97c:	2b03      	cmp	r3, #3
     97e:	f000 813b 	beq.w	bf8 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     982:	f89d 8018 	ldrb.w	r8, [sp, #24]
     986:	f018 0b03 	ands.w	fp, r8, #3
     98a:	f040 813b 	bne.w	c04 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     98e:	f89d 301b 	ldrb.w	r3, [sp, #27]
     992:	3b25      	subs	r3, #37	; 0x25
     994:	2b53      	cmp	r3, #83	; 0x53
     996:	f200 81e6 	bhi.w	d66 <cbvprintf+0x492>
     99a:	e8df f013 	tbh	[pc, r3, lsl #1]
     99e:	0140      	.short	0x0140
     9a0:	01e401e4 	.word	0x01e401e4
     9a4:	01e401e4 	.word	0x01e401e4
     9a8:	01e401e4 	.word	0x01e401e4
     9ac:	01e401e4 	.word	0x01e401e4
     9b0:	01e401e4 	.word	0x01e401e4
     9b4:	01e401e4 	.word	0x01e401e4
     9b8:	01e401e4 	.word	0x01e401e4
     9bc:	01e401e4 	.word	0x01e401e4
     9c0:	01e401e4 	.word	0x01e401e4
     9c4:	01e401e4 	.word	0x01e401e4
     9c8:	01e401e4 	.word	0x01e401e4
     9cc:	01e401e4 	.word	0x01e401e4
     9d0:	01e401e4 	.word	0x01e401e4
     9d4:	01e401e4 	.word	0x01e401e4
     9d8:	01e401e4 	.word	0x01e401e4
     9dc:	01e401e4 	.word	0x01e401e4
     9e0:	01e401e4 	.word	0x01e401e4
     9e4:	01e401e4 	.word	0x01e401e4
     9e8:	01e401e4 	.word	0x01e401e4
     9ec:	01e401e4 	.word	0x01e401e4
     9f0:	01e401e4 	.word	0x01e401e4
     9f4:	01e401e4 	.word	0x01e401e4
     9f8:	01e401e4 	.word	0x01e401e4
     9fc:	01e401e4 	.word	0x01e401e4
     a00:	01e401e4 	.word	0x01e401e4
     a04:	01e40181 	.word	0x01e40181
     a08:	01e401e4 	.word	0x01e401e4
     a0c:	01e401e4 	.word	0x01e401e4
     a10:	01e401e4 	.word	0x01e401e4
     a14:	01e401e4 	.word	0x01e401e4
     a18:	015e01e4 	.word	0x015e01e4
     a1c:	01e40167 	.word	0x01e40167
     a20:	01e401e4 	.word	0x01e401e4
     a24:	016701e4 	.word	0x016701e4
     a28:	01e401e4 	.word	0x01e401e4
     a2c:	01e401e4 	.word	0x01e401e4
     a30:	018101be 	.word	0x018101be
     a34:	01e401a2 	.word	0x01e401a2
     a38:	014d01e4 	.word	0x014d01e4
     a3c:	018101e4 	.word	0x018101e4
     a40:	01e401e4 	.word	0x01e401e4
     a44:	0181      	.short	0x0181
				conv->flag_dash = true;
     a46:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a4a:	f043 0304 	orr.w	r3, r3, #4
     a4e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     a52:	427f      	negs	r7, r7
     a54:	e76f      	b.n	936 <cbvprintf+0x62>
		} else if (conv->width_present) {
     a56:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     a5a:	2b00      	cmp	r3, #0
     a5c:	db02      	blt.n	a64 <cbvprintf+0x190>
		int width = -1;
     a5e:	f04f 37ff 	mov.w	r7, #4294967295
     a62:	e768      	b.n	936 <cbvprintf+0x62>
			width = conv->width_value;
     a64:	9f07      	ldr	r7, [sp, #28]
     a66:	e766      	b.n	936 <cbvprintf+0x62>
				conv->prec_present = false;
     a68:	f89d 3019 	ldrb.w	r3, [sp, #25]
     a6c:	f36f 0341 	bfc	r3, #1, #1
     a70:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     a74:	f04f 3aff 	mov.w	sl, #4294967295
     a78:	e76c      	b.n	954 <cbvprintf+0x80>
		} else if (conv->prec_present) {
     a7a:	f013 0f02 	tst.w	r3, #2
     a7e:	d002      	beq.n	a86 <cbvprintf+0x1b2>
			precision = conv->prec_value;
     a80:	f8dd a020 	ldr.w	sl, [sp, #32]
     a84:	e766      	b.n	954 <cbvprintf+0x80>
		int precision = -1;
     a86:	f04f 3aff 	mov.w	sl, #4294967295
     a8a:	e763      	b.n	954 <cbvprintf+0x80>
			switch (length_mod) {
     a8c:	1ecb      	subs	r3, r1, #3
     a8e:	2b04      	cmp	r3, #4
     a90:	d804      	bhi.n	a9c <cbvprintf+0x1c8>
     a92:	e8df f003 	tbb	[pc, r3]
     a96:	1d0b      	.short	0x1d0b
     a98:	3529      	.short	0x3529
     a9a:	35          	.byte	0x35
     a9b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	1d1a      	adds	r2, r3, #4
     aa0:	9203      	str	r2, [sp, #12]
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	17da      	asrs	r2, r3, #31
     aa6:	9304      	str	r3, [sp, #16]
     aa8:	9205      	str	r2, [sp, #20]
				break;
     aaa:	e006      	b.n	aba <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
     aac:	9b03      	ldr	r3, [sp, #12]
     aae:	1d1a      	adds	r2, r3, #4
     ab0:	9203      	str	r2, [sp, #12]
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	17da      	asrs	r2, r3, #31
     ab6:	9304      	str	r3, [sp, #16]
     ab8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     aba:	2901      	cmp	r1, #1
     abc:	d028      	beq.n	b10 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
     abe:	2902      	cmp	r1, #2
     ac0:	f47f af5f 	bne.w	982 <cbvprintf+0xae>
				value->sint = (short)value->sint;
     ac4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     ac8:	17da      	asrs	r2, r3, #31
     aca:	9304      	str	r3, [sp, #16]
     acc:	9205      	str	r2, [sp, #20]
     ace:	e758      	b.n	982 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
     ad0:	9b03      	ldr	r3, [sp, #12]
     ad2:	3307      	adds	r3, #7
     ad4:	f023 0307 	bic.w	r3, r3, #7
     ad8:	f103 0208 	add.w	r2, r3, #8
     adc:	9203      	str	r2, [sp, #12]
     ade:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     ae6:	e7e8      	b.n	aba <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     ae8:	9b03      	ldr	r3, [sp, #12]
     aea:	3307      	adds	r3, #7
     aec:	f023 0307 	bic.w	r3, r3, #7
     af0:	f103 0208 	add.w	r2, r3, #8
     af4:	9203      	str	r2, [sp, #12]
     af6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     afa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     afe:	e7dc      	b.n	aba <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b00:	9b03      	ldr	r3, [sp, #12]
     b02:	1d1a      	adds	r2, r3, #4
     b04:	9203      	str	r2, [sp, #12]
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	17da      	asrs	r2, r3, #31
				value->sint =
     b0a:	9304      	str	r3, [sp, #16]
     b0c:	9205      	str	r2, [sp, #20]
				break;
     b0e:	e7d4      	b.n	aba <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
     b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
     b14:	9304      	str	r3, [sp, #16]
     b16:	2300      	movs	r3, #0
     b18:	9305      	str	r3, [sp, #20]
     b1a:	e732      	b.n	982 <cbvprintf+0xae>
			switch (length_mod) {
     b1c:	1ecb      	subs	r3, r1, #3
     b1e:	2b04      	cmp	r3, #4
     b20:	d804      	bhi.n	b2c <cbvprintf+0x258>
     b22:	e8df f003 	tbb	[pc, r3]
     b26:	1f0b      	.short	0x1f0b
     b28:	4135      	.short	0x4135
     b2a:	41          	.byte	0x41
     b2b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b2c:	9b03      	ldr	r3, [sp, #12]
     b2e:	1d1a      	adds	r2, r3, #4
     b30:	9203      	str	r2, [sp, #12]
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	9304      	str	r3, [sp, #16]
     b36:	2300      	movs	r3, #0
     b38:	9305      	str	r3, [sp, #20]
				break;
     b3a:	e01e      	b.n	b7a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
     b3c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b40:	2b63      	cmp	r3, #99	; 0x63
     b42:	d007      	beq.n	b54 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
     b44:	9b03      	ldr	r3, [sp, #12]
     b46:	1d1a      	adds	r2, r3, #4
     b48:	9203      	str	r2, [sp, #12]
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	9304      	str	r3, [sp, #16]
     b4e:	2300      	movs	r3, #0
     b50:	9305      	str	r3, [sp, #20]
     b52:	e012      	b.n	b7a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     b54:	9b03      	ldr	r3, [sp, #12]
     b56:	1d1a      	adds	r2, r3, #4
     b58:	9203      	str	r2, [sp, #12]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	9304      	str	r3, [sp, #16]
     b5e:	2300      	movs	r3, #0
     b60:	9305      	str	r3, [sp, #20]
     b62:	e00a      	b.n	b7a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
     b64:	9b03      	ldr	r3, [sp, #12]
     b66:	3307      	adds	r3, #7
     b68:	f023 0307 	bic.w	r3, r3, #7
     b6c:	f103 0208 	add.w	r2, r3, #8
     b70:	9203      	str	r2, [sp, #12]
     b72:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     b76:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     b7a:	2901      	cmp	r1, #1
     b7c:	d01c      	beq.n	bb8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
     b7e:	2902      	cmp	r1, #2
     b80:	f47f aeff 	bne.w	982 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
     b84:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     b88:	9304      	str	r3, [sp, #16]
     b8a:	2300      	movs	r3, #0
     b8c:	9305      	str	r3, [sp, #20]
     b8e:	e6f8      	b.n	982 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
     b90:	9b03      	ldr	r3, [sp, #12]
     b92:	3307      	adds	r3, #7
     b94:	f023 0307 	bic.w	r3, r3, #7
     b98:	f103 0208 	add.w	r2, r3, #8
     b9c:	9203      	str	r2, [sp, #12]
     b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     ba6:	e7e8      	b.n	b7a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     ba8:	9b03      	ldr	r3, [sp, #12]
     baa:	1d1a      	adds	r2, r3, #4
     bac:	9203      	str	r2, [sp, #12]
     bae:	681b      	ldr	r3, [r3, #0]
				value->uint =
     bb0:	9304      	str	r3, [sp, #16]
     bb2:	2300      	movs	r3, #0
     bb4:	9305      	str	r3, [sp, #20]
				break;
     bb6:	e7e0      	b.n	b7a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
     bb8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     bbc:	9304      	str	r3, [sp, #16]
     bbe:	2300      	movs	r3, #0
     bc0:	9305      	str	r3, [sp, #20]
     bc2:	e6de      	b.n	982 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     bc4:	2908      	cmp	r1, #8
     bc6:	d00b      	beq.n	be0 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
     bc8:	9b03      	ldr	r3, [sp, #12]
     bca:	3307      	adds	r3, #7
     bcc:	f023 0307 	bic.w	r3, r3, #7
     bd0:	f103 0208 	add.w	r2, r3, #8
     bd4:	9203      	str	r2, [sp, #12]
     bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
     bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
     bde:	e6d0      	b.n	982 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
     be0:	9b03      	ldr	r3, [sp, #12]
     be2:	3307      	adds	r3, #7
     be4:	f023 0307 	bic.w	r3, r3, #7
     be8:	f103 0208 	add.w	r2, r3, #8
     bec:	9203      	str	r2, [sp, #12]
     bee:	e9d3 2300 	ldrd	r2, r3, [r3]
     bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
     bf6:	e6c4      	b.n	982 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	1d1a      	adds	r2, r3, #4
     bfc:	9203      	str	r2, [sp, #12]
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	9304      	str	r3, [sp, #16]
     c02:	e6be      	b.n	982 <cbvprintf+0xae>
			OUTS(sp, fp);
     c04:	9f02      	ldr	r7, [sp, #8]
     c06:	463b      	mov	r3, r7
     c08:	464a      	mov	r2, r9
     c0a:	4629      	mov	r1, r5
     c0c:	4630      	mov	r0, r6
     c0e:	f004 fbfc 	bl	540a <outs>
     c12:	2800      	cmp	r0, #0
     c14:	f2c0 8141 	blt.w	e9a <cbvprintf+0x5c6>
     c18:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c1a:	46b9      	mov	r9, r7
			continue;
     c1c:	e662      	b.n	8e4 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     c1e:	4629      	mov	r1, r5
     c20:	2025      	movs	r0, #37	; 0x25
     c22:	47b0      	blx	r6
     c24:	2800      	cmp	r0, #0
     c26:	f2c0 8138 	blt.w	e9a <cbvprintf+0x5c6>
     c2a:	3401      	adds	r4, #1
		char sign = 0;
     c2c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c2e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c32:	f04f 0900 	mov.w	r9, #0
			break;
     c36:	e09b      	b.n	d70 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
     c38:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c3c:	f1ba 0f00 	cmp.w	sl, #0
     c40:	db07      	blt.n	c52 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
     c42:	4651      	mov	r1, sl
     c44:	4648      	mov	r0, r9
     c46:	f004 fcd5 	bl	55f4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c4a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c4e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     c50:	e08e      	b.n	d70 <cbvprintf+0x49c>
				len = strlen(bps);
     c52:	4648      	mov	r0, r9
     c54:	f004 fcc5 	bl	55e2 <strlen>
     c58:	e7f7      	b.n	c4a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c5a:	9b04      	ldr	r3, [sp, #16]
     c5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     c60:	46d8      	mov	r8, fp
			bpe = buf + 1;
     c62:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     c66:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     c6a:	e081      	b.n	d70 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     c6c:	f018 0f08 	tst.w	r8, #8
     c70:	d105      	bne.n	c7e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     c72:	f018 0810 	ands.w	r8, r8, #16
     c76:	d004      	beq.n	c82 <cbvprintf+0x3ae>
				sign = ' ';
     c78:	f04f 0820 	mov.w	r8, #32
     c7c:	e001      	b.n	c82 <cbvprintf+0x3ae>
				sign = '+';
     c7e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     c82:	9a04      	ldr	r2, [sp, #16]
     c84:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     c86:	2b00      	cmp	r3, #0
     c88:	db02      	blt.n	c90 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     c8a:	9204      	str	r2, [sp, #16]
     c8c:	9305      	str	r3, [sp, #20]
     c8e:	e008      	b.n	ca2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
     c90:	4252      	negs	r2, r2
     c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c96:	9204      	str	r2, [sp, #16]
     c98:	9305      	str	r3, [sp, #20]
				sign = '-';
     c9a:	f04f 082d 	mov.w	r8, #45	; 0x2d
     c9e:	e000      	b.n	ca2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
     ca0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     ca2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ca6:	9300      	str	r3, [sp, #0]
     ca8:	ab0a      	add	r3, sp, #40	; 0x28
     caa:	aa06      	add	r2, sp, #24
     cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     cb0:	f004 fb41 	bl	5336 <encode_uint>
     cb4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     cb6:	f1ba 0f00 	cmp.w	sl, #0
     cba:	f2c0 8088 	blt.w	dce <cbvprintf+0x4fa>
				size_t len = bpe - bps;
     cbe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cc2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     cc6:	f89d 2018 	ldrb.w	r2, [sp, #24]
     cca:	f36f 1286 	bfc	r2, #6, #1
     cce:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     cd2:	459a      	cmp	sl, r3
     cd4:	d97e      	bls.n	dd4 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
     cd6:	ebaa 0303 	sub.w	r3, sl, r3
     cda:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     cdc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     ce0:	e046      	b.n	d70 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     ce2:	9804      	ldr	r0, [sp, #16]
     ce4:	b928      	cbnz	r0, cf2 <cbvprintf+0x41e>
		char sign = 0;
     ce6:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     ce8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; ea0 <cbvprintf+0x5cc>
			bps = "(nil)";
     cec:	f1aa 0905 	sub.w	r9, sl, #5
     cf0:	e03e      	b.n	d70 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cf2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cf6:	9300      	str	r3, [sp, #0]
     cf8:	ab0a      	add	r3, sp, #40	; 0x28
     cfa:	aa06      	add	r2, sp, #24
     cfc:	2100      	movs	r1, #0
     cfe:	f004 fb1a 	bl	5336 <encode_uint>
     d02:	4681      	mov	r9, r0
				conv->altform_0c = true;
     d04:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d08:	f043 0310 	orr.w	r3, r3, #16
     d0c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d10:	2378      	movs	r3, #120	; 0x78
     d12:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d16:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d18:	e7cd      	b.n	cb6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d1a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
     d1c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d20:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     d24:	2b07      	cmp	r3, #7
     d26:	d806      	bhi.n	d36 <cbvprintf+0x462>
     d28:	e8df f003 	tbb	[pc, r3]
     d2c:	0f0d0b04 	.word	0x0f0d0b04
     d30:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
     d34:	6014      	str	r4, [r2, #0]
		char sign = 0;
     d36:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d38:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d3c:	f04f 0900 	mov.w	r9, #0
}
     d40:	e016      	b.n	d70 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
     d42:	7014      	strb	r4, [r2, #0]
		break;
     d44:	e7f7      	b.n	d36 <cbvprintf+0x462>
		*(short *)dp = (short)count;
     d46:	8014      	strh	r4, [r2, #0]
		break;
     d48:	e7f5      	b.n	d36 <cbvprintf+0x462>
		*(long *)dp = (long)count;
     d4a:	6014      	str	r4, [r2, #0]
		break;
     d4c:	e7f3      	b.n	d36 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
     d4e:	17e3      	asrs	r3, r4, #31
     d50:	6014      	str	r4, [r2, #0]
     d52:	6053      	str	r3, [r2, #4]
		break;
     d54:	e7ef      	b.n	d36 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
     d56:	17e3      	asrs	r3, r4, #31
     d58:	6014      	str	r4, [r2, #0]
     d5a:	6053      	str	r3, [r2, #4]
		break;
     d5c:	e7eb      	b.n	d36 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
     d5e:	6014      	str	r4, [r2, #0]
		break;
     d60:	e7e9      	b.n	d36 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d62:	6014      	str	r4, [r2, #0]
		break;
     d64:	e7e7      	b.n	d36 <cbvprintf+0x462>
		switch (conv->specifier) {
     d66:	46d8      	mov	r8, fp
     d68:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d6c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     d70:	f1b9 0f00 	cmp.w	r9, #0
     d74:	f000 808d 	beq.w	e92 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     d78:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     d7c:	f1b8 0f00 	cmp.w	r8, #0
     d80:	d000      	beq.n	d84 <cbvprintf+0x4b0>
			nj_len += 1U;
     d82:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     d84:	f89d 201a 	ldrb.w	r2, [sp, #26]
     d88:	f012 0f10 	tst.w	r2, #16
     d8c:	d025      	beq.n	dda <cbvprintf+0x506>
			nj_len += 2U;
     d8e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     d90:	9907      	ldr	r1, [sp, #28]
     d92:	440b      	add	r3, r1
		if (conv->pad_fp) {
     d94:	f012 0f40 	tst.w	r2, #64	; 0x40
     d98:	d001      	beq.n	d9e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
     d9a:	9a08      	ldr	r2, [sp, #32]
     d9c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     d9e:	2f00      	cmp	r7, #0
     da0:	dd31      	ble.n	e06 <cbvprintf+0x532>
			width -= (int)nj_len;
     da2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     da4:	f89d 3018 	ldrb.w	r3, [sp, #24]
     da8:	f013 0f04 	tst.w	r3, #4
     dac:	d12b      	bne.n	e06 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     dae:	f013 0f40 	tst.w	r3, #64	; 0x40
     db2:	d017      	beq.n	de4 <cbvprintf+0x510>
					if (sign != 0) {
     db4:	f1b8 0f00 	cmp.w	r8, #0
     db8:	d017      	beq.n	dea <cbvprintf+0x516>
						OUTC(sign);
     dba:	4629      	mov	r1, r5
     dbc:	4640      	mov	r0, r8
     dbe:	47b0      	blx	r6
     dc0:	2800      	cmp	r0, #0
     dc2:	db6a      	blt.n	e9a <cbvprintf+0x5c6>
     dc4:	3401      	adds	r4, #1
						sign = 0;
     dc6:	46d8      	mov	r8, fp
					}
					pad = '0';
     dc8:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dcc:	e00f      	b.n	dee <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
     dce:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dd2:	e7cd      	b.n	d70 <cbvprintf+0x49c>
     dd4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dd8:	e7ca      	b.n	d70 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
     dda:	f012 0f08 	tst.w	r2, #8
     dde:	d0d7      	beq.n	d90 <cbvprintf+0x4bc>
			nj_len += 1U;
     de0:	3301      	adds	r3, #1
     de2:	e7d5      	b.n	d90 <cbvprintf+0x4bc>
				char pad = ' ';
     de4:	f04f 0b20 	mov.w	fp, #32
     de8:	e001      	b.n	dee <cbvprintf+0x51a>
					pad = '0';
     dea:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dee:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     df0:	1e5f      	subs	r7, r3, #1
     df2:	2b00      	cmp	r3, #0
     df4:	dd07      	ble.n	e06 <cbvprintf+0x532>
					OUTC(pad);
     df6:	4629      	mov	r1, r5
     df8:	4658      	mov	r0, fp
     dfa:	47b0      	blx	r6
     dfc:	2800      	cmp	r0, #0
     dfe:	db4c      	blt.n	e9a <cbvprintf+0x5c6>
     e00:	3401      	adds	r4, #1
				while (width-- > 0) {
     e02:	463b      	mov	r3, r7
     e04:	e7f4      	b.n	df0 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     e06:	f1b8 0f00 	cmp.w	r8, #0
     e0a:	d005      	beq.n	e18 <cbvprintf+0x544>
			OUTC(sign);
     e0c:	4629      	mov	r1, r5
     e0e:	4640      	mov	r0, r8
     e10:	47b0      	blx	r6
     e12:	2800      	cmp	r0, #0
     e14:	db41      	blt.n	e9a <cbvprintf+0x5c6>
     e16:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e18:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e1c:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e24:	4313      	orrs	r3, r2
     e26:	d005      	beq.n	e34 <cbvprintf+0x560>
				OUTC('0');
     e28:	4629      	mov	r1, r5
     e2a:	2030      	movs	r0, #48	; 0x30
     e2c:	47b0      	blx	r6
     e2e:	2800      	cmp	r0, #0
     e30:	db33      	blt.n	e9a <cbvprintf+0x5c6>
     e32:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e34:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e38:	f013 0f10 	tst.w	r3, #16
     e3c:	d006      	beq.n	e4c <cbvprintf+0x578>
				OUTC(conv->specifier);
     e3e:	4629      	mov	r1, r5
     e40:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e44:	47b0      	blx	r6
     e46:	2800      	cmp	r0, #0
     e48:	db27      	blt.n	e9a <cbvprintf+0x5c6>
     e4a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e4c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e4e:	f103 38ff 	add.w	r8, r3, #4294967295
     e52:	2b00      	cmp	r3, #0
     e54:	dd07      	ble.n	e66 <cbvprintf+0x592>
				OUTC('0');
     e56:	4629      	mov	r1, r5
     e58:	2030      	movs	r0, #48	; 0x30
     e5a:	47b0      	blx	r6
     e5c:	2800      	cmp	r0, #0
     e5e:	db1c      	blt.n	e9a <cbvprintf+0x5c6>
     e60:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     e62:	4643      	mov	r3, r8
     e64:	e7f3      	b.n	e4e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
     e66:	4653      	mov	r3, sl
     e68:	464a      	mov	r2, r9
     e6a:	4629      	mov	r1, r5
     e6c:	4630      	mov	r0, r6
     e6e:	f004 facc 	bl	540a <outs>
     e72:	2800      	cmp	r0, #0
     e74:	db11      	blt.n	e9a <cbvprintf+0x5c6>
     e76:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     e78:	2f00      	cmp	r7, #0
     e7a:	dd07      	ble.n	e8c <cbvprintf+0x5b8>
			OUTC(' ');
     e7c:	4629      	mov	r1, r5
     e7e:	2020      	movs	r0, #32
     e80:	47b0      	blx	r6
     e82:	2800      	cmp	r0, #0
     e84:	db09      	blt.n	e9a <cbvprintf+0x5c6>
     e86:	3401      	adds	r4, #1
			--width;
     e88:	3f01      	subs	r7, #1
     e8a:	e7f5      	b.n	e78 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
     e8c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e90:	e528      	b.n	8e4 <cbvprintf+0x10>
     e92:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e96:	e525      	b.n	8e4 <cbvprintf+0x10>
		}
	}

	return count;
     e98:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     e9a:	b011      	add	sp, #68	; 0x44
     e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ea0:	0000689d 	.word	0x0000689d

00000ea4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     ea4:	b508      	push	{r3, lr}
     ea6:	f04f 0220 	mov.w	r2, #32
     eaa:	f3ef 8311 	mrs	r3, BASEPRI
     eae:	f382 8812 	msr	BASEPRI_MAX, r2
     eb2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     eb6:	f000 fe31 	bl	1b1c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     eba:	4803      	ldr	r0, [pc, #12]	; (ec8 <sys_reboot+0x24>)
     ebc:	f004 f8bc 	bl	5038 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     ec0:	f000 fa5e 	bl	1380 <arch_cpu_idle>
     ec4:	e7fc      	b.n	ec0 <sys_reboot+0x1c>
     ec6:	bf00      	nop
     ec8:	000068a0 	.word	0x000068a0

00000ecc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     ecc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
     ece:	4b2a      	ldr	r3, [pc, #168]	; (f78 <pm_system_resume+0xac>)
     ed0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     ed2:	f005 031f 	and.w	r3, r5, #31
     ed6:	2201      	movs	r2, #1
     ed8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     eda:	0969      	lsrs	r1, r5, #5
     edc:	4b27      	ldr	r3, [pc, #156]	; (f7c <pm_system_resume+0xb0>)
     ede:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ee2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     ee4:	f3bf 8f5b 	dmb	ish
     ee8:	e853 1f00 	ldrex	r1, [r3]
     eec:	ea01 0400 	and.w	r4, r1, r0
     ef0:	e843 4600 	strex	r6, r4, [r3]
     ef4:	2e00      	cmp	r6, #0
     ef6:	d1f7      	bne.n	ee8 <pm_system_resume+0x1c>
     ef8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     efc:	420a      	tst	r2, r1
     efe:	d100      	bne.n	f02 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     f00:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     f02:	481f      	ldr	r0, [pc, #124]	; (f80 <pm_system_resume+0xb4>)
     f04:	eb05 0245 	add.w	r2, r5, r5, lsl #1
     f08:	0093      	lsls	r3, r2, #2
     f0a:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
     f0c:	4a1d      	ldr	r2, [pc, #116]	; (f84 <pm_system_resume+0xb8>)
     f0e:	b172      	cbz	r2, f2e <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f10:	7849      	ldrb	r1, [r1, #1]
     f12:	5cc0      	ldrb	r0, [r0, r3]
     f14:	f004 fbe4 	bl	56e0 <pm_state_exit_post_ops>
     f18:	f04f 0320 	mov.w	r3, #32
     f1c:	f3ef 8611 	mrs	r6, BASEPRI
     f20:	f383 8812 	msr	BASEPRI_MAX, r3
     f24:	f3bf 8f6f 	isb	sy
     f28:	4b17      	ldr	r3, [pc, #92]	; (f88 <pm_system_resume+0xbc>)
     f2a:	681c      	ldr	r4, [r3, #0]
     f2c:	e010      	b.n	f50 <pm_system_resume+0x84>
	__asm__ volatile(
     f2e:	2300      	movs	r3, #0
     f30:	f383 8811 	msr	BASEPRI, r3
     f34:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f38:	e7ee      	b.n	f18 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f3a:	4b0f      	ldr	r3, [pc, #60]	; (f78 <pm_system_resume+0xac>)
     f3c:	7d1b      	ldrb	r3, [r3, #20]
     f3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f42:	0099      	lsls	r1, r3, #2
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <pm_system_resume+0xb4>)
     f46:	5c58      	ldrb	r0, [r3, r1]
     f48:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     f4a:	b10c      	cbz	r4, f50 <pm_system_resume+0x84>
	return node->next;
     f4c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f4e:	b124      	cbz	r4, f5a <pm_system_resume+0x8e>
     f50:	b11c      	cbz	r4, f5a <pm_system_resume+0x8e>
			callback = notifier->state_exit;
     f52:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
     f54:	2a00      	cmp	r2, #0
     f56:	d1f0      	bne.n	f3a <pm_system_resume+0x6e>
     f58:	e7f7      	b.n	f4a <pm_system_resume+0x7e>
	__asm__ volatile(
     f5a:	f386 8811 	msr	BASEPRI, r6
     f5e:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f62:	4807      	ldr	r0, [pc, #28]	; (f80 <pm_system_resume+0xb4>)
     f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
     f68:	00aa      	lsls	r2, r5, #2
     f6a:	1881      	adds	r1, r0, r2
     f6c:	2300      	movs	r3, #0
     f6e:	5083      	str	r3, [r0, r2]
     f70:	604b      	str	r3, [r1, #4]
     f72:	608b      	str	r3, [r1, #8]
}
     f74:	e7c4      	b.n	f00 <pm_system_resume+0x34>
     f76:	bf00      	nop
     f78:	20000de0 	.word	0x20000de0
     f7c:	20000348 	.word	0x20000348
     f80:	20000338 	.word	0x20000338
     f84:	000056e1 	.word	0x000056e1
     f88:	20000330 	.word	0x20000330

00000f8c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f90:	4b57      	ldr	r3, [pc, #348]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     f92:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
     f94:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     f96:	f3bf 8f5b 	dmb	ish
     f9a:	4b56      	ldr	r3, [pc, #344]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
     f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     fa0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
     fa4:	f005 021f 	and.w	r2, r5, #31
     fa8:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
     faa:	f013 0f01 	tst.w	r3, #1
     fae:	d015      	beq.n	fdc <pm_system_suspend+0x50>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     fb0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     fb4:	4a50      	ldr	r2, [pc, #320]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     fb6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     fba:	b1f3      	cbz	r3, ffa <pm_system_suspend+0x6e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     fbc:	f1b4 3fff 	cmp.w	r4, #4294967295
     fc0:	d131      	bne.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     fc2:	f003 f931 	bl	4228 <k_sched_lock>
	__asm__ volatile(
     fc6:	f04f 0320 	mov.w	r3, #32
     fca:	f3ef 8611 	mrs	r6, BASEPRI
     fce:	f383 8812 	msr	BASEPRI_MAX, r3
     fd2:	f3bf 8f6f 	isb	sy
	return list->head;
     fd6:	4b49      	ldr	r3, [pc, #292]	; (10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>)
     fd8:	681c      	ldr	r4, [r3, #0]
     fda:	e045      	b.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
		info = pm_policy_next_state(id, ticks);
     fdc:	4601      	mov	r1, r0
     fde:	4628      	mov	r0, r5
     fe0:	f000 f8a4 	bl	112c <pm_policy_next_state>
		if (info != NULL) {
     fe4:	2800      	cmp	r0, #0
     fe6:	d0e3      	beq.n	fb0 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
     fe8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     fec:	4a42      	ldr	r2, [pc, #264]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     fee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ff2:	c807      	ldmia	r0, {r0, r1, r2}
     ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     ff8:	e7da      	b.n	fb0 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     ffa:	f005 021f 	and.w	r2, r5, #31
     ffe:	2301      	movs	r3, #1
    1000:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1002:	096d      	lsrs	r5, r5, #5
    1004:	4a3b      	ldr	r2, [pc, #236]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    1006:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    100a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    100c:	f3bf 8f5b 	dmb	ish
    1010:	e855 2f00 	ldrex	r2, [r5]
    1014:	401a      	ands	r2, r3
    1016:	e845 2100 	strex	r1, r2, [r5]
    101a:	2900      	cmp	r1, #0
    101c:	d1f8      	bne.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    101e:	f3bf 8f5b 	dmb	ish
		ret = false;
    1022:	2000      	movs	r0, #0
		goto end;
    1024:	e062      	b.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
		     k_us_to_ticks_ceil32(
    1026:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    102a:	4a33      	ldr	r2, [pc, #204]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    102c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1030:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1032:	0c41      	lsrs	r1, r0, #17
    1034:	03c0      	lsls	r0, r0, #15
    1036:	4b32      	ldr	r3, [pc, #200]	; (1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    1038:	18c0      	adds	r0, r0, r3
    103a:	4a32      	ldr	r2, [pc, #200]	; (1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    103c:	f04f 0300 	mov.w	r3, #0
    1040:	f141 0100 	adc.w	r1, r1, #0
    1044:	f7ff f85c 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1048:	2101      	movs	r1, #1
    104a:	1a20      	subs	r0, r4, r0
    104c:	f005 fa82 	bl	6554 <z_set_timeout_expiry>
    1050:	e7b7      	b.n	fc2 <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1052:	4b27      	ldr	r3, [pc, #156]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1054:	7d1b      	ldrb	r3, [r3, #20]
    1056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    105a:	4927      	ldr	r1, [pc, #156]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    105c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1060:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1062:	b10c      	cbz	r4, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
	return node->next;
    1064:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1066:	b124      	cbz	r4, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1068:	b11c      	cbz	r4, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
			callback = notifier->state_entry;
    106a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    106c:	2a00      	cmp	r2, #0
    106e:	d1f0      	bne.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
    1070:	e7f7      	b.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
	__asm__ volatile(
    1072:	f386 8811 	msr	BASEPRI, r6
    1076:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    107a:	f005 031f 	and.w	r3, r5, #31
    107e:	2101      	movs	r1, #1
    1080:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1082:	096b      	lsrs	r3, r5, #5
    1084:	4a20      	ldr	r2, [pc, #128]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    108a:	f3bf 8f5b 	dmb	ish
    108e:	e853 2f00 	ldrex	r2, [r3]
    1092:	430a      	orrs	r2, r1
    1094:	e843 2000 	strex	r0, r2, [r3]
    1098:	2800      	cmp	r0, #0
    109a:	d1f8      	bne.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    109c:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    10a0:	4b1a      	ldr	r3, [pc, #104]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    10a2:	b14b      	cbz	r3, 10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
		pm_state_set(info->state, info->substate_id);
    10a4:	4b14      	ldr	r3, [pc, #80]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10a6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    10aa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    10ae:	7849      	ldrb	r1, [r1, #1]
    10b0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    10b4:	f004 fb08 	bl	56c8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    10b8:	f7ff ff08 	bl	ecc <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    10bc:	f005 031f 	and.w	r3, r5, #31
    10c0:	2401      	movs	r4, #1
    10c2:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    10c6:	096d      	lsrs	r5, r5, #5
    10c8:	4a0a      	ldr	r2, [pc, #40]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10ca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    10ce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    10d0:	f3bf 8f5b 	dmb	ish
    10d4:	e855 2f00 	ldrex	r2, [r5]
    10d8:	401a      	ands	r2, r3
    10da:	e845 2100 	strex	r1, r2, [r5]
    10de:	2900      	cmp	r1, #0
    10e0:	d1f8      	bne.n	10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
    10e2:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    10e6:	f003 fac1 	bl	466c <k_sched_unlock>
	bool ret = true;
    10ea:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    10ec:	bd70      	pop	{r4, r5, r6, pc}
    10ee:	bf00      	nop
    10f0:	20000de0 	.word	0x20000de0
    10f4:	20000344 	.word	0x20000344
    10f8:	20000338 	.word	0x20000338
    10fc:	20000330 	.word	0x20000330
    1100:	000f423f 	.word	0x000f423f
    1104:	000f4240 	.word	0x000f4240
    1108:	20000348 	.word	0x20000348
    110c:	000056c9 	.word	0x000056c9

00001110 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1110:	f3bf 8f5b 	dmb	ish
    1114:	4b04      	ldr	r3, [pc, #16]	; (1128 <pm_policy_state_lock_is_active+0x18>)
    1116:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    111a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    111e:	3800      	subs	r0, #0
    1120:	bf18      	it	ne
    1122:	2001      	movne	r0, #1
    1124:	4770      	bx	lr
    1126:	bf00      	nop
    1128:	2000034c 	.word	0x2000034c

0000112c <pm_policy_next_state>:
{
    112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1130:	b082      	sub	sp, #8
    1132:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1134:	a901      	add	r1, sp, #4
    1136:	f000 f843 	bl	11c0 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    113a:	1e44      	subs	r4, r0, #1
    113c:	b224      	sxth	r4, r4
    113e:	e007      	b.n	1150 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    1140:	f1b6 3fff 	cmp.w	r6, #4294967295
    1144:	d032      	beq.n	11ac <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    1146:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1148:	42b0      	cmp	r0, r6
    114a:	d92f      	bls.n	11ac <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    114c:	3c01      	subs	r4, #1
    114e:	b224      	sxth	r4, r4
    1150:	2c00      	cmp	r4, #0
    1152:	db2a      	blt.n	11aa <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    1154:	9b01      	ldr	r3, [sp, #4]
    1156:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    115a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    115e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1162:	f7ff ffd5 	bl	1110 <pm_policy_state_lock_is_active>
    1166:	2800      	cmp	r0, #0
    1168:	d1f0      	bne.n	114c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    116a:	6868      	ldr	r0, [r5, #4]
    116c:	0c41      	lsrs	r1, r0, #17
    116e:	03c0      	lsls	r0, r0, #15
    1170:	4f10      	ldr	r7, [pc, #64]	; (11b4 <pm_policy_next_state+0x88>)
    1172:	19c0      	adds	r0, r0, r7
    1174:	4a10      	ldr	r2, [pc, #64]	; (11b8 <pm_policy_next_state+0x8c>)
    1176:	f04f 0300 	mov.w	r3, #0
    117a:	f141 0100 	adc.w	r1, r1, #0
    117e:	f7fe ffbf 	bl	100 <__aeabi_uldivmod>
    1182:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1184:	68ab      	ldr	r3, [r5, #8]
    1186:	0c59      	lsrs	r1, r3, #17
    1188:	03db      	lsls	r3, r3, #15
    118a:	19d8      	adds	r0, r3, r7
    118c:	4a0a      	ldr	r2, [pc, #40]	; (11b8 <pm_policy_next_state+0x8c>)
    118e:	f04f 0300 	mov.w	r3, #0
    1192:	f141 0100 	adc.w	r1, r1, #0
    1196:	f7fe ffb3 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    119a:	4b08      	ldr	r3, [pc, #32]	; (11bc <pm_policy_next_state+0x90>)
    119c:	681b      	ldr	r3, [r3, #0]
    119e:	f1b3 3fff 	cmp.w	r3, #4294967295
    11a2:	d0cd      	beq.n	1140 <pm_policy_next_state+0x14>
    11a4:	4283      	cmp	r3, r0
    11a6:	d8cb      	bhi.n	1140 <pm_policy_next_state+0x14>
    11a8:	e7d0      	b.n	114c <pm_policy_next_state+0x20>
	return NULL;
    11aa:	2500      	movs	r5, #0
}
    11ac:	4628      	mov	r0, r5
    11ae:	b002      	add	sp, #8
    11b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11b4:	000f423f 	.word	0x000f423f
    11b8:	000f4240 	.word	0x000f4240
    11bc:	20000004 	.word	0x20000004

000011c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    11c0:	b908      	cbnz	r0, 11c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    11c2:	4b02      	ldr	r3, [pc, #8]	; (11cc <pm_state_cpu_get_all+0xc>)
    11c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    11c6:	2000      	movs	r0, #0
    11c8:	4770      	bx	lr
    11ca:	bf00      	nop
    11cc:	000068cc 	.word	0x000068cc

000011d0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    11d0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    11d2:	4802      	ldr	r0, [pc, #8]	; (11dc <nrf_cc3xx_platform_abort_init+0xc>)
    11d4:	f003 fd7c 	bl	4cd0 <nrf_cc3xx_platform_set_abort>
}
    11d8:	bd08      	pop	{r3, pc}
    11da:	bf00      	nop
    11dc:	000068cc 	.word	0x000068cc

000011e0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    11e0:	b1d0      	cbz	r0, 1218 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11e2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    11e4:	6842      	ldr	r2, [r0, #4]
    11e6:	2a04      	cmp	r2, #4
    11e8:	d005      	beq.n	11f6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11ea:	b1d2      	cbz	r2, 1222 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    11ec:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    11ee:	f002 ff11 	bl	4014 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11f2:	2000      	movs	r0, #0
    }
}
    11f4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    11f6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11f8:	2200      	movs	r2, #0
    11fa:	f3bf 8f5b 	dmb	ish
    11fe:	e853 1f00 	ldrex	r1, [r3]
    1202:	2901      	cmp	r1, #1
    1204:	d103      	bne.n	120e <mutex_unlock_platform+0x2e>
    1206:	e843 2000 	strex	r0, r2, [r3]
    120a:	2800      	cmp	r0, #0
    120c:	d1f7      	bne.n	11fe <mutex_unlock_platform+0x1e>
    120e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1212:	d104      	bne.n	121e <mutex_unlock_platform+0x3e>
    1214:	4610      	mov	r0, r2
    1216:	e7ed      	b.n	11f4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1218:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    121c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    121e:	4802      	ldr	r0, [pc, #8]	; (1228 <mutex_unlock_platform+0x48>)
    1220:	e7e8      	b.n	11f4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1222:	4802      	ldr	r0, [pc, #8]	; (122c <mutex_unlock_platform+0x4c>)
    1224:	e7e6      	b.n	11f4 <mutex_unlock_platform+0x14>
    1226:	bf00      	nop
    1228:	ffff8fe9 	.word	0xffff8fe9
    122c:	ffff8fea 	.word	0xffff8fea

00001230 <mutex_lock_platform>:
    if(mutex == NULL) {
    1230:	b320      	cbz	r0, 127c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1232:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1234:	6842      	ldr	r2, [r0, #4]
    1236:	2a04      	cmp	r2, #4
    1238:	d002      	beq.n	1240 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    123a:	b992      	cbnz	r2, 1262 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    123c:	4811      	ldr	r0, [pc, #68]	; (1284 <mutex_lock_platform+0x54>)
    123e:	e00f      	b.n	1260 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1240:	6803      	ldr	r3, [r0, #0]
    1242:	2201      	movs	r2, #1
    1244:	f3bf 8f5b 	dmb	ish
    1248:	e853 1f00 	ldrex	r1, [r3]
    124c:	2900      	cmp	r1, #0
    124e:	d103      	bne.n	1258 <mutex_lock_platform+0x28>
    1250:	e843 2000 	strex	r0, r2, [r3]
    1254:	2800      	cmp	r0, #0
    1256:	d1f7      	bne.n	1248 <mutex_lock_platform+0x18>
    1258:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    125c:	d10c      	bne.n	1278 <mutex_lock_platform+0x48>
    125e:	2000      	movs	r0, #0
}
    1260:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    1262:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1264:	f04f 32ff 	mov.w	r2, #4294967295
    1268:	f04f 33ff 	mov.w	r3, #4294967295
    126c:	f002 fe48 	bl	3f00 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1270:	2800      	cmp	r0, #0
    1272:	d0f5      	beq.n	1260 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1274:	4804      	ldr	r0, [pc, #16]	; (1288 <mutex_lock_platform+0x58>)
    1276:	e7f3      	b.n	1260 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1278:	4803      	ldr	r0, [pc, #12]	; (1288 <mutex_lock_platform+0x58>)
    127a:	e7f1      	b.n	1260 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    127c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1280:	4770      	bx	lr
    1282:	bf00      	nop
    1284:	ffff8fea 	.word	0xffff8fea
    1288:	ffff8fe9 	.word	0xffff8fe9

0000128c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    128c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    128e:	4604      	mov	r4, r0
    1290:	b188      	cbz	r0, 12b6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1292:	6863      	ldr	r3, [r4, #4]
    1294:	2b04      	cmp	r3, #4
    1296:	d00d      	beq.n	12b4 <mutex_free_platform+0x28>
    1298:	2b08      	cmp	r3, #8
    129a:	d00b      	beq.n	12b4 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    129c:	b153      	cbz	r3, 12b4 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    129e:	f013 0f02 	tst.w	r3, #2
    12a2:	d00d      	beq.n	12c0 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    12a4:	4621      	mov	r1, r4
    12a6:	4809      	ldr	r0, [pc, #36]	; (12cc <mutex_free_platform+0x40>)
    12a8:	f004 ff91 	bl	61ce <k_mem_slab_free>
        mutex->mutex = NULL;
    12ac:	2300      	movs	r3, #0
    12ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12b0:	2300      	movs	r3, #0
    12b2:	6063      	str	r3, [r4, #4]
}
    12b4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    12b6:	4b06      	ldr	r3, [pc, #24]	; (12d0 <mutex_free_platform+0x44>)
    12b8:	685b      	ldr	r3, [r3, #4]
    12ba:	4806      	ldr	r0, [pc, #24]	; (12d4 <mutex_free_platform+0x48>)
    12bc:	4798      	blx	r3
    12be:	e7e8      	b.n	1292 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12c0:	2214      	movs	r2, #20
    12c2:	2100      	movs	r1, #0
    12c4:	6820      	ldr	r0, [r4, #0]
    12c6:	f004 f9ce 	bl	5666 <memset>
    12ca:	e7f1      	b.n	12b0 <mutex_free_platform+0x24>
    12cc:	20000368 	.word	0x20000368
    12d0:	200000e0 	.word	0x200000e0
    12d4:	000068d4 	.word	0x000068d4

000012d8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12da:	4604      	mov	r4, r0
    12dc:	b178      	cbz	r0, 12fe <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12de:	6863      	ldr	r3, [r4, #4]
    12e0:	2b04      	cmp	r3, #4
    12e2:	d00b      	beq.n	12fc <mutex_init_platform+0x24>
    12e4:	2b08      	cmp	r3, #8
    12e6:	d009      	beq.n	12fc <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    12e8:	b90b      	cbnz	r3, 12ee <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    12ea:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    12ec:	b163      	cbz	r3, 1308 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    12ee:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    12f0:	f004 ffdc 	bl	62ac <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    12f4:	6863      	ldr	r3, [r4, #4]
    12f6:	f043 0301 	orr.w	r3, r3, #1
    12fa:	6063      	str	r3, [r4, #4]
}
    12fc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    12fe:	4b0f      	ldr	r3, [pc, #60]	; (133c <mutex_init_platform+0x64>)
    1300:	685b      	ldr	r3, [r3, #4]
    1302:	480f      	ldr	r0, [pc, #60]	; (1340 <mutex_init_platform+0x68>)
    1304:	4798      	blx	r3
    1306:	e7ea      	b.n	12de <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1308:	f04f 32ff 	mov.w	r2, #4294967295
    130c:	f04f 33ff 	mov.w	r3, #4294967295
    1310:	4621      	mov	r1, r4
    1312:	480c      	ldr	r0, [pc, #48]	; (1344 <mutex_init_platform+0x6c>)
    1314:	f002 fcc6 	bl	3ca4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1318:	b908      	cbnz	r0, 131e <mutex_init_platform+0x46>
    131a:	6823      	ldr	r3, [r4, #0]
    131c:	b91b      	cbnz	r3, 1326 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <mutex_init_platform+0x64>)
    1320:	685b      	ldr	r3, [r3, #4]
    1322:	4809      	ldr	r0, [pc, #36]	; (1348 <mutex_init_platform+0x70>)
    1324:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1326:	2214      	movs	r2, #20
    1328:	2100      	movs	r1, #0
    132a:	6820      	ldr	r0, [r4, #0]
    132c:	f004 f99b 	bl	5666 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1330:	6863      	ldr	r3, [r4, #4]
    1332:	f043 0302 	orr.w	r3, r3, #2
    1336:	6063      	str	r3, [r4, #4]
    1338:	e7d9      	b.n	12ee <mutex_init_platform+0x16>
    133a:	bf00      	nop
    133c:	200000e0 	.word	0x200000e0
    1340:	000068d4 	.word	0x000068d4
    1344:	20000368 	.word	0x20000368
    1348:	000068fc 	.word	0x000068fc

0000134c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    134c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    134e:	2340      	movs	r3, #64	; 0x40
    1350:	2214      	movs	r2, #20
    1352:	4904      	ldr	r1, [pc, #16]	; (1364 <nrf_cc3xx_platform_mutex_init+0x18>)
    1354:	4804      	ldr	r0, [pc, #16]	; (1368 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1356:	f004 ff2c 	bl	61b2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    135a:	4904      	ldr	r1, [pc, #16]	; (136c <nrf_cc3xx_platform_mutex_init+0x20>)
    135c:	4804      	ldr	r0, [pc, #16]	; (1370 <nrf_cc3xx_platform_mutex_init+0x24>)
    135e:	f003 fd17 	bl	4d90 <nrf_cc3xx_platform_set_mutexes>
}
    1362:	bd08      	pop	{r3, pc}
    1364:	20000384 	.word	0x20000384
    1368:	20000368 	.word	0x20000368
    136c:	0000693c 	.word	0x0000693c
    1370:	0000692c 	.word	0x0000692c

00001374 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1374:	4901      	ldr	r1, [pc, #4]	; (137c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1376:	2210      	movs	r2, #16
	str	r2, [r1]
    1378:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    137a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    137c:	e000ed10 	.word	0xe000ed10

00001380 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1380:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1382:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1384:	f380 8811 	msr	BASEPRI, r0
	isb
    1388:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    138c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1390:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1392:	b662      	cpsie	i
	isb
    1394:	f3bf 8f6f 	isb	sy

	bx	lr
    1398:	4770      	bx	lr
    139a:	bf00      	nop

0000139c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    139c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    139e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    13a0:	f381 8811 	msr	BASEPRI, r1

	wfe
    13a4:	bf20      	wfe

	msr	BASEPRI, r0
    13a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    13aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    13ac:	4770      	bx	lr
    13ae:	bf00      	nop

000013b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    13b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13b2:	2800      	cmp	r0, #0
    13b4:	db07      	blt.n	13c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13b6:	f000 021f 	and.w	r2, r0, #31
    13ba:	0940      	lsrs	r0, r0, #5
    13bc:	2301      	movs	r3, #1
    13be:	4093      	lsls	r3, r2
    13c0:	4a01      	ldr	r2, [pc, #4]	; (13c8 <arch_irq_enable+0x18>)
    13c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    13c6:	4770      	bx	lr
    13c8:	e000e100 	.word	0xe000e100

000013cc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    13cc:	0942      	lsrs	r2, r0, #5
    13ce:	4b05      	ldr	r3, [pc, #20]	; (13e4 <arch_irq_is_enabled+0x18>)
    13d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    13d4:	f000 001f 	and.w	r0, r0, #31
    13d8:	2301      	movs	r3, #1
    13da:	fa03 f000 	lsl.w	r0, r3, r0
}
    13de:	4010      	ands	r0, r2
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	e000e100 	.word	0xe000e100

000013e8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    13e8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    13ea:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    13ec:	2800      	cmp	r0, #0
    13ee:	db08      	blt.n	1402 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13f0:	0149      	lsls	r1, r1, #5
    13f2:	b2c9      	uxtb	r1, r1
    13f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    13f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    13fc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1400:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1402:	f000 000f 	and.w	r0, r0, #15
    1406:	0149      	lsls	r1, r1, #5
    1408:	b2c9      	uxtb	r1, r1
    140a:	4b01      	ldr	r3, [pc, #4]	; (1410 <z_arm_irq_priority_set+0x28>)
    140c:	5419      	strb	r1, [r3, r0]
}
    140e:	4770      	bx	lr
    1410:	e000ed14 	.word	0xe000ed14

00001414 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1414:	bf30      	wfi
    b z_SysNmiOnReset
    1416:	f7ff bffd 	b.w	1414 <z_SysNmiOnReset>
    141a:	bf00      	nop

0000141c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    141c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    141e:	4b0b      	ldr	r3, [pc, #44]	; (144c <z_arm_prep_c+0x30>)
    1420:	4a0b      	ldr	r2, [pc, #44]	; (1450 <z_arm_prep_c+0x34>)
    1422:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1426:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    142c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1434:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    143c:	f002 fb7e 	bl	3b3c <z_bss_zero>
	z_data_copy();
    1440:	f003 fa80 	bl	4944 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1444:	f000 fa12 	bl	186c <z_arm_interrupt_init>
	z_cstart();
    1448:	f002 fbd6 	bl	3bf8 <z_cstart>
    144c:	e000ed00 	.word	0xe000ed00
    1450:	00000000 	.word	0x00000000

00001454 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1454:	4a0a      	ldr	r2, [pc, #40]	; (1480 <arch_swap+0x2c>)
    1456:	6893      	ldr	r3, [r2, #8]
    1458:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    145c:	4909      	ldr	r1, [pc, #36]	; (1484 <arch_swap+0x30>)
    145e:	6809      	ldr	r1, [r1, #0]
    1460:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1464:	4908      	ldr	r1, [pc, #32]	; (1488 <arch_swap+0x34>)
    1466:	684b      	ldr	r3, [r1, #4]
    1468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    146c:	604b      	str	r3, [r1, #4]
    146e:	2300      	movs	r3, #0
    1470:	f383 8811 	msr	BASEPRI, r3
    1474:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1478:	6893      	ldr	r3, [r2, #8]
}
    147a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    147e:	4770      	bx	lr
    1480:	20000de0 	.word	0x20000de0
    1484:	00006acc 	.word	0x00006acc
    1488:	e000ed00 	.word	0xe000ed00

0000148c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    148c:	4913      	ldr	r1, [pc, #76]	; (14dc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    148e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1490:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1494:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1496:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    149a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    149e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    14a0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14a4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14a8:	4f0d      	ldr	r7, [pc, #52]	; (14e0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14ae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    14b0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14b2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14b4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    14b8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14ba:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    14be:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    14c2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    14c4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    14c6:	f000 fa7b 	bl	19c0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    14ca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    14ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    14d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    14d6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    14da:	4770      	bx	lr
    ldr r1, =_kernel
    14dc:	20000de0 	.word	0x20000de0
    ldr v4, =_SCS_ICSR
    14e0:	e000ed04 	.word	0xe000ed04

000014e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    14e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    14f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    14f8:	2902      	cmp	r1, #2
    beq _oops
    14fa:	d0ff      	beq.n	14fc <_oops>

000014fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    14fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    14fe:	f003 ffa7 	bl	5450 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1502:	bd01      	pop	{r0, pc}

00001504 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1504:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1506:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    150a:	490e      	ldr	r1, [pc, #56]	; (1544 <arch_new_thread+0x40>)
    150c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1510:	f021 0101 	bic.w	r1, r1, #1
    1514:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1518:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    151c:	9b01      	ldr	r3, [sp, #4]
    151e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1522:	9b02      	ldr	r3, [sp, #8]
    1524:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1528:	9b03      	ldr	r3, [sp, #12]
    152a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    152e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1532:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1536:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1538:	2300      	movs	r3, #0
    153a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    153e:	bc10      	pop	{r4}
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	000052ff 	.word	0x000052ff

00001548 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1548:	4b12      	ldr	r3, [pc, #72]	; (1594 <z_check_thread_stack_fail+0x4c>)
    154a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    154c:	b302      	cbz	r2, 1590 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    154e:	f110 0f16 	cmn.w	r0, #22
    1552:	d011      	beq.n	1578 <z_check_thread_stack_fail+0x30>
    1554:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1558:	f1a3 0c20 	sub.w	ip, r3, #32
    155c:	4584      	cmp	ip, r0
    155e:	d805      	bhi.n	156c <z_check_thread_stack_fail+0x24>
    1560:	4283      	cmp	r3, r0
    1562:	d905      	bls.n	1570 <z_check_thread_stack_fail+0x28>
    1564:	428b      	cmp	r3, r1
    1566:	d805      	bhi.n	1574 <z_check_thread_stack_fail+0x2c>
    1568:	2100      	movs	r1, #0
    156a:	e00b      	b.n	1584 <z_check_thread_stack_fail+0x3c>
    156c:	2100      	movs	r1, #0
    156e:	e009      	b.n	1584 <z_check_thread_stack_fail+0x3c>
    1570:	2100      	movs	r1, #0
    1572:	e007      	b.n	1584 <z_check_thread_stack_fail+0x3c>
    1574:	2101      	movs	r1, #1
    1576:	e005      	b.n	1584 <z_check_thread_stack_fail+0x3c>
    1578:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    157c:	428b      	cmp	r3, r1
    157e:	bf94      	ite	ls
    1580:	2100      	movls	r1, #0
    1582:	2101      	movhi	r1, #1
    1584:	b909      	cbnz	r1, 158a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1586:	2000      	movs	r0, #0
}
    1588:	4770      	bx	lr
		return thread->stack_info.start;
    158a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    158e:	4770      	bx	lr
		return 0;
    1590:	2000      	movs	r0, #0
    1592:	4770      	bx	lr
    1594:	20000de0 	.word	0x20000de0

00001598 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1598:	b508      	push	{r3, lr}
    159a:	460d      	mov	r5, r1
    159c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    159e:	4b08      	ldr	r3, [pc, #32]	; (15c0 <arch_switch_to_main_thread+0x28>)
    15a0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    15a2:	f000 fa0d 	bl	19c0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    15a6:	4620      	mov	r0, r4
    15a8:	f385 8809 	msr	PSP, r5
    15ac:	2100      	movs	r1, #0
    15ae:	b663      	cpsie	if
    15b0:	f381 8811 	msr	BASEPRI, r1
    15b4:	f3bf 8f6f 	isb	sy
    15b8:	2200      	movs	r2, #0
    15ba:	2300      	movs	r3, #0
    15bc:	f003 fe9f 	bl	52fe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    15c0:	20000de0 	.word	0x20000de0

000015c4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    15c4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    15c6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    15c8:	4a0b      	ldr	r2, [pc, #44]	; (15f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    15ca:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    15cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    15ce:	bf1e      	ittt	ne
	movne	r1, #0
    15d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    15d2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    15d4:	f004 fe4e 	blne	6274 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    15d8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    15da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    15de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    15e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    15e6:	4905      	ldr	r1, [pc, #20]	; (15fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    15e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    15ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    15ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    15ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    15f2:	4903      	ldr	r1, [pc, #12]	; (1600 <_isr_wrapper+0x3c>)
	bx r1
    15f4:	4708      	bx	r1
    15f6:	0000      	.short	0x0000
	ldr r2, =_kernel
    15f8:	20000de0 	.word	0x20000de0
	ldr r1, =_sw_isr_table
    15fc:	000066a4 	.word	0x000066a4
	ldr r1, =z_arm_int_exit
    1600:	00001605 	.word	0x00001605

00001604 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1604:	4b04      	ldr	r3, [pc, #16]	; (1618 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1606:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1608:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    160a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    160c:	d003      	beq.n	1616 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    160e:	4903      	ldr	r1, [pc, #12]	; (161c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1614:	600a      	str	r2, [r1, #0]

00001616 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1616:	4770      	bx	lr
	ldr r3, =_kernel
    1618:	20000de0 	.word	0x20000de0
	ldr r1, =_SCS_ICSR
    161c:	e000ed04 	.word	0xe000ed04

00001620 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1620:	b510      	push	{r4, lr}
    1622:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1624:	4b12      	ldr	r3, [pc, #72]	; (1670 <bus_fault+0x50>)
    1626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    162c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1630:	d00b      	beq.n	164a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1632:	4b0f      	ldr	r3, [pc, #60]	; (1670 <bus_fault+0x50>)
    1634:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1638:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    163c:	d005      	beq.n	164a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    163e:	b121      	cbz	r1, 164a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1640:	4a0b      	ldr	r2, [pc, #44]	; (1670 <bus_fault+0x50>)
    1642:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1648:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <bus_fault+0x50>)
    164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1650:	f413 7f80 	tst.w	r3, #256	; 0x100
    1654:	d101      	bne.n	165a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1656:	4b06      	ldr	r3, [pc, #24]	; (1670 <bus_fault+0x50>)
    1658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    165a:	4a05      	ldr	r2, [pc, #20]	; (1670 <bus_fault+0x50>)
    165c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    165e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1662:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1664:	2101      	movs	r1, #1
    1666:	f003 ff05 	bl	5474 <memory_fault_recoverable>
    166a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    166c:	2000      	movs	r0, #0
    166e:	bd10      	pop	{r4, pc}
    1670:	e000ed00 	.word	0xe000ed00

00001674 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1674:	4b07      	ldr	r3, [pc, #28]	; (1694 <usage_fault+0x20>)
    1676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    167a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1684:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1688:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    168c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    168e:	2000      	movs	r0, #0
    1690:	4770      	bx	lr
    1692:	bf00      	nop
    1694:	e000ed00 	.word	0xe000ed00

00001698 <mem_manage_fault>:
{
    1698:	b570      	push	{r4, r5, r6, lr}
    169a:	4605      	mov	r5, r0
    169c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    169e:	4b25      	ldr	r3, [pc, #148]	; (1734 <mem_manage_fault+0x9c>)
    16a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16a6:	f013 0f02 	tst.w	r3, #2
    16aa:	d00c      	beq.n	16c6 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    16ac:	4b21      	ldr	r3, [pc, #132]	; (1734 <mem_manage_fault+0x9c>)
    16ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    16b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    16b6:	d02f      	beq.n	1718 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    16b8:	b139      	cbz	r1, 16ca <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    16ba:	4a1e      	ldr	r2, [pc, #120]	; (1734 <mem_manage_fault+0x9c>)
    16bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    16c2:	6293      	str	r3, [r2, #40]	; 0x28
    16c4:	e001      	b.n	16ca <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    16c6:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    16ca:	4b1a      	ldr	r3, [pc, #104]	; (1734 <mem_manage_fault+0x9c>)
    16cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16d2:	f013 0f10 	tst.w	r3, #16
    16d6:	d104      	bne.n	16e2 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    16d8:	4b16      	ldr	r3, [pc, #88]	; (1734 <mem_manage_fault+0x9c>)
    16da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16dc:	f014 0402 	ands.w	r4, r4, #2
    16e0:	d004      	beq.n	16ec <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    16e2:	4b14      	ldr	r3, [pc, #80]	; (1734 <mem_manage_fault+0x9c>)
    16e4:	685c      	ldr	r4, [r3, #4]
    16e6:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    16ea:	d118      	bne.n	171e <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16ec:	4b11      	ldr	r3, [pc, #68]	; (1734 <mem_manage_fault+0x9c>)
    16ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16f0:	f013 0f20 	tst.w	r3, #32
    16f4:	d004      	beq.n	1700 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    16f6:	4a0f      	ldr	r2, [pc, #60]	; (1734 <mem_manage_fault+0x9c>)
    16f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    16fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    16fe:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1700:	4a0c      	ldr	r2, [pc, #48]	; (1734 <mem_manage_fault+0x9c>)
    1702:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1704:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1708:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    170a:	2101      	movs	r1, #1
    170c:	4628      	mov	r0, r5
    170e:	f003 feb1 	bl	5474 <memory_fault_recoverable>
    1712:	7030      	strb	r0, [r6, #0]
}
    1714:	4620      	mov	r0, r4
    1716:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1718:	f06f 0015 	mvn.w	r0, #21
    171c:	e7d5      	b.n	16ca <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    171e:	4629      	mov	r1, r5
    1720:	f7ff ff12 	bl	1548 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1724:	4604      	mov	r4, r0
    1726:	2800      	cmp	r0, #0
    1728:	d0e0      	beq.n	16ec <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    172a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    172e:	2402      	movs	r4, #2
    1730:	e7dc      	b.n	16ec <mem_manage_fault+0x54>
    1732:	bf00      	nop
    1734:	e000ed00 	.word	0xe000ed00

00001738 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1738:	b508      	push	{r3, lr}
    173a:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    173c:	2300      	movs	r3, #0
    173e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1740:	4b1b      	ldr	r3, [pc, #108]	; (17b0 <hard_fault+0x78>)
    1742:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1744:	f010 0002 	ands.w	r0, r0, #2
    1748:	d12e      	bne.n	17a8 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    174c:	2b00      	cmp	r3, #0
    174e:	db2c      	blt.n	17aa <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1750:	4b17      	ldr	r3, [pc, #92]	; (17b0 <hard_fault+0x78>)
    1752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1754:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    1758:	d028      	beq.n	17ac <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    175a:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    175e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1762:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1766:	429a      	cmp	r2, r3
    1768:	d00f      	beq.n	178a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    176a:	4b11      	ldr	r3, [pc, #68]	; (17b0 <hard_fault+0x78>)
    176c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1770:	b973      	cbnz	r3, 1790 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    1772:	4b0f      	ldr	r3, [pc, #60]	; (17b0 <hard_fault+0x78>)
    1774:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    1778:	b983      	cbnz	r3, 179c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    177a:	4b0d      	ldr	r3, [pc, #52]	; (17b0 <hard_fault+0x78>)
    177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    177e:	b29b      	uxth	r3, r3
    1780:	b19b      	cbz	r3, 17aa <hard_fault+0x72>
			reason = usage_fault(esf);
    1782:	4660      	mov	r0, ip
    1784:	f7ff ff76 	bl	1674 <usage_fault>
    1788:	e00f      	b.n	17aa <hard_fault+0x72>
			reason = esf->basic.r0;
    178a:	f8dc 0000 	ldr.w	r0, [ip]
    178e:	e00c      	b.n	17aa <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    1790:	460a      	mov	r2, r1
    1792:	2101      	movs	r1, #1
    1794:	4660      	mov	r0, ip
    1796:	f7ff ff7f 	bl	1698 <mem_manage_fault>
    179a:	e006      	b.n	17aa <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    179c:	460a      	mov	r2, r1
    179e:	2101      	movs	r1, #1
    17a0:	4660      	mov	r0, ip
    17a2:	f7ff ff3d 	bl	1620 <bus_fault>
    17a6:	e000      	b.n	17aa <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17a8:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    17aa:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17ac:	4618      	mov	r0, r3
	return reason;
    17ae:	e7fc      	b.n	17aa <hard_fault+0x72>
    17b0:	e000ed00 	.word	0xe000ed00

000017b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17b4:	b570      	push	{r4, r5, r6, lr}
    17b6:	b08a      	sub	sp, #40	; 0x28
    17b8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17ba:	4b22      	ldr	r3, [pc, #136]	; (1844 <z_arm_fault+0x90>)
    17bc:	6859      	ldr	r1, [r3, #4]
    17be:	f3c1 0108 	ubfx	r1, r1, #0, #9
    17c2:	2300      	movs	r3, #0
    17c4:	f383 8811 	msr	BASEPRI, r3
    17c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    17cc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    17d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    17d4:	d115      	bne.n	1802 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    17d6:	f002 030c 	and.w	r3, r2, #12
    17da:	2b08      	cmp	r3, #8
    17dc:	d014      	beq.n	1808 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    17de:	f012 0f08 	tst.w	r2, #8
    17e2:	d00b      	beq.n	17fc <z_arm_fault+0x48>
	*nested_exc = false;
    17e4:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    17e6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    17ea:	4620      	mov	r0, r4
    17ec:	f003 fe47 	bl	547e <fault_handle>
    17f0:	4605      	mov	r5, r0
	if (recoverable) {
    17f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    17f6:	b153      	cbz	r3, 180e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    17f8:	b00a      	add	sp, #40	; 0x28
    17fa:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    17fc:	4604      	mov	r4, r0
			*nested_exc = true;
    17fe:	2601      	movs	r6, #1
    1800:	e7f1      	b.n	17e6 <z_arm_fault+0x32>
	*nested_exc = false;
    1802:	2600      	movs	r6, #0
		return NULL;
    1804:	4634      	mov	r4, r6
    1806:	e7ee      	b.n	17e6 <z_arm_fault+0x32>
	*nested_exc = false;
    1808:	2600      	movs	r6, #0
		return NULL;
    180a:	4634      	mov	r4, r6
    180c:	e7eb      	b.n	17e6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    180e:	2220      	movs	r2, #32
    1810:	4621      	mov	r1, r4
    1812:	a801      	add	r0, sp, #4
    1814:	f003 fef8 	bl	5608 <memcpy>
	if (nested_exc) {
    1818:	b14e      	cbz	r6, 182e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    181a:	9b08      	ldr	r3, [sp, #32]
    181c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1820:	b95a      	cbnz	r2, 183a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1822:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1826:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    182a:	9308      	str	r3, [sp, #32]
    182c:	e005      	b.n	183a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    182e:	9b08      	ldr	r3, [sp, #32]
    1830:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1834:	f023 0301 	bic.w	r3, r3, #1
    1838:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    183a:	a901      	add	r1, sp, #4
    183c:	4628      	mov	r0, r5
    183e:	f003 fe03 	bl	5448 <z_arm_fatal_error>
    1842:	e7d9      	b.n	17f8 <z_arm_fault+0x44>
    1844:	e000ed00 	.word	0xe000ed00

00001848 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <z_arm_fault_init+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1858:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    185c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1860:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1862:	4672      	mov	r2, lr
	bl z_arm_fault
    1864:	f7ff ffa6 	bl	17b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1868:	bd01      	pop	{r0, pc}
    186a:	bf00      	nop

0000186c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    186c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    186e:	e006      	b.n	187e <z_arm_interrupt_init+0x12>
    1870:	f002 010f 	and.w	r1, r2, #15
    1874:	4b09      	ldr	r3, [pc, #36]	; (189c <z_arm_interrupt_init+0x30>)
    1876:	440b      	add	r3, r1
    1878:	2120      	movs	r1, #32
    187a:	7619      	strb	r1, [r3, #24]
    187c:	3201      	adds	r2, #1
    187e:	2a2f      	cmp	r2, #47	; 0x2f
    1880:	dc0a      	bgt.n	1898 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1882:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1884:	2b00      	cmp	r3, #0
    1886:	dbf3      	blt.n	1870 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1888:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    188c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1890:	2120      	movs	r1, #32
    1892:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1896:	e7f1      	b.n	187c <z_arm_interrupt_init+0x10>
	}
}
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	e000ecfc 	.word	0xe000ecfc

000018a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    18a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    18a2:	f380 8814 	msr	CONTROL, r0
    isb
    18a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    18aa:	f004 fe89 	bl	65c0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    18ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    18b0:	490d      	ldr	r1, [pc, #52]	; (18e8 <__start+0x48>)
    str r0, [r1]
    18b2:	6008      	str	r0, [r1, #0]
    dsb
    18b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    18b8:	480c      	ldr	r0, [pc, #48]	; (18ec <__start+0x4c>)
    msr msp, r0
    18ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    18be:	f000 f82d 	bl	191c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    18c8:	4809      	ldr	r0, [pc, #36]	; (18f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    18ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    18ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    18d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    18d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    18d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    18da:	4308      	orrs	r0, r1
    msr CONTROL, r0
    18dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    18e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    18e4:	f7ff fd9a 	bl	141c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    18e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    18ec:	20001400 	.word	0x20001400
    ldr r0, =z_interrupt_stacks
    18f0:	20001580 	.word	0x20001580

000018f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <z_arm_clear_arm_mpu_config+0x24>)
    18f6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    18fa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    18fe:	2300      	movs	r3, #0
    1900:	e006      	b.n	1910 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1902:	4a05      	ldr	r2, [pc, #20]	; (1918 <z_arm_clear_arm_mpu_config+0x24>)
    1904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1908:	2100      	movs	r1, #0
    190a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    190e:	3301      	adds	r3, #1
    1910:	4283      	cmp	r3, r0
    1912:	dbf6      	blt.n	1902 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1914:	4770      	bx	lr
    1916:	bf00      	nop
    1918:	e000ed00 	.word	0xe000ed00

0000191c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    191c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    191e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1920:	2400      	movs	r4, #0
    1922:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1926:	f7ff ffe5 	bl	18f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    192a:	4623      	mov	r3, r4
    192c:	e008      	b.n	1940 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    192e:	f103 0120 	add.w	r1, r3, #32
    1932:	4a0e      	ldr	r2, [pc, #56]	; (196c <z_arm_init_arch_hw_at_boot+0x50>)
    1934:	f04f 30ff 	mov.w	r0, #4294967295
    1938:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    193c:	3301      	adds	r3, #1
    193e:	b2db      	uxtb	r3, r3
    1940:	2b07      	cmp	r3, #7
    1942:	d9f4      	bls.n	192e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1944:	2300      	movs	r3, #0
    1946:	e008      	b.n	195a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1948:	f103 0160 	add.w	r1, r3, #96	; 0x60
    194c:	4a07      	ldr	r2, [pc, #28]	; (196c <z_arm_init_arch_hw_at_boot+0x50>)
    194e:	f04f 30ff 	mov.w	r0, #4294967295
    1952:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1956:	3301      	adds	r3, #1
    1958:	b2db      	uxtb	r3, r3
    195a:	2b07      	cmp	r3, #7
    195c:	d9f4      	bls.n	1948 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    195e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1964:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1968:	bd10      	pop	{r4, pc}
    196a:	bf00      	nop
    196c:	e000e100 	.word	0xe000e100

00001970 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1970:	b508      	push	{r3, lr}
	if (_current == thread) {
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <z_impl_k_thread_abort+0x2c>)
    1974:	689b      	ldr	r3, [r3, #8]
    1976:	4283      	cmp	r3, r0
    1978:	d002      	beq.n	1980 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    197a:	f002 ffbb 	bl	48f4 <z_thread_abort>
}
    197e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1980:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1984:	2b00      	cmp	r3, #0
    1986:	d0f8      	beq.n	197a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <z_impl_k_thread_abort+0x30>)
    198a:	685a      	ldr	r2, [r3, #4]
    198c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1990:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1998:	625a      	str	r2, [r3, #36]	; 0x24
    199a:	e7ee      	b.n	197a <z_impl_k_thread_abort+0xa>
    199c:	20000de0 	.word	0x20000de0
    19a0:	e000ed00 	.word	0xe000ed00

000019a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    19a4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    19a6:	4b03      	ldr	r3, [pc, #12]	; (19b4 <z_arm_configure_static_mpu_regions+0x10>)
    19a8:	4a03      	ldr	r2, [pc, #12]	; (19b8 <z_arm_configure_static_mpu_regions+0x14>)
    19aa:	2101      	movs	r1, #1
    19ac:	4803      	ldr	r0, [pc, #12]	; (19bc <z_arm_configure_static_mpu_regions+0x18>)
    19ae:	f003 fdec 	bl	558a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    19b2:	bd08      	pop	{r3, pc}
    19b4:	20040000 	.word	0x20040000
    19b8:	20000000 	.word	0x20000000
    19bc:	00006950 	.word	0x00006950

000019c0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    19c0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    19c2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    19c6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    19c8:	4804      	ldr	r0, [pc, #16]	; (19dc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    19ca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    19cc:	2320      	movs	r3, #32
    19ce:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    19d0:	4b03      	ldr	r3, [pc, #12]	; (19e0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    19d2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    19d4:	2101      	movs	r1, #1
    19d6:	f003 fddc 	bl	5592 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    19da:	bd08      	pop	{r3, pc}
    19dc:	20000884 	.word	0x20000884
    19e0:	150b0000 	.word	0x150b0000

000019e4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    19e4:	4a08      	ldr	r2, [pc, #32]	; (1a08 <region_init+0x24>)
    19e6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    19ea:	680b      	ldr	r3, [r1, #0]
    19ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    19f0:	4303      	orrs	r3, r0
    19f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    19f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    19fa:	688b      	ldr	r3, [r1, #8]
    19fc:	f043 0301 	orr.w	r3, r3, #1
    1a00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1a04:	4770      	bx	lr
    1a06:	bf00      	nop
    1a08:	e000ed00 	.word	0xe000ed00

00001a0c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1a0c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1a0e:	4c03      	ldr	r4, [pc, #12]	; (1a1c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1a10:	2301      	movs	r3, #1
    1a12:	7822      	ldrb	r2, [r4, #0]
    1a14:	f003 fd91 	bl	553a <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a18:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1a1a:	bd10      	pop	{r4, pc}
    1a1c:	20000ff4 	.word	0x20000ff4

00001a20 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1a20:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1a22:	2300      	movs	r3, #0
    1a24:	4a09      	ldr	r2, [pc, #36]	; (1a4c <mpu_configure_dynamic_mpu_regions+0x2c>)
    1a26:	7812      	ldrb	r2, [r2, #0]
    1a28:	f003 fd87 	bl	553a <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1a2c:	f110 0f16 	cmn.w	r0, #22
    1a30:	d00a      	beq.n	1a48 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1a32:	4603      	mov	r3, r0
    1a34:	e006      	b.n	1a44 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1a36:	4a06      	ldr	r2, [pc, #24]	; (1a50 <mpu_configure_dynamic_mpu_regions+0x30>)
    1a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1a3c:	2100      	movs	r1, #0
    1a3e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1a42:	3301      	adds	r3, #1
    1a44:	2b07      	cmp	r3, #7
    1a46:	ddf6      	ble.n	1a36 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1a48:	bd08      	pop	{r3, pc}
    1a4a:	bf00      	nop
    1a4c:	20000ff4 	.word	0x20000ff4
    1a50:	e000ed00 	.word	0xe000ed00

00001a54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <arm_core_mpu_enable+0x14>)
    1a56:	2205      	movs	r2, #5
    1a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a60:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a64:	4770      	bx	lr
    1a66:	bf00      	nop
    1a68:	e000ed00 	.word	0xe000ed00

00001a6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1a6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1a70:	4b02      	ldr	r3, [pc, #8]	; (1a7c <arm_core_mpu_disable+0x10>)
    1a72:	2200      	movs	r2, #0
    1a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1a78:	4770      	bx	lr
    1a7a:	bf00      	nop
    1a7c:	e000ed00 	.word	0xe000ed00

00001a80 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1a80:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1a82:	4b0e      	ldr	r3, [pc, #56]	; (1abc <z_arm_mpu_init+0x3c>)
    1a84:	681d      	ldr	r5, [r3, #0]
    1a86:	2d08      	cmp	r5, #8
    1a88:	d815      	bhi.n	1ab6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1a8a:	f7ff ffef 	bl	1a6c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1a8e:	2400      	movs	r4, #0
    1a90:	e009      	b.n	1aa6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1a92:	4b0a      	ldr	r3, [pc, #40]	; (1abc <z_arm_mpu_init+0x3c>)
    1a94:	6859      	ldr	r1, [r3, #4]
    1a96:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1a9a:	0093      	lsls	r3, r2, #2
    1a9c:	4419      	add	r1, r3
    1a9e:	4620      	mov	r0, r4
    1aa0:	f7ff ffa0 	bl	19e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1aa4:	3401      	adds	r4, #1
    1aa6:	42a5      	cmp	r5, r4
    1aa8:	d8f3      	bhi.n	1a92 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <z_arm_mpu_init+0x40>)
    1aac:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1aae:	f7ff ffd1 	bl	1a54 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1ab2:	2000      	movs	r0, #0
}
    1ab4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1ab6:	f04f 30ff 	mov.w	r0, #4294967295
    1aba:	e7fb      	b.n	1ab4 <z_arm_mpu_init+0x34>
    1abc:	0000696c 	.word	0x0000696c
    1ac0:	20000ff4 	.word	0x20000ff4

00001ac4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1ac4:	4b01      	ldr	r3, [pc, #4]	; (1acc <__stdout_hook_install+0x8>)
    1ac6:	6018      	str	r0, [r3, #0]
}
    1ac8:	4770      	bx	lr
    1aca:	bf00      	nop
    1acc:	20000028 	.word	0x20000028

00001ad0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    1ad0:	b510      	push	{r4, lr}
	__asm__ volatile(
    1ad2:	f04f 0320 	mov.w	r3, #32
    1ad6:	f3ef 8411 	mrs	r4, BASEPRI
    1ada:	f383 8812 	msr	BASEPRI_MAX, r3
    1ade:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1ae2:	2301      	movs	r3, #1
    1ae4:	4a0c      	ldr	r2, [pc, #48]	; (1b18 <nordicsemi_nrf52_init+0x48>)
    1ae6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1aee:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1af2:	f003 fdd9 	bl	56a8 <nrf52_errata_197>
    1af6:	b120      	cbz	r0, 1b02 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1afc:	2201      	movs	r2, #1
    1afe:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b06:	2201      	movs	r2, #1
    1b08:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1b0c:	f384 8811 	msr	BASEPRI, r4
    1b10:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1b14:	2000      	movs	r0, #0
    1b16:	bd10      	pop	{r4, pc}
    1b18:	4001e000 	.word	0x4001e000

00001b1c <sys_arch_reboot>:
    *p_gpregret = val;
    1b1c:	b2c0      	uxtb	r0, r0
    1b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b22:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1b26:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b2a:	4905      	ldr	r1, [pc, #20]	; (1b40 <sys_arch_reboot+0x24>)
    1b2c:	68ca      	ldr	r2, [r1, #12]
    1b2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b32:	4b04      	ldr	r3, [pc, #16]	; (1b44 <sys_arch_reboot+0x28>)
    1b34:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b36:	60cb      	str	r3, [r1, #12]
    1b38:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1b3c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1b3e:	e7fd      	b.n	1b3c <sys_arch_reboot+0x20>
    1b40:	e000ed00 	.word	0xe000ed00
    1b44:	05fa0004 	.word	0x05fa0004

00001b48 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1b48:	b130      	cbz	r0, 1b58 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    1b4a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1b4c:	0180      	lsls	r0, r0, #6
    1b4e:	4b03      	ldr	r3, [pc, #12]	; (1b5c <arch_busy_wait+0x14>)
    1b50:	f043 0301 	orr.w	r3, r3, #1
    1b54:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1b56:	bd08      	pop	{r3, pc}
    1b58:	4770      	bx	lr
    1b5a:	bf00      	nop
    1b5c:	00006890 	.word	0x00006890

00001b60 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1b60:	4800      	ldr	r0, [pc, #0]	; (1b64 <get_hf_flags+0x4>)
    1b62:	4770      	bx	lr
    1b64:	200008e0 	.word	0x200008e0

00001b68 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1b68:	4b03      	ldr	r3, [pc, #12]	; (1b78 <get_subsys+0x10>)
    1b6a:	1ac0      	subs	r0, r0, r3
    1b6c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1b6e:	4b03      	ldr	r3, [pc, #12]	; (1b7c <get_subsys+0x14>)
    1b70:	fb03 f000 	mul.w	r0, r3, r0
    1b74:	4770      	bx	lr
    1b76:	bf00      	nop
    1b78:	200008a0 	.word	0x200008a0
    1b7c:	b6db6db7 	.word	0xb6db6db7

00001b80 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b80:	b538      	push	{r3, r4, r5, lr}
    1b82:	4605      	mov	r5, r0
    1b84:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b86:	f7ff ffef 	bl	1b68 <get_subsys>
    1b8a:	4601      	mov	r1, r0
    1b8c:	2240      	movs	r2, #64	; 0x40
    1b8e:	4803      	ldr	r0, [pc, #12]	; (1b9c <onoff_stop+0x1c>)
    1b90:	f003 fe21 	bl	57d6 <stop>
    1b94:	4601      	mov	r1, r0
	notify(mgr, res);
    1b96:	4628      	mov	r0, r5
    1b98:	47a0      	blx	r4
}
    1b9a:	bd38      	pop	{r3, r4, r5, pc}
    1b9c:	0000662c 	.word	0x0000662c

00001ba0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ba0:	b530      	push	{r4, r5, lr}
    1ba2:	b083      	sub	sp, #12
    1ba4:	4605      	mov	r5, r0
    1ba6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ba8:	f7ff ffde 	bl	1b68 <get_subsys>
    1bac:	4601      	mov	r1, r0
    1bae:	2340      	movs	r3, #64	; 0x40
    1bb0:	9300      	str	r3, [sp, #0]
    1bb2:	4623      	mov	r3, r4
    1bb4:	4a05      	ldr	r2, [pc, #20]	; (1bcc <onoff_start+0x2c>)
    1bb6:	4806      	ldr	r0, [pc, #24]	; (1bd0 <onoff_start+0x30>)
    1bb8:	f003 fe27 	bl	580a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1bbc:	1e01      	subs	r1, r0, #0
    1bbe:	db01      	blt.n	1bc4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1bc0:	b003      	add	sp, #12
    1bc2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1bc4:	4628      	mov	r0, r5
    1bc6:	47a0      	blx	r4
}
    1bc8:	e7fa      	b.n	1bc0 <onoff_start+0x20>
    1bca:	bf00      	nop
    1bcc:	00005853 	.word	0x00005853
    1bd0:	0000662c 	.word	0x0000662c

00001bd4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1bd4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1bd6:	b110      	cbz	r0, 1bde <clock_event_handler+0xa>
    1bd8:	2801      	cmp	r0, #1
    1bda:	d00d      	beq.n	1bf8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1bdc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bde:	2100      	movs	r1, #0
    1be0:	4808      	ldr	r0, [pc, #32]	; (1c04 <clock_event_handler+0x30>)
    1be2:	f003 fd83 	bl	56ec <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1be6:	6883      	ldr	r3, [r0, #8]
    1be8:	f013 0f07 	tst.w	r3, #7
    1bec:	d1f6      	bne.n	1bdc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bee:	2100      	movs	r1, #0
    1bf0:	4804      	ldr	r0, [pc, #16]	; (1c04 <clock_event_handler+0x30>)
    1bf2:	f003 fdde 	bl	57b2 <clkstarted_handle>
    1bf6:	e7f1      	b.n	1bdc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1bf8:	2101      	movs	r1, #1
    1bfa:	4802      	ldr	r0, [pc, #8]	; (1c04 <clock_event_handler+0x30>)
    1bfc:	f003 fdd9 	bl	57b2 <clkstarted_handle>
}
    1c00:	e7ec      	b.n	1bdc <clock_event_handler+0x8>
    1c02:	bf00      	nop
    1c04:	0000662c 	.word	0x0000662c

00001c08 <generic_hfclk_start>:
{
    1c08:	b510      	push	{r4, lr}
	__asm__ volatile(
    1c0a:	f04f 0320 	mov.w	r3, #32
    1c0e:	f3ef 8411 	mrs	r4, BASEPRI
    1c12:	f383 8812 	msr	BASEPRI_MAX, r3
    1c16:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c1a:	4a13      	ldr	r2, [pc, #76]	; (1c68 <generic_hfclk_start+0x60>)
    1c1c:	6813      	ldr	r3, [r2, #0]
    1c1e:	f043 0302 	orr.w	r3, r3, #2
    1c22:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c24:	f013 0f01 	tst.w	r3, #1
    1c28:	d108      	bne.n	1c3c <generic_hfclk_start+0x34>
	bool already_started = false;
    1c2a:	2300      	movs	r3, #0
	__asm__ volatile(
    1c2c:	f384 8811 	msr	BASEPRI, r4
    1c30:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c34:	b99b      	cbnz	r3, 1c5e <generic_hfclk_start+0x56>
	hfclk_start();
    1c36:	f003 fe14 	bl	5862 <hfclk_start>
}
    1c3a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1c44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c48:	f012 0f01 	tst.w	r2, #1
    1c4c:	d101      	bne.n	1c52 <generic_hfclk_start+0x4a>
	bool already_started = false;
    1c4e:	2300      	movs	r3, #0
    1c50:	e7ec      	b.n	1c2c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1c52:	f7ff ff85 	bl	1b60 <get_hf_flags>
    1c56:	f003 fd99 	bl	578c <set_on_state>
			already_started = true;
    1c5a:	2301      	movs	r3, #1
    1c5c:	e7e6      	b.n	1c2c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1c5e:	2100      	movs	r1, #0
    1c60:	4802      	ldr	r0, [pc, #8]	; (1c6c <generic_hfclk_start+0x64>)
    1c62:	f003 fda6 	bl	57b2 <clkstarted_handle>
		return;
    1c66:	e7e8      	b.n	1c3a <generic_hfclk_start+0x32>
    1c68:	200008f0 	.word	0x200008f0
    1c6c:	0000662c 	.word	0x0000662c

00001c70 <generic_hfclk_stop>:
{
    1c70:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c72:	4b0a      	ldr	r3, [pc, #40]	; (1c9c <generic_hfclk_stop+0x2c>)
    1c74:	f3bf 8f5b 	dmb	ish
    1c78:	e853 2f00 	ldrex	r2, [r3]
    1c7c:	f022 0102 	bic.w	r1, r2, #2
    1c80:	e843 1000 	strex	r0, r1, [r3]
    1c84:	2800      	cmp	r0, #0
    1c86:	d1f7      	bne.n	1c78 <generic_hfclk_stop+0x8>
    1c88:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1c8c:	f012 0f01 	tst.w	r2, #1
    1c90:	d000      	beq.n	1c94 <generic_hfclk_stop+0x24>
}
    1c92:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1c94:	f003 fdef 	bl	5876 <hfclk_stop>
    1c98:	e7fb      	b.n	1c92 <generic_hfclk_stop+0x22>
    1c9a:	bf00      	nop
    1c9c:	200008f0 	.word	0x200008f0

00001ca0 <api_blocking_start>:
{
    1ca0:	b500      	push	{lr}
    1ca2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ca4:	f8cd d000 	str.w	sp, [sp]
    1ca8:	f8cd d004 	str.w	sp, [sp, #4]
    1cac:	2300      	movs	r3, #0
    1cae:	9302      	str	r3, [sp, #8]
    1cb0:	2301      	movs	r3, #1
    1cb2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1cb4:	466b      	mov	r3, sp
    1cb6:	4a07      	ldr	r2, [pc, #28]	; (1cd4 <api_blocking_start+0x34>)
    1cb8:	f003 fdc3 	bl	5842 <api_start>
	if (err < 0) {
    1cbc:	2800      	cmp	r0, #0
    1cbe:	db05      	blt.n	1ccc <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1cc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1cc4:	2300      	movs	r3, #0
    1cc6:	4668      	mov	r0, sp
    1cc8:	f002 fa0c 	bl	40e4 <z_impl_k_sem_take>
}
    1ccc:	b005      	add	sp, #20
    1cce:	f85d fb04 	ldr.w	pc, [sp], #4
    1cd2:	bf00      	nop
    1cd4:	0000588b 	.word	0x0000588b

00001cd8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1cd8:	b570      	push	{r4, r5, r6, lr}
    1cda:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1cdc:	2200      	movs	r2, #0
    1cde:	2101      	movs	r1, #1
    1ce0:	4610      	mov	r0, r2
    1ce2:	f7ff fb81 	bl	13e8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1ce6:	4811      	ldr	r0, [pc, #68]	; (1d2c <clk_init+0x54>)
    1ce8:	f001 f92c 	bl	2f44 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1cec:	4b10      	ldr	r3, [pc, #64]	; (1d30 <clk_init+0x58>)
    1cee:	4298      	cmp	r0, r3
    1cf0:	d119      	bne.n	1d26 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1cf2:	f004 f98f 	bl	6014 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1cf6:	2400      	movs	r4, #0
    1cf8:	2c01      	cmp	r4, #1
    1cfa:	d812      	bhi.n	1d22 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1cfc:	4621      	mov	r1, r4
    1cfe:	4630      	mov	r0, r6
    1d00:	f003 fcf4 	bl	56ec <get_sub_data>
    1d04:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d06:	4621      	mov	r1, r4
    1d08:	4630      	mov	r0, r6
    1d0a:	f003 fcfa 	bl	5702 <get_onoff_manager>
    1d0e:	4909      	ldr	r1, [pc, #36]	; (1d34 <clk_init+0x5c>)
    1d10:	f003 fa7c 	bl	520c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1d14:	2800      	cmp	r0, #0
    1d16:	db05      	blt.n	1d24 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d18:	2301      	movs	r3, #1
    1d1a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1d1c:	441c      	add	r4, r3
    1d1e:	b2e4      	uxtb	r4, r4
    1d20:	e7ea      	b.n	1cf8 <clk_init+0x20>
	}

	return 0;
    1d22:	2000      	movs	r0, #0
}
    1d24:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1d26:	f06f 0004 	mvn.w	r0, #4
    1d2a:	e7fb      	b.n	1d24 <clk_init+0x4c>
    1d2c:	00001bd5 	.word	0x00001bd5
    1d30:	0bad0000 	.word	0x0bad0000
    1d34:	000069bc 	.word	0x000069bc

00001d38 <lfclk_spinwait>:
{
    1d38:	b570      	push	{r4, r5, r6, lr}
    1d3a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1d3c:	2801      	cmp	r0, #1
    1d3e:	d107      	bne.n	1d50 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d44:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1d48:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1d4c:	2b01      	cmp	r3, #1
    1d4e:	d05a      	beq.n	1e06 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d50:	f004 fa7b 	bl	624a <k_is_in_isr>
    1d54:	b928      	cbnz	r0, 1d62 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    1d56:	4b2f      	ldr	r3, [pc, #188]	; (1e14 <lfclk_spinwait+0xdc>)
    1d58:	781b      	ldrb	r3, [r3, #0]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d043      	beq.n	1de6 <lfclk_spinwait+0xae>
    1d5e:	2300      	movs	r3, #0
    1d60:	e000      	b.n	1d64 <lfclk_spinwait+0x2c>
    1d62:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1d64:	461c      	mov	r4, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d03f      	beq.n	1dea <lfclk_spinwait+0xb2>
	__asm__ volatile(
    1d6a:	f04f 0320 	mov.w	r3, #32
    1d6e:	f3ef 8611 	mrs	r6, BASEPRI
    1d72:	f383 8812 	msr	BASEPRI_MAX, r3
    1d76:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1d7a:	b924      	cbnz	r4, 1d86 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    1d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d80:	2202      	movs	r2, #2
    1d82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1d8a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1d8e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1d92:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1d96:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1d9a:	d12d      	bne.n	1df8 <lfclk_spinwait+0xc0>
    return false;
    1d9c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d9e:	b11a      	cbz	r2, 1da8 <lfclk_spinwait+0x70>
    1da0:	2b01      	cmp	r3, #1
    1da2:	d02b      	beq.n	1dfc <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1da4:	2d01      	cmp	r5, #1
    1da6:	d029      	beq.n	1dfc <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1da8:	b30c      	cbz	r4, 1dee <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1daa:	4630      	mov	r0, r6
    1dac:	f7ff faf6 	bl	139c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1db4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1db8:	2b00      	cmp	r3, #0
    1dba:	d1e4      	bne.n	1d86 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d0de      	beq.n	1d86 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dcc:	2200      	movs	r2, #0
    1dce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1dd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1dd6:	2201      	movs	r2, #1
    1dd8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ddc:	490e      	ldr	r1, [pc, #56]	; (1e18 <lfclk_spinwait+0xe0>)
    1dde:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1de2:	609a      	str	r2, [r3, #8]
}
    1de4:	e7cf      	b.n	1d86 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1de6:	2301      	movs	r3, #1
    1de8:	e7bc      	b.n	1d64 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    1dea:	2600      	movs	r6, #0
    1dec:	e7c5      	b.n	1d7a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    1dee:	2021      	movs	r0, #33	; 0x21
    1df0:	2100      	movs	r1, #0
    1df2:	f002 fd4d 	bl	4890 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1df6:	e7db      	b.n	1db0 <lfclk_spinwait+0x78>
                return true;
    1df8:	2201      	movs	r2, #1
    1dfa:	e7d0      	b.n	1d9e <lfclk_spinwait+0x66>
	if (isr_mode) {
    1dfc:	b124      	cbz	r4, 1e08 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    1dfe:	f386 8811 	msr	BASEPRI, r6
    1e02:	f3bf 8f6f 	isb	sy
}
    1e06:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e0c:	2202      	movs	r2, #2
    1e0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1e12:	e7f8      	b.n	1e06 <lfclk_spinwait+0xce>
    1e14:	20000ff5 	.word	0x20000ff5
    1e18:	e000e100 	.word	0xe000e100

00001e1c <z_nrf_clock_control_lf_on>:
{
    1e1c:	b510      	push	{r4, lr}
    1e1e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e20:	4b10      	ldr	r3, [pc, #64]	; (1e64 <z_nrf_clock_control_lf_on+0x48>)
    1e22:	2101      	movs	r1, #1
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	e853 2f00 	ldrex	r2, [r3]
    1e2c:	e843 1000 	strex	r0, r1, [r3]
    1e30:	2800      	cmp	r0, #0
    1e32:	d1f9      	bne.n	1e28 <z_nrf_clock_control_lf_on+0xc>
    1e34:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1e38:	b11a      	cbz	r2, 1e42 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1e3a:	1e63      	subs	r3, r4, #1
    1e3c:	2b01      	cmp	r3, #1
    1e3e:	d90d      	bls.n	1e5c <z_nrf_clock_control_lf_on+0x40>
}
    1e40:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1e42:	4809      	ldr	r0, [pc, #36]	; (1e68 <z_nrf_clock_control_lf_on+0x4c>)
    1e44:	f003 fc5d 	bl	5702 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e48:	4908      	ldr	r1, [pc, #32]	; (1e6c <z_nrf_clock_control_lf_on+0x50>)
    1e4a:	2300      	movs	r3, #0
    1e4c:	604b      	str	r3, [r1, #4]
    1e4e:	608b      	str	r3, [r1, #8]
    1e50:	60cb      	str	r3, [r1, #12]
    1e52:	2301      	movs	r3, #1
    1e54:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1e56:	f003 f9f6 	bl	5246 <onoff_request>
    1e5a:	e7ee      	b.n	1e3a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff ff6b 	bl	1d38 <lfclk_spinwait>
		break;
    1e62:	e7ed      	b.n	1e40 <z_nrf_clock_control_lf_on+0x24>
    1e64:	200008f4 	.word	0x200008f4
    1e68:	0000662c 	.word	0x0000662c
    1e6c:	20000890 	.word	0x20000890

00001e70 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1e70:	b510      	push	{r4, lr}
    1e72:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1e74:	280a      	cmp	r0, #10
    1e76:	d007      	beq.n	1e88 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1e78:	4b07      	ldr	r3, [pc, #28]	; (1e98 <console_out+0x28>)
    1e7a:	6818      	ldr	r0, [r3, #0]
    1e7c:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1e7e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e80:	685b      	ldr	r3, [r3, #4]
    1e82:	4798      	blx	r3

	return c;
}
    1e84:	4620      	mov	r0, r4
    1e86:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1e88:	4b03      	ldr	r3, [pc, #12]	; (1e98 <console_out+0x28>)
    1e8a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1e8c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1e8e:	685b      	ldr	r3, [r3, #4]
    1e90:	210d      	movs	r1, #13
    1e92:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1e94:	e7f0      	b.n	1e78 <console_out+0x8>
    1e96:	bf00      	nop
    1e98:	200008f8 	.word	0x200008f8

00001e9c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1e9c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1e9e:	4c04      	ldr	r4, [pc, #16]	; (1eb0 <uart_console_hook_install+0x14>)
    1ea0:	4620      	mov	r0, r4
    1ea2:	f7ff fe0f 	bl	1ac4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1ea6:	4620      	mov	r0, r4
    1ea8:	f7fe fac8 	bl	43c <__printk_hook_install>
#endif
}
    1eac:	bd10      	pop	{r4, pc}
    1eae:	bf00      	nop
    1eb0:	00001e71 	.word	0x00001e71

00001eb4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1eb4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1eb6:	4806      	ldr	r0, [pc, #24]	; (1ed0 <uart_console_init+0x1c>)
    1eb8:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <uart_console_init+0x20>)
    1eba:	6018      	str	r0, [r3, #0]
    1ebc:	f004 f933 	bl	6126 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1ec0:	b118      	cbz	r0, 1eca <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    1ec2:	f7ff ffeb 	bl	1e9c <uart_console_hook_install>

	return 0;
    1ec6:	2000      	movs	r0, #0
}
    1ec8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1eca:	f06f 0012 	mvn.w	r0, #18
    1ece:	e7fb      	b.n	1ec8 <uart_console_init+0x14>
    1ed0:	0000668c 	.word	0x0000668c
    1ed4:	200008f8 	.word	0x200008f8

00001ed8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ed8:	b128      	cbz	r0, 1ee6 <get_dev+0xe>
    1eda:	2801      	cmp	r0, #1
    1edc:	d101      	bne.n	1ee2 <get_dev+0xa>
    1ede:	4803      	ldr	r0, [pc, #12]	; (1eec <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1ee0:	4770      	bx	lr
	const struct device *dev = NULL;
    1ee2:	2000      	movs	r0, #0
    1ee4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ee6:	4802      	ldr	r0, [pc, #8]	; (1ef0 <get_dev+0x18>)
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	00006644 	.word	0x00006644
    1ef0:	0000665c 	.word	0x0000665c

00001ef4 <gpio_nrfx_pin_interrupt_configure>:
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	460e      	mov	r6, r1
    1efa:	4619      	mov	r1, r3
	return port->config;
    1efc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1efe:	7b1b      	ldrb	r3, [r3, #12]
    1f00:	f006 051f 	and.w	r5, r6, #31
    1f04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f08:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1f0c:	d022      	beq.n	1f54 <gpio_nrfx_pin_interrupt_configure+0x60>
    1f0e:	4607      	mov	r7, r0
    1f10:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f12:	2300      	movs	r3, #0
    1f14:	9302      	str	r3, [sp, #8]
    1f16:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    1f18:	4610      	mov	r0, r2
    1f1a:	f003 fd34 	bl	5986 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f1e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    1f22:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1f24:	6899      	ldr	r1, [r3, #8]
    1f26:	40f1      	lsrs	r1, r6
    1f28:	f011 0f01 	tst.w	r1, #1
    1f2c:	d102      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
    1f2e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1f32:	d014      	beq.n	1f5e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f34:	2300      	movs	r3, #0
    1f36:	aa02      	add	r2, sp, #8
    1f38:	4619      	mov	r1, r3
    1f3a:	4628      	mov	r0, r5
    1f3c:	f001 fa72 	bl	3424 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f40:	4b1b      	ldr	r3, [pc, #108]	; (1fb0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1f42:	4298      	cmp	r0, r3
    1f44:	d131      	bne.n	1faa <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f46:	2101      	movs	r1, #1
    1f48:	4628      	mov	r0, r5
    1f4a:	f001 fc49 	bl	37e0 <nrfx_gpiote_trigger_enable>
	return 0;
    1f4e:	2000      	movs	r0, #0
}
    1f50:	b005      	add	sp, #20
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1f54:	4628      	mov	r0, r5
    1f56:	f001 fca7 	bl	38a8 <nrfx_gpiote_trigger_disable>
		return 0;
    1f5a:	2000      	movs	r0, #0
    1f5c:	e7f8      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f5e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1f62:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1f64:	2a01      	cmp	r2, #1
    1f66:	d014      	beq.n	1f92 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    1f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f6c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f74:	f013 0f01 	tst.w	r3, #1
    1f78:	d1dc      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f7a:	f10d 0107 	add.w	r1, sp, #7
    1f7e:	4628      	mov	r0, r5
    1f80:	f001 fbd2 	bl	3728 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1f84:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1f86:	4298      	cmp	r0, r3
    1f88:	d005      	beq.n	1f96 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    1f8a:	f10d 0307 	add.w	r3, sp, #7
    1f8e:	9303      	str	r3, [sp, #12]
    1f90:	e7d0      	b.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1f92:	4a09      	ldr	r2, [pc, #36]	; (1fb8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1f94:	e7ea      	b.n	1f6c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    1f96:	f10d 0007 	add.w	r0, sp, #7
    1f9a:	f001 fc19 	bl	37d0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1f9e:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1fa0:	4298      	cmp	r0, r3
    1fa2:	d0f2      	beq.n	1f8a <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    1fa4:	f06f 000b 	mvn.w	r0, #11
    1fa8:	e7d2      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    1faa:	f06f 0004 	mvn.w	r0, #4
    1fae:	e7cf      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1fb0:	0bad0000 	.word	0x0bad0000
    1fb4:	0bad0004 	.word	0x0bad0004
    1fb8:	50000300 	.word	0x50000300

00001fbc <pin_uninit>:
{
    1fbc:	b530      	push	{r4, r5, lr}
    1fbe:	b083      	sub	sp, #12
    1fc0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    1fc2:	f10d 0107 	add.w	r1, sp, #7
    1fc6:	f001 fbaf 	bl	3728 <nrfx_gpiote_channel_get>
    1fca:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    1fcc:	4620      	mov	r0, r4
    1fce:	f001 fc9b 	bl	3908 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    1fd2:	4b0b      	ldr	r3, [pc, #44]	; (2000 <pin_uninit+0x44>)
    1fd4:	4298      	cmp	r0, r3
    1fd6:	d10f      	bne.n	1ff8 <pin_uninit+0x3c>
	if (free_ch) {
    1fd8:	429d      	cmp	r5, r3
    1fda:	d005      	beq.n	1fe8 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1fdc:	4b08      	ldr	r3, [pc, #32]	; (2000 <pin_uninit+0x44>)
    1fde:	4298      	cmp	r0, r3
    1fe0:	d107      	bne.n	1ff2 <pin_uninit+0x36>
    1fe2:	2000      	movs	r0, #0
}
    1fe4:	b003      	add	sp, #12
    1fe6:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    1fe8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1fec:	f001 fbe8 	bl	37c0 <nrfx_gpiote_channel_free>
    1ff0:	e7f4      	b.n	1fdc <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1ff2:	f06f 0004 	mvn.w	r0, #4
    1ff6:	e7f5      	b.n	1fe4 <pin_uninit+0x28>
		return -EIO;
    1ff8:	f06f 0004 	mvn.w	r0, #4
    1ffc:	e7f2      	b.n	1fe4 <pin_uninit+0x28>
    1ffe:	bf00      	nop
    2000:	0bad0000 	.word	0x0bad0000

00002004 <gpio_nrfx_pin_configure>:
{
    2004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2008:	b087      	sub	sp, #28
	return port->config;
    200a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    200e:	f898 300c 	ldrb.w	r3, [r8, #12]
    2012:	f001 051f 	and.w	r5, r1, #31
    2016:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    201a:	2a00      	cmp	r2, #0
    201c:	d044      	beq.n	20a8 <gpio_nrfx_pin_configure+0xa4>
    201e:	460c      	mov	r4, r1
    2020:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2022:	2600      	movs	r6, #0
    2024:	9603      	str	r6, [sp, #12]
    2026:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2028:	f10d 0117 	add.w	r1, sp, #23
    202c:	4620      	mov	r0, r4
    202e:	f001 fb7b 	bl	3728 <nrfx_gpiote_channel_get>
    2032:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2034:	4633      	mov	r3, r6
    2036:	aa03      	add	r2, sp, #12
    2038:	4631      	mov	r1, r6
    203a:	4628      	mov	r0, r5
    203c:	f001 f9f2 	bl	3424 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2040:	4b30      	ldr	r3, [pc, #192]	; (2104 <gpio_nrfx_pin_configure+0x100>)
    2042:	4298      	cmp	r0, r3
    2044:	d15b      	bne.n	20fe <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    2046:	4599      	cmp	r9, r3
    2048:	d036      	beq.n	20b8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    204a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    204e:	d043      	beq.n	20d8 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2050:	f10d 0103 	add.w	r1, sp, #3
    2054:	4638      	mov	r0, r7
    2056:	f003 fc1d 	bl	5894 <get_drive>
		if (rv != 0) {
    205a:	4606      	mov	r6, r0
    205c:	bb40      	cbnz	r0, 20b0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    205e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2062:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2066:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    206a:	bf0c      	ite	eq
    206c:	2301      	moveq	r3, #1
    206e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2070:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2074:	4638      	mov	r0, r7
    2076:	f003 fc53 	bl	5920 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    207a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    207e:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    2082:	d01e      	beq.n	20c2 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2084:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2088:	2101      	movs	r1, #1
    208a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    208e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2092:	2200      	movs	r2, #0
    2094:	a901      	add	r1, sp, #4
    2096:	4628      	mov	r0, r5
    2098:	f001 fa7c 	bl	3594 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    209c:	4b19      	ldr	r3, [pc, #100]	; (2104 <gpio_nrfx_pin_configure+0x100>)
    209e:	4298      	cmp	r0, r3
    20a0:	d006      	beq.n	20b0 <gpio_nrfx_pin_configure+0xac>
    20a2:	f06f 0615 	mvn.w	r6, #21
    20a6:	e003      	b.n	20b0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    20a8:	4628      	mov	r0, r5
    20aa:	f7ff ff87 	bl	1fbc <pin_uninit>
    20ae:	4606      	mov	r6, r0
}
    20b0:	4630      	mov	r0, r6
    20b2:	b007      	add	sp, #28
    20b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    20b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    20bc:	f001 fb80 	bl	37c0 <nrfx_gpiote_channel_free>
    20c0:	e7c3      	b.n	204a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    20c2:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    20c6:	d0e4      	beq.n	2092 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    20c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    20cc:	2301      	movs	r3, #1
    20ce:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    20d2:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    20d6:	e7dc      	b.n	2092 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    20d8:	4638      	mov	r0, r7
    20da:	f003 fc21 	bl	5920 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    20de:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    20e2:	2300      	movs	r3, #0
    20e4:	461a      	mov	r2, r3
    20e6:	a902      	add	r1, sp, #8
    20e8:	4628      	mov	r0, r5
    20ea:	f001 f99b 	bl	3424 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    20ee:	4b05      	ldr	r3, [pc, #20]	; (2104 <gpio_nrfx_pin_configure+0x100>)
    20f0:	4298      	cmp	r0, r3
    20f2:	d101      	bne.n	20f8 <gpio_nrfx_pin_configure+0xf4>
    20f4:	2600      	movs	r6, #0
    20f6:	e7db      	b.n	20b0 <gpio_nrfx_pin_configure+0xac>
    20f8:	f06f 0615 	mvn.w	r6, #21
    20fc:	e7d8      	b.n	20b0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    20fe:	f06f 0615 	mvn.w	r6, #21
    2102:	e7d5      	b.n	20b0 <gpio_nrfx_pin_configure+0xac>
    2104:	0bad0000 	.word	0x0bad0000

00002108 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2108:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    210a:	f001 fb4f 	bl	37ac <nrfx_gpiote_is_init>
    210e:	b108      	cbz	r0, 2114 <gpio_nrfx_init+0xc>
		return 0;
    2110:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2112:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2114:	f001 fb20 	bl	3758 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2118:	4b08      	ldr	r3, [pc, #32]	; (213c <gpio_nrfx_init+0x34>)
    211a:	4298      	cmp	r0, r3
    211c:	d10a      	bne.n	2134 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    211e:	2100      	movs	r1, #0
    2120:	4807      	ldr	r0, [pc, #28]	; (2140 <gpio_nrfx_init+0x38>)
    2122:	f001 fafb 	bl	371c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2126:	2200      	movs	r2, #0
    2128:	2105      	movs	r1, #5
    212a:	2006      	movs	r0, #6
    212c:	f7ff f95c 	bl	13e8 <z_arm_irq_priority_set>
	return 0;
    2130:	2000      	movs	r0, #0
    2132:	e7ee      	b.n	2112 <gpio_nrfx_init+0xa>
		return -EIO;
    2134:	f06f 0004 	mvn.w	r0, #4
    2138:	e7eb      	b.n	2112 <gpio_nrfx_init+0xa>
    213a:	bf00      	nop
    213c:	0bad0000 	.word	0x0bad0000
    2140:	00005a25 	.word	0x00005a25

00002144 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2144:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2146:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2148:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    214c:	d06f      	beq.n	222e <baudrate_set+0xea>
    214e:	d83a      	bhi.n	21c6 <baudrate_set+0x82>
    2150:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2154:	d06e      	beq.n	2234 <baudrate_set+0xf0>
    2156:	d90a      	bls.n	216e <baudrate_set+0x2a>
    2158:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    215c:	d075      	beq.n	224a <baudrate_set+0x106>
    215e:	d924      	bls.n	21aa <baudrate_set+0x66>
    2160:	f647 2312 	movw	r3, #31250	; 0x7a12
    2164:	4299      	cmp	r1, r3
    2166:	d12b      	bne.n	21c0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2168:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    216c:	e013      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    216e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2172:	d061      	beq.n	2238 <baudrate_set+0xf4>
    2174:	d907      	bls.n	2186 <baudrate_set+0x42>
    2176:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    217a:	d063      	beq.n	2244 <baudrate_set+0x100>
    217c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2180:	d110      	bne.n	21a4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2182:	4b3c      	ldr	r3, [pc, #240]	; (2274 <baudrate_set+0x130>)
    2184:	e007      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    2186:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    218a:	d058      	beq.n	223e <baudrate_set+0xfa>
    218c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2190:	d105      	bne.n	219e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2192:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2196:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    219a:	2000      	movs	r0, #0
    219c:	4770      	bx	lr
	switch (baudrate) {
    219e:	f06f 0015 	mvn.w	r0, #21
    21a2:	4770      	bx	lr
    21a4:	f06f 0015 	mvn.w	r0, #21
    21a8:	4770      	bx	lr
    21aa:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    21ae:	d04e      	beq.n	224e <baudrate_set+0x10a>
    21b0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    21b4:	d101      	bne.n	21ba <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    21b6:	4b30      	ldr	r3, [pc, #192]	; (2278 <baudrate_set+0x134>)
    21b8:	e7ed      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    21ba:	f06f 0015 	mvn.w	r0, #21
    21be:	4770      	bx	lr
    21c0:	f06f 0015 	mvn.w	r0, #21
    21c4:	4770      	bx	lr
    21c6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    21ca:	d042      	beq.n	2252 <baudrate_set+0x10e>
    21cc:	d909      	bls.n	21e2 <baudrate_set+0x9e>
    21ce:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    21d2:	d046      	beq.n	2262 <baudrate_set+0x11e>
    21d4:	d91f      	bls.n	2216 <baudrate_set+0xd2>
    21d6:	4b29      	ldr	r3, [pc, #164]	; (227c <baudrate_set+0x138>)
    21d8:	4299      	cmp	r1, r3
    21da:	d148      	bne.n	226e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    21dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    21e0:	e7d9      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    21e2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    21e6:	d037      	beq.n	2258 <baudrate_set+0x114>
    21e8:	d905      	bls.n	21f6 <baudrate_set+0xb2>
    21ea:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    21ee:	d10f      	bne.n	2210 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    21f0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    21f4:	e7cf      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    21f6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    21fa:	4299      	cmp	r1, r3
    21fc:	d02e      	beq.n	225c <baudrate_set+0x118>
    21fe:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2202:	d102      	bne.n	220a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2204:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2208:	e7c5      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    220a:	f06f 0015 	mvn.w	r0, #21
    220e:	4770      	bx	lr
    2210:	f06f 0015 	mvn.w	r0, #21
    2214:	4770      	bx	lr
    2216:	4b1a      	ldr	r3, [pc, #104]	; (2280 <baudrate_set+0x13c>)
    2218:	4299      	cmp	r1, r3
    221a:	d025      	beq.n	2268 <baudrate_set+0x124>
    221c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2220:	d102      	bne.n	2228 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2222:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2226:	e7b6      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    2228:	f06f 0015 	mvn.w	r0, #21
    222c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    222e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2232:	e7b0      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2234:	4b13      	ldr	r3, [pc, #76]	; (2284 <baudrate_set+0x140>)
    2236:	e7ae      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2238:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    223c:	e7ab      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    223e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2242:	e7a8      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2244:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2248:	e7a5      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    224a:	4b0f      	ldr	r3, [pc, #60]	; (2288 <baudrate_set+0x144>)
    224c:	e7a3      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    224e:	4b0f      	ldr	r3, [pc, #60]	; (228c <baudrate_set+0x148>)
    2250:	e7a1      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2252:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2256:	e79e      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2258:	4b0d      	ldr	r3, [pc, #52]	; (2290 <baudrate_set+0x14c>)
    225a:	e79c      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    225c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2260:	e799      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2262:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2266:	e796      	b.n	2196 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2268:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    226c:	e793      	b.n	2196 <baudrate_set+0x52>
	switch (baudrate) {
    226e:	f06f 0015 	mvn.w	r0, #21
}
    2272:	4770      	bx	lr
    2274:	0013b000 	.word	0x0013b000
    2278:	004ea000 	.word	0x004ea000
    227c:	000f4240 	.word	0x000f4240
    2280:	0003d090 	.word	0x0003d090
    2284:	00275000 	.word	0x00275000
    2288:	0075c000 	.word	0x0075c000
    228c:	003af000 	.word	0x003af000
    2290:	013a9000 	.word	0x013a9000

00002294 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2298:	4605      	mov	r5, r0
    229a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    229c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    22a0:	f003 ffd3 	bl	624a <k_is_in_isr>
    22a4:	b920      	cbnz	r0, 22b0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    22a6:	4b16      	ldr	r3, [pc, #88]	; (2300 <uarte_nrfx_poll_out+0x6c>)
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	b143      	cbz	r3, 22be <uarte_nrfx_poll_out+0x2a>
    22ac:	2300      	movs	r3, #0
    22ae:	e000      	b.n	22b2 <uarte_nrfx_poll_out+0x1e>
    22b0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    22b2:	b953      	cbnz	r3, 22ca <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    22b4:	4628      	mov	r0, r5
    22b6:	f003 fccc 	bl	5c52 <wait_tx_ready>
    22ba:	4606      	mov	r6, r0
    22bc:	e013      	b.n	22e6 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    22be:	2301      	movs	r3, #1
    22c0:	e7f7      	b.n	22b2 <uarte_nrfx_poll_out+0x1e>
    22c2:	f384 8811 	msr	BASEPRI, r4
    22c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    22ca:	f04f 0320 	mov.w	r3, #32
    22ce:	f3ef 8411 	mrs	r4, BASEPRI
    22d2:	f383 8812 	msr	BASEPRI_MAX, r3
    22d6:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    22da:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    22dc:	4628      	mov	r0, r5
    22de:	f003 fc6a 	bl	5bb6 <is_tx_ready>
    22e2:	2800      	cmp	r0, #0
    22e4:	d0ed      	beq.n	22c2 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    22e6:	4641      	mov	r1, r8
    22e8:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    22ec:	2201      	movs	r2, #1
    22ee:	4628      	mov	r0, r5
    22f0:	f003 fc7b 	bl	5bea <tx_start>
	__asm__ volatile(
    22f4:	f386 8811 	msr	BASEPRI, r6
    22f8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    22fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2300:	20000ff5 	.word	0x20000ff5

00002304 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2304:	b538      	push	{r3, r4, r5, lr}
    2306:	4604      	mov	r4, r0
    2308:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    230a:	f101 0012 	add.w	r0, r1, #18
    230e:	f001 fb4f 	bl	39b0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2312:	4b0c      	ldr	r3, [pc, #48]	; (2344 <endtx_stoptx_ppi_init+0x40>)
    2314:	4298      	cmp	r0, r3
    2316:	d111      	bne.n	233c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2318:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    231a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    231e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2320:	4a09      	ldr	r2, [pc, #36]	; (2348 <endtx_stoptx_ppi_init+0x44>)
    2322:	33a2      	adds	r3, #162	; 0xa2
    2324:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    232c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    232e:	7ca9      	ldrb	r1, [r5, #18]
    2330:	2301      	movs	r3, #1
    2332:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    2334:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2338:	2000      	movs	r0, #0
}
    233a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    233c:	f06f 0004 	mvn.w	r0, #4
    2340:	e7fb      	b.n	233a <endtx_stoptx_ppi_init+0x36>
    2342:	bf00      	nop
    2344:	0bad0000 	.word	0x0bad0000
    2348:	4001f000 	.word	0x4001f000

0000234c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    234c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2350:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2354:	4b01      	ldr	r3, [pc, #4]	; (235c <set_comparator+0x10>)
    2356:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    235a:	4770      	bx	lr
    235c:	40011000 	.word	0x40011000

00002360 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2360:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2364:	4b01      	ldr	r3, [pc, #4]	; (236c <get_comparator+0xc>)
    2366:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    236a:	4770      	bx	lr
    236c:	40011000 	.word	0x40011000

00002370 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2374:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2376:	4a02      	ldr	r2, [pc, #8]	; (2380 <event_enable+0x10>)
    2378:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    237c:	4770      	bx	lr
    237e:	bf00      	nop
    2380:	40011000 	.word	0x40011000

00002384 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2388:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    238a:	4a02      	ldr	r2, [pc, #8]	; (2394 <event_disable+0x10>)
    238c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2390:	4770      	bx	lr
    2392:	bf00      	nop
    2394:	40011000 	.word	0x40011000

00002398 <counter>:
     return p_reg->COUNTER;
    2398:	4b01      	ldr	r3, [pc, #4]	; (23a0 <counter+0x8>)
    239a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    239e:	4770      	bx	lr
    23a0:	40011000 	.word	0x40011000

000023a4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    23a4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    23a6:	2301      	movs	r3, #1
    23a8:	4083      	lsls	r3, r0
    23aa:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23ae:	4a10      	ldr	r2, [pc, #64]	; (23f0 <compare_int_lock+0x4c>)
    23b0:	f3bf 8f5b 	dmb	ish
    23b4:	e852 1f00 	ldrex	r1, [r2]
    23b8:	ea01 0e0c 	and.w	lr, r1, ip
    23bc:	e842 e400 	strex	r4, lr, [r2]
    23c0:	2c00      	cmp	r4, #0
    23c2:	d1f7      	bne.n	23b4 <compare_int_lock+0x10>
    23c4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    23c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    23cc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    23d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    23d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    23d8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    23dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23e0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    23e4:	420b      	tst	r3, r1
}
    23e6:	bf14      	ite	ne
    23e8:	2001      	movne	r0, #1
    23ea:	2000      	moveq	r0, #0
    23ec:	bd10      	pop	{r4, pc}
    23ee:	bf00      	nop
    23f0:	20000918 	.word	0x20000918

000023f4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    23f8:	f003 fce5 	bl	5dc6 <full_int_lock>
    23fc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    23fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2402:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2404:	4a17      	ldr	r2, [pc, #92]	; (2464 <channel_processing_check_and_clear+0x70>)
    2406:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    240a:	4213      	tst	r3, r2
    240c:	d105      	bne.n	241a <channel_processing_check_and_clear+0x26>
	bool result = false;
    240e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2410:	4628      	mov	r0, r5
    2412:	f003 fce1 	bl	5dd8 <full_int_unlock>

	return result;
}
    2416:	4630      	mov	r0, r6
    2418:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    241a:	2301      	movs	r3, #1
    241c:	40a3      	lsls	r3, r4
    241e:	43db      	mvns	r3, r3
    2420:	4a11      	ldr	r2, [pc, #68]	; (2468 <channel_processing_check_and_clear+0x74>)
    2422:	f3bf 8f5b 	dmb	ish
    2426:	e852 1f00 	ldrex	r1, [r2]
    242a:	ea01 0003 	and.w	r0, r1, r3
    242e:	e842 0600 	strex	r6, r0, [r2]
    2432:	2e00      	cmp	r6, #0
    2434:	d1f7      	bne.n	2426 <channel_processing_check_and_clear+0x32>
    2436:	f3bf 8f5b 	dmb	ish
    243a:	b959      	cbnz	r1, 2454 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    243c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    2440:	009b      	lsls	r3, r3, #2
    2442:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2448:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    244c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    244e:	b113      	cbz	r3, 2456 <channel_processing_check_and_clear+0x62>
    2450:	2301      	movs	r3, #1
    2452:	e000      	b.n	2456 <channel_processing_check_and_clear+0x62>
    2454:	2301      	movs	r3, #1
		if (result) {
    2456:	461e      	mov	r6, r3
    2458:	2b00      	cmp	r3, #0
    245a:	d0d9      	beq.n	2410 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    245c:	4620      	mov	r0, r4
    245e:	f003 fca3 	bl	5da8 <event_clear>
    2462:	e7d5      	b.n	2410 <channel_processing_check_and_clear+0x1c>
    2464:	40011000 	.word	0x40011000
    2468:	20000914 	.word	0x20000914

0000246c <compare_int_unlock>:
	if (key) {
    246c:	b901      	cbnz	r1, 2470 <compare_int_unlock+0x4>
}
    246e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2470:	2301      	movs	r3, #1
    2472:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2474:	4a11      	ldr	r2, [pc, #68]	; (24bc <compare_int_unlock+0x50>)
    2476:	f3bf 8f5b 	dmb	ish
    247a:	e852 1f00 	ldrex	r1, [r2]
    247e:	4319      	orrs	r1, r3
    2480:	e842 1c00 	strex	ip, r1, [r2]
    2484:	f1bc 0f00 	cmp.w	ip, #0
    2488:	d1f7      	bne.n	247a <compare_int_unlock+0xe>
    248a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    248e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2492:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2494:	4a0a      	ldr	r2, [pc, #40]	; (24c0 <compare_int_unlock+0x54>)
    2496:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    249a:	f3bf 8f5b 	dmb	ish
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <compare_int_unlock+0x58>)
    24a0:	681b      	ldr	r3, [r3, #0]
    24a2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    24a6:	fa23 f000 	lsr.w	r0, r3, r0
    24aa:	f010 0f01 	tst.w	r0, #1
    24ae:	d0de      	beq.n	246e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24b0:	4b05      	ldr	r3, [pc, #20]	; (24c8 <compare_int_unlock+0x5c>)
    24b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    24ba:	e7d8      	b.n	246e <compare_int_unlock+0x2>
    24bc:	20000918 	.word	0x20000918
    24c0:	40011000 	.word	0x40011000
    24c4:	20000914 	.word	0x20000914
    24c8:	e000e100 	.word	0xe000e100

000024cc <sys_clock_timeout_handler>:
{
    24cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24d0:	4607      	mov	r7, r0
    24d2:	4614      	mov	r4, r2
    24d4:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    24d6:	4610      	mov	r0, r2
    24d8:	4619      	mov	r1, r3
    24da:	f003 fc71 	bl	5dc0 <absolute_time_to_cc>
    24de:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    24e0:	4b15      	ldr	r3, [pc, #84]	; (2538 <sys_clock_timeout_handler+0x6c>)
    24e2:	681a      	ldr	r2, [r3, #0]
    24e4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    24e6:	601c      	str	r4, [r3, #0]
    24e8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    24ea:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    24ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    24f2:	d309      	bcc.n	2508 <sys_clock_timeout_handler+0x3c>
	return false;
    24f4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    24f6:	f002 fb13 	bl	4b20 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    24fa:	4638      	mov	r0, r7
    24fc:	f7ff ff30 	bl	2360 <get_comparator>
    2500:	42a8      	cmp	r0, r5
    2502:	d00e      	beq.n	2522 <sys_clock_timeout_handler+0x56>
}
    2504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2508:	4b0c      	ldr	r3, [pc, #48]	; (253c <sys_clock_timeout_handler+0x70>)
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	0a1a      	lsrs	r2, r3, #8
    250e:	061b      	lsls	r3, r3, #24
    2510:	eb15 0803 	adds.w	r8, r5, r3
    2514:	f142 0900 	adc.w	r9, r2, #0
    2518:	4b09      	ldr	r3, [pc, #36]	; (2540 <sys_clock_timeout_handler+0x74>)
    251a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    251e:	2401      	movs	r4, #1
    2520:	e7e9      	b.n	24f6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2522:	b11c      	cbz	r4, 252c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2524:	4638      	mov	r0, r7
    2526:	f7ff ff23 	bl	2370 <event_enable>
}
    252a:	e7eb      	b.n	2504 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    252c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2530:	4638      	mov	r0, r7
    2532:	f7ff ff0b 	bl	234c <set_comparator>
    2536:	e7f5      	b.n	2524 <sys_clock_timeout_handler+0x58>
    2538:	200001c0 	.word	0x200001c0
    253c:	2000091c 	.word	0x2000091c
    2540:	200001a8 	.word	0x200001a8

00002544 <z_nrf_rtc_timer_read>:
{
    2544:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2546:	4b0d      	ldr	r3, [pc, #52]	; (257c <z_nrf_rtc_timer_read+0x38>)
    2548:	681c      	ldr	r4, [r3, #0]
    254a:	0a25      	lsrs	r5, r4, #8
    254c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    254e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2552:	f7ff ff21 	bl	2398 <counter>
    2556:	4603      	mov	r3, r0
	val += cntr;
    2558:	1900      	adds	r0, r0, r4
    255a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    255e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2562:	d20a      	bcs.n	257a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2564:	4b06      	ldr	r3, [pc, #24]	; (2580 <z_nrf_rtc_timer_read+0x3c>)
    2566:	e9d3 2300 	ldrd	r2, r3, [r3]
    256a:	4290      	cmp	r0, r2
    256c:	eb71 0303 	sbcs.w	r3, r1, r3
    2570:	d203      	bcs.n	257a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2572:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2576:	f141 0100 	adc.w	r1, r1, #0
}
    257a:	bd38      	pop	{r3, r4, r5, pc}
    257c:	2000091c 	.word	0x2000091c
    2580:	200001a8 	.word	0x200001a8

00002584 <compare_set_nolocks>:
{
    2584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2586:	4606      	mov	r6, r0
    2588:	4614      	mov	r4, r2
    258a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    258c:	4610      	mov	r0, r2
    258e:	4619      	mov	r1, r3
    2590:	f003 fc16 	bl	5dc0 <absolute_time_to_cc>
    2594:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2596:	f7ff ffd5 	bl	2544 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    259a:	42a0      	cmp	r0, r4
    259c:	eb71 0305 	sbcs.w	r3, r1, r5
    25a0:	d21d      	bcs.n	25de <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    25a2:	1a23      	subs	r3, r4, r0
    25a4:	eb65 0101 	sbc.w	r1, r5, r1
    25a8:	4a1b      	ldr	r2, [pc, #108]	; (2618 <compare_set_nolocks+0x94>)
    25aa:	4293      	cmp	r3, r2
    25ac:	f171 0300 	sbcs.w	r3, r1, #0
    25b0:	d22f      	bcs.n	2612 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    25b2:	4b1a      	ldr	r3, [pc, #104]	; (261c <compare_set_nolocks+0x98>)
    25b4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    25b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    25bc:	42ab      	cmp	r3, r5
    25be:	bf08      	it	eq
    25c0:	42a2      	cmpeq	r2, r4
    25c2:	d01a      	beq.n	25fa <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    25c4:	4639      	mov	r1, r7
    25c6:	4630      	mov	r0, r6
    25c8:	f003 fc0b 	bl	5de2 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    25cc:	4639      	mov	r1, r7
    25ce:	f003 fbe7 	bl	5da0 <counter_sub>
    25d2:	1900      	adds	r0, r0, r4
    25d4:	f145 0300 	adc.w	r3, r5, #0
    25d8:	4604      	mov	r4, r0
    25da:	461d      	mov	r5, r3
    25dc:	e00d      	b.n	25fa <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    25de:	2301      	movs	r3, #1
    25e0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    25e2:	4a0f      	ldr	r2, [pc, #60]	; (2620 <compare_set_nolocks+0x9c>)
    25e4:	f3bf 8f5b 	dmb	ish
    25e8:	e852 1f00 	ldrex	r1, [r2]
    25ec:	4319      	orrs	r1, r3
    25ee:	e842 1000 	strex	r0, r1, [r2]
    25f2:	2800      	cmp	r0, #0
    25f4:	d1f8      	bne.n	25e8 <compare_set_nolocks+0x64>
    25f6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    25fa:	4b08      	ldr	r3, [pc, #32]	; (261c <compare_set_nolocks+0x98>)
    25fc:	0132      	lsls	r2, r6, #4
    25fe:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2602:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2606:	9906      	ldr	r1, [sp, #24]
    2608:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    260a:	9b07      	ldr	r3, [sp, #28]
    260c:	6073      	str	r3, [r6, #4]
	return ret;
    260e:	2000      	movs	r0, #0
}
    2610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2612:	f06f 0015 	mvn.w	r0, #21
    2616:	e7fb      	b.n	2610 <compare_set_nolocks+0x8c>
    2618:	01000001 	.word	0x01000001
    261c:	200001b0 	.word	0x200001b0
    2620:	20000914 	.word	0x20000914

00002624 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2624:	b530      	push	{r4, r5, lr}
    2626:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2628:	2300      	movs	r3, #0
    262a:	4a1d      	ldr	r2, [pc, #116]	; (26a0 <sys_clock_driver_init+0x7c>)
    262c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2630:	2b00      	cmp	r3, #0
    2632:	dd24      	ble.n	267e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2634:	4c1a      	ldr	r4, [pc, #104]	; (26a0 <sys_clock_driver_init+0x7c>)
    2636:	2502      	movs	r5, #2
    2638:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    263c:	4b19      	ldr	r3, [pc, #100]	; (26a4 <sys_clock_driver_init+0x80>)
    263e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2642:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2646:	2200      	movs	r2, #0
    2648:	2101      	movs	r1, #1
    264a:	2011      	movs	r0, #17
    264c:	f7fe fecc 	bl	13e8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2650:	2011      	movs	r0, #17
    2652:	f7fe fead 	bl	13b0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2656:	2301      	movs	r3, #1
    2658:	60a3      	str	r3, [r4, #8]
    265a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    265c:	4a12      	ldr	r2, [pc, #72]	; (26a8 <sys_clock_driver_init+0x84>)
    265e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2660:	2400      	movs	r4, #0
    2662:	9401      	str	r4, [sp, #4]
    2664:	4b11      	ldr	r3, [pc, #68]	; (26ac <sys_clock_driver_init+0x88>)
    2666:	9300      	str	r3, [sp, #0]
    2668:	4a11      	ldr	r2, [pc, #68]	; (26b0 <sys_clock_driver_init+0x8c>)
    266a:	2300      	movs	r3, #0
    266c:	4620      	mov	r0, r4
    266e:	f003 fbf3 	bl	5e58 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2672:	4628      	mov	r0, r5
    2674:	f7ff fbd2 	bl	1e1c <z_nrf_clock_control_lf_on>

	return 0;
}
    2678:	4620      	mov	r0, r4
    267a:	b003      	add	sp, #12
    267c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    267e:	4a0d      	ldr	r2, [pc, #52]	; (26b4 <sys_clock_driver_init+0x90>)
    2680:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2684:	f04f 30ff 	mov.w	r0, #4294967295
    2688:	f04f 31ff 	mov.w	r1, #4294967295
    268c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2694:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2696:	4902      	ldr	r1, [pc, #8]	; (26a0 <sys_clock_driver_init+0x7c>)
    2698:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    269c:	3301      	adds	r3, #1
    269e:	e7c7      	b.n	2630 <sys_clock_driver_init+0xc>
    26a0:	40011000 	.word	0x40011000
    26a4:	e000e100 	.word	0xe000e100
    26a8:	20000918 	.word	0x20000918
    26ac:	000024cd 	.word	0x000024cd
    26b0:	007fffff 	.word	0x007fffff
    26b4:	200001b0 	.word	0x200001b0

000026b8 <process_channel>:
{
    26b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26bc:	b082      	sub	sp, #8
    26be:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    26c0:	f7ff fe98 	bl	23f4 <channel_processing_check_and_clear>
    26c4:	b910      	cbnz	r0, 26cc <process_channel+0x14>
}
    26c6:	b002      	add	sp, #8
    26c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    26cc:	f7ff ff3a 	bl	2544 <z_nrf_rtc_timer_read>
    26d0:	4682      	mov	sl, r0
    26d2:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    26d4:	f003 fb77 	bl	5dc6 <full_int_lock>
    26d8:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    26da:	4b13      	ldr	r3, [pc, #76]	; (2728 <process_channel+0x70>)
    26dc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    26e0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    26e4:	45c2      	cmp	sl, r8
    26e6:	eb76 0309 	sbcs.w	r3, r6, r9
    26ea:	d20b      	bcs.n	2704 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    26ec:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    26ee:	4628      	mov	r0, r5
    26f0:	f003 fb72 	bl	5dd8 <full_int_unlock>
		if (handler) {
    26f4:	2e00      	cmp	r6, #0
    26f6:	d0e6      	beq.n	26c6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    26f8:	9700      	str	r7, [sp, #0]
    26fa:	4642      	mov	r2, r8
    26fc:	464b      	mov	r3, r9
    26fe:	4620      	mov	r0, r4
    2700:	47b0      	blx	r6
}
    2702:	e7e0      	b.n	26c6 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2704:	4a08      	ldr	r2, [pc, #32]	; (2728 <process_channel+0x70>)
    2706:	0123      	lsls	r3, r4, #4
    2708:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    270c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    270e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2710:	2000      	movs	r0, #0
    2712:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2714:	f04f 32ff 	mov.w	r2, #4294967295
    2718:	f04f 33ff 	mov.w	r3, #4294967295
    271c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2720:	4620      	mov	r0, r4
    2722:	f7ff fe2f 	bl	2384 <event_disable>
    2726:	e7e2      	b.n	26ee <process_channel+0x36>
    2728:	200001b0 	.word	0x200001b0

0000272c <rtc_nrf_isr>:
{
    272c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    272e:	4b0e      	ldr	r3, [pc, #56]	; (2768 <rtc_nrf_isr+0x3c>)
    2730:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2734:	f013 0f02 	tst.w	r3, #2
    2738:	d00d      	beq.n	2756 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    273a:	4b0b      	ldr	r3, [pc, #44]	; (2768 <rtc_nrf_isr+0x3c>)
    273c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2740:	b14b      	cbz	r3, 2756 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2742:	4b09      	ldr	r3, [pc, #36]	; (2768 <rtc_nrf_isr+0x3c>)
    2744:	2200      	movs	r2, #0
    2746:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    274a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    274e:	4a07      	ldr	r2, [pc, #28]	; (276c <rtc_nrf_isr+0x40>)
    2750:	6813      	ldr	r3, [r2, #0]
    2752:	3301      	adds	r3, #1
    2754:	6013      	str	r3, [r2, #0]
{
    2756:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2758:	2c00      	cmp	r4, #0
    275a:	dd00      	ble.n	275e <rtc_nrf_isr+0x32>
}
    275c:	bd10      	pop	{r4, pc}
		process_channel(chan);
    275e:	4620      	mov	r0, r4
    2760:	f7ff ffaa 	bl	26b8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2764:	3401      	adds	r4, #1
    2766:	e7f7      	b.n	2758 <rtc_nrf_isr+0x2c>
    2768:	40011000 	.word	0x40011000
    276c:	2000091c 	.word	0x2000091c

00002770 <sys_clock_set_timeout>:
{
    2770:	b510      	push	{r4, lr}
    2772:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2774:	f1b0 3fff 	cmp.w	r0, #4294967295
    2778:	d006      	beq.n	2788 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    277a:	2801      	cmp	r0, #1
    277c:	dd06      	ble.n	278c <sys_clock_set_timeout+0x1c>
    277e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2782:	da05      	bge.n	2790 <sys_clock_set_timeout+0x20>
    2784:	1e44      	subs	r4, r0, #1
    2786:	e004      	b.n	2792 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2788:	480f      	ldr	r0, [pc, #60]	; (27c8 <sys_clock_set_timeout+0x58>)
    278a:	e7f8      	b.n	277e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    278c:	2400      	movs	r4, #0
    278e:	e000      	b.n	2792 <sys_clock_set_timeout+0x22>
    2790:	4c0d      	ldr	r4, [pc, #52]	; (27c8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2792:	f7ff fed7 	bl	2544 <z_nrf_rtc_timer_read>
    2796:	4b0d      	ldr	r3, [pc, #52]	; (27cc <sys_clock_set_timeout+0x5c>)
    2798:	6819      	ldr	r1, [r3, #0]
    279a:	685b      	ldr	r3, [r3, #4]
    279c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    279e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    27a2:	d300      	bcc.n	27a6 <sys_clock_set_timeout+0x36>
		ticks = 0;
    27a4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    27a6:	4420      	add	r0, r4
    27a8:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    27aa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    27ae:	d300      	bcc.n	27b2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    27b0:	4a05      	ldr	r2, [pc, #20]	; (27c8 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    27b2:	2000      	movs	r0, #0
    27b4:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    27b6:	9001      	str	r0, [sp, #4]
    27b8:	4905      	ldr	r1, [pc, #20]	; (27d0 <sys_clock_set_timeout+0x60>)
    27ba:	9100      	str	r1, [sp, #0]
    27bc:	f143 0300 	adc.w	r3, r3, #0
    27c0:	f003 fb4a 	bl	5e58 <compare_set>
}
    27c4:	b002      	add	sp, #8
    27c6:	bd10      	pop	{r4, pc}
    27c8:	007fffff 	.word	0x007fffff
    27cc:	200001c0 	.word	0x200001c0
    27d0:	000024cd 	.word	0x000024cd

000027d4 <sys_clock_elapsed>:
{
    27d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    27d6:	f7ff feb5 	bl	2544 <z_nrf_rtc_timer_read>
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <sys_clock_elapsed+0x10>)
    27dc:	681b      	ldr	r3, [r3, #0]
}
    27de:	1ac0      	subs	r0, r0, r3
    27e0:	bd08      	pop	{r3, pc}
    27e2:	bf00      	nop
    27e4:	200001c0 	.word	0x200001c0

000027e8 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    27e8:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    27ea:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    27ee:	d001      	beq.n	27f4 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27f0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    27f2:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    27f4:	f3c0 1e81 	ubfx	lr, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    27f8:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    *p_pin = pin_number & 0x1F;
    27fc:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2800:	f010 0f20 	tst.w	r0, #32
    2804:	d10d      	bne.n	2822 <nrf_pin_configure+0x3a>
        case 0: return NRF_P0;
    2806:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    280a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    280e:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2812:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2816:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    281a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    281e:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
    2822:	4801      	ldr	r0, [pc, #4]	; (2828 <nrf_pin_configure+0x40>)
    2824:	e7f1      	b.n	280a <nrf_pin_configure+0x22>
    2826:	bf00      	nop
    2828:	50000300 	.word	0x50000300

0000282c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282e:	4605      	mov	r5, r0
    2830:	460e      	mov	r6, r1
    2832:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2834:	2400      	movs	r4, #0
    2836:	e017      	b.n	2868 <pinctrl_configure_pins+0x3c>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    2838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    283c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2844:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2848:	f012 0f20 	tst.w	r2, #32
    284c:	d160      	bne.n	2910 <pinctrl_configure_pins+0xe4>
        case 0: return NRF_P0;
    284e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2852:	2101      	movs	r1, #1
    2854:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    2858:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    285c:	460a      	mov	r2, r1
    285e:	5828      	ldr	r0, [r5, r0]
    2860:	f7ff ffc2 	bl	27e8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2864:	3401      	adds	r4, #1
    2866:	b2e4      	uxtb	r4, r4
    2868:	42b4      	cmp	r4, r6
    286a:	f080 81bf 	bcs.w	2bec <pinctrl_configure_pins+0x3c0>
		switch (NRF_GET_FUN(pins[i])) {
    286e:	00a0      	lsls	r0, r4, #2
    2870:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2874:	0c1a      	lsrs	r2, r3, #16
    2876:	2a22      	cmp	r2, #34	; 0x22
    2878:	f200 81ba 	bhi.w	2bf0 <pinctrl_configure_pins+0x3c4>
    287c:	a101      	add	r1, pc, #4	; (adr r1, 2884 <pinctrl_configure_pins+0x58>)
    287e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    2882:	bf00      	nop
    2884:	00002839 	.word	0x00002839
    2888:	00002915 	.word	0x00002915
    288c:	0000292b 	.word	0x0000292b
    2890:	0000295d 	.word	0x0000295d
    2894:	00002973 	.word	0x00002973
    2898:	000029a5 	.word	0x000029a5
    289c:	000029d7 	.word	0x000029d7
    28a0:	00002bf1 	.word	0x00002bf1
    28a4:	00002bf1 	.word	0x00002bf1
    28a8:	00002bf1 	.word	0x00002bf1
    28ac:	00002bf1 	.word	0x00002bf1
    28b0:	000029ed 	.word	0x000029ed
    28b4:	00002a03 	.word	0x00002a03
    28b8:	00002bf1 	.word	0x00002bf1
    28bc:	00002bf1 	.word	0x00002bf1
    28c0:	00002bf1 	.word	0x00002bf1
    28c4:	00002bf1 	.word	0x00002bf1
    28c8:	00002bf1 	.word	0x00002bf1
    28cc:	00002bf1 	.word	0x00002bf1
    28d0:	00002bf1 	.word	0x00002bf1
    28d4:	00002bf1 	.word	0x00002bf1
    28d8:	00002bf1 	.word	0x00002bf1
    28dc:	00002a19 	.word	0x00002a19
    28e0:	00002a6d 	.word	0x00002a6d
    28e4:	00002ac1 	.word	0x00002ac1
    28e8:	00002b15 	.word	0x00002b15
    28ec:	00002bf1 	.word	0x00002bf1
    28f0:	00002bf1 	.word	0x00002bf1
    28f4:	00002bf1 	.word	0x00002bf1
    28f8:	00002b69 	.word	0x00002b69
    28fc:	00002b7f 	.word	0x00002b7f
    2900:	00002b95 	.word	0x00002b95
    2904:	00002bab 	.word	0x00002bab
    2908:	00002bc1 	.word	0x00002bc1
    290c:	00002bd7 	.word	0x00002bd7
        case 1: return NRF_P1;
    2910:	4ab9      	ldr	r2, [pc, #740]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2912:	e79e      	b.n	2852 <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    2914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2918:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    291c:	2200      	movs	r2, #0
    291e:	4611      	mov	r1, r2
    2920:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2924:	f7ff ff60 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    2928:	e79c      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    292a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    292e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2936:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    293a:	f012 0f20 	tst.w	r2, #32
    293e:	d10b      	bne.n	2958 <pinctrl_configure_pins+0x12c>
        case 0: return NRF_P0;
    2940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2944:	2101      	movs	r1, #1
    2946:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    294a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    294e:	460a      	mov	r2, r1
    2950:	5828      	ldr	r0, [r5, r0]
    2952:	f7ff ff49 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2956:	e785      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    2958:	4aa7      	ldr	r2, [pc, #668]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    295a:	e7f3      	b.n	2944 <pinctrl_configure_pins+0x118>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2960:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2964:	2200      	movs	r2, #0
    2966:	4611      	mov	r1, r2
    2968:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    296c:	f7ff ff3c 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    2970:	e778      	b.n	2864 <pinctrl_configure_pins+0x38>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    2972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2976:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    297a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    297e:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2982:	f012 0f20 	tst.w	r2, #32
    2986:	d10b      	bne.n	29a0 <pinctrl_configure_pins+0x174>
        case 0: return NRF_P0;
    2988:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    298c:	2101      	movs	r1, #1
    298e:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    2992:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2996:	2200      	movs	r2, #0
    2998:	5828      	ldr	r0, [r5, r0]
    299a:	f7ff ff25 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    299e:	e761      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    29a0:	4a95      	ldr	r2, [pc, #596]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    29a2:	e7f3      	b.n	298c <pinctrl_configure_pins+0x160>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    29a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    29a8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    29ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    29b0:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    29b4:	f012 0f20 	tst.w	r2, #32
    29b8:	d10b      	bne.n	29d2 <pinctrl_configure_pins+0x1a6>
        case 0: return NRF_P0;
    29ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    29be:	2101      	movs	r1, #1
    29c0:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    29c4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    29c8:	460a      	mov	r2, r1
    29ca:	5828      	ldr	r0, [r5, r0]
    29cc:	f7ff ff0c 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    29d0:	e748      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    29d2:	4a89      	ldr	r2, [pc, #548]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    29d4:	e7f3      	b.n	29be <pinctrl_configure_pins+0x192>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    29d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    29da:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    29de:	2200      	movs	r2, #0
    29e0:	4611      	mov	r1, r2
    29e2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    29e6:	f7ff feff 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    29ea:	e73b      	b.n	2864 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    29ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    29f0:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    29f4:	2200      	movs	r2, #0
    29f6:	4611      	mov	r1, r2
    29f8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    29fc:	f7ff fef4 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    2a00:	e730      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    2a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2a06:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2a0a:	2200      	movs	r2, #0
    2a0c:	4611      	mov	r1, r2
    2a0e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2a12:	f7ff fee9 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    2a16:	e725      	b.n	2864 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    2a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2a1c:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2a20:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2a24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    2a28:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2a2c:	d111      	bne.n	2a52 <pinctrl_configure_pins+0x226>
    *p_pin = pin_number & 0x1F;
    2a2e:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a32:	0953      	lsrs	r3, r2, #5
    2a34:	d10b      	bne.n	2a4e <pinctrl_configure_pins+0x222>
        case 0: return NRF_P0;
    2a36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a3a:	2301      	movs	r3, #1
    2a3c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2a3e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2a42:	2201      	movs	r2, #1
    2a44:	4611      	mov	r1, r2
    2a46:	5828      	ldr	r0, [r5, r0]
    2a48:	f7ff fece 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2a4c:	e70a      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    2a4e:	4a6a      	ldr	r2, [pc, #424]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2a50:	e7f3      	b.n	2a3a <pinctrl_configure_pins+0x20e>
    *p_pin = pin_number & 0x1F;
    2a52:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a56:	0953      	lsrs	r3, r2, #5
    2a58:	d106      	bne.n	2a68 <pinctrl_configure_pins+0x23c>
        case 0: return NRF_P0;
    2a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a5e:	2301      	movs	r3, #1
    2a60:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2a62:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    2a66:	e7ec      	b.n	2a42 <pinctrl_configure_pins+0x216>
        case 1: return NRF_P1;
    2a68:	4a63      	ldr	r2, [pc, #396]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2a6a:	e7f8      	b.n	2a5e <pinctrl_configure_pins+0x232>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    2a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2a70:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2a74:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2a78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    2a7c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2a80:	d111      	bne.n	2aa6 <pinctrl_configure_pins+0x27a>
    *p_pin = pin_number & 0x1F;
    2a82:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a86:	0953      	lsrs	r3, r2, #5
    2a88:	d10b      	bne.n	2aa2 <pinctrl_configure_pins+0x276>
        case 0: return NRF_P0;
    2a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a8e:	2301      	movs	r3, #1
    2a90:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2a92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2a96:	2201      	movs	r2, #1
    2a98:	4611      	mov	r1, r2
    2a9a:	5828      	ldr	r0, [r5, r0]
    2a9c:	f7ff fea4 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2aa0:	e6e0      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    2aa2:	4a55      	ldr	r2, [pc, #340]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2aa4:	e7f3      	b.n	2a8e <pinctrl_configure_pins+0x262>
    *p_pin = pin_number & 0x1F;
    2aa6:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2aaa:	0953      	lsrs	r3, r2, #5
    2aac:	d106      	bne.n	2abc <pinctrl_configure_pins+0x290>
        case 0: return NRF_P0;
    2aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ab2:	2301      	movs	r3, #1
    2ab4:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2ab6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    2aba:	e7ec      	b.n	2a96 <pinctrl_configure_pins+0x26a>
        case 1: return NRF_P1;
    2abc:	4a4e      	ldr	r2, [pc, #312]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2abe:	e7f8      	b.n	2ab2 <pinctrl_configure_pins+0x286>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    2ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2ac4:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2ac8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    2ad0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2ad4:	d111      	bne.n	2afa <pinctrl_configure_pins+0x2ce>
    *p_pin = pin_number & 0x1F;
    2ad6:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ada:	0953      	lsrs	r3, r2, #5
    2adc:	d10b      	bne.n	2af6 <pinctrl_configure_pins+0x2ca>
        case 0: return NRF_P0;
    2ade:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2ae2:	2301      	movs	r3, #1
    2ae4:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2ae6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2aea:	2201      	movs	r2, #1
    2aec:	4611      	mov	r1, r2
    2aee:	5828      	ldr	r0, [r5, r0]
    2af0:	f7ff fe7a 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2af4:	e6b6      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    2af6:	4a40      	ldr	r2, [pc, #256]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2af8:	e7f3      	b.n	2ae2 <pinctrl_configure_pins+0x2b6>
    *p_pin = pin_number & 0x1F;
    2afa:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2afe:	0953      	lsrs	r3, r2, #5
    2b00:	d106      	bne.n	2b10 <pinctrl_configure_pins+0x2e4>
        case 0: return NRF_P0;
    2b02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2b06:	2301      	movs	r3, #1
    2b08:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2b0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    2b0e:	e7ec      	b.n	2aea <pinctrl_configure_pins+0x2be>
        case 1: return NRF_P1;
    2b10:	4a39      	ldr	r2, [pc, #228]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2b12:	e7f8      	b.n	2b06 <pinctrl_configure_pins+0x2da>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    2b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2b18:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2b1c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    2b20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
    2b24:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2b28:	d111      	bne.n	2b4e <pinctrl_configure_pins+0x322>
    *p_pin = pin_number & 0x1F;
    2b2a:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b2e:	0953      	lsrs	r3, r2, #5
    2b30:	d10b      	bne.n	2b4a <pinctrl_configure_pins+0x31e>
        case 0: return NRF_P0;
    2b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2b36:	2301      	movs	r3, #1
    2b38:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2b3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2b3e:	2201      	movs	r2, #1
    2b40:	4611      	mov	r1, r2
    2b42:	5828      	ldr	r0, [r5, r0]
    2b44:	f7ff fe50 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2b48:	e68c      	b.n	2864 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    2b4a:	4a2b      	ldr	r2, [pc, #172]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2b4c:	e7f3      	b.n	2b36 <pinctrl_configure_pins+0x30a>
    *p_pin = pin_number & 0x1F;
    2b4e:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b52:	0953      	lsrs	r3, r2, #5
    2b54:	d106      	bne.n	2b64 <pinctrl_configure_pins+0x338>
        case 0: return NRF_P0;
    2b56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2b5a:	2301      	movs	r3, #1
    2b5c:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2b5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    2b62:	e7ec      	b.n	2b3e <pinctrl_configure_pins+0x312>
        case 1: return NRF_P1;
    2b64:	4a24      	ldr	r2, [pc, #144]	; (2bf8 <pinctrl_configure_pins+0x3cc>)
    2b66:	e7f8      	b.n	2b5a <pinctrl_configure_pins+0x32e>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    2b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2b6c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2b70:	2201      	movs	r2, #1
    2b72:	2100      	movs	r1, #0
    2b74:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2b78:	f7ff fe36 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2b7c:	e672      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    2b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2b82:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2b86:	2201      	movs	r2, #1
    2b88:	2100      	movs	r1, #0
    2b8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2b8e:	f7ff fe2b 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2b92:	e667      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    2b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2b98:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2b9c:	2201      	movs	r2, #1
    2b9e:	2100      	movs	r1, #0
    2ba0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2ba4:	f7ff fe20 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2ba8:	e65c      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    2baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2bae:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2bb2:	2201      	movs	r2, #1
    2bb4:	2100      	movs	r1, #0
    2bb6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2bba:	f7ff fe15 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2bbe:	e651      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    2bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2bc4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2bc8:	2201      	movs	r2, #1
    2bca:	2100      	movs	r1, #0
    2bcc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2bd0:	f7ff fe0a 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2bd4:	e646      	b.n	2864 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    2bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2bda:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2bde:	2201      	movs	r2, #1
    2be0:	2100      	movs	r1, #0
    2be2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    2be6:	f7ff fdff 	bl	27e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    2bea:	e63b      	b.n	2864 <pinctrl_configure_pins+0x38>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    2bec:	2000      	movs	r0, #0
    2bee:	e001      	b.n	2bf4 <pinctrl_configure_pins+0x3c8>
		switch (NRF_GET_FUN(pins[i])) {
    2bf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bf6:	bf00      	nop
    2bf8:	50000300 	.word	0x50000300

00002bfc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2bfc:	4b02      	ldr	r3, [pc, #8]	; (2c08 <nvmc_wait+0xc>)
    2bfe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2c02:	2b00      	cmp	r3, #0
    2c04:	d0fa      	beq.n	2bfc <nvmc_wait>
}
    2c06:	4770      	bx	lr
    2c08:	4001e000 	.word	0x4001e000

00002c0c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2c0c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c0e:	4b03      	ldr	r3, [pc, #12]	; (2c1c <nvmc_config+0x10>)
    2c10:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2c14:	f7ff fff2 	bl	2bfc <nvmc_wait>
}
    2c18:	bd08      	pop	{r3, pc}
    2c1a:	bf00      	nop
    2c1c:	4001e000 	.word	0x4001e000

00002c20 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2c20:	4b01      	ldr	r3, [pc, #4]	; (2c28 <SystemCoreClockUpdate+0x8>)
    2c22:	4a02      	ldr	r2, [pc, #8]	; (2c2c <SystemCoreClockUpdate+0xc>)
    2c24:	601a      	str	r2, [r3, #0]
}
    2c26:	4770      	bx	lr
    2c28:	20000054 	.word	0x20000054
    2c2c:	03d09000 	.word	0x03d09000

00002c30 <SystemInit>:

void SystemInit(void)
{
    2c30:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2c32:	f003 f956 	bl	5ee2 <nrf52_errata_36>
    2c36:	b140      	cbz	r0, 2c4a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c3c:	2200      	movs	r2, #0
    2c3e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2c42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2c46:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2c4a:	f003 f954 	bl	5ef6 <nrf52_errata_66>
    2c4e:	2800      	cmp	r0, #0
    2c50:	d046      	beq.n	2ce0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2c56:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2c5a:	4b59      	ldr	r3, [pc, #356]	; (2dc0 <SystemInit+0x190>)
    2c5c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2c60:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2c64:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2c68:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2c6c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2c70:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2c74:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2c78:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2c7c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2c80:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2c84:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2c88:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2c8c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2c90:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2c94:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2c98:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2c9c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2ca0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2ca4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2ca8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2cac:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2cb0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2cb4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2cb8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2cbc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2cc0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2cc4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2cc8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2ccc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2cd0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2cd4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2cd8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2cdc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2ce0:	f003 f913 	bl	5f0a <nrf52_errata_98>
    2ce4:	b118      	cbz	r0, 2cee <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2ce6:	4b37      	ldr	r3, [pc, #220]	; (2dc4 <SystemInit+0x194>)
    2ce8:	4a37      	ldr	r2, [pc, #220]	; (2dc8 <SystemInit+0x198>)
    2cea:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2cee:	f003 f91f 	bl	5f30 <nrf52_errata_103>
    2cf2:	b118      	cbz	r0, 2cfc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2cf4:	4b35      	ldr	r3, [pc, #212]	; (2dcc <SystemInit+0x19c>)
    2cf6:	22fb      	movs	r2, #251	; 0xfb
    2cf8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2cfc:	f003 f92b 	bl	5f56 <nrf52_errata_115>
    2d00:	b170      	cbz	r0, 2d20 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2d06:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    2d0a:	f023 030f 	bic.w	r3, r3, #15
    2d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2d12:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    2d16:	f002 020f 	and.w	r2, r2, #15
    2d1a:	4313      	orrs	r3, r2
    2d1c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2d20:	f003 f92c 	bl	5f7c <nrf52_errata_120>
    2d24:	b120      	cbz	r0, 2d30 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    2d26:	4b2a      	ldr	r3, [pc, #168]	; (2dd0 <SystemInit+0x1a0>)
    2d28:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d2c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2d30:	f003 f937 	bl	5fa2 <nrf52_errata_136>
    2d34:	b160      	cbz	r0, 2d50 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2d3e:	f013 0f01 	tst.w	r3, #1
    2d42:	d005      	beq.n	2d50 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d48:	f06f 0201 	mvn.w	r2, #1
    2d4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2d50:	f003 f931 	bl	5fb6 <nrf52_configuration_249>
    2d54:	b138      	cbz	r0, 2d66 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2d56:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2d5a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d62:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2d66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2d6e:	2b00      	cmp	r3, #0
    2d70:	db08      	blt.n	2d84 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2d72:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2d76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	db02      	blt.n	2d84 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    2d7e:	f7ff ff4f 	bl	2c20 <SystemCoreClockUpdate>
}
    2d82:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    2d84:	2001      	movs	r0, #1
    2d86:	f7ff ff41 	bl	2c0c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2d8a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    2d8e:	2512      	movs	r5, #18
    2d90:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    2d94:	f7ff ff32 	bl	2bfc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2d98:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    2d9c:	f7ff ff2e 	bl	2bfc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    2da0:	2000      	movs	r0, #0
    2da2:	f7ff ff33 	bl	2c0c <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    2da6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2daa:	490a      	ldr	r1, [pc, #40]	; (2dd4 <SystemInit+0x1a4>)
    2dac:	68ca      	ldr	r2, [r1, #12]
    2dae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2db2:	4b09      	ldr	r3, [pc, #36]	; (2dd8 <SystemInit+0x1a8>)
    2db4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2db6:	60cb      	str	r3, [r1, #12]
    2db8:	f3bf 8f4f 	dsb	sy
    __NOP();
    2dbc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2dbe:	e7fd      	b.n	2dbc <SystemInit+0x18c>
    2dc0:	4000c000 	.word	0x4000c000
    2dc4:	40005000 	.word	0x40005000
    2dc8:	00038148 	.word	0x00038148
    2dcc:	4000f000 	.word	0x4000f000
    2dd0:	40029000 	.word	0x40029000
    2dd4:	e000ed00 	.word	0xe000ed00
    2dd8:	05fa0004 	.word	0x05fa0004

00002ddc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2ddc:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2dde:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2de0:	fab4 f384 	clz	r3, r4
    2de4:	f1c3 031f 	rsb	r3, r3, #31
    2de8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2dec:	2b00      	cmp	r3, #0
    2dee:	db16      	blt.n	2e1e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2df0:	2201      	movs	r2, #1
    2df2:	fa02 f303 	lsl.w	r3, r2, r3
    2df6:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2dfa:	f3bf 8f5b 	dmb	ish
    2dfe:	e850 2f00 	ldrex	r2, [r0]
    2e02:	42a2      	cmp	r2, r4
    2e04:	d104      	bne.n	2e10 <nrfx_flag32_alloc+0x34>
    2e06:	e840 3e00 	strex	lr, r3, [r0]
    2e0a:	f1be 0f00 	cmp.w	lr, #0
    2e0e:	d1f6      	bne.n	2dfe <nrfx_flag32_alloc+0x22>
    2e10:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2e14:	d1e3      	bne.n	2dde <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2e16:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2e1a:	4802      	ldr	r0, [pc, #8]	; (2e24 <nrfx_flag32_alloc+0x48>)
}
    2e1c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2e1e:	4802      	ldr	r0, [pc, #8]	; (2e28 <nrfx_flag32_alloc+0x4c>)
    2e20:	e7fc      	b.n	2e1c <nrfx_flag32_alloc+0x40>
    2e22:	bf00      	nop
    2e24:	0bad0000 	.word	0x0bad0000
    2e28:	0bad0002 	.word	0x0bad0002

00002e2c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2e2c:	6803      	ldr	r3, [r0, #0]
    2e2e:	40cb      	lsrs	r3, r1
    2e30:	f013 0f01 	tst.w	r3, #1
    2e34:	d115      	bne.n	2e62 <nrfx_flag32_free+0x36>
{
    2e36:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2e38:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2e3a:	2301      	movs	r3, #1
    2e3c:	408b      	lsls	r3, r1
    2e3e:	4313      	orrs	r3, r2
    2e40:	f3bf 8f5b 	dmb	ish
    2e44:	e850 cf00 	ldrex	ip, [r0]
    2e48:	4594      	cmp	ip, r2
    2e4a:	d104      	bne.n	2e56 <nrfx_flag32_free+0x2a>
    2e4c:	e840 3e00 	strex	lr, r3, [r0]
    2e50:	f1be 0f00 	cmp.w	lr, #0
    2e54:	d1f6      	bne.n	2e44 <nrfx_flag32_free+0x18>
    2e56:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2e5a:	d1ed      	bne.n	2e38 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2e5c:	4802      	ldr	r0, [pc, #8]	; (2e68 <nrfx_flag32_free+0x3c>)
}
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2e62:	4802      	ldr	r0, [pc, #8]	; (2e6c <nrfx_flag32_free+0x40>)
}
    2e64:	4770      	bx	lr
    2e66:	bf00      	nop
    2e68:	0bad0000 	.word	0x0bad0000
    2e6c:	0bad0004 	.word	0x0bad0004

00002e70 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2e70:	b570      	push	{r4, r5, r6, lr}
    2e72:	b082      	sub	sp, #8
    switch (domain)
    2e74:	4605      	mov	r5, r0
    2e76:	b118      	cbz	r0, 2e80 <clock_stop+0x10>
    2e78:	2801      	cmp	r0, #1
    2e7a:	d016      	beq.n	2eaa <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2e7c:	b002      	add	sp, #8
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    2e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e84:	2202      	movs	r2, #2
    2e86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e8a:	2200      	movs	r2, #0
    2e8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2e90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e94:	2201      	movs	r2, #1
    2e96:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2e98:	2301      	movs	r3, #1
    2e9a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2e9e:	429d      	cmp	r5, r3
    2ea0:	d00f      	beq.n	2ec2 <clock_stop+0x52>
    2ea2:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2ea4:	f242 7410 	movw	r4, #10000	; 0x2710
    2ea8:	e029      	b.n	2efe <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
    2eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2eae:	2201      	movs	r2, #1
    2eb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2eb4:	2100      	movs	r1, #0
    2eb6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2eba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ebe:	605a      	str	r2, [r3, #4]
}
    2ec0:	e7ea      	b.n	2e98 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2ec2:	f10d 0607 	add.w	r6, sp, #7
    2ec6:	e7ed      	b.n	2ea4 <clock_stop+0x34>
            if (p_clk_src != NULL)
    2ec8:	b136      	cbz	r6, 2ed8 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ece:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2ed2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2ed6:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2edc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2ee0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ee4:	d122      	bne.n	2f2c <clock_stop+0xbc>
    return false;
    2ee6:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2ee8:	b323      	cbz	r3, 2f34 <clock_stop+0xc4>
    2eea:	b11e      	cbz	r6, 2ef4 <clock_stop+0x84>
    2eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ef0:	2b01      	cmp	r3, #1
    2ef2:	d11f      	bne.n	2f34 <clock_stop+0xc4>
    2ef4:	2001      	movs	r0, #1
    2ef6:	f003 f871 	bl	5fdc <nrfx_busy_wait>
    2efa:	3c01      	subs	r4, #1
    2efc:	d01a      	beq.n	2f34 <clock_stop+0xc4>
    switch (domain)
    2efe:	2d00      	cmp	r5, #0
    2f00:	d0e2      	beq.n	2ec8 <clock_stop+0x58>
    2f02:	2d01      	cmp	r5, #1
    2f04:	d001      	beq.n	2f0a <clock_stop+0x9a>
    2f06:	2300      	movs	r3, #0
    2f08:	e7ee      	b.n	2ee8 <clock_stop+0x78>
            if (p_clk_src != NULL)
    2f0a:	b136      	cbz	r6, 2f1a <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2f14:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2f18:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2f22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f26:	d103      	bne.n	2f30 <clock_stop+0xc0>
    return false;
    2f28:	2300      	movs	r3, #0
    2f2a:	e7dd      	b.n	2ee8 <clock_stop+0x78>
                return true;
    2f2c:	2301      	movs	r3, #1
    2f2e:	e7db      	b.n	2ee8 <clock_stop+0x78>
                return true;
    2f30:	2301      	movs	r3, #1
    2f32:	e7d9      	b.n	2ee8 <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2f34:	2d01      	cmp	r5, #1
    2f36:	d1a1      	bne.n	2e7c <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    2f38:	4b01      	ldr	r3, [pc, #4]	; (2f40 <clock_stop+0xd0>)
    2f3a:	2200      	movs	r2, #0
    2f3c:	715a      	strb	r2, [r3, #5]
    2f3e:	e79d      	b.n	2e7c <clock_stop+0xc>
    2f40:	20000920 	.word	0x20000920

00002f44 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2f44:	4b06      	ldr	r3, [pc, #24]	; (2f60 <nrfx_clock_init+0x1c>)
    2f46:	791b      	ldrb	r3, [r3, #4]
    2f48:	b93b      	cbnz	r3, 2f5a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2f4a:	4b05      	ldr	r3, [pc, #20]	; (2f60 <nrfx_clock_init+0x1c>)
    2f4c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2f4e:	2201      	movs	r2, #1
    2f50:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    2f52:	2200      	movs	r2, #0
    2f54:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2f56:	4803      	ldr	r0, [pc, #12]	; (2f64 <nrfx_clock_init+0x20>)
    2f58:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2f5a:	4803      	ldr	r0, [pc, #12]	; (2f68 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2f5c:	4770      	bx	lr
    2f5e:	bf00      	nop
    2f60:	20000920 	.word	0x20000920
    2f64:	0bad0000 	.word	0x0bad0000
    2f68:	0bad000c 	.word	0x0bad000c

00002f6c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2f6c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2f76:	b18b      	cbz	r3, 2f9c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f7c:	2200      	movs	r2, #0
    2f7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2f82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2f86:	2201      	movs	r2, #1
    2f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2f8c:	4b15      	ldr	r3, [pc, #84]	; (2fe4 <nrfx_power_clock_irq_handler+0x78>)
    2f8e:	795b      	ldrb	r3, [r3, #5]
    2f90:	b923      	cbnz	r3, 2f9c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    2f92:	4b14      	ldr	r3, [pc, #80]	; (2fe4 <nrfx_power_clock_irq_handler+0x78>)
    2f94:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	2000      	movs	r0, #0
    2f9a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2fa4:	b19b      	cbz	r3, 2fce <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2faa:	2200      	movs	r2, #0
    2fac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2fb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2fb4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2fb8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2fbc:	f012 0f03 	tst.w	r2, #3
    2fc0:	d106      	bne.n	2fd0 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fc6:	2201      	movs	r2, #1
    2fc8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fcc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2fce:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    2fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fd4:	2202      	movs	r2, #2
    2fd6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2fda:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <nrfx_power_clock_irq_handler+0x78>)
    2fdc:	681b      	ldr	r3, [r3, #0]
    2fde:	2001      	movs	r0, #1
    2fe0:	4798      	blx	r3
}
    2fe2:	e7f4      	b.n	2fce <nrfx_power_clock_irq_handler+0x62>
    2fe4:	20000920 	.word	0x20000920

00002fe8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2fe8:	3008      	adds	r0, #8
    2fea:	4b03      	ldr	r3, [pc, #12]	; (2ff8 <pin_in_use+0x10>)
    2fec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ff0:	f000 0001 	and.w	r0, r0, #1
    2ff4:	4770      	bx	lr
    2ff6:	bf00      	nop
    2ff8:	20000058 	.word	0x20000058

00002ffc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ffc:	3008      	adds	r0, #8
    2ffe:	4b03      	ldr	r3, [pc, #12]	; (300c <pin_in_use_by_te+0x10>)
    3000:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3004:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3008:	4770      	bx	lr
    300a:	bf00      	nop
    300c:	20000058 	.word	0x20000058

00003010 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3010:	3008      	adds	r0, #8
    3012:	4b04      	ldr	r3, [pc, #16]	; (3024 <pin_has_trigger+0x14>)
    3014:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3018:	f010 001c 	ands.w	r0, r0, #28
    301c:	bf18      	it	ne
    301e:	2001      	movne	r0, #1
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	20000058 	.word	0x20000058

00003028 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3028:	3008      	adds	r0, #8
    302a:	4b03      	ldr	r3, [pc, #12]	; (3038 <pin_is_output+0x10>)
    302c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3030:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3034:	4770      	bx	lr
    3036:	bf00      	nop
    3038:	20000058 	.word	0x20000058

0000303c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    303c:	3008      	adds	r0, #8
    303e:	4b02      	ldr	r3, [pc, #8]	; (3048 <pin_te_get+0xc>)
    3040:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3044:	0b40      	lsrs	r0, r0, #13
    3046:	4770      	bx	lr
    3048:	20000058 	.word	0x20000058

0000304c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    304c:	2200      	movs	r2, #0
    304e:	e004      	b.n	305a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3050:	f04f 33ff 	mov.w	r3, #4294967295
    3054:	4283      	cmp	r3, r0
    3056:	d00f      	beq.n	3078 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3058:	3201      	adds	r2, #1
    305a:	2a2f      	cmp	r2, #47	; 0x2f
    305c:	d80a      	bhi.n	3074 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    305e:	f102 0308 	add.w	r3, r2, #8
    3062:	4906      	ldr	r1, [pc, #24]	; (307c <handler_in_use+0x30>)
    3064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3068:	f413 7f80 	tst.w	r3, #256	; 0x100
    306c:	d0f0      	beq.n	3050 <handler_in_use+0x4>
    306e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3072:	e7ef      	b.n	3054 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3074:	2000      	movs	r0, #0
    3076:	4770      	bx	lr
            return true;
    3078:	2001      	movs	r0, #1
}
    307a:	4770      	bx	lr
    307c:	20000058 	.word	0x20000058

00003080 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3080:	2300      	movs	r3, #0
    3082:	b113      	cbz	r3, 308a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    3084:	f04f 30ff 	mov.w	r0, #4294967295
}
    3088:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    308a:	4a07      	ldr	r2, [pc, #28]	; (30a8 <find_handler+0x28>)
    308c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3090:	4282      	cmp	r2, r0
    3092:	d001      	beq.n	3098 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3094:	3301      	adds	r3, #1
    3096:	e7f4      	b.n	3082 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3098:	4a03      	ldr	r2, [pc, #12]	; (30a8 <find_handler+0x28>)
    309a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    309e:	6852      	ldr	r2, [r2, #4]
    30a0:	428a      	cmp	r2, r1
    30a2:	d1f7      	bne.n	3094 <find_handler+0x14>
            return i;
    30a4:	4618      	mov	r0, r3
    30a6:	4770      	bx	lr
    30a8:	20000058 	.word	0x20000058

000030ac <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30ac:	3008      	adds	r0, #8
    30ae:	4b06      	ldr	r3, [pc, #24]	; (30c8 <channel_handler_get+0x1c>)
    30b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    30b4:	f410 7f80 	tst.w	r0, #256	; 0x100
    30b8:	d004      	beq.n	30c4 <channel_handler_get+0x18>
    30ba:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    30be:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    30c2:	4770      	bx	lr
        return NULL;
    30c4:	2000      	movs	r0, #0
}
    30c6:	4770      	bx	lr
    30c8:	20000058 	.word	0x20000058

000030cc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    30cc:	b570      	push	{r4, r5, r6, lr}
    30ce:	4604      	mov	r4, r0
    30d0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    30d2:	f7ff ffeb 	bl	30ac <channel_handler_get>

    if (handler)
    30d6:	b120      	cbz	r0, 30e2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    30d8:	6806      	ldr	r6, [r0, #0]
    30da:	6842      	ldr	r2, [r0, #4]
    30dc:	4629      	mov	r1, r5
    30de:	4620      	mov	r0, r4
    30e0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    30e2:	4b04      	ldr	r3, [pc, #16]	; (30f4 <call_handler+0x28>)
    30e4:	689b      	ldr	r3, [r3, #8]
    30e6:	b123      	cbz	r3, 30f2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    30e8:	4a02      	ldr	r2, [pc, #8]	; (30f4 <call_handler+0x28>)
    30ea:	68d2      	ldr	r2, [r2, #12]
    30ec:	4629      	mov	r1, r5
    30ee:	4620      	mov	r0, r4
    30f0:	4798      	blx	r3
    }
}
    30f2:	bd70      	pop	{r4, r5, r6, pc}
    30f4:	20000058 	.word	0x20000058

000030f8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30f8:	f100 0208 	add.w	r2, r0, #8
    30fc:	4b0e      	ldr	r3, [pc, #56]	; (3138 <release_handler+0x40>)
    30fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3102:	f413 7f80 	tst.w	r3, #256	; 0x100
    3106:	d016      	beq.n	3136 <release_handler+0x3e>
{
    3108:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    310a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    310e:	4610      	mov	r0, r2
    3110:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3114:	4a08      	ldr	r2, [pc, #32]	; (3138 <release_handler+0x40>)
    3116:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    311a:	4620      	mov	r0, r4
    311c:	f7ff ff96 	bl	304c <handler_in_use>
    3120:	b100      	cbz	r0, 3124 <release_handler+0x2c>
}
    3122:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3124:	4804      	ldr	r0, [pc, #16]	; (3138 <release_handler+0x40>)
    3126:	2300      	movs	r3, #0
    3128:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    312c:	4621      	mov	r1, r4
    312e:	3074      	adds	r0, #116	; 0x74
    3130:	f7ff fe7c 	bl	2e2c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3134:	e7f5      	b.n	3122 <release_handler+0x2a>
    3136:	4770      	bx	lr
    3138:	20000058 	.word	0x20000058

0000313c <pin_handler_trigger_uninit>:
{
    313c:	b510      	push	{r4, lr}
    313e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3140:	f7ff ff5c 	bl	2ffc <pin_in_use_by_te>
    3144:	b140      	cbz	r0, 3158 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3146:	4620      	mov	r0, r4
    3148:	f7ff ff78 	bl	303c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    314c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3150:	4b06      	ldr	r3, [pc, #24]	; (316c <pin_handler_trigger_uninit+0x30>)
    3152:	2200      	movs	r2, #0
    3154:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3158:	4620      	mov	r0, r4
    315a:	f7ff ffcd 	bl	30f8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    315e:	3408      	adds	r4, #8
    3160:	4b03      	ldr	r3, [pc, #12]	; (3170 <pin_handler_trigger_uninit+0x34>)
    3162:	2200      	movs	r2, #0
    3164:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3168:	bd10      	pop	{r4, pc}
    316a:	bf00      	nop
    316c:	40006000 	.word	0x40006000
    3170:	20000058 	.word	0x20000058

00003174 <pin_handler_set>:
{
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	b082      	sub	sp, #8
    3178:	4606      	mov	r6, r0
    317a:	460c      	mov	r4, r1
    317c:	4615      	mov	r5, r2
    release_handler(pin);
    317e:	f7ff ffbb 	bl	30f8 <release_handler>
    if (!handler)
    3182:	b324      	cbz	r4, 31ce <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3184:	4629      	mov	r1, r5
    3186:	4620      	mov	r0, r4
    3188:	f7ff ff7a 	bl	3080 <find_handler>
    if (handler_id < 0)
    318c:	1e03      	subs	r3, r0, #0
    318e:	db13      	blt.n	31b8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3190:	4a10      	ldr	r2, [pc, #64]	; (31d4 <pin_handler_set+0x60>)
    3192:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3196:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    319a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    319c:	025b      	lsls	r3, r3, #9
    319e:	b29b      	uxth	r3, r3
    31a0:	f106 0008 	add.w	r0, r6, #8
    31a4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    31a8:	430b      	orrs	r3, r1
    31aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    31ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    31b2:	4809      	ldr	r0, [pc, #36]	; (31d8 <pin_handler_set+0x64>)
}
    31b4:	b002      	add	sp, #8
    31b6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    31b8:	f10d 0107 	add.w	r1, sp, #7
    31bc:	4807      	ldr	r0, [pc, #28]	; (31dc <pin_handler_set+0x68>)
    31be:	f7ff fe0d 	bl	2ddc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    31c2:	4b05      	ldr	r3, [pc, #20]	; (31d8 <pin_handler_set+0x64>)
    31c4:	4298      	cmp	r0, r3
    31c6:	d1f5      	bne.n	31b4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    31c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    31cc:	e7e0      	b.n	3190 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    31ce:	4802      	ldr	r0, [pc, #8]	; (31d8 <pin_handler_set+0x64>)
    31d0:	e7f0      	b.n	31b4 <pin_handler_set+0x40>
    31d2:	bf00      	nop
    31d4:	20000058 	.word	0x20000058
    31d8:	0bad0000 	.word	0x0bad0000
    31dc:	200000cc 	.word	0x200000cc

000031e0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    31e0:	b538      	push	{r3, r4, r5, lr}
    31e2:	4604      	mov	r4, r0
    while (mask)
    31e4:	e018      	b.n	3218 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    31e6:	fa94 f3a4 	rbit	r3, r4
    31ea:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    31ee:	2201      	movs	r2, #1
    31f0:	409a      	lsls	r2, r3
    31f2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    31f6:	4a0a      	ldr	r2, [pc, #40]	; (3220 <gpiote_evt_handle+0x40>)
    31f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    31fc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3200:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3204:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3208:	f3c0 4001 	ubfx	r0, r0, #16, #2
    320c:	f002 ff7b 	bl	6106 <gpiote_polarity_to_trigger>
    3210:	4601      	mov	r1, r0
    3212:	4628      	mov	r0, r5
    3214:	f7ff ff5a 	bl	30cc <call_handler>
    while (mask)
    3218:	2c00      	cmp	r4, #0
    321a:	d1e4      	bne.n	31e6 <gpiote_evt_handle+0x6>
    }
}
    321c:	bd38      	pop	{r3, r4, r5, pc}
    321e:	bf00      	nop
    3220:	40006000 	.word	0x40006000

00003224 <latch_pending_read_and_check>:
{
    3224:	b082      	sub	sp, #8
    3226:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3228:	4b11      	ldr	r3, [pc, #68]	; (3270 <latch_pending_read_and_check+0x4c>)
    322a:	e893 0003 	ldmia.w	r3, {r0, r1}
    322e:	ab02      	add	r3, sp, #8
    3230:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3234:	4660      	mov	r0, ip
    3236:	2300      	movs	r3, #0
    3238:	e00b      	b.n	3252 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    323a:	aa02      	add	r2, sp, #8
    323c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3240:	f852 2c08 	ldr.w	r2, [r2, #-8]
    3244:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    3248:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    324c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    3250:	3301      	adds	r3, #1
    3252:	2b01      	cmp	r3, #1
    3254:	d9f1      	bls.n	323a <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    3256:	2300      	movs	r3, #0
    3258:	2b01      	cmp	r3, #1
    325a:	d804      	bhi.n	3266 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    325c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    3260:	b922      	cbnz	r2, 326c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    3262:	3301      	adds	r3, #1
    3264:	e7f8      	b.n	3258 <latch_pending_read_and_check+0x34>
    return false;
    3266:	2000      	movs	r0, #0
}
    3268:	b002      	add	sp, #8
    326a:	4770      	bx	lr
            return true;
    326c:	2001      	movs	r0, #1
    326e:	e7fb      	b.n	3268 <latch_pending_read_and_check+0x44>
    3270:	00006880 	.word	0x00006880

00003274 <next_sense_cond_call_handler>:
{
    3274:	b570      	push	{r4, r5, r6, lr}
    3276:	4604      	mov	r4, r0
    3278:	460d      	mov	r5, r1
    327a:	4616      	mov	r6, r2
    if (is_level(trigger))
    327c:	4608      	mov	r0, r1
    327e:	f002 ff44 	bl	610a <is_level>
    3282:	b9d0      	cbnz	r0, 32ba <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3284:	2e02      	cmp	r6, #2
    3286:	d052      	beq.n	332e <next_sense_cond_call_handler+0xba>
    3288:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    328a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    328e:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3290:	2901      	cmp	r1, #1
    3292:	d04e      	beq.n	3332 <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
    3294:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3298:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    329c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    32a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    32a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    32a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    32ac:	2d03      	cmp	r5, #3
    32ae:	d044      	beq.n	333a <next_sense_cond_call_handler+0xc6>
    32b0:	2e02      	cmp	r6, #2
    32b2:	d040      	beq.n	3336 <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    32b4:	2e03      	cmp	r6, #3
    32b6:	d045      	beq.n	3344 <next_sense_cond_call_handler+0xd0>
}
    32b8:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    32ba:	4629      	mov	r1, r5
    32bc:	4620      	mov	r0, r4
    32be:	f7ff ff05 	bl	30cc <call_handler>
    *p_pin = pin_number & 0x1F;
    32c2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    32c6:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32c8:	2a01      	cmp	r2, #1
    32ca:	d02a      	beq.n	3322 <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
    32cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    32d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    32d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32d8:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    32dc:	429e      	cmp	r6, r3
    32de:	d1eb      	bne.n	32b8 <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
    32e0:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    32e4:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32e6:	2a01      	cmp	r2, #1
    32e8:	d01d      	beq.n	3326 <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
    32ea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    32ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    32f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    32f6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    32fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    32fe:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3302:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3304:	2c01      	cmp	r4, #1
    3306:	d010      	beq.n	332a <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
    3308:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    330c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3310:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3314:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3318:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    331c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    3320:	e7ca      	b.n	32b8 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    3322:	4a0a      	ldr	r2, [pc, #40]	; (334c <next_sense_cond_call_handler+0xd8>)
    3324:	e7d4      	b.n	32d0 <next_sense_cond_call_handler+0x5c>
    3326:	4909      	ldr	r1, [pc, #36]	; (334c <next_sense_cond_call_handler+0xd8>)
    3328:	e7e1      	b.n	32ee <next_sense_cond_call_handler+0x7a>
    332a:	4908      	ldr	r1, [pc, #32]	; (334c <next_sense_cond_call_handler+0xd8>)
    332c:	e7ee      	b.n	330c <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    332e:	2003      	movs	r0, #3
    3330:	e7ab      	b.n	328a <next_sense_cond_call_handler+0x16>
    3332:	4906      	ldr	r1, [pc, #24]	; (334c <next_sense_cond_call_handler+0xd8>)
    3334:	e7b0      	b.n	3298 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3336:	2d01      	cmp	r5, #1
    3338:	d1bc      	bne.n	32b4 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    333a:	4629      	mov	r1, r5
    333c:	4620      	mov	r0, r4
    333e:	f7ff fec5 	bl	30cc <call_handler>
}
    3342:	e7b9      	b.n	32b8 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3344:	2d02      	cmp	r5, #2
    3346:	d1b7      	bne.n	32b8 <next_sense_cond_call_handler+0x44>
    3348:	e7f7      	b.n	333a <next_sense_cond_call_handler+0xc6>
    334a:	bf00      	nop
    334c:	50000300 	.word	0x50000300

00003350 <port_event_handle>:
{
    3350:	b570      	push	{r4, r5, r6, lr}
    3352:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3354:	4a2f      	ldr	r2, [pc, #188]	; (3414 <port_event_handle+0xc4>)
    3356:	466b      	mov	r3, sp
    3358:	e892 0003 	ldmia.w	r2, {r0, r1}
    335c:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3360:	2300      	movs	r3, #0
    3362:	a802      	add	r0, sp, #8
    3364:	e00b      	b.n	337e <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    3366:	aa04      	add	r2, sp, #16
    3368:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    336c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    3370:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    3374:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3378:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    337c:	3301      	adds	r3, #1
    337e:	2b01      	cmp	r3, #1
    3380:	d9f1      	bls.n	3366 <port_event_handle+0x16>
    3382:	e042      	b.n	340a <port_event_handle+0xba>
        case 1: return NRF_P1;
    3384:	4e24      	ldr	r6, [pc, #144]	; (3418 <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3386:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    338a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    338e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3392:	f7ff ff6f 	bl	3274 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3396:	2301      	movs	r3, #1
    3398:	40ab      	lsls	r3, r5
    339a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    339e:	ab04      	add	r3, sp, #16
    33a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    33a4:	f853 0c08 	ldr.w	r0, [r3, #-8]
    33a8:	b310      	cbz	r0, 33f0 <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
    33aa:	fa90 f0a0 	rbit	r0, r0
    33ae:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    33b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    33b6:	f100 0208 	add.w	r2, r0, #8
    33ba:	4b18      	ldr	r3, [pc, #96]	; (341c <port_event_handle+0xcc>)
    33bc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    33c0:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    33c4:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    33c6:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    33ca:	f10d 0c08 	add.w	ip, sp, #8
    33ce:	2301      	movs	r3, #1
    33d0:	fa03 f202 	lsl.w	r2, r3, r2
    33d4:	f81c 3005 	ldrb.w	r3, [ip, r5]
    33d8:	ea23 0302 	bic.w	r3, r3, r2
    33dc:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
    33e0:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    33e4:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33e6:	2b01      	cmp	r3, #1
    33e8:	d0cc      	beq.n	3384 <port_event_handle+0x34>
        case 0: return NRF_P0;
    33ea:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    33ee:	e7ca      	b.n	3386 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    33f0:	3401      	adds	r4, #1
    33f2:	2c01      	cmp	r4, #1
    33f4:	d9d3      	bls.n	339e <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33f6:	4b0a      	ldr	r3, [pc, #40]	; (3420 <port_event_handle+0xd0>)
    33f8:	2200      	movs	r2, #0
    33fa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    33fe:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    3402:	a802      	add	r0, sp, #8
    3404:	f7ff ff0e 	bl	3224 <latch_pending_read_and_check>
    3408:	b108      	cbz	r0, 340e <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    340a:	2400      	movs	r4, #0
    340c:	e7f1      	b.n	33f2 <port_event_handle+0xa2>
}
    340e:	b004      	add	sp, #16
    3410:	bd70      	pop	{r4, r5, r6, pc}
    3412:	bf00      	nop
    3414:	00006880 	.word	0x00006880
    3418:	50000300 	.word	0x50000300
    341c:	20000058 	.word	0x20000058
    3420:	40006000 	.word	0x40006000

00003424 <nrfx_gpiote_input_configure>:
{
    3424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3428:	4604      	mov	r4, r0
    342a:	4615      	mov	r5, r2
    342c:	461e      	mov	r6, r3
    if (p_input_config)
    342e:	b371      	cbz	r1, 348e <nrfx_gpiote_input_configure+0x6a>
    3430:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3432:	f002 fe52 	bl	60da <pin_is_task_output>
    3436:	2800      	cmp	r0, #0
    3438:	f040 8099 	bne.w	356e <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
    343c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3440:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3442:	2b01      	cmp	r3, #1
    3444:	d045      	beq.n	34d2 <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
    3446:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    344a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    344e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3452:	2f00      	cmp	r7, #0
    3454:	d03f      	beq.n	34d6 <nrfx_gpiote_input_configure+0xb2>
    3456:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3458:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    345c:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3460:	2f00      	cmp	r7, #0
    3462:	d03a      	beq.n	34da <nrfx_gpiote_input_configure+0xb6>
    3464:	7839      	ldrb	r1, [r7, #0]
    3466:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3468:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    346a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    346e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3472:	4a43      	ldr	r2, [pc, #268]	; (3580 <nrfx_gpiote_input_configure+0x15c>)
    3474:	f104 0108 	add.w	r1, r4, #8
    3478:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    347c:	f023 0302 	bic.w	r3, r3, #2
    3480:	b29b      	uxth	r3, r3
    3482:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3486:	f043 0301 	orr.w	r3, r3, #1
    348a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    348e:	b1bd      	cbz	r5, 34c0 <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3490:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3492:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    3496:	4620      	mov	r0, r4
    3498:	f7ff fdc6 	bl	3028 <pin_is_output>
    349c:	b1f8      	cbz	r0, 34de <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
    349e:	f1b8 0f00 	cmp.w	r8, #0
    34a2:	d166      	bne.n	3572 <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    34a4:	4a36      	ldr	r2, [pc, #216]	; (3580 <nrfx_gpiote_input_configure+0x15c>)
    34a6:	f104 0108 	add.w	r1, r4, #8
    34aa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    34ae:	f023 031c 	bic.w	r3, r3, #28
    34b2:	b29b      	uxth	r3, r3
    34b4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    34b8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    34bc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    34c0:	2e00      	cmp	r6, #0
    34c2:	d05a      	beq.n	357a <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    34c4:	6872      	ldr	r2, [r6, #4]
    34c6:	6831      	ldr	r1, [r6, #0]
    34c8:	4620      	mov	r0, r4
    34ca:	f7ff fe53 	bl	3174 <pin_handler_set>
}
    34ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
    34d2:	482c      	ldr	r0, [pc, #176]	; (3584 <nrfx_gpiote_input_configure+0x160>)
    34d4:	e7b9      	b.n	344a <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    34d6:	2100      	movs	r1, #0
    34d8:	e7be      	b.n	3458 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    34da:	2100      	movs	r1, #0
    34dc:	e7c4      	b.n	3468 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    34de:	4a28      	ldr	r2, [pc, #160]	; (3580 <nrfx_gpiote_input_configure+0x15c>)
    34e0:	f104 0108 	add.w	r1, r4, #8
    34e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    34e8:	f023 0320 	bic.w	r3, r3, #32
    34ec:	04db      	lsls	r3, r3, #19
    34ee:	0cdb      	lsrs	r3, r3, #19
    34f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    34f4:	f1b8 0f00 	cmp.w	r8, #0
    34f8:	d0d4      	beq.n	34a4 <nrfx_gpiote_input_configure+0x80>
                if (!edge)
    34fa:	2f03      	cmp	r7, #3
    34fc:	d83b      	bhi.n	3576 <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
    34fe:	686b      	ldr	r3, [r5, #4]
    3500:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3502:	b937      	cbnz	r7, 3512 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    3504:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3508:	4b1f      	ldr	r3, [pc, #124]	; (3588 <nrfx_gpiote_input_configure+0x164>)
    350a:	2200      	movs	r2, #0
    350c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3510:	e7c8      	b.n	34a4 <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3512:	4638      	mov	r0, r7
    3514:	f002 fdf8 	bl	6108 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3518:	4b1b      	ldr	r3, [pc, #108]	; (3588 <nrfx_gpiote_input_configure+0x164>)
    351a:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    351e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3522:	f021 0103 	bic.w	r1, r1, #3
    3526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    352a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    352e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    3532:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    353a:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    353e:	0221      	lsls	r1, r4, #8
    3540:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3544:	0400      	lsls	r0, r0, #16
    3546:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    354a:	4301      	orrs	r1, r0
    354c:	ea4c 0101 	orr.w	r1, ip, r1
    3550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3554:	036b      	lsls	r3, r5, #13
    3556:	b29b      	uxth	r3, r3
    3558:	4a09      	ldr	r2, [pc, #36]	; (3580 <nrfx_gpiote_input_configure+0x15c>)
    355a:	f104 0108 	add.w	r1, r4, #8
    355e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    3562:	4303      	orrs	r3, r0
    3564:	f043 0320 	orr.w	r3, r3, #32
    3568:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    356c:	e79a      	b.n	34a4 <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
    356e:	4807      	ldr	r0, [pc, #28]	; (358c <nrfx_gpiote_input_configure+0x168>)
    3570:	e7ad      	b.n	34ce <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
    3572:	4806      	ldr	r0, [pc, #24]	; (358c <nrfx_gpiote_input_configure+0x168>)
    3574:	e7ab      	b.n	34ce <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
    3576:	4805      	ldr	r0, [pc, #20]	; (358c <nrfx_gpiote_input_configure+0x168>)
    3578:	e7a9      	b.n	34ce <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
    357a:	4805      	ldr	r0, [pc, #20]	; (3590 <nrfx_gpiote_input_configure+0x16c>)
    357c:	e7a7      	b.n	34ce <nrfx_gpiote_input_configure+0xaa>
    357e:	bf00      	nop
    3580:	20000058 	.word	0x20000058
    3584:	50000300 	.word	0x50000300
    3588:	40006000 	.word	0x40006000
    358c:	0bad0004 	.word	0x0bad0004
    3590:	0bad0000 	.word	0x0bad0000

00003594 <nrfx_gpiote_output_configure>:
{
    3594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3596:	4604      	mov	r4, r0
    3598:	4615      	mov	r5, r2
    if (p_config)
    359a:	2900      	cmp	r1, #0
    359c:	d055      	beq.n	364a <nrfx_gpiote_output_configure+0xb6>
    359e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    35a0:	f002 fdaa 	bl	60f8 <pin_is_input>
    35a4:	b128      	cbz	r0, 35b2 <nrfx_gpiote_output_configure+0x1e>
    35a6:	4620      	mov	r0, r4
    35a8:	f7ff fd28 	bl	2ffc <pin_in_use_by_te>
    35ac:	2800      	cmp	r0, #0
    35ae:	f040 80a2 	bne.w	36f6 <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    35b2:	4620      	mov	r0, r4
    35b4:	f7ff fd2c 	bl	3010 <pin_has_trigger>
    35b8:	b118      	cbz	r0, 35c2 <nrfx_gpiote_output_configure+0x2e>
    35ba:	7873      	ldrb	r3, [r6, #1]
    35bc:	2b01      	cmp	r3, #1
    35be:	f000 809c 	beq.w	36fa <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    35c2:	f106 0c01 	add.w	ip, r6, #1
    35c6:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    35c8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    35cc:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35ce:	2b01      	cmp	r3, #1
    35d0:	d057      	beq.n	3682 <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
    35d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    35d6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    35da:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    35de:	f1bc 0f00 	cmp.w	ip, #0
    35e2:	d050      	beq.n	3686 <nrfx_gpiote_output_configure+0xf2>
    35e4:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    35e6:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    35ea:	2f00      	cmp	r7, #0
    35ec:	d04d      	beq.n	368a <nrfx_gpiote_output_configure+0xf6>
    35ee:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    35f2:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    35f6:	2e00      	cmp	r6, #0
    35f8:	d04a      	beq.n	3690 <nrfx_gpiote_output_configure+0xfc>
    35fa:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    35fe:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    3602:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3606:	f1bc 0f00 	cmp.w	ip, #0
    360a:	d044      	beq.n	3696 <nrfx_gpiote_output_configure+0x102>
    360c:	7873      	ldrb	r3, [r6, #1]
    360e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3610:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3614:	2f00      	cmp	r7, #0
    3616:	d040      	beq.n	369a <nrfx_gpiote_output_configure+0x106>
    3618:	f896 c002 	ldrb.w	ip, [r6, #2]
    361c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3620:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3624:	2e00      	cmp	r6, #0
    3626:	d03b      	beq.n	36a0 <nrfx_gpiote_output_configure+0x10c>
    3628:	7836      	ldrb	r6, [r6, #0]
    362a:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    362c:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    362e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    3630:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3634:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3638:	4a33      	ldr	r2, [pc, #204]	; (3708 <nrfx_gpiote_output_configure+0x174>)
    363a:	f104 0108 	add.w	r1, r4, #8
    363e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3642:	f043 0303 	orr.w	r3, r3, #3
    3646:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    364a:	2d00      	cmp	r5, #0
    364c:	d057      	beq.n	36fe <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
    364e:	4620      	mov	r0, r4
    3650:	f002 fd52 	bl	60f8 <pin_is_input>
    3654:	2800      	cmp	r0, #0
    3656:	d154      	bne.n	3702 <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
    3658:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    365a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    365e:	4a2b      	ldr	r2, [pc, #172]	; (370c <nrfx_gpiote_output_configure+0x178>)
    3660:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3664:	4928      	ldr	r1, [pc, #160]	; (3708 <nrfx_gpiote_output_configure+0x174>)
    3666:	f104 0008 	add.w	r0, r4, #8
    366a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    366e:	f022 0220 	bic.w	r2, r2, #32
    3672:	04d2      	lsls	r2, r2, #19
    3674:	0cd2      	lsrs	r2, r2, #19
    3676:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    367a:	786a      	ldrb	r2, [r5, #1]
    367c:	b992      	cbnz	r2, 36a4 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
    367e:	4824      	ldr	r0, [pc, #144]	; (3710 <nrfx_gpiote_output_configure+0x17c>)
}
    3680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3682:	4924      	ldr	r1, [pc, #144]	; (3714 <nrfx_gpiote_output_configure+0x180>)
    3684:	e7a7      	b.n	35d6 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3686:	2300      	movs	r3, #0
    3688:	e7ad      	b.n	35e6 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    368a:	f04f 0e00 	mov.w	lr, #0
    368e:	e7b0      	b.n	35f2 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3690:	f04f 0e00 	mov.w	lr, #0
    3694:	e7b3      	b.n	35fe <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3696:	2300      	movs	r3, #0
    3698:	e7ba      	b.n	3610 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    369a:	f04f 0c00 	mov.w	ip, #0
    369e:	e7bf      	b.n	3620 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    36a0:	2600      	movs	r6, #0
    36a2:	e7c3      	b.n	362c <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    36a4:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    36a6:	4819      	ldr	r0, [pc, #100]	; (370c <nrfx_gpiote_output_configure+0x178>)
    36a8:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    36ac:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    36b0:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    36b4:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    36b8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    36bc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    36c0:	0221      	lsls	r1, r4, #8
    36c2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    36c6:	0412      	lsls	r2, r2, #16
    36c8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    36cc:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    36ce:	0539      	lsls	r1, r7, #20
    36d0:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    36d4:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    36d6:	4332      	orrs	r2, r6
    36d8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    36dc:	035b      	lsls	r3, r3, #13
    36de:	b29b      	uxth	r3, r3
    36e0:	4a09      	ldr	r2, [pc, #36]	; (3708 <nrfx_gpiote_output_configure+0x174>)
    36e2:	3408      	adds	r4, #8
    36e4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    36e8:	430b      	orrs	r3, r1
    36ea:	f043 0320 	orr.w	r3, r3, #32
    36ee:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    36f2:	4807      	ldr	r0, [pc, #28]	; (3710 <nrfx_gpiote_output_configure+0x17c>)
    36f4:	e7c4      	b.n	3680 <nrfx_gpiote_output_configure+0xec>
    36f6:	4808      	ldr	r0, [pc, #32]	; (3718 <nrfx_gpiote_output_configure+0x184>)
    36f8:	e7c2      	b.n	3680 <nrfx_gpiote_output_configure+0xec>
    36fa:	4807      	ldr	r0, [pc, #28]	; (3718 <nrfx_gpiote_output_configure+0x184>)
    36fc:	e7c0      	b.n	3680 <nrfx_gpiote_output_configure+0xec>
    36fe:	4804      	ldr	r0, [pc, #16]	; (3710 <nrfx_gpiote_output_configure+0x17c>)
    3700:	e7be      	b.n	3680 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    3702:	4805      	ldr	r0, [pc, #20]	; (3718 <nrfx_gpiote_output_configure+0x184>)
    3704:	e7bc      	b.n	3680 <nrfx_gpiote_output_configure+0xec>
    3706:	bf00      	nop
    3708:	20000058 	.word	0x20000058
    370c:	40006000 	.word	0x40006000
    3710:	0bad0000 	.word	0x0bad0000
    3714:	50000300 	.word	0x50000300
    3718:	0bad0004 	.word	0x0bad0004

0000371c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    371c:	4b01      	ldr	r3, [pc, #4]	; (3724 <nrfx_gpiote_global_callback_set+0x8>)
    371e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3720:	60d9      	str	r1, [r3, #12]
}
    3722:	4770      	bx	lr
    3724:	20000058 	.word	0x20000058

00003728 <nrfx_gpiote_channel_get>:
{
    3728:	b538      	push	{r3, r4, r5, lr}
    372a:	4604      	mov	r4, r0
    372c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    372e:	f7ff fc65 	bl	2ffc <pin_in_use_by_te>
    3732:	b140      	cbz	r0, 3746 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3734:	f104 0008 	add.w	r0, r4, #8
    3738:	4b04      	ldr	r3, [pc, #16]	; (374c <nrfx_gpiote_channel_get+0x24>)
    373a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    373e:	0b5b      	lsrs	r3, r3, #13
    3740:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3742:	4803      	ldr	r0, [pc, #12]	; (3750 <nrfx_gpiote_channel_get+0x28>)
}
    3744:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3746:	4803      	ldr	r0, [pc, #12]	; (3754 <nrfx_gpiote_channel_get+0x2c>)
    3748:	e7fc      	b.n	3744 <nrfx_gpiote_channel_get+0x1c>
    374a:	bf00      	nop
    374c:	20000058 	.word	0x20000058
    3750:	0bad0000 	.word	0x0bad0000
    3754:	0bad0004 	.word	0x0bad0004

00003758 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3758:	4b10      	ldr	r3, [pc, #64]	; (379c <nrfx_gpiote_init+0x44>)
    375a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    375e:	b10b      	cbz	r3, 3764 <nrfx_gpiote_init+0xc>
        return err_code;
    3760:	480f      	ldr	r0, [pc, #60]	; (37a0 <nrfx_gpiote_init+0x48>)
}
    3762:	4770      	bx	lr
{
    3764:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3766:	4c0d      	ldr	r4, [pc, #52]	; (379c <nrfx_gpiote_init+0x44>)
    3768:	2260      	movs	r2, #96	; 0x60
    376a:	2100      	movs	r1, #0
    376c:	f104 0010 	add.w	r0, r4, #16
    3770:	f001 ff79 	bl	5666 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3774:	2006      	movs	r0, #6
    3776:	f7fd fe1b 	bl	13b0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    377a:	4b0a      	ldr	r3, [pc, #40]	; (37a4 <nrfx_gpiote_init+0x4c>)
    377c:	2200      	movs	r2, #0
    377e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3782:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    378a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    378e:	2301      	movs	r3, #1
    3790:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3794:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    3796:	4804      	ldr	r0, [pc, #16]	; (37a8 <nrfx_gpiote_init+0x50>)
}
    3798:	bd10      	pop	{r4, pc}
    379a:	bf00      	nop
    379c:	20000058 	.word	0x20000058
    37a0:	0bad0005 	.word	0x0bad0005
    37a4:	40006000 	.word	0x40006000
    37a8:	0bad0000 	.word	0x0bad0000

000037ac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    37ac:	4b03      	ldr	r3, [pc, #12]	; (37bc <nrfx_gpiote_is_init+0x10>)
    37ae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    37b2:	3800      	subs	r0, #0
    37b4:	bf18      	it	ne
    37b6:	2001      	movne	r0, #1
    37b8:	4770      	bx	lr
    37ba:	bf00      	nop
    37bc:	20000058 	.word	0x20000058

000037c0 <nrfx_gpiote_channel_free>:
{
    37c0:	b508      	push	{r3, lr}
    37c2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    37c4:	4801      	ldr	r0, [pc, #4]	; (37cc <nrfx_gpiote_channel_free+0xc>)
    37c6:	f7ff fb31 	bl	2e2c <nrfx_flag32_free>
}
    37ca:	bd08      	pop	{r3, pc}
    37cc:	200000c8 	.word	0x200000c8

000037d0 <nrfx_gpiote_channel_alloc>:
{
    37d0:	b508      	push	{r3, lr}
    37d2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    37d4:	4801      	ldr	r0, [pc, #4]	; (37dc <nrfx_gpiote_channel_alloc+0xc>)
    37d6:	f7ff fb01 	bl	2ddc <nrfx_flag32_alloc>
}
    37da:	bd08      	pop	{r3, pc}
    37dc:	200000c8 	.word	0x200000c8

000037e0 <nrfx_gpiote_trigger_enable>:
{
    37e0:	b538      	push	{r3, r4, r5, lr}
    37e2:	4604      	mov	r4, r0
    37e4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    37e6:	f7ff fc09 	bl	2ffc <pin_in_use_by_te>
    37ea:	b308      	cbz	r0, 3830 <nrfx_gpiote_trigger_enable+0x50>
    37ec:	4620      	mov	r0, r4
    37ee:	f002 fc83 	bl	60f8 <pin_is_input>
    37f2:	b1e8      	cbz	r0, 3830 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    37f4:	4620      	mov	r0, r4
    37f6:	f7ff fc21 	bl	303c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    37fa:	0083      	lsls	r3, r0, #2
    37fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3800:	b29b      	uxth	r3, r3
    3802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3806:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    380a:	2200      	movs	r2, #0
    380c:	601a      	str	r2, [r3, #0]
    380e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3810:	4a22      	ldr	r2, [pc, #136]	; (389c <nrfx_gpiote_trigger_enable+0xbc>)
    3812:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3816:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    381a:	f043 0301 	orr.w	r3, r3, #1
    381e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3822:	b39d      	cbz	r5, 388c <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3824:	2301      	movs	r3, #1
    3826:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    382a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    382e:	e02d      	b.n	388c <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3830:	f104 0308 	add.w	r3, r4, #8
    3834:	4a1a      	ldr	r2, [pc, #104]	; (38a0 <nrfx_gpiote_trigger_enable+0xc0>)
    3836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    383a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    383e:	2b04      	cmp	r3, #4
    3840:	d012      	beq.n	3868 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3842:	2b05      	cmp	r3, #5
    3844:	d023      	beq.n	388e <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    3846:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    384a:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    384c:	2b01      	cmp	r3, #1
    384e:	d009      	beq.n	3864 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    3850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    3854:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3858:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    385a:	f013 0f01 	tst.w	r3, #1
    385e:	d018      	beq.n	3892 <nrfx_gpiote_trigger_enable+0xb2>
    3860:	2003      	movs	r0, #3
    3862:	e002      	b.n	386a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3864:	4b0f      	ldr	r3, [pc, #60]	; (38a4 <nrfx_gpiote_trigger_enable+0xc4>)
    3866:	e7f5      	b.n	3854 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3868:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    386a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    386e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3870:	2c01      	cmp	r4, #1
    3872:	d010      	beq.n	3896 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    3874:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3878:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    387c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3880:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3884:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3888:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    388c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    388e:	2002      	movs	r0, #2
    3890:	e7eb      	b.n	386a <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3892:	2002      	movs	r0, #2
    3894:	e7e9      	b.n	386a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3896:	4903      	ldr	r1, [pc, #12]	; (38a4 <nrfx_gpiote_trigger_enable+0xc4>)
    3898:	e7ee      	b.n	3878 <nrfx_gpiote_trigger_enable+0x98>
    389a:	bf00      	nop
    389c:	40006000 	.word	0x40006000
    38a0:	20000058 	.word	0x20000058
    38a4:	50000300 	.word	0x50000300

000038a8 <nrfx_gpiote_trigger_disable>:
{
    38a8:	b510      	push	{r4, lr}
    38aa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    38ac:	f7ff fba6 	bl	2ffc <pin_in_use_by_te>
    38b0:	b1a0      	cbz	r0, 38dc <nrfx_gpiote_trigger_disable+0x34>
    38b2:	4620      	mov	r0, r4
    38b4:	f002 fc20 	bl	60f8 <pin_is_input>
    38b8:	b180      	cbz	r0, 38dc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    38ba:	4620      	mov	r0, r4
    38bc:	f7ff fbbe 	bl	303c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    38c0:	2201      	movs	r2, #1
    38c2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    38c4:	4b0e      	ldr	r3, [pc, #56]	; (3900 <nrfx_gpiote_trigger_disable+0x58>)
    38c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    38ca:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    38ce:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    38d2:	f022 0203 	bic.w	r2, r2, #3
    38d6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    38da:	e00e      	b.n	38fa <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    38dc:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    38e0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38e2:	2c01      	cmp	r4, #1
    38e4:	d00a      	beq.n	38fc <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    38e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    38ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    38ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    38f2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    38f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    38fa:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    38fc:	4901      	ldr	r1, [pc, #4]	; (3904 <nrfx_gpiote_trigger_disable+0x5c>)
    38fe:	e7f4      	b.n	38ea <nrfx_gpiote_trigger_disable+0x42>
    3900:	40006000 	.word	0x40006000
    3904:	50000300 	.word	0x50000300

00003908 <nrfx_gpiote_pin_uninit>:
{
    3908:	b510      	push	{r4, lr}
    390a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    390c:	f7ff fb6c 	bl	2fe8 <pin_in_use>
    3910:	b908      	cbnz	r0, 3916 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3912:	480c      	ldr	r0, [pc, #48]	; (3944 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3914:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3916:	4620      	mov	r0, r4
    3918:	f7ff ffc6 	bl	38a8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    391c:	4620      	mov	r0, r4
    391e:	f7ff fc0d 	bl	313c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3922:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3926:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3928:	2c01      	cmp	r4, #1
    392a:	d008      	beq.n	393e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    392c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3930:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3934:	2102      	movs	r1, #2
    3936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    393a:	4803      	ldr	r0, [pc, #12]	; (3948 <nrfx_gpiote_pin_uninit+0x40>)
    393c:	e7ea      	b.n	3914 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    393e:	4a03      	ldr	r2, [pc, #12]	; (394c <nrfx_gpiote_pin_uninit+0x44>)
    3940:	e7f6      	b.n	3930 <nrfx_gpiote_pin_uninit+0x28>
    3942:	bf00      	nop
    3944:	0bad0004 	.word	0x0bad0004
    3948:	0bad0000 	.word	0x0bad0000
    394c:	50000300 	.word	0x50000300

00003950 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3950:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3952:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3954:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3958:	2100      	movs	r1, #0
    uint32_t status = 0;
    395a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    395c:	e003      	b.n	3966 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    395e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3960:	3304      	adds	r3, #4
    3962:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3964:	3101      	adds	r1, #1
    3966:	2907      	cmp	r1, #7
    3968:	d814      	bhi.n	3994 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    396a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    396e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3972:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3974:	2a00      	cmp	r2, #0
    3976:	d0f2      	beq.n	395e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3978:	4a0c      	ldr	r2, [pc, #48]	; (39ac <nrfx_gpiote_irq_handler+0x5c>)
    397a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    397e:	4210      	tst	r0, r2
    3980:	d0ed      	beq.n	395e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3982:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3986:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    398a:	2500      	movs	r5, #0
    398c:	6015      	str	r5, [r2, #0]
    398e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3990:	4304      	orrs	r4, r0
    3992:	e7e4      	b.n	395e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3994:	4b05      	ldr	r3, [pc, #20]	; (39ac <nrfx_gpiote_irq_handler+0x5c>)
    3996:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    399a:	b91b      	cbnz	r3, 39a4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    399c:	4620      	mov	r0, r4
    399e:	f7ff fc1f 	bl	31e0 <gpiote_evt_handle>
}
    39a2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    39a4:	f7ff fcd4 	bl	3350 <port_event_handle>
    39a8:	e7f8      	b.n	399c <nrfx_gpiote_irq_handler+0x4c>
    39aa:	bf00      	nop
    39ac:	40006000 	.word	0x40006000

000039b0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    39b0:	b508      	push	{r3, lr}
    39b2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    39b4:	4801      	ldr	r0, [pc, #4]	; (39bc <nrfx_ppi_channel_alloc+0xc>)
    39b6:	f7ff fa11 	bl	2ddc <nrfx_flag32_alloc>
}
    39ba:	bd08      	pop	{r3, pc}
    39bc:	200000d4 	.word	0x200000d4

000039c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    39c0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    39c2:	4c14      	ldr	r4, [pc, #80]	; (3a14 <_DoInit+0x54>)
    39c4:	2303      	movs	r3, #3
    39c6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    39c8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    39ca:	4a13      	ldr	r2, [pc, #76]	; (3a18 <_DoInit+0x58>)
    39cc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    39ce:	4b13      	ldr	r3, [pc, #76]	; (3a1c <_DoInit+0x5c>)
    39d0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    39d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    39d6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    39d8:	2300      	movs	r3, #0
    39da:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    39dc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39de:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    39e0:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    39e2:	4a0f      	ldr	r2, [pc, #60]	; (3a20 <_DoInit+0x60>)
    39e4:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    39e6:	2210      	movs	r2, #16
    39e8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    39ea:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    39ec:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39ee:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    39f0:	490c      	ldr	r1, [pc, #48]	; (3a24 <_DoInit+0x64>)
    39f2:	1de0      	adds	r0, r4, #7
    39f4:	f001 fdd1 	bl	559a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39f8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    39fc:	490a      	ldr	r1, [pc, #40]	; (3a28 <_DoInit+0x68>)
    39fe:	4620      	mov	r0, r4
    3a00:	f001 fdcb 	bl	559a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a04:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3a08:	2320      	movs	r3, #32
    3a0a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3a0c:	f3bf 8f5f 	dmb	sy
}
    3a10:	bd10      	pop	{r4, pc}
    3a12:	bf00      	nop
    3a14:	20000928 	.word	0x20000928
    3a18:	00006aa0 	.word	0x00006aa0
    3a1c:	200009e0 	.word	0x200009e0
    3a20:	200009d0 	.word	0x200009d0
    3a24:	00006aac 	.word	0x00006aac
    3a28:	00006ab0 	.word	0x00006ab0

00003a2c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3a2c:	4b03      	ldr	r3, [pc, #12]	; (3a3c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3a2e:	e000      	b.n	3a32 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3a30:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3a32:	4a03      	ldr	r2, [pc, #12]	; (3a40 <z_device_state_init+0x14>)
    3a34:	4293      	cmp	r3, r2
    3a36:	d3fb      	bcc.n	3a30 <z_device_state_init+0x4>
	}
}
    3a38:	4770      	bx	lr
    3a3a:	bf00      	nop
    3a3c:	0000662c 	.word	0x0000662c
    3a40:	000066a4 	.word	0x000066a4

00003a44 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3a44:	b570      	push	{r4, r5, r6, lr}
    3a46:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a48:	4b11      	ldr	r3, [pc, #68]	; (3a90 <z_sys_init_run_level+0x4c>)
    3a4a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3a4e:	e009      	b.n	3a64 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3a50:	4240      	negs	r0, r0
    3a52:	e017      	b.n	3a84 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3a54:	68eb      	ldr	r3, [r5, #12]
    3a56:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3a58:	68ea      	ldr	r2, [r5, #12]
    3a5a:	7853      	ldrb	r3, [r2, #1]
    3a5c:	f043 0301 	orr.w	r3, r3, #1
    3a60:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a62:	3408      	adds	r4, #8
    3a64:	1c73      	adds	r3, r6, #1
    3a66:	4a0a      	ldr	r2, [pc, #40]	; (3a90 <z_sys_init_run_level+0x4c>)
    3a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a6c:	42a3      	cmp	r3, r4
    3a6e:	d90d      	bls.n	3a8c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3a70:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3a72:	6823      	ldr	r3, [r4, #0]
    3a74:	4628      	mov	r0, r5
    3a76:	4798      	blx	r3
		if (dev != NULL) {
    3a78:	2d00      	cmp	r5, #0
    3a7a:	d0f2      	beq.n	3a62 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3a7c:	2800      	cmp	r0, #0
    3a7e:	d0eb      	beq.n	3a58 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3a80:	2800      	cmp	r0, #0
    3a82:	dbe5      	blt.n	3a50 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3a84:	28ff      	cmp	r0, #255	; 0xff
    3a86:	dde5      	ble.n	3a54 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3a88:	20ff      	movs	r0, #255	; 0xff
    3a8a:	e7e3      	b.n	3a54 <z_sys_init_run_level+0x10>
		}
	}
}
    3a8c:	bd70      	pop	{r4, r5, r6, pc}
    3a8e:	bf00      	nop
    3a90:	00006ab8 	.word	0x00006ab8

00003a94 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3a94:	b510      	push	{r4, lr}
    3a96:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3a98:	4c11      	ldr	r4, [pc, #68]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a9a:	23b0      	movs	r3, #176	; 0xb0
    3a9c:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3aa0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    3aa4:	4b0f      	ldr	r3, [pc, #60]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    3aaa:	4a0f      	ldr	r2, [pc, #60]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3aac:	9205      	str	r2, [sp, #20]
    3aae:	2201      	movs	r2, #1
    3ab0:	9204      	str	r2, [sp, #16]
    3ab2:	220f      	movs	r2, #15
    3ab4:	9203      	str	r2, [sp, #12]
    3ab6:	2200      	movs	r2, #0
    3ab8:	9202      	str	r2, [sp, #8]
    3aba:	9201      	str	r2, [sp, #4]
    3abc:	9300      	str	r3, [sp, #0]
    3abe:	4b0b      	ldr	r3, [pc, #44]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3ac0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3ac4:	490a      	ldr	r1, [pc, #40]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3ac6:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    3aca:	fb0c 1100 	mla	r1, ip, r0, r1
    3ace:	4620      	mov	r0, r4
    3ad0:	f000 f94a 	bl	3d68 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3ad4:	7b63      	ldrb	r3, [r4, #13]
    3ad6:	f023 0304 	bic.w	r3, r3, #4
    3ada:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3adc:	b006      	add	sp, #24
    3ade:	bd10      	pop	{r4, pc}
    3ae0:	200001c8 	.word	0x200001c8
    3ae4:	20000de0 	.word	0x20000de0
    3ae8:	00006ad0 	.word	0x00006ad0
    3aec:	00003ec5 	.word	0x00003ec5
    3af0:	20001420 	.word	0x20001420

00003af4 <bg_thread_main>:
{
    3af4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3af6:	4b0a      	ldr	r3, [pc, #40]	; (3b20 <bg_thread_main+0x2c>)
    3af8:	2201      	movs	r2, #1
    3afa:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3afc:	2002      	movs	r0, #2
    3afe:	f7ff ffa1 	bl	3a44 <z_sys_init_run_level>
	boot_banner();
    3b02:	f001 f88f 	bl	4c24 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3b06:	2003      	movs	r0, #3
    3b08:	f7ff ff9c 	bl	3a44 <z_sys_init_run_level>
	z_init_static_threads();
    3b0c:	f000 f990 	bl	3e30 <z_init_static_threads>
	main();
    3b10:	f7fc fc64 	bl	3dc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3b14:	4a03      	ldr	r2, [pc, #12]	; (3b24 <bg_thread_main+0x30>)
    3b16:	7b13      	ldrb	r3, [r2, #12]
    3b18:	f023 0301 	bic.w	r3, r3, #1
    3b1c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3b1e:	bd08      	pop	{r3, pc}
    3b20:	20000ff5 	.word	0x20000ff5
    3b24:	20000278 	.word	0x20000278

00003b28 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3b28:	b508      	push	{r3, lr}
    3b2a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3b2c:	4a01      	ldr	r2, [pc, #4]	; (3b34 <switch_to_main_thread+0xc>)
    3b2e:	4802      	ldr	r0, [pc, #8]	; (3b38 <switch_to_main_thread+0x10>)
    3b30:	f7fd fd32 	bl	1598 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3b34:	00003af5 	.word	0x00003af5
    3b38:	20000278 	.word	0x20000278

00003b3c <z_bss_zero>:
{
    3b3c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3b3e:	4803      	ldr	r0, [pc, #12]	; (3b4c <z_bss_zero+0x10>)
    3b40:	4a03      	ldr	r2, [pc, #12]	; (3b50 <z_bss_zero+0x14>)
    3b42:	1a12      	subs	r2, r2, r0
    3b44:	2100      	movs	r1, #0
    3b46:	f002 fb15 	bl	6174 <z_early_memset>
}
    3b4a:	bd08      	pop	{r3, pc}
    3b4c:	200001a8 	.word	0x200001a8
    3b50:	20000ff8 	.word	0x20000ff8

00003b54 <z_init_cpu>:
{
    3b54:	b510      	push	{r4, lr}
    3b56:	4604      	mov	r4, r0
	init_idle_thread(id);
    3b58:	f7ff ff9c 	bl	3a94 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3b5c:	490b      	ldr	r1, [pc, #44]	; (3b8c <z_init_cpu+0x38>)
    3b5e:	23b0      	movs	r3, #176	; 0xb0
    3b60:	fb03 1104 	mla	r1, r3, r4, r1
    3b64:	4a0a      	ldr	r2, [pc, #40]	; (3b90 <z_init_cpu+0x3c>)
    3b66:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3b6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3b6e:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3b70:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3b72:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    3b76:	4b07      	ldr	r3, [pc, #28]	; (3b94 <z_init_cpu+0x40>)
    3b78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    3b7c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    3b80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3b84:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    3b88:	6063      	str	r3, [r4, #4]
}
    3b8a:	bd10      	pop	{r4, pc}
    3b8c:	200001c8 	.word	0x200001c8
    3b90:	20000de0 	.word	0x20000de0
    3b94:	20001580 	.word	0x20001580

00003b98 <prepare_multithreading>:
{
    3b98:	b570      	push	{r4, r5, r6, lr}
    3b9a:	b086      	sub	sp, #24
	z_sched_init();
    3b9c:	f000 fddc 	bl	4758 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3ba0:	4d10      	ldr	r5, [pc, #64]	; (3be4 <prepare_multithreading+0x4c>)
    3ba2:	4b11      	ldr	r3, [pc, #68]	; (3be8 <prepare_multithreading+0x50>)
    3ba4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ba6:	4b11      	ldr	r3, [pc, #68]	; (3bec <prepare_multithreading+0x54>)
    3ba8:	9305      	str	r3, [sp, #20]
    3baa:	2301      	movs	r3, #1
    3bac:	9304      	str	r3, [sp, #16]
    3bae:	2400      	movs	r4, #0
    3bb0:	9403      	str	r4, [sp, #12]
    3bb2:	9402      	str	r4, [sp, #8]
    3bb4:	9401      	str	r4, [sp, #4]
    3bb6:	9400      	str	r4, [sp, #0]
    3bb8:	4b0d      	ldr	r3, [pc, #52]	; (3bf0 <prepare_multithreading+0x58>)
    3bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bbe:	490d      	ldr	r1, [pc, #52]	; (3bf4 <prepare_multithreading+0x5c>)
    3bc0:	4628      	mov	r0, r5
    3bc2:	f000 f8d1 	bl	3d68 <z_setup_new_thread>
    3bc6:	4606      	mov	r6, r0
    3bc8:	7b6b      	ldrb	r3, [r5, #13]
    3bca:	f023 0304 	bic.w	r3, r3, #4
    3bce:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3bd0:	4628      	mov	r0, r5
    3bd2:	f002 fba4 	bl	631e <z_ready_thread>
	z_init_cpu(0);
    3bd6:	4620      	mov	r0, r4
    3bd8:	f7ff ffbc 	bl	3b54 <z_init_cpu>
}
    3bdc:	4630      	mov	r0, r6
    3bde:	b006      	add	sp, #24
    3be0:	bd70      	pop	{r4, r5, r6, pc}
    3be2:	bf00      	nop
    3be4:	20000278 	.word	0x20000278
    3be8:	20000de0 	.word	0x20000de0
    3bec:	00006ad8 	.word	0x00006ad8
    3bf0:	00003af5 	.word	0x00003af5
    3bf4:	20001000 	.word	0x20001000

00003bf8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3bf8:	b500      	push	{lr}
    3bfa:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3bfc:	4b1d      	ldr	r3, [pc, #116]	; (3c74 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3bfe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3c02:	4c1d      	ldr	r4, [pc, #116]	; (3c78 <z_cstart+0x80>)
    3c04:	6963      	ldr	r3, [r4, #20]
    3c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3c0a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c0c:	23e0      	movs	r3, #224	; 0xe0
    3c0e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3c12:	2500      	movs	r5, #0
    3c14:	77e5      	strb	r5, [r4, #31]
    3c16:	7625      	strb	r5, [r4, #24]
    3c18:	7665      	strb	r5, [r4, #25]
    3c1a:	76a5      	strb	r5, [r4, #26]
    3c1c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c22:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3c26:	6263      	str	r3, [r4, #36]	; 0x24
    3c28:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3c2c:	f7fd fe0c 	bl	1848 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3c30:	f7fd fba0 	bl	1374 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3c34:	f04f 33ff 	mov.w	r3, #4294967295
    3c38:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3c3c:	f7fd ff20 	bl	1a80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3c40:	f7fd feb0 	bl	19a4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3c44:	2401      	movs	r4, #1
    3c46:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c4a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3c4e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3c50:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3c52:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    3c54:	4b09      	ldr	r3, [pc, #36]	; (3c7c <z_cstart+0x84>)
    3c56:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3c5a:	f7ff fee7 	bl	3a2c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3c5e:	4628      	mov	r0, r5
    3c60:	f7ff fef0 	bl	3a44 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c64:	4620      	mov	r0, r4
    3c66:	f7ff feed 	bl	3a44 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3c6a:	f7ff ff95 	bl	3b98 <prepare_multithreading>
    3c6e:	f7ff ff5b 	bl	3b28 <switch_to_main_thread>
    3c72:	bf00      	nop
    3c74:	20001da0 	.word	0x20001da0
    3c78:	e000ed00 	.word	0xe000ed00
    3c7c:	20000de0 	.word	0x20000de0

00003c80 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3c80:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c82:	4c06      	ldr	r4, [pc, #24]	; (3c9c <init_mem_slab_module+0x1c>)
	int rc = 0;
    3c84:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c86:	e000      	b.n	3c8a <init_mem_slab_module+0xa>
    3c88:	341c      	adds	r4, #28
    3c8a:	4b05      	ldr	r3, [pc, #20]	; (3ca0 <init_mem_slab_module+0x20>)
    3c8c:	429c      	cmp	r4, r3
    3c8e:	d204      	bcs.n	3c9a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3c90:	4620      	mov	r0, r4
    3c92:	f002 fa77 	bl	6184 <create_free_list>
		if (rc < 0) {
    3c96:	2800      	cmp	r0, #0
    3c98:	daf6      	bge.n	3c88 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3c9a:	bd10      	pop	{r4, pc}
    3c9c:	20000154 	.word	0x20000154
    3ca0:	20000154 	.word	0x20000154

00003ca4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3ca4:	b530      	push	{r4, r5, lr}
    3ca6:	b083      	sub	sp, #12
    3ca8:	460d      	mov	r5, r1
	__asm__ volatile(
    3caa:	f04f 0420 	mov.w	r4, #32
    3cae:	f3ef 8111 	mrs	r1, BASEPRI
    3cb2:	f384 8812 	msr	BASEPRI_MAX, r4
    3cb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3cba:	6944      	ldr	r4, [r0, #20]
    3cbc:	b16c      	cbz	r4, 3cda <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3cbe:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3cc0:	6943      	ldr	r3, [r0, #20]
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3cc6:	6983      	ldr	r3, [r0, #24]
    3cc8:	3301      	adds	r3, #1
    3cca:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3ccc:	2000      	movs	r0, #0
	__asm__ volatile(
    3cce:	f381 8811 	msr	BASEPRI, r1
    3cd2:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3cd6:	b003      	add	sp, #12
    3cd8:	bd30      	pop	{r4, r5, pc}
    3cda:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3cde:	ea53 0402 	orrs.w	r4, r3, r2
    3ce2:	d104      	bne.n	3cee <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3ce4:	2300      	movs	r3, #0
    3ce6:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3ce8:	f06f 000b 	mvn.w	r0, #11
    3cec:	e7ef      	b.n	3cce <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3cee:	9200      	str	r2, [sp, #0]
    3cf0:	9301      	str	r3, [sp, #4]
    3cf2:	4602      	mov	r2, r0
    3cf4:	4660      	mov	r0, ip
    3cf6:	f000 fc03 	bl	4500 <z_pend_curr>
		if (result == 0) {
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d1eb      	bne.n	3cd6 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3cfe:	4b02      	ldr	r3, [pc, #8]	; (3d08 <k_mem_slab_alloc+0x64>)
    3d00:	689b      	ldr	r3, [r3, #8]
    3d02:	695b      	ldr	r3, [r3, #20]
    3d04:	602b      	str	r3, [r5, #0]
		return result;
    3d06:	e7e6      	b.n	3cd6 <k_mem_slab_alloc+0x32>
    3d08:	20000de0 	.word	0x20000de0

00003d0c <z_thread_monitor_exit>:
	__asm__ volatile(
    3d0c:	f04f 0320 	mov.w	r3, #32
    3d10:	f3ef 8111 	mrs	r1, BASEPRI
    3d14:	f383 8812 	msr	BASEPRI_MAX, r3
    3d18:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3d1c:	4b0a      	ldr	r3, [pc, #40]	; (3d48 <z_thread_monitor_exit+0x3c>)
    3d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d20:	4283      	cmp	r3, r0
    3d22:	d104      	bne.n	3d2e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3d26:	4b08      	ldr	r3, [pc, #32]	; (3d48 <z_thread_monitor_exit+0x3c>)
    3d28:	629a      	str	r2, [r3, #40]	; 0x28
    3d2a:	e007      	b.n	3d3c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3d2c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3d2e:	b113      	cbz	r3, 3d36 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3d32:	4282      	cmp	r2, r0
    3d34:	d1fa      	bne.n	3d2c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3d36:	b10b      	cbz	r3, 3d3c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3d38:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3d3a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3d3c:	f381 8811 	msr	BASEPRI, r1
    3d40:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop
    3d48:	20000de0 	.word	0x20000de0

00003d4c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3d4c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3d4e:	ea53 0102 	orrs.w	r1, r3, r2
    3d52:	d102      	bne.n	3d5a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3d54:	f002 fa7f 	bl	6256 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3d58:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d5a:	4902      	ldr	r1, [pc, #8]	; (3d64 <schedule_new_thread+0x18>)
    3d5c:	3018      	adds	r0, #24
    3d5e:	f000 fe53 	bl	4a08 <z_add_timeout>
    3d62:	e7f9      	b.n	3d58 <schedule_new_thread+0xc>
    3d64:	00006357 	.word	0x00006357

00003d68 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d6c:	b085      	sub	sp, #20
    3d6e:	4604      	mov	r4, r0
    3d70:	460f      	mov	r7, r1
    3d72:	4615      	mov	r5, r2
    3d74:	461e      	mov	r6, r3
    3d76:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3d7a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3d7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3d82:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3d86:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d8a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3d8c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3d90:	2204      	movs	r2, #4
    3d92:	9911      	ldr	r1, [sp, #68]	; 0x44
    3d94:	f002 fa63 	bl	625e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3d98:	462a      	mov	r2, r5
    3d9a:	4639      	mov	r1, r7
    3d9c:	4620      	mov	r0, r4
    3d9e:	f002 fa42 	bl	6226 <setup_thread_stack>
    3da2:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3da4:	f8cd 8008 	str.w	r8, [sp, #8]
    3da8:	f8cd 9004 	str.w	r9, [sp, #4]
    3dac:	f8cd a000 	str.w	sl, [sp]
    3db0:	4633      	mov	r3, r6
    3db2:	4602      	mov	r2, r0
    3db4:	4639      	mov	r1, r7
    3db6:	4620      	mov	r0, r4
    3db8:	f7fd fba4 	bl	1504 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3dbc:	2300      	movs	r3, #0
    3dbe:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3dc0:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3dc2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3dc6:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3dca:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3dce:	f04f 0320 	mov.w	r3, #32
    3dd2:	f3ef 8211 	mrs	r2, BASEPRI
    3dd6:	f383 8812 	msr	BASEPRI_MAX, r3
    3dda:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3dde:	4b13      	ldr	r3, [pc, #76]	; (3e2c <z_setup_new_thread+0xc4>)
    3de0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3de2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3de4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3de6:	f382 8811 	msr	BASEPRI, r2
    3dea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3dee:	f1bb 0f00 	cmp.w	fp, #0
    3df2:	d013      	beq.n	3e1c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3df4:	221f      	movs	r2, #31
    3df6:	4659      	mov	r1, fp
    3df8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3dfc:	f001 fbd7 	bl	55ae <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3e00:	2300      	movs	r3, #0
    3e02:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3e06:	4b09      	ldr	r3, [pc, #36]	; (3e2c <z_setup_new_thread+0xc4>)
    3e08:	689b      	ldr	r3, [r3, #8]
    3e0a:	b15b      	cbz	r3, 3e24 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3e10:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3e14:	4628      	mov	r0, r5
    3e16:	b005      	add	sp, #20
    3e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3e1c:	2300      	movs	r3, #0
    3e1e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3e22:	e7f0      	b.n	3e06 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3e24:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3e28:	e7f4      	b.n	3e14 <z_setup_new_thread+0xac>
    3e2a:	bf00      	nop
    3e2c:	20000de0 	.word	0x20000de0

00003e30 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3e30:	b530      	push	{r4, r5, lr}
    3e32:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3e34:	4c21      	ldr	r4, [pc, #132]	; (3ebc <z_init_static_threads+0x8c>)
    3e36:	e014      	b.n	3e62 <z_init_static_threads+0x32>
		z_setup_new_thread(
    3e38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e3a:	9305      	str	r3, [sp, #20]
    3e3c:	6a23      	ldr	r3, [r4, #32]
    3e3e:	9304      	str	r3, [sp, #16]
    3e40:	69e3      	ldr	r3, [r4, #28]
    3e42:	9303      	str	r3, [sp, #12]
    3e44:	69a3      	ldr	r3, [r4, #24]
    3e46:	9302      	str	r3, [sp, #8]
    3e48:	6963      	ldr	r3, [r4, #20]
    3e4a:	9301      	str	r3, [sp, #4]
    3e4c:	6923      	ldr	r3, [r4, #16]
    3e4e:	9300      	str	r3, [sp, #0]
    3e50:	68e3      	ldr	r3, [r4, #12]
    3e52:	68a2      	ldr	r2, [r4, #8]
    3e54:	6861      	ldr	r1, [r4, #4]
    3e56:	6820      	ldr	r0, [r4, #0]
    3e58:	f7ff ff86 	bl	3d68 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3e5c:	6823      	ldr	r3, [r4, #0]
    3e5e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3e60:	3430      	adds	r4, #48	; 0x30
    3e62:	4b17      	ldr	r3, [pc, #92]	; (3ec0 <z_init_static_threads+0x90>)
    3e64:	429c      	cmp	r4, r3
    3e66:	d3e7      	bcc.n	3e38 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3e68:	f000 f9de 	bl	4228 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e6c:	4c13      	ldr	r4, [pc, #76]	; (3ebc <z_init_static_threads+0x8c>)
    3e6e:	e000      	b.n	3e72 <z_init_static_threads+0x42>
    3e70:	3430      	adds	r4, #48	; 0x30
    3e72:	4b13      	ldr	r3, [pc, #76]	; (3ec0 <z_init_static_threads+0x90>)
    3e74:	429c      	cmp	r4, r3
    3e76:	d21c      	bcs.n	3eb2 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3e78:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3e7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    3e7e:	d0f7      	beq.n	3e70 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3e80:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3e82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3e86:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3e88:	03c9      	lsls	r1, r1, #15
    3e8a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3e8e:	03c0      	lsls	r0, r0, #15
    3e90:	f240 33e7 	movw	r3, #999	; 0x3e7
    3e94:	18c0      	adds	r0, r0, r3
    3e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e9a:	f04f 0300 	mov.w	r3, #0
    3e9e:	f141 0100 	adc.w	r1, r1, #0
    3ea2:	f7fc f92d 	bl	100 <__aeabi_uldivmod>
    3ea6:	4602      	mov	r2, r0
    3ea8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3eaa:	4628      	mov	r0, r5
    3eac:	f7ff ff4e 	bl	3d4c <schedule_new_thread>
    3eb0:	e7de      	b.n	3e70 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3eb2:	f000 fbdb 	bl	466c <k_sched_unlock>
}
    3eb6:	b007      	add	sp, #28
    3eb8:	bd30      	pop	{r4, r5, pc}
    3eba:	bf00      	nop
    3ebc:	20000154 	.word	0x20000154
    3ec0:	20000154 	.word	0x20000154

00003ec4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3ec4:	b508      	push	{r3, lr}
    3ec6:	e001      	b.n	3ecc <idle+0x8>
	arch_cpu_idle();
    3ec8:	f7fd fa5a 	bl	1380 <arch_cpu_idle>
	__asm__ volatile(
    3ecc:	f04f 0220 	mov.w	r2, #32
    3ed0:	f3ef 8311 	mrs	r3, BASEPRI
    3ed4:	f382 8812 	msr	BASEPRI_MAX, r2
    3ed8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3edc:	f002 fb23 	bl	6526 <z_get_next_timeout_expiry>
    3ee0:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <idle+0x34>)
    3ee2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <idle+0x38>)
    3ee6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d0ed      	beq.n	3ec8 <idle+0x4>
    3eec:	f7fd f84e 	bl	f8c <pm_system_suspend>
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d1eb      	bne.n	3ecc <idle+0x8>
    3ef4:	e7e8      	b.n	3ec8 <idle+0x4>
    3ef6:	bf00      	nop
    3ef8:	20000de0 	.word	0x20000de0
    3efc:	20000ff5 	.word	0x20000ff5

00003f00 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f04:	b083      	sub	sp, #12
    3f06:	4604      	mov	r4, r0
    3f08:	461d      	mov	r5, r3
    3f0a:	f04f 0320 	mov.w	r3, #32
    3f0e:	f3ef 8711 	mrs	r7, BASEPRI
    3f12:	f383 8812 	msr	BASEPRI_MAX, r3
    3f16:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3f1a:	68c1      	ldr	r1, [r0, #12]
    3f1c:	b999      	cbnz	r1, 3f46 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3f1e:	2900      	cmp	r1, #0
    3f20:	d14f      	bne.n	3fc2 <z_impl_k_mutex_lock+0xc2>
    3f22:	4b3a      	ldr	r3, [pc, #232]	; (400c <z_impl_k_mutex_lock+0x10c>)
    3f24:	689b      	ldr	r3, [r3, #8]
    3f26:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3f2a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3f2c:	3101      	adds	r1, #1
    3f2e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3f30:	4b36      	ldr	r3, [pc, #216]	; (400c <z_impl_k_mutex_lock+0x10c>)
    3f32:	689b      	ldr	r3, [r3, #8]
    3f34:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3f36:	f387 8811 	msr	BASEPRI, r7
    3f3a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3f3e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3f40:	b003      	add	sp, #12
    3f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f46:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3f48:	6882      	ldr	r2, [r0, #8]
    3f4a:	4b30      	ldr	r3, [pc, #192]	; (400c <z_impl_k_mutex_lock+0x10c>)
    3f4c:	689b      	ldr	r3, [r3, #8]
    3f4e:	429a      	cmp	r2, r3
    3f50:	d0e5      	beq.n	3f1e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3f52:	ea55 0106 	orrs.w	r1, r5, r6
    3f56:	bf0c      	ite	eq
    3f58:	f04f 0801 	moveq.w	r8, #1
    3f5c:	f04f 0800 	movne.w	r8, #0
    3f60:	d031      	beq.n	3fc6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    3f62:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3f66:	4649      	mov	r1, r9
    3f68:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3f6c:	f002 f988 	bl	6280 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3f70:	4581      	cmp	r9, r0
    3f72:	dc2f      	bgt.n	3fd4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    3f74:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3f78:	9600      	str	r6, [sp, #0]
    3f7a:	9501      	str	r5, [sp, #4]
    3f7c:	4622      	mov	r2, r4
    3f7e:	4639      	mov	r1, r7
    3f80:	4823      	ldr	r0, [pc, #140]	; (4010 <z_impl_k_mutex_lock+0x110>)
    3f82:	f000 fabd 	bl	4500 <z_pend_curr>
	if (got_mutex == 0) {
    3f86:	2800      	cmp	r0, #0
    3f88:	d0da      	beq.n	3f40 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    3f8a:	f04f 0320 	mov.w	r3, #32
    3f8e:	f3ef 8511 	mrs	r5, BASEPRI
    3f92:	f383 8812 	msr	BASEPRI_MAX, r3
    3f96:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f9a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f9c:	429c      	cmp	r4, r3
    3f9e:	d01f      	beq.n	3fe0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3fa0:	b1f3      	cbz	r3, 3fe0 <z_impl_k_mutex_lock+0xe0>
    3fa2:	6921      	ldr	r1, [r4, #16]
    3fa4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3fa8:	f002 f96a 	bl	6280 <new_prio_for_inheritance>
    3fac:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3fae:	4620      	mov	r0, r4
    3fb0:	f002 f971 	bl	6296 <adjust_owner_prio>
    3fb4:	b9b0      	cbnz	r0, 3fe4 <z_impl_k_mutex_lock+0xe4>
    3fb6:	f1b9 0f00 	cmp.w	r9, #0
    3fba:	d015      	beq.n	3fe8 <z_impl_k_mutex_lock+0xe8>
    3fbc:	f04f 0801 	mov.w	r8, #1
    3fc0:	e012      	b.n	3fe8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    3fc2:	6923      	ldr	r3, [r4, #16]
    3fc4:	e7b1      	b.n	3f2a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    3fc6:	f387 8811 	msr	BASEPRI, r7
    3fca:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3fce:	f06f 000f 	mvn.w	r0, #15
    3fd2:	e7b5      	b.n	3f40 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    3fd4:	4601      	mov	r1, r0
    3fd6:	4620      	mov	r0, r4
    3fd8:	f002 f95d 	bl	6296 <adjust_owner_prio>
    3fdc:	4681      	mov	r9, r0
    3fde:	e7cb      	b.n	3f78 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3fe0:	6921      	ldr	r1, [r4, #16]
    3fe2:	e7e4      	b.n	3fae <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3fe4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    3fe8:	f1b8 0f00 	cmp.w	r8, #0
    3fec:	d106      	bne.n	3ffc <z_impl_k_mutex_lock+0xfc>
    3fee:	f385 8811 	msr	BASEPRI, r5
    3ff2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3ff6:	f06f 000a 	mvn.w	r0, #10
    3ffa:	e7a1      	b.n	3f40 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    3ffc:	4629      	mov	r1, r5
    3ffe:	4804      	ldr	r0, [pc, #16]	; (4010 <z_impl_k_mutex_lock+0x110>)
    4000:	f000 f8f6 	bl	41f0 <z_reschedule>
	return -EAGAIN;
    4004:	f06f 000a 	mvn.w	r0, #10
    4008:	e79a      	b.n	3f40 <z_impl_k_mutex_lock+0x40>
    400a:	bf00      	nop
    400c:	20000de0 	.word	0x20000de0
    4010:	20000e0c 	.word	0x20000e0c

00004014 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4014:	6882      	ldr	r2, [r0, #8]
    4016:	2a00      	cmp	r2, #0
    4018:	d035      	beq.n	4086 <z_impl_k_mutex_unlock+0x72>
{
    401a:	b538      	push	{r3, r4, r5, lr}
    401c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    401e:	4b1d      	ldr	r3, [pc, #116]	; (4094 <z_impl_k_mutex_unlock+0x80>)
    4020:	689b      	ldr	r3, [r3, #8]
    4022:	429a      	cmp	r2, r3
    4024:	d132      	bne.n	408c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4026:	7bda      	ldrb	r2, [r3, #15]
    4028:	3a01      	subs	r2, #1
    402a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    402c:	68c3      	ldr	r3, [r0, #12]
    402e:	2b01      	cmp	r3, #1
    4030:	d905      	bls.n	403e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4032:	3b01      	subs	r3, #1
    4034:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4036:	f000 fb19 	bl	466c <k_sched_unlock>

	return 0;
    403a:	2000      	movs	r0, #0
}
    403c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    403e:	f04f 0320 	mov.w	r3, #32
    4042:	f3ef 8511 	mrs	r5, BASEPRI
    4046:	f383 8812 	msr	BASEPRI_MAX, r3
    404a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    404e:	6901      	ldr	r1, [r0, #16]
    4050:	f002 f921 	bl	6296 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4054:	4620      	mov	r0, r4
    4056:	f002 fa02 	bl	645e <z_unpend_first_thread>
	mutex->owner = new_owner;
    405a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    405c:	b160      	cbz	r0, 4078 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    405e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4062:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4064:	2300      	movs	r3, #0
    4066:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    406a:	f002 f958 	bl	631e <z_ready_thread>
		z_reschedule(&lock, key);
    406e:	4629      	mov	r1, r5
    4070:	4809      	ldr	r0, [pc, #36]	; (4098 <z_impl_k_mutex_unlock+0x84>)
    4072:	f000 f8bd 	bl	41f0 <z_reschedule>
    4076:	e7de      	b.n	4036 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4078:	2300      	movs	r3, #0
    407a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    407c:	f385 8811 	msr	BASEPRI, r5
    4080:	f3bf 8f6f 	isb	sy
    4084:	e7d7      	b.n	4036 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4086:	f06f 0015 	mvn.w	r0, #21
}
    408a:	4770      	bx	lr
		return -EPERM;
    408c:	f04f 30ff 	mov.w	r0, #4294967295
    4090:	e7d4      	b.n	403c <z_impl_k_mutex_unlock+0x28>
    4092:	bf00      	nop
    4094:	20000de0 	.word	0x20000de0
    4098:	20000e0c 	.word	0x20000e0c

0000409c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    409c:	b538      	push	{r3, r4, r5, lr}
    409e:	4604      	mov	r4, r0
	__asm__ volatile(
    40a0:	f04f 0320 	mov.w	r3, #32
    40a4:	f3ef 8511 	mrs	r5, BASEPRI
    40a8:	f383 8812 	msr	BASEPRI_MAX, r3
    40ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    40b0:	f002 f9d5 	bl	645e <z_unpend_first_thread>

	if (thread != NULL) {
    40b4:	b148      	cbz	r0, 40ca <z_impl_k_sem_give+0x2e>
    40b6:	2200      	movs	r2, #0
    40b8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    40bc:	f002 f92f 	bl	631e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    40c0:	4629      	mov	r1, r5
    40c2:	4807      	ldr	r0, [pc, #28]	; (40e0 <z_impl_k_sem_give+0x44>)
    40c4:	f000 f894 	bl	41f0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    40c8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    40ca:	68a3      	ldr	r3, [r4, #8]
    40cc:	68e2      	ldr	r2, [r4, #12]
    40ce:	4293      	cmp	r3, r2
    40d0:	d003      	beq.n	40da <z_impl_k_sem_give+0x3e>
    40d2:	2201      	movs	r2, #1
    40d4:	4413      	add	r3, r2
    40d6:	60a3      	str	r3, [r4, #8]
}
    40d8:	e7f2      	b.n	40c0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    40da:	2200      	movs	r2, #0
    40dc:	e7fa      	b.n	40d4 <z_impl_k_sem_give+0x38>
    40de:	bf00      	nop
    40e0:	20000e0c 	.word	0x20000e0c

000040e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    40e4:	b510      	push	{r4, lr}
    40e6:	b082      	sub	sp, #8
    40e8:	f04f 0420 	mov.w	r4, #32
    40ec:	f3ef 8111 	mrs	r1, BASEPRI
    40f0:	f384 8812 	msr	BASEPRI_MAX, r4
    40f4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    40f8:	6884      	ldr	r4, [r0, #8]
    40fa:	b144      	cbz	r4, 410e <z_impl_k_sem_take+0x2a>
		sem->count--;
    40fc:	3c01      	subs	r4, #1
    40fe:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4100:	f381 8811 	msr	BASEPRI, r1
    4104:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4108:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    410a:	b002      	add	sp, #8
    410c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    410e:	ea53 0402 	orrs.w	r4, r3, r2
    4112:	d006      	beq.n	4122 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4114:	9200      	str	r2, [sp, #0]
    4116:	9301      	str	r3, [sp, #4]
    4118:	4602      	mov	r2, r0
    411a:	4805      	ldr	r0, [pc, #20]	; (4130 <z_impl_k_sem_take+0x4c>)
    411c:	f000 f9f0 	bl	4500 <z_pend_curr>
	return ret;
    4120:	e7f3      	b.n	410a <z_impl_k_sem_take+0x26>
    4122:	f381 8811 	msr	BASEPRI, r1
    4126:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    412a:	f06f 000f 	mvn.w	r0, #15
    412e:	e7ec      	b.n	410a <z_impl_k_sem_take+0x26>
    4130:	20000e0c 	.word	0x20000e0c

00004134 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4134:	f1b3 3fff 	cmp.w	r3, #4294967295
    4138:	bf08      	it	eq
    413a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    413e:	d100      	bne.n	4142 <add_thread_timeout+0xe>
    4140:	4770      	bx	lr
{
    4142:	b508      	push	{r3, lr}
    4144:	4902      	ldr	r1, [pc, #8]	; (4150 <add_thread_timeout+0x1c>)
    4146:	3018      	adds	r0, #24
    4148:	f000 fc5e 	bl	4a08 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    414c:	bd08      	pop	{r3, pc}
    414e:	bf00      	nop
    4150:	00006357 	.word	0x00006357

00004154 <z_reset_time_slice>:
{
    4154:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    4156:	4b07      	ldr	r3, [pc, #28]	; (4174 <z_reset_time_slice+0x20>)
    4158:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    415a:	b904      	cbnz	r4, 415e <z_reset_time_slice+0xa>
}
    415c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    415e:	f7fe fb39 	bl	27d4 <sys_clock_elapsed>
    4162:	4404      	add	r4, r0
    4164:	4b04      	ldr	r3, [pc, #16]	; (4178 <z_reset_time_slice+0x24>)
    4166:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4168:	2100      	movs	r1, #0
    416a:	4b02      	ldr	r3, [pc, #8]	; (4174 <z_reset_time_slice+0x20>)
    416c:	6818      	ldr	r0, [r3, #0]
    416e:	f002 f9f1 	bl	6554 <z_set_timeout_expiry>
}
    4172:	e7f3      	b.n	415c <z_reset_time_slice+0x8>
    4174:	20000e14 	.word	0x20000e14
    4178:	20000de0 	.word	0x20000de0

0000417c <k_sched_time_slice_set>:
{
    417c:	b570      	push	{r4, r5, r6, lr}
    417e:	4604      	mov	r4, r0
    4180:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    4182:	2300      	movs	r3, #0
	__asm__ volatile(
    4184:	f04f 0220 	mov.w	r2, #32
    4188:	f3ef 8611 	mrs	r6, BASEPRI
    418c:	f382 8812 	msr	BASEPRI_MAX, r2
    4190:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4194:	e00e      	b.n	41b4 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    4196:	2802      	cmp	r0, #2
    4198:	bfb8      	it	lt
    419a:	2002      	movlt	r0, #2
    419c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    419e:	4b11      	ldr	r3, [pc, #68]	; (41e4 <k_sched_time_slice_set+0x68>)
    41a0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    41a2:	4b11      	ldr	r3, [pc, #68]	; (41e8 <k_sched_time_slice_set+0x6c>)
    41a4:	6898      	ldr	r0, [r3, #8]
    41a6:	f7ff ffd5 	bl	4154 <z_reset_time_slice>
	__asm__ volatile(
    41aa:	f386 8811 	msr	BASEPRI, r6
    41ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    41b2:	2301      	movs	r3, #1
    41b4:	b9a3      	cbnz	r3, 41e0 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    41b6:	4b0c      	ldr	r3, [pc, #48]	; (41e8 <k_sched_time_slice_set+0x6c>)
    41b8:	2200      	movs	r2, #0
    41ba:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    41bc:	0c61      	lsrs	r1, r4, #17
    41be:	03e3      	lsls	r3, r4, #15
    41c0:	f240 30e7 	movw	r0, #999	; 0x3e7
    41c4:	1818      	adds	r0, r3, r0
    41c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41ca:	f04f 0300 	mov.w	r3, #0
    41ce:	f141 0100 	adc.w	r1, r1, #0
    41d2:	f7fb ff95 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    41d6:	4b05      	ldr	r3, [pc, #20]	; (41ec <k_sched_time_slice_set+0x70>)
    41d8:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    41da:	2c00      	cmp	r4, #0
    41dc:	dcdb      	bgt.n	4196 <k_sched_time_slice_set+0x1a>
    41de:	e7de      	b.n	419e <k_sched_time_slice_set+0x22>
}
    41e0:	bd70      	pop	{r4, r5, r6, pc}
    41e2:	bf00      	nop
    41e4:	20000e10 	.word	0x20000e10
    41e8:	20000de0 	.word	0x20000de0
    41ec:	20000e14 	.word	0x20000e14

000041f0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    41f0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    41f2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    41f4:	b921      	cbnz	r1, 4200 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    41f6:	f3ef 8305 	mrs	r3, IPSR
    41fa:	b913      	cbnz	r3, 4202 <z_reschedule+0x12>
    41fc:	2101      	movs	r1, #1
    41fe:	e000      	b.n	4202 <z_reschedule+0x12>
    4200:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    4202:	f011 0f01 	tst.w	r1, #1
    4206:	d007      	beq.n	4218 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4208:	4b06      	ldr	r3, [pc, #24]	; (4224 <z_reschedule+0x34>)
    420a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    420c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    420e:	429a      	cmp	r2, r3
    4210:	d002      	beq.n	4218 <z_reschedule+0x28>
	ret = arch_swap(key);
    4212:	f7fd f91f 	bl	1454 <arch_swap>
		z_swap(lock, key);
    4216:	e003      	b.n	4220 <z_reschedule+0x30>
    4218:	f380 8811 	msr	BASEPRI, r0
    421c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4220:	bd08      	pop	{r3, pc}
    4222:	bf00      	nop
    4224:	20000de0 	.word	0x20000de0

00004228 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4228:	2300      	movs	r3, #0
	__asm__ volatile(
    422a:	f04f 0220 	mov.w	r2, #32
    422e:	f3ef 8111 	mrs	r1, BASEPRI
    4232:	f382 8812 	msr	BASEPRI_MAX, r2
    4236:	f3bf 8f6f 	isb	sy
    423a:	e009      	b.n	4250 <k_sched_lock+0x28>
    423c:	4b06      	ldr	r3, [pc, #24]	; (4258 <k_sched_lock+0x30>)
    423e:	689a      	ldr	r2, [r3, #8]
    4240:	7bd3      	ldrb	r3, [r2, #15]
    4242:	3b01      	subs	r3, #1
    4244:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4246:	f381 8811 	msr	BASEPRI, r1
    424a:	f3bf 8f6f 	isb	sy
    424e:	2301      	movs	r3, #1
    4250:	2b00      	cmp	r3, #0
    4252:	d0f3      	beq.n	423c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4254:	4770      	bx	lr
    4256:	bf00      	nop
    4258:	20000de0 	.word	0x20000de0

0000425c <update_cache>:
{
    425c:	b538      	push	{r3, r4, r5, lr}
    425e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4260:	4810      	ldr	r0, [pc, #64]	; (42a4 <update_cache+0x48>)
    4262:	f002 f855 	bl	6310 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4266:	4605      	mov	r5, r0
    4268:	b170      	cbz	r0, 4288 <update_cache+0x2c>
	if (preempt_ok != 0) {
    426a:	b984      	cbnz	r4, 428e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    426c:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <update_cache+0x4c>)
    426e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4270:	7b5a      	ldrb	r2, [r3, #13]
    4272:	f012 0f1f 	tst.w	r2, #31
    4276:	d10a      	bne.n	428e <update_cache+0x32>
	return node->next != NULL;
    4278:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    427a:	b942      	cbnz	r2, 428e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    427c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    427e:	2a7f      	cmp	r2, #127	; 0x7f
    4280:	d905      	bls.n	428e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4282:	4a09      	ldr	r2, [pc, #36]	; (42a8 <update_cache+0x4c>)
    4284:	61d3      	str	r3, [r2, #28]
    4286:	e00b      	b.n	42a0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4288:	4b07      	ldr	r3, [pc, #28]	; (42a8 <update_cache+0x4c>)
    428a:	68dd      	ldr	r5, [r3, #12]
    428c:	e7ed      	b.n	426a <update_cache+0xe>
		if (thread != _current) {
    428e:	4b06      	ldr	r3, [pc, #24]	; (42a8 <update_cache+0x4c>)
    4290:	689b      	ldr	r3, [r3, #8]
    4292:	42ab      	cmp	r3, r5
    4294:	d002      	beq.n	429c <update_cache+0x40>
			z_reset_time_slice(thread);
    4296:	4628      	mov	r0, r5
    4298:	f7ff ff5c 	bl	4154 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    429c:	4b02      	ldr	r3, [pc, #8]	; (42a8 <update_cache+0x4c>)
    429e:	61dd      	str	r5, [r3, #28]
}
    42a0:	bd38      	pop	{r3, r4, r5, pc}
    42a2:	bf00      	nop
    42a4:	20000e00 	.word	0x20000e00
    42a8:	20000de0 	.word	0x20000de0

000042ac <move_thread_to_end_of_prio_q>:
{
    42ac:	b538      	push	{r3, r4, r5, lr}
    42ae:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    42b0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    42b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    42b6:	2b00      	cmp	r3, #0
    42b8:	db28      	blt.n	430c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    42ba:	7b6b      	ldrb	r3, [r5, #13]
    42bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42c0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    42c2:	4b1a      	ldr	r3, [pc, #104]	; (432c <move_thread_to_end_of_prio_q+0x80>)
    42c4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42c8:	429c      	cmp	r4, r3
    42ca:	d02d      	beq.n	4328 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42cc:	b16c      	cbz	r4, 42ea <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    42ce:	4621      	mov	r1, r4
    42d0:	4628      	mov	r0, r5
    42d2:	f001 fff6 	bl	62c2 <z_sched_prio_cmp>
    42d6:	2800      	cmp	r0, #0
    42d8:	dc20      	bgt.n	431c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42da:	b134      	cbz	r4, 42ea <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    42dc:	4b13      	ldr	r3, [pc, #76]	; (432c <move_thread_to_end_of_prio_q+0x80>)
    42de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42e0:	429c      	cmp	r4, r3
    42e2:	d002      	beq.n	42ea <move_thread_to_end_of_prio_q+0x3e>
    42e4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42e6:	2c00      	cmp	r4, #0
    42e8:	d1f0      	bne.n	42cc <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    42ea:	4b10      	ldr	r3, [pc, #64]	; (432c <move_thread_to_end_of_prio_q+0x80>)
    42ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    42ee:	f103 0120 	add.w	r1, r3, #32
    42f2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    42f4:	606a      	str	r2, [r5, #4]

	tail->next = node;
    42f6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    42f8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    42fa:	4b0c      	ldr	r3, [pc, #48]	; (432c <move_thread_to_end_of_prio_q+0x80>)
    42fc:	6898      	ldr	r0, [r3, #8]
    42fe:	42a8      	cmp	r0, r5
    4300:	bf14      	ite	ne
    4302:	2000      	movne	r0, #0
    4304:	2001      	moveq	r0, #1
    4306:	f7ff ffa9 	bl	425c <update_cache>
}
    430a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    430c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4310:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4312:	4601      	mov	r1, r0
    4314:	4806      	ldr	r0, [pc, #24]	; (4330 <move_thread_to_end_of_prio_q+0x84>)
    4316:	f001 fff3 	bl	6300 <z_priq_dumb_remove>
}
    431a:	e7ce      	b.n	42ba <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    431c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    431e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4320:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4322:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4324:	6065      	str	r5, [r4, #4]
}
    4326:	e7e8      	b.n	42fa <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4328:	2400      	movs	r4, #0
    432a:	e7cf      	b.n	42cc <move_thread_to_end_of_prio_q+0x20>
    432c:	20000de0 	.word	0x20000de0
    4330:	20000e00 	.word	0x20000e00

00004334 <slice_expired_locked>:
{
    4334:	b538      	push	{r3, r4, r5, lr}
    4336:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4338:	4b07      	ldr	r3, [pc, #28]	; (4358 <slice_expired_locked+0x24>)
    433a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    433c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    433e:	f013 0f1f 	tst.w	r3, #31
    4342:	d004      	beq.n	434e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4344:	4628      	mov	r0, r5
    4346:	f7ff ff05 	bl	4154 <z_reset_time_slice>
}
    434a:	4620      	mov	r0, r4
    434c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    434e:	4628      	mov	r0, r5
    4350:	f7ff ffac 	bl	42ac <move_thread_to_end_of_prio_q>
    4354:	e7f6      	b.n	4344 <slice_expired_locked+0x10>
    4356:	bf00      	nop
    4358:	20000de0 	.word	0x20000de0

0000435c <z_time_slice>:
{
    435c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    435e:	f04f 0320 	mov.w	r3, #32
    4362:	f3ef 8411 	mrs	r4, BASEPRI
    4366:	f383 8812 	msr	BASEPRI_MAX, r3
    436a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    436e:	4b22      	ldr	r3, [pc, #136]	; (43f8 <z_time_slice+0x9c>)
    4370:	689b      	ldr	r3, [r3, #8]
    4372:	4a22      	ldr	r2, [pc, #136]	; (43fc <z_time_slice+0xa0>)
    4374:	6812      	ldr	r2, [r2, #0]
    4376:	4293      	cmp	r3, r2
    4378:	d018      	beq.n	43ac <z_time_slice+0x50>
    437a:	4621      	mov	r1, r4
	pending_current = NULL;
    437c:	4a1f      	ldr	r2, [pc, #124]	; (43fc <z_time_slice+0xa0>)
    437e:	2500      	movs	r5, #0
    4380:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    4382:	4a1f      	ldr	r2, [pc, #124]	; (4400 <z_time_slice+0xa4>)
    4384:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    4386:	b372      	cbz	r2, 43e6 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4388:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    438a:	2a7f      	cmp	r2, #127	; 0x7f
    438c:	d816      	bhi.n	43bc <z_time_slice+0x60>
    438e:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4390:	f012 0f1f 	tst.w	r2, #31
    4394:	d11c      	bne.n	43d0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4396:	f993 500e 	ldrsb.w	r5, [r3, #14]
    439a:	4a1a      	ldr	r2, [pc, #104]	; (4404 <z_time_slice+0xa8>)
    439c:	6812      	ldr	r2, [r2, #0]
    439e:	4295      	cmp	r5, r2
    43a0:	db18      	blt.n	43d4 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    43a2:	4a19      	ldr	r2, [pc, #100]	; (4408 <z_time_slice+0xac>)
    43a4:	4293      	cmp	r3, r2
    43a6:	d017      	beq.n	43d8 <z_time_slice+0x7c>
    43a8:	2301      	movs	r3, #1
    43aa:	e008      	b.n	43be <z_time_slice+0x62>
		z_reset_time_slice(_current);
    43ac:	4618      	mov	r0, r3
    43ae:	f7ff fed1 	bl	4154 <z_reset_time_slice>
	__asm__ volatile(
    43b2:	f384 8811 	msr	BASEPRI, r4
    43b6:	f3bf 8f6f 	isb	sy
		return;
    43ba:	e01b      	b.n	43f4 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    43bc:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    43be:	b193      	cbz	r3, 43e6 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    43c0:	4b0d      	ldr	r3, [pc, #52]	; (43f8 <z_time_slice+0x9c>)
    43c2:	691b      	ldr	r3, [r3, #16]
    43c4:	4283      	cmp	r3, r0
    43c6:	dd09      	ble.n	43dc <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    43c8:	1a18      	subs	r0, r3, r0
    43ca:	4b0b      	ldr	r3, [pc, #44]	; (43f8 <z_time_slice+0x9c>)
    43cc:	6118      	str	r0, [r3, #16]
    43ce:	e00d      	b.n	43ec <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    43d0:	2300      	movs	r3, #0
    43d2:	e7f4      	b.n	43be <z_time_slice+0x62>
    43d4:	2300      	movs	r3, #0
    43d6:	e7f2      	b.n	43be <z_time_slice+0x62>
    43d8:	2300      	movs	r3, #0
    43da:	e7f0      	b.n	43be <z_time_slice+0x62>
			key = slice_expired_locked(key);
    43dc:	4620      	mov	r0, r4
    43de:	f7ff ffa9 	bl	4334 <slice_expired_locked>
    43e2:	4601      	mov	r1, r0
    43e4:	e002      	b.n	43ec <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    43e6:	4b04      	ldr	r3, [pc, #16]	; (43f8 <z_time_slice+0x9c>)
    43e8:	2200      	movs	r2, #0
    43ea:	611a      	str	r2, [r3, #16]
    43ec:	f381 8811 	msr	BASEPRI, r1
    43f0:	f3bf 8f6f 	isb	sy
}
    43f4:	bd38      	pop	{r3, r4, r5, pc}
    43f6:	bf00      	nop
    43f8:	20000de0 	.word	0x20000de0
    43fc:	20000e0c 	.word	0x20000e0c
    4400:	20000e14 	.word	0x20000e14
    4404:	20000e10 	.word	0x20000e10
    4408:	200001c8 	.word	0x200001c8

0000440c <ready_thread>:
{
    440c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    440e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4410:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4414:	2a00      	cmp	r2, #0
    4416:	db2d      	blt.n	4474 <ready_thread+0x68>
    4418:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    441a:	f013 0f1f 	tst.w	r3, #31
    441e:	d105      	bne.n	442c <ready_thread+0x20>
	return node->next != NULL;
    4420:	6982      	ldr	r2, [r0, #24]
    4422:	b10a      	cbz	r2, 4428 <ready_thread+0x1c>
    4424:	2200      	movs	r2, #0
    4426:	e002      	b.n	442e <ready_thread+0x22>
    4428:	2201      	movs	r2, #1
    442a:	e000      	b.n	442e <ready_thread+0x22>
    442c:	2200      	movs	r2, #0
    442e:	b30a      	cbz	r2, 4474 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    4430:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4434:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    4436:	4b14      	ldr	r3, [pc, #80]	; (4488 <ready_thread+0x7c>)
    4438:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    443c:	429d      	cmp	r5, r3
    443e:	d020      	beq.n	4482 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4440:	b16d      	cbz	r5, 445e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4442:	4629      	mov	r1, r5
    4444:	4620      	mov	r0, r4
    4446:	f001 ff3c 	bl	62c2 <z_sched_prio_cmp>
    444a:	2800      	cmp	r0, #0
    444c:	dc13      	bgt.n	4476 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    444e:	b135      	cbz	r5, 445e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    4450:	4b0d      	ldr	r3, [pc, #52]	; (4488 <ready_thread+0x7c>)
    4452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4454:	429d      	cmp	r5, r3
    4456:	d002      	beq.n	445e <ready_thread+0x52>
    4458:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    445a:	2d00      	cmp	r5, #0
    445c:	d1f0      	bne.n	4440 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    445e:	4b0a      	ldr	r3, [pc, #40]	; (4488 <ready_thread+0x7c>)
    4460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4462:	f103 0120 	add.w	r1, r3, #32
    4466:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4468:	6062      	str	r2, [r4, #4]
	tail->next = node;
    446a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    446c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    446e:	2000      	movs	r0, #0
    4470:	f7ff fef4 	bl	425c <update_cache>
}
    4474:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    4476:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4478:	6063      	str	r3, [r4, #4]
	node->next = successor;
    447a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    447c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    447e:	606c      	str	r4, [r5, #4]
}
    4480:	e7f5      	b.n	446e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4482:	2500      	movs	r5, #0
    4484:	e7dc      	b.n	4440 <ready_thread+0x34>
    4486:	bf00      	nop
    4488:	20000de0 	.word	0x20000de0

0000448c <z_sched_start>:
{
    448c:	b510      	push	{r4, lr}
	__asm__ volatile(
    448e:	f04f 0320 	mov.w	r3, #32
    4492:	f3ef 8411 	mrs	r4, BASEPRI
    4496:	f383 8812 	msr	BASEPRI_MAX, r3
    449a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    449e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    44a0:	f013 0f04 	tst.w	r3, #4
    44a4:	d104      	bne.n	44b0 <z_sched_start+0x24>
	__asm__ volatile(
    44a6:	f384 8811 	msr	BASEPRI, r4
    44aa:	f3bf 8f6f 	isb	sy
}
    44ae:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    44b0:	f023 0304 	bic.w	r3, r3, #4
    44b4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    44b6:	f7ff ffa9 	bl	440c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    44ba:	4621      	mov	r1, r4
    44bc:	4801      	ldr	r0, [pc, #4]	; (44c4 <z_sched_start+0x38>)
    44be:	f7ff fe97 	bl	41f0 <z_reschedule>
    44c2:	e7f4      	b.n	44ae <z_sched_start+0x22>
    44c4:	20000e10 	.word	0x20000e10

000044c8 <unready_thread>:
{
    44c8:	b510      	push	{r4, lr}
    44ca:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    44cc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    44ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
    44d2:	2b00      	cmp	r3, #0
    44d4:	db08      	blt.n	44e8 <unready_thread+0x20>
	update_cache(thread == _current);
    44d6:	4b08      	ldr	r3, [pc, #32]	; (44f8 <unready_thread+0x30>)
    44d8:	6898      	ldr	r0, [r3, #8]
    44da:	42a0      	cmp	r0, r4
    44dc:	bf14      	ite	ne
    44de:	2000      	movne	r0, #0
    44e0:	2001      	moveq	r0, #1
    44e2:	f7ff febb 	bl	425c <update_cache>
}
    44e6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    44ec:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    44ee:	4601      	mov	r1, r0
    44f0:	4802      	ldr	r0, [pc, #8]	; (44fc <unready_thread+0x34>)
    44f2:	f001 ff05 	bl	6300 <z_priq_dumb_remove>
}
    44f6:	e7ee      	b.n	44d6 <unready_thread+0xe>
    44f8:	20000de0 	.word	0x20000de0
    44fc:	20000e00 	.word	0x20000e00

00004500 <z_pend_curr>:
{
    4500:	b510      	push	{r4, lr}
    4502:	460c      	mov	r4, r1
    4504:	4611      	mov	r1, r2
	pending_current = _current;
    4506:	4b06      	ldr	r3, [pc, #24]	; (4520 <z_pend_curr+0x20>)
    4508:	6898      	ldr	r0, [r3, #8]
    450a:	4b06      	ldr	r3, [pc, #24]	; (4524 <z_pend_curr+0x24>)
    450c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    450e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4512:	f001 ff82 	bl	641a <pend>
    4516:	4620      	mov	r0, r4
    4518:	f7fc ff9c 	bl	1454 <arch_swap>
}
    451c:	bd10      	pop	{r4, pc}
    451e:	bf00      	nop
    4520:	20000de0 	.word	0x20000de0
    4524:	20000e0c 	.word	0x20000e0c

00004528 <z_set_prio>:
{
    4528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    452c:	4604      	mov	r4, r0
    452e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    4530:	2300      	movs	r3, #0
	__asm__ volatile(
    4532:	f04f 0220 	mov.w	r2, #32
    4536:	f3ef 8811 	mrs	r8, BASEPRI
    453a:	f382 8812 	msr	BASEPRI_MAX, r2
    453e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4542:	461f      	mov	r7, r3
    4544:	e008      	b.n	4558 <z_set_prio+0x30>
		if (need_sched) {
    4546:	f012 0701 	ands.w	r7, r2, #1
    454a:	d111      	bne.n	4570 <z_set_prio+0x48>
			thread->base.prio = prio;
    454c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    454e:	f388 8811 	msr	BASEPRI, r8
    4552:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4556:	2301      	movs	r3, #1
    4558:	461a      	mov	r2, r3
    455a:	2b00      	cmp	r3, #0
    455c:	d13d      	bne.n	45da <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    455e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4560:	f013 0f1f 	tst.w	r3, #31
    4564:	d1ef      	bne.n	4546 <z_set_prio+0x1e>
	return node->next != NULL;
    4566:	69a1      	ldr	r1, [r4, #24]
    4568:	2900      	cmp	r1, #0
    456a:	d1ec      	bne.n	4546 <z_set_prio+0x1e>
    456c:	2201      	movs	r2, #1
    456e:	e7ea      	b.n	4546 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4574:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4576:	f8df 9068 	ldr.w	r9, [pc, #104]	; 45e0 <z_set_prio+0xb8>
    457a:	4621      	mov	r1, r4
    457c:	4648      	mov	r0, r9
    457e:	f001 febf 	bl	6300 <z_priq_dumb_remove>
				thread->base.prio = prio;
    4582:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4584:	7b63      	ldrb	r3, [r4, #13]
    4586:	f063 037f 	orn	r3, r3, #127	; 0x7f
    458a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    458c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4590:	454d      	cmp	r5, r9
    4592:	d020      	beq.n	45d6 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4594:	b16d      	cbz	r5, 45b2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4596:	4629      	mov	r1, r5
    4598:	4620      	mov	r0, r4
    459a:	f001 fe92 	bl	62c2 <z_sched_prio_cmp>
    459e:	2800      	cmp	r0, #0
    45a0:	dc13      	bgt.n	45ca <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    45a2:	b135      	cbz	r5, 45b2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    45a4:	4b0f      	ldr	r3, [pc, #60]	; (45e4 <z_set_prio+0xbc>)
    45a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45a8:	429d      	cmp	r5, r3
    45aa:	d002      	beq.n	45b2 <z_set_prio+0x8a>
    45ac:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45ae:	2d00      	cmp	r5, #0
    45b0:	d1f0      	bne.n	4594 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    45b2:	4b0c      	ldr	r3, [pc, #48]	; (45e4 <z_set_prio+0xbc>)
    45b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    45b6:	f103 0120 	add.w	r1, r3, #32
    45ba:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    45bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    45be:	6014      	str	r4, [r2, #0]
	list->tail = node;
    45c0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    45c2:	2001      	movs	r0, #1
    45c4:	f7ff fe4a 	bl	425c <update_cache>
    45c8:	e7c1      	b.n	454e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    45ca:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    45cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    45ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
    45d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    45d2:	606c      	str	r4, [r5, #4]
}
    45d4:	e7f5      	b.n	45c2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45d6:	2500      	movs	r5, #0
    45d8:	e7dc      	b.n	4594 <z_set_prio+0x6c>
}
    45da:	4638      	mov	r0, r7
    45dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    45e0:	20000e00 	.word	0x20000e00
    45e4:	20000de0 	.word	0x20000de0

000045e8 <z_impl_k_thread_suspend>:
{
    45e8:	b538      	push	{r3, r4, r5, lr}
    45ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    45ec:	3018      	adds	r0, #24
    45ee:	f001 ff7c 	bl	64ea <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    45f2:	2300      	movs	r3, #0
	__asm__ volatile(
    45f4:	f04f 0220 	mov.w	r2, #32
    45f8:	f3ef 8511 	mrs	r5, BASEPRI
    45fc:	f382 8812 	msr	BASEPRI_MAX, r2
    4600:	f3bf 8f6f 	isb	sy
    4604:	e010      	b.n	4628 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4606:	7b63      	ldrb	r3, [r4, #13]
    4608:	f043 0310 	orr.w	r3, r3, #16
    460c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    460e:	4b15      	ldr	r3, [pc, #84]	; (4664 <z_impl_k_thread_suspend+0x7c>)
    4610:	6898      	ldr	r0, [r3, #8]
    4612:	42a0      	cmp	r0, r4
    4614:	bf14      	ite	ne
    4616:	2000      	movne	r0, #0
    4618:	2001      	moveq	r0, #1
    461a:	f7ff fe1f 	bl	425c <update_cache>
	__asm__ volatile(
    461e:	f385 8811 	msr	BASEPRI, r5
    4622:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4626:	2301      	movs	r3, #1
    4628:	b963      	cbnz	r3, 4644 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    462a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    462c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4630:	2b00      	cmp	r3, #0
    4632:	dae8      	bge.n	4606 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4638:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    463a:	4621      	mov	r1, r4
    463c:	480a      	ldr	r0, [pc, #40]	; (4668 <z_impl_k_thread_suspend+0x80>)
    463e:	f001 fe5f 	bl	6300 <z_priq_dumb_remove>
}
    4642:	e7e0      	b.n	4606 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4644:	4b07      	ldr	r3, [pc, #28]	; (4664 <z_impl_k_thread_suspend+0x7c>)
    4646:	689b      	ldr	r3, [r3, #8]
    4648:	42a3      	cmp	r3, r4
    464a:	d000      	beq.n	464e <z_impl_k_thread_suspend+0x66>
}
    464c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    464e:	f04f 0320 	mov.w	r3, #32
    4652:	f3ef 8011 	mrs	r0, BASEPRI
    4656:	f383 8812 	msr	BASEPRI_MAX, r3
    465a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    465e:	f001 fe3a 	bl	62d6 <z_reschedule_irqlock>
    4662:	e7f3      	b.n	464c <z_impl_k_thread_suspend+0x64>
    4664:	20000de0 	.word	0x20000de0
    4668:	20000e00 	.word	0x20000e00

0000466c <k_sched_unlock>:

void k_sched_unlock(void)
{
    466c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    466e:	2300      	movs	r3, #0
    4670:	f04f 0220 	mov.w	r2, #32
    4674:	f3ef 8411 	mrs	r4, BASEPRI
    4678:	f382 8812 	msr	BASEPRI_MAX, r2
    467c:	f3bf 8f6f 	isb	sy
    4680:	e00c      	b.n	469c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4682:	4b0d      	ldr	r3, [pc, #52]	; (46b8 <k_sched_unlock+0x4c>)
    4684:	689a      	ldr	r2, [r3, #8]
    4686:	7bd3      	ldrb	r3, [r2, #15]
    4688:	3301      	adds	r3, #1
    468a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    468c:	2000      	movs	r0, #0
    468e:	f7ff fde5 	bl	425c <update_cache>
	__asm__ volatile(
    4692:	f384 8811 	msr	BASEPRI, r4
    4696:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    469a:	2301      	movs	r3, #1
    469c:	2b00      	cmp	r3, #0
    469e:	d0f0      	beq.n	4682 <k_sched_unlock+0x16>
	__asm__ volatile(
    46a0:	f04f 0320 	mov.w	r3, #32
    46a4:	f3ef 8011 	mrs	r0, BASEPRI
    46a8:	f383 8812 	msr	BASEPRI_MAX, r3
    46ac:	f3bf 8f6f 	isb	sy
    46b0:	f001 fe11 	bl	62d6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    46b4:	bd10      	pop	{r4, pc}
    46b6:	bf00      	nop
    46b8:	20000de0 	.word	0x20000de0

000046bc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    46bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    46be:	7b43      	ldrb	r3, [r0, #13]
    46c0:	f013 0f08 	tst.w	r3, #8
    46c4:	d145      	bne.n	4752 <end_thread+0x96>
    46c6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    46c8:	f043 0308 	orr.w	r3, r3, #8
    46cc:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    46ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    46d2:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    46d4:	f013 0f80 	tst.w	r3, #128	; 0x80
    46d8:	d12d      	bne.n	4736 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    46da:	68ab      	ldr	r3, [r5, #8]
    46dc:	b15b      	cbz	r3, 46f6 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    46de:	4628      	mov	r0, r5
    46e0:	f001 fded 	bl	62be <pended_on_thread>
    46e4:	4629      	mov	r1, r5
    46e6:	f001 fe0b 	bl	6300 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    46ea:	7b6b      	ldrb	r3, [r5, #13]
    46ec:	f023 0302 	bic.w	r3, r3, #2
    46f0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    46f2:	2300      	movs	r3, #0
    46f4:	60ab      	str	r3, [r5, #8]
    46f6:	f105 0018 	add.w	r0, r5, #24
    46fa:	f001 fef6 	bl	64ea <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    46fe:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    4702:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4704:	42bc      	cmp	r4, r7
    4706:	d01e      	beq.n	4746 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4708:	b1ec      	cbz	r4, 4746 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    470a:	4620      	mov	r0, r4
    470c:	f001 fdd7 	bl	62be <pended_on_thread>
    4710:	4621      	mov	r1, r4
    4712:	f001 fdf5 	bl	6300 <z_priq_dumb_remove>
    4716:	7b63      	ldrb	r3, [r4, #13]
    4718:	f023 0302 	bic.w	r3, r3, #2
    471c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    471e:	2600      	movs	r6, #0
    4720:	60a6      	str	r6, [r4, #8]
    4722:	f104 0018 	add.w	r0, r4, #24
    4726:	f001 fee0 	bl	64ea <z_abort_timeout>
    472a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    472e:	4620      	mov	r0, r4
    4730:	f7ff fe6c 	bl	440c <ready_thread>
    4734:	e7e5      	b.n	4702 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    473a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    473c:	4601      	mov	r1, r0
    473e:	4805      	ldr	r0, [pc, #20]	; (4754 <end_thread+0x98>)
    4740:	f001 fdde 	bl	6300 <z_priq_dumb_remove>
}
    4744:	e7c9      	b.n	46da <end_thread+0x1e>
		update_cache(1);
    4746:	2001      	movs	r0, #1
    4748:	f7ff fd88 	bl	425c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    474c:	4628      	mov	r0, r5
    474e:	f7ff fadd 	bl	3d0c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4754:	20000e00 	.word	0x20000e00

00004758 <z_sched_init>:
{
    4758:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    475a:	4804      	ldr	r0, [pc, #16]	; (476c <z_sched_init+0x14>)
    475c:	f001 feaa 	bl	64b4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4760:	2100      	movs	r1, #0
    4762:	4608      	mov	r0, r1
    4764:	f7ff fd0a 	bl	417c <k_sched_time_slice_set>
}
    4768:	bd08      	pop	{r3, pc}
    476a:	bf00      	nop
    476c:	20000dfc 	.word	0x20000dfc

00004770 <z_impl_k_yield>:
{
    4770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4772:	f04f 0320 	mov.w	r3, #32
    4776:	f3ef 8611 	mrs	r6, BASEPRI
    477a:	f383 8812 	msr	BASEPRI_MAX, r3
    477e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4782:	4c1c      	ldr	r4, [pc, #112]	; (47f4 <z_impl_k_yield+0x84>)
    4784:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4786:	7b4b      	ldrb	r3, [r1, #13]
    4788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    478c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    478e:	f104 0720 	add.w	r7, r4, #32
    4792:	4638      	mov	r0, r7
    4794:	f001 fdb4 	bl	6300 <z_priq_dumb_remove>
	queue_thread(_current);
    4798:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    479a:	7b6b      	ldrb	r3, [r5, #13]
    479c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    47a2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47a4:	42bc      	cmp	r4, r7
    47a6:	d023      	beq.n	47f0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47a8:	b16c      	cbz	r4, 47c6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    47aa:	4621      	mov	r1, r4
    47ac:	4628      	mov	r0, r5
    47ae:	f001 fd88 	bl	62c2 <z_sched_prio_cmp>
    47b2:	2800      	cmp	r0, #0
    47b4:	dc16      	bgt.n	47e4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47b6:	b134      	cbz	r4, 47c6 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    47b8:	4b0e      	ldr	r3, [pc, #56]	; (47f4 <z_impl_k_yield+0x84>)
    47ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47bc:	429c      	cmp	r4, r3
    47be:	d002      	beq.n	47c6 <z_impl_k_yield+0x56>
    47c0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47c2:	2c00      	cmp	r4, #0
    47c4:	d1f0      	bne.n	47a8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    47c6:	4b0b      	ldr	r3, [pc, #44]	; (47f4 <z_impl_k_yield+0x84>)
    47c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    47ca:	f103 0120 	add.w	r1, r3, #32
    47ce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    47d0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    47d2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    47d4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    47d6:	2001      	movs	r0, #1
    47d8:	f7ff fd40 	bl	425c <update_cache>
    47dc:	4630      	mov	r0, r6
    47de:	f7fc fe39 	bl	1454 <arch_swap>
}
    47e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    47e4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    47e6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    47e8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    47ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    47ec:	6065      	str	r5, [r4, #4]
}
    47ee:	e7f2      	b.n	47d6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47f0:	2400      	movs	r4, #0
    47f2:	e7d9      	b.n	47a8 <z_impl_k_yield+0x38>
    47f4:	20000de0 	.word	0x20000de0

000047f8 <z_tick_sleep>:
{
    47f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    47fc:	ea50 0301 	orrs.w	r3, r0, r1
    4800:	d038      	beq.n	4874 <z_tick_sleep+0x7c>
    4802:	4604      	mov	r4, r0
    4804:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4806:	f06f 0301 	mvn.w	r3, #1
    480a:	1a1b      	subs	r3, r3, r0
    480c:	f04f 32ff 	mov.w	r2, #4294967295
    4810:	eb62 0201 	sbc.w	r2, r2, r1
    4814:	2b01      	cmp	r3, #1
    4816:	f172 0300 	sbcs.w	r3, r2, #0
    481a:	db2f      	blt.n	487c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    481c:	f06f 0501 	mvn.w	r5, #1
    4820:	1a2d      	subs	r5, r5, r0
    4822:	f04f 0320 	mov.w	r3, #32
    4826:	f3ef 8811 	mrs	r8, BASEPRI
    482a:	f383 8812 	msr	BASEPRI_MAX, r3
    482e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4832:	4f14      	ldr	r7, [pc, #80]	; (4884 <z_tick_sleep+0x8c>)
    4834:	68b8      	ldr	r0, [r7, #8]
    4836:	4b14      	ldr	r3, [pc, #80]	; (4888 <z_tick_sleep+0x90>)
    4838:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    483a:	f7ff fe45 	bl	44c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    483e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4840:	4622      	mov	r2, r4
    4842:	4633      	mov	r3, r6
    4844:	4911      	ldr	r1, [pc, #68]	; (488c <z_tick_sleep+0x94>)
    4846:	3018      	adds	r0, #24
    4848:	f000 f8de 	bl	4a08 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    484c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    484e:	7b53      	ldrb	r3, [r2, #13]
    4850:	f043 0310 	orr.w	r3, r3, #16
    4854:	7353      	strb	r3, [r2, #13]
    4856:	4640      	mov	r0, r8
    4858:	f7fc fdfc 	bl	1454 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    485c:	f001 fea5 	bl	65aa <sys_clock_tick_get_32>
    4860:	1a28      	subs	r0, r5, r0
    4862:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4866:	2801      	cmp	r0, #1
    4868:	f173 0300 	sbcs.w	r3, r3, #0
    486c:	da00      	bge.n	4870 <z_tick_sleep+0x78>
	return 0;
    486e:	2000      	movs	r0, #0
}
    4870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4874:	f7ff ff7c 	bl	4770 <z_impl_k_yield>
		return 0;
    4878:	2000      	movs	r0, #0
    487a:	e7f9      	b.n	4870 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    487c:	f001 fe95 	bl	65aa <sys_clock_tick_get_32>
    4880:	1905      	adds	r5, r0, r4
    4882:	e7ce      	b.n	4822 <z_tick_sleep+0x2a>
    4884:	20000de0 	.word	0x20000de0
    4888:	20000e0c 	.word	0x20000e0c
    488c:	00006357 	.word	0x00006357

00004890 <z_impl_k_sleep>:
{
    4890:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4892:	f1b1 3fff 	cmp.w	r1, #4294967295
    4896:	bf08      	it	eq
    4898:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    489c:	d01a      	beq.n	48d4 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    489e:	f7ff ffab 	bl	47f8 <z_tick_sleep>
    48a2:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    48a4:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    48a6:	0151      	lsls	r1, r2, #5
    48a8:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    48ac:	0143      	lsls	r3, r0, #5
    48ae:	1a1b      	subs	r3, r3, r0
    48b0:	eb61 0102 	sbc.w	r1, r1, r2
    48b4:	0088      	lsls	r0, r1, #2
    48b6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    48ba:	009b      	lsls	r3, r3, #2
    48bc:	eb13 030c 	adds.w	r3, r3, ip
    48c0:	eb42 0000 	adc.w	r0, r2, r0
    48c4:	00c0      	lsls	r0, r0, #3
    48c6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    48ca:	f3c3 3310 	ubfx	r3, r3, #12, #17
    48ce:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    48d2:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    48d4:	4b03      	ldr	r3, [pc, #12]	; (48e4 <z_impl_k_sleep+0x54>)
    48d6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    48d8:	f7ff fe86 	bl	45e8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    48dc:	f04f 30ff 	mov.w	r0, #4294967295
    48e0:	e7f7      	b.n	48d2 <z_impl_k_sleep+0x42>
    48e2:	bf00      	nop
    48e4:	20000de0 	.word	0x20000de0

000048e8 <z_impl_z_current_get>:
}
    48e8:	4b01      	ldr	r3, [pc, #4]	; (48f0 <z_impl_z_current_get+0x8>)
    48ea:	6898      	ldr	r0, [r3, #8]
    48ec:	4770      	bx	lr
    48ee:	bf00      	nop
    48f0:	20000de0 	.word	0x20000de0

000048f4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    48f4:	b538      	push	{r3, r4, r5, lr}
    48f6:	f04f 0320 	mov.w	r3, #32
    48fa:	f3ef 8511 	mrs	r5, BASEPRI
    48fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4902:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4906:	7b43      	ldrb	r3, [r0, #13]
    4908:	f013 0f08 	tst.w	r3, #8
    490c:	d004      	beq.n	4918 <z_thread_abort+0x24>
	__asm__ volatile(
    490e:	f385 8811 	msr	BASEPRI, r5
    4912:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4916:	bd38      	pop	{r3, r4, r5, pc}
    4918:	4604      	mov	r4, r0
	end_thread(thread);
    491a:	f7ff fecf 	bl	46bc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    491e:	4b08      	ldr	r3, [pc, #32]	; (4940 <z_thread_abort+0x4c>)
    4920:	689b      	ldr	r3, [r3, #8]
    4922:	42a3      	cmp	r3, r4
    4924:	d004      	beq.n	4930 <z_thread_abort+0x3c>
    4926:	f385 8811 	msr	BASEPRI, r5
    492a:	f3bf 8f6f 	isb	sy
    492e:	e7f2      	b.n	4916 <z_thread_abort+0x22>
    4930:	f3ef 8305 	mrs	r3, IPSR
    4934:	2b00      	cmp	r3, #0
    4936:	d1f6      	bne.n	4926 <z_thread_abort+0x32>
    4938:	4628      	mov	r0, r5
    493a:	f7fc fd8b 	bl	1454 <arch_swap>
	return ret;
    493e:	e7f2      	b.n	4926 <z_thread_abort+0x32>
    4940:	20000de0 	.word	0x20000de0

00004944 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4944:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4946:	4806      	ldr	r0, [pc, #24]	; (4960 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4948:	4a06      	ldr	r2, [pc, #24]	; (4964 <z_data_copy+0x20>)
    494a:	1a12      	subs	r2, r2, r0
    494c:	4906      	ldr	r1, [pc, #24]	; (4968 <z_data_copy+0x24>)
    494e:	f001 fc15 	bl	617c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4952:	4a06      	ldr	r2, [pc, #24]	; (496c <z_data_copy+0x28>)
    4954:	4906      	ldr	r1, [pc, #24]	; (4970 <z_data_copy+0x2c>)
    4956:	4807      	ldr	r0, [pc, #28]	; (4974 <z_data_copy+0x30>)
    4958:	f001 fc10 	bl	617c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    495c:	bd08      	pop	{r3, pc}
    495e:	bf00      	nop
    4960:	20000000 	.word	0x20000000
    4964:	200001a4 	.word	0x200001a4
    4968:	00006ba0 	.word	0x00006ba0
    496c:	00000000 	.word	0x00000000
    4970:	00006ba0 	.word	0x00006ba0
    4974:	20000000 	.word	0x20000000

00004978 <first>:
	return list->head == list;
    4978:	4b03      	ldr	r3, [pc, #12]	; (4988 <first+0x10>)
    497a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    497c:	4298      	cmp	r0, r3
    497e:	d000      	beq.n	4982 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4980:	4770      	bx	lr
    4982:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4984:	e7fc      	b.n	4980 <first+0x8>
    4986:	bf00      	nop
    4988:	200000d8 	.word	0x200000d8

0000498c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    498c:	b130      	cbz	r0, 499c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    498e:	4a04      	ldr	r2, [pc, #16]	; (49a0 <next+0x14>)
    4990:	6852      	ldr	r2, [r2, #4]
    4992:	4290      	cmp	r0, r2
    4994:	d001      	beq.n	499a <next+0xe>
    4996:	6800      	ldr	r0, [r0, #0]
    4998:	4770      	bx	lr
    499a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    499c:	4770      	bx	lr
    499e:	bf00      	nop
    49a0:	200000d8 	.word	0x200000d8

000049a4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    49a4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    49a6:	4b04      	ldr	r3, [pc, #16]	; (49b8 <elapsed+0x14>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	b10b      	cbz	r3, 49b0 <elapsed+0xc>
    49ac:	2000      	movs	r0, #0
}
    49ae:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    49b0:	f7fd ff10 	bl	27d4 <sys_clock_elapsed>
    49b4:	e7fb      	b.n	49ae <elapsed+0xa>
    49b6:	bf00      	nop
    49b8:	20000e18 	.word	0x20000e18

000049bc <next_timeout>:

static int32_t next_timeout(void)
{
    49bc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    49be:	f7ff ffdb 	bl	4978 <first>
    49c2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    49c4:	f7ff ffee 	bl	49a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    49c8:	b17c      	cbz	r4, 49ea <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    49ca:	6923      	ldr	r3, [r4, #16]
    49cc:	6962      	ldr	r2, [r4, #20]
    49ce:	1a1b      	subs	r3, r3, r0
    49d0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    49d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    49d8:	f170 0200 	sbcs.w	r2, r0, #0
    49dc:	da08      	bge.n	49f0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    49de:	2800      	cmp	r0, #0
    49e0:	db01      	blt.n	49e6 <next_timeout+0x2a>
    49e2:	4618      	mov	r0, r3
    49e4:	e006      	b.n	49f4 <next_timeout+0x38>
    49e6:	2300      	movs	r3, #0
    49e8:	e7fb      	b.n	49e2 <next_timeout+0x26>
		ret = MAX_WAIT;
    49ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    49ee:	e001      	b.n	49f4 <next_timeout+0x38>
    49f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    49f4:	4b03      	ldr	r3, [pc, #12]	; (4a04 <next_timeout+0x48>)
    49f6:	691b      	ldr	r3, [r3, #16]
    49f8:	b113      	cbz	r3, 4a00 <next_timeout+0x44>
    49fa:	4283      	cmp	r3, r0
    49fc:	da00      	bge.n	4a00 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    49fe:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4a00:	bd10      	pop	{r4, pc}
    4a02:	bf00      	nop
    4a04:	20000de0 	.word	0x20000de0

00004a08 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4a08:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a0c:	bf08      	it	eq
    4a0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4a12:	d07d      	beq.n	4b10 <z_add_timeout+0x108>
{
    4a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a18:	4604      	mov	r4, r0
    4a1a:	4692      	mov	sl, r2
    4a1c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4a1e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4a20:	2300      	movs	r3, #0
	__asm__ volatile(
    4a22:	f04f 0220 	mov.w	r2, #32
    4a26:	f3ef 8711 	mrs	r7, BASEPRI
    4a2a:	f382 8812 	msr	BASEPRI_MAX, r2
    4a2e:	f3bf 8f6f 	isb	sy
    4a32:	e021      	b.n	4a78 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4a34:	f11a 0801 	adds.w	r8, sl, #1
    4a38:	f145 0900 	adc.w	r9, r5, #0
    4a3c:	f7ff ffb2 	bl	49a4 <elapsed>
    4a40:	eb18 0300 	adds.w	r3, r8, r0
    4a44:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4a48:	6123      	str	r3, [r4, #16]
    4a4a:	6160      	str	r0, [r4, #20]
    4a4c:	e036      	b.n	4abc <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4a4e:	1a51      	subs	r1, r2, r1
    4a50:	eb66 0303 	sbc.w	r3, r6, r3
    4a54:	6101      	str	r1, [r0, #16]
    4a56:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4a58:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4a5a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4a5c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4a5e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4a60:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4a62:	2800      	cmp	r0, #0
    4a64:	d03e      	beq.n	4ae4 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4a66:	f7ff ff87 	bl	4978 <first>
    4a6a:	4284      	cmp	r4, r0
    4a6c:	d041      	beq.n	4af2 <z_add_timeout+0xea>
	__asm__ volatile(
    4a6e:	f387 8811 	msr	BASEPRI, r7
    4a72:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4a76:	2301      	movs	r3, #1
    4a78:	2b00      	cmp	r3, #0
    4a7a:	d147      	bne.n	4b0c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4a7c:	4653      	mov	r3, sl
    4a7e:	f06f 0101 	mvn.w	r1, #1
    4a82:	ebb1 010a 	subs.w	r1, r1, sl
    4a86:	f04f 30ff 	mov.w	r0, #4294967295
    4a8a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4a8e:	2a00      	cmp	r2, #0
    4a90:	dbd0      	blt.n	4a34 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4a92:	4a20      	ldr	r2, [pc, #128]	; (4b14 <z_add_timeout+0x10c>)
    4a94:	6811      	ldr	r1, [r2, #0]
    4a96:	6852      	ldr	r2, [r2, #4]
    4a98:	185b      	adds	r3, r3, r1
    4a9a:	eb42 0205 	adc.w	r2, r2, r5
    4a9e:	f06f 0101 	mvn.w	r1, #1
    4aa2:	1acb      	subs	r3, r1, r3
    4aa4:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    4aa8:	4618      	mov	r0, r3
    4aaa:	4611      	mov	r1, r2
    4aac:	2b01      	cmp	r3, #1
    4aae:	f172 0300 	sbcs.w	r3, r2, #0
    4ab2:	da01      	bge.n	4ab8 <z_add_timeout+0xb0>
    4ab4:	2001      	movs	r0, #1
    4ab6:	2100      	movs	r1, #0
    4ab8:	6120      	str	r0, [r4, #16]
    4aba:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4abc:	f7ff ff5c 	bl	4978 <first>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d0ce      	beq.n	4a62 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    4ac4:	6902      	ldr	r2, [r0, #16]
    4ac6:	6946      	ldr	r6, [r0, #20]
    4ac8:	6921      	ldr	r1, [r4, #16]
    4aca:	6963      	ldr	r3, [r4, #20]
    4acc:	4291      	cmp	r1, r2
    4ace:	eb73 0c06 	sbcs.w	ip, r3, r6
    4ad2:	dbbc      	blt.n	4a4e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4ad4:	1a89      	subs	r1, r1, r2
    4ad6:	eb63 0306 	sbc.w	r3, r3, r6
    4ada:	6121      	str	r1, [r4, #16]
    4adc:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4ade:	f7ff ff55 	bl	498c <next>
    4ae2:	e7ed      	b.n	4ac0 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    4ae4:	4b0c      	ldr	r3, [pc, #48]	; (4b18 <z_add_timeout+0x110>)
    4ae6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4ae8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4aea:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4aec:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4aee:	605c      	str	r4, [r3, #4]
}
    4af0:	e7b9      	b.n	4a66 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4af2:	f7ff ff63 	bl	49bc <next_timeout>

			if (next_time == 0 ||
    4af6:	4603      	mov	r3, r0
    4af8:	b118      	cbz	r0, 4b02 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    4afa:	4a08      	ldr	r2, [pc, #32]	; (4b1c <z_add_timeout+0x114>)
    4afc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4afe:	4282      	cmp	r2, r0
    4b00:	d0b5      	beq.n	4a6e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    4b02:	2100      	movs	r1, #0
    4b04:	4618      	mov	r0, r3
    4b06:	f7fd fe33 	bl	2770 <sys_clock_set_timeout>
    4b0a:	e7b0      	b.n	4a6e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b10:	4770      	bx	lr
    4b12:	bf00      	nop
    4b14:	20000328 	.word	0x20000328
    4b18:	200000d8 	.word	0x200000d8
    4b1c:	20000de0 	.word	0x20000de0

00004b20 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4b20:	b570      	push	{r4, r5, r6, lr}
    4b22:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4b24:	f7ff fc1a 	bl	435c <z_time_slice>
	__asm__ volatile(
    4b28:	f04f 0320 	mov.w	r3, #32
    4b2c:	f3ef 8511 	mrs	r5, BASEPRI
    4b30:	f383 8812 	msr	BASEPRI_MAX, r3
    4b34:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4b38:	4b28      	ldr	r3, [pc, #160]	; (4bdc <sys_clock_announce+0xbc>)
    4b3a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4b3c:	e020      	b.n	4b80 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4b3e:	4828      	ldr	r0, [pc, #160]	; (4be0 <sys_clock_announce+0xc0>)
    4b40:	6801      	ldr	r1, [r0, #0]
    4b42:	6846      	ldr	r6, [r0, #4]
    4b44:	1889      	adds	r1, r1, r2
    4b46:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    4b4a:	6001      	str	r1, [r0, #0]
    4b4c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    4b4e:	1a9b      	subs	r3, r3, r2
    4b50:	4a22      	ldr	r2, [pc, #136]	; (4bdc <sys_clock_announce+0xbc>)
    4b52:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4b54:	2200      	movs	r2, #0
    4b56:	2300      	movs	r3, #0
    4b58:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4b5c:	4620      	mov	r0, r4
    4b5e:	f001 fcad 	bl	64bc <remove_timeout>
	__asm__ volatile(
    4b62:	f385 8811 	msr	BASEPRI, r5
    4b66:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4b6a:	68a3      	ldr	r3, [r4, #8]
    4b6c:	4620      	mov	r0, r4
    4b6e:	4798      	blx	r3
	__asm__ volatile(
    4b70:	f04f 0320 	mov.w	r3, #32
    4b74:	f3ef 8511 	mrs	r5, BASEPRI
    4b78:	f383 8812 	msr	BASEPRI_MAX, r3
    4b7c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4b80:	f7ff fefa 	bl	4978 <first>
    4b84:	4604      	mov	r4, r0
    4b86:	b140      	cbz	r0, 4b9a <sys_clock_announce+0x7a>
    4b88:	6902      	ldr	r2, [r0, #16]
    4b8a:	6941      	ldr	r1, [r0, #20]
    4b8c:	4b13      	ldr	r3, [pc, #76]	; (4bdc <sys_clock_announce+0xbc>)
    4b8e:	681b      	ldr	r3, [r3, #0]
    4b90:	17d8      	asrs	r0, r3, #31
    4b92:	4293      	cmp	r3, r2
    4b94:	eb70 0101 	sbcs.w	r1, r0, r1
    4b98:	dad1      	bge.n	4b3e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4b9a:	b144      	cbz	r4, 4bae <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4b9c:	4b0f      	ldr	r3, [pc, #60]	; (4bdc <sys_clock_announce+0xbc>)
    4b9e:	6819      	ldr	r1, [r3, #0]
    4ba0:	6923      	ldr	r3, [r4, #16]
    4ba2:	6962      	ldr	r2, [r4, #20]
    4ba4:	1a5b      	subs	r3, r3, r1
    4ba6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4baa:	6123      	str	r3, [r4, #16]
    4bac:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4bae:	4a0c      	ldr	r2, [pc, #48]	; (4be0 <sys_clock_announce+0xc0>)
    4bb0:	4e0a      	ldr	r6, [pc, #40]	; (4bdc <sys_clock_announce+0xbc>)
    4bb2:	6830      	ldr	r0, [r6, #0]
    4bb4:	6813      	ldr	r3, [r2, #0]
    4bb6:	6851      	ldr	r1, [r2, #4]
    4bb8:	181b      	adds	r3, r3, r0
    4bba:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4bbe:	6013      	str	r3, [r2, #0]
    4bc0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4bc2:	2400      	movs	r4, #0
    4bc4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4bc6:	f7ff fef9 	bl	49bc <next_timeout>
    4bca:	4621      	mov	r1, r4
    4bcc:	f7fd fdd0 	bl	2770 <sys_clock_set_timeout>
	__asm__ volatile(
    4bd0:	f385 8811 	msr	BASEPRI, r5
    4bd4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4bd8:	bd70      	pop	{r4, r5, r6, pc}
    4bda:	bf00      	nop
    4bdc:	20000e18 	.word	0x20000e18
    4be0:	20000328 	.word	0x20000328

00004be4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4be4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4be6:	2300      	movs	r3, #0
	__asm__ volatile(
    4be8:	f04f 0220 	mov.w	r2, #32
    4bec:	f3ef 8411 	mrs	r4, BASEPRI
    4bf0:	f382 8812 	msr	BASEPRI_MAX, r2
    4bf4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4bf8:	4618      	mov	r0, r3
    4bfa:	4619      	mov	r1, r3
    4bfc:	e00c      	b.n	4c18 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    4bfe:	f7fd fde9 	bl	27d4 <sys_clock_elapsed>
    4c02:	4a07      	ldr	r2, [pc, #28]	; (4c20 <sys_clock_tick_get+0x3c>)
    4c04:	6813      	ldr	r3, [r2, #0]
    4c06:	6851      	ldr	r1, [r2, #4]
    4c08:	18c0      	adds	r0, r0, r3
    4c0a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    4c0e:	f384 8811 	msr	BASEPRI, r4
    4c12:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4c16:	2301      	movs	r3, #1
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d0f0      	beq.n	4bfe <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4c1c:	bd10      	pop	{r4, pc}
    4c1e:	bf00      	nop
    4c20:	20000328 	.word	0x20000328

00004c24 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4c24:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4c26:	4a03      	ldr	r2, [pc, #12]	; (4c34 <boot_banner+0x10>)
    4c28:	4903      	ldr	r1, [pc, #12]	; (4c38 <boot_banner+0x14>)
    4c2a:	4804      	ldr	r0, [pc, #16]	; (4c3c <boot_banner+0x18>)
    4c2c:	f000 fa04 	bl	5038 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4c30:	bd08      	pop	{r3, pc}
    4c32:	bf00      	nop
    4c34:	000068c8 	.word	0x000068c8
    4c38:	00006ae0 	.word	0x00006ae0
    4c3c:	00006af0 	.word	0x00006af0

00004c40 <nrf_cc3xx_platform_init_no_rng>:
    4c40:	b510      	push	{r4, lr}
    4c42:	4c0a      	ldr	r4, [pc, #40]	; (4c6c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4c44:	6823      	ldr	r3, [r4, #0]
    4c46:	b11b      	cbz	r3, 4c50 <nrf_cc3xx_platform_init_no_rng+0x10>
    4c48:	2301      	movs	r3, #1
    4c4a:	6023      	str	r3, [r4, #0]
    4c4c:	2000      	movs	r0, #0
    4c4e:	bd10      	pop	{r4, pc}
    4c50:	f000 f8ce 	bl	4df0 <CC_LibInitNoRng>
    4c54:	2800      	cmp	r0, #0
    4c56:	d0f7      	beq.n	4c48 <nrf_cc3xx_platform_init_no_rng+0x8>
    4c58:	3801      	subs	r0, #1
    4c5a:	2806      	cmp	r0, #6
    4c5c:	d803      	bhi.n	4c66 <nrf_cc3xx_platform_init_no_rng+0x26>
    4c5e:	4b04      	ldr	r3, [pc, #16]	; (4c70 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4c60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4c64:	bd10      	pop	{r4, pc}
    4c66:	4803      	ldr	r0, [pc, #12]	; (4c74 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4c68:	bd10      	pop	{r4, pc}
    4c6a:	bf00      	nop
    4c6c:	20000e1c 	.word	0x20000e1c
    4c70:	00006b18 	.word	0x00006b18
    4c74:	ffff8ffe 	.word	0xffff8ffe

00004c78 <nrf_cc3xx_platform_abort>:
    4c78:	f3bf 8f4f 	dsb	sy
    4c7c:	4905      	ldr	r1, [pc, #20]	; (4c94 <nrf_cc3xx_platform_abort+0x1c>)
    4c7e:	4b06      	ldr	r3, [pc, #24]	; (4c98 <nrf_cc3xx_platform_abort+0x20>)
    4c80:	68ca      	ldr	r2, [r1, #12]
    4c82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4c86:	4313      	orrs	r3, r2
    4c88:	60cb      	str	r3, [r1, #12]
    4c8a:	f3bf 8f4f 	dsb	sy
    4c8e:	bf00      	nop
    4c90:	e7fd      	b.n	4c8e <nrf_cc3xx_platform_abort+0x16>
    4c92:	bf00      	nop
    4c94:	e000ed00 	.word	0xe000ed00
    4c98:	05fa0004 	.word	0x05fa0004

00004c9c <CC_PalAbort>:
    4c9c:	b410      	push	{r4}
    4c9e:	4b09      	ldr	r3, [pc, #36]	; (4cc4 <CC_PalAbort+0x28>)
    4ca0:	4909      	ldr	r1, [pc, #36]	; (4cc8 <CC_PalAbort+0x2c>)
    4ca2:	4c0a      	ldr	r4, [pc, #40]	; (4ccc <CC_PalAbort+0x30>)
    4ca4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4ca8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4cac:	6849      	ldr	r1, [r1, #4]
    4cae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4cb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4cb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4cba:	2300      	movs	r3, #0
    4cbc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4cc0:	bc10      	pop	{r4}
    4cc2:	4708      	bx	r1
    4cc4:	5002b000 	.word	0x5002b000
    4cc8:	200000e0 	.word	0x200000e0
    4ccc:	5002a000 	.word	0x5002a000

00004cd0 <nrf_cc3xx_platform_set_abort>:
    4cd0:	e9d0 1200 	ldrd	r1, r2, [r0]
    4cd4:	4b01      	ldr	r3, [pc, #4]	; (4cdc <nrf_cc3xx_platform_set_abort+0xc>)
    4cd6:	e9c3 1200 	strd	r1, r2, [r3]
    4cda:	4770      	bx	lr
    4cdc:	200000e0 	.word	0x200000e0

00004ce0 <mutex_free>:
    4ce0:	b510      	push	{r4, lr}
    4ce2:	4604      	mov	r4, r0
    4ce4:	b130      	cbz	r0, 4cf4 <mutex_free+0x14>
    4ce6:	6863      	ldr	r3, [r4, #4]
    4ce8:	06db      	lsls	r3, r3, #27
    4cea:	d502      	bpl.n	4cf2 <mutex_free+0x12>
    4cec:	2300      	movs	r3, #0
    4cee:	6023      	str	r3, [r4, #0]
    4cf0:	6063      	str	r3, [r4, #4]
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	4b02      	ldr	r3, [pc, #8]	; (4d00 <mutex_free+0x20>)
    4cf6:	4803      	ldr	r0, [pc, #12]	; (4d04 <mutex_free+0x24>)
    4cf8:	685b      	ldr	r3, [r3, #4]
    4cfa:	4798      	blx	r3
    4cfc:	e7f3      	b.n	4ce6 <mutex_free+0x6>
    4cfe:	bf00      	nop
    4d00:	200000e0 	.word	0x200000e0
    4d04:	00006b34 	.word	0x00006b34

00004d08 <mutex_lock>:
    4d08:	b1b0      	cbz	r0, 4d38 <mutex_lock+0x30>
    4d0a:	6843      	ldr	r3, [r0, #4]
    4d0c:	b193      	cbz	r3, 4d34 <mutex_lock+0x2c>
    4d0e:	06db      	lsls	r3, r3, #27
    4d10:	d50e      	bpl.n	4d30 <mutex_lock+0x28>
    4d12:	2301      	movs	r3, #1
    4d14:	e850 2f00 	ldrex	r2, [r0]
    4d18:	4619      	mov	r1, r3
    4d1a:	e840 1c00 	strex	ip, r1, [r0]
    4d1e:	f09c 0f00 	teq	ip, #0
    4d22:	d1f7      	bne.n	4d14 <mutex_lock+0xc>
    4d24:	2a01      	cmp	r2, #1
    4d26:	d0f5      	beq.n	4d14 <mutex_lock+0xc>
    4d28:	f3bf 8f5f 	dmb	sy
    4d2c:	2000      	movs	r0, #0
    4d2e:	4770      	bx	lr
    4d30:	4803      	ldr	r0, [pc, #12]	; (4d40 <mutex_lock+0x38>)
    4d32:	4770      	bx	lr
    4d34:	4803      	ldr	r0, [pc, #12]	; (4d44 <mutex_lock+0x3c>)
    4d36:	4770      	bx	lr
    4d38:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4d3c:	4770      	bx	lr
    4d3e:	bf00      	nop
    4d40:	ffff8fe9 	.word	0xffff8fe9
    4d44:	ffff8fea 	.word	0xffff8fea

00004d48 <mutex_unlock>:
    4d48:	b168      	cbz	r0, 4d66 <mutex_unlock+0x1e>
    4d4a:	6843      	ldr	r3, [r0, #4]
    4d4c:	b13b      	cbz	r3, 4d5e <mutex_unlock+0x16>
    4d4e:	06db      	lsls	r3, r3, #27
    4d50:	d507      	bpl.n	4d62 <mutex_unlock+0x1a>
    4d52:	f3bf 8f5f 	dmb	sy
    4d56:	2300      	movs	r3, #0
    4d58:	6003      	str	r3, [r0, #0]
    4d5a:	4618      	mov	r0, r3
    4d5c:	4770      	bx	lr
    4d5e:	4803      	ldr	r0, [pc, #12]	; (4d6c <mutex_unlock+0x24>)
    4d60:	4770      	bx	lr
    4d62:	4803      	ldr	r0, [pc, #12]	; (4d70 <mutex_unlock+0x28>)
    4d64:	4770      	bx	lr
    4d66:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4d6a:	4770      	bx	lr
    4d6c:	ffff8fea 	.word	0xffff8fea
    4d70:	ffff8fe9 	.word	0xffff8fe9

00004d74 <mutex_init>:
    4d74:	b510      	push	{r4, lr}
    4d76:	4604      	mov	r4, r0
    4d78:	b120      	cbz	r0, 4d84 <mutex_init+0x10>
    4d7a:	2200      	movs	r2, #0
    4d7c:	2311      	movs	r3, #17
    4d7e:	6022      	str	r2, [r4, #0]
    4d80:	6063      	str	r3, [r4, #4]
    4d82:	bd10      	pop	{r4, pc}
    4d84:	4801      	ldr	r0, [pc, #4]	; (4d8c <mutex_init+0x18>)
    4d86:	f7ff ff89 	bl	4c9c <CC_PalAbort>
    4d8a:	e7f6      	b.n	4d7a <mutex_init+0x6>
    4d8c:	00006b5c 	.word	0x00006b5c

00004d90 <nrf_cc3xx_platform_set_mutexes>:
    4d90:	b570      	push	{r4, r5, r6, lr}
    4d92:	e9d0 2300 	ldrd	r2, r3, [r0]
    4d96:	4c13      	ldr	r4, [pc, #76]	; (4de4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    4d98:	4d13      	ldr	r5, [pc, #76]	; (4de8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    4d9a:	6063      	str	r3, [r4, #4]
    4d9c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    4da0:	e9c4 3002 	strd	r3, r0, [r4, #8]
    4da4:	6022      	str	r2, [r4, #0]
    4da6:	4b11      	ldr	r3, [pc, #68]	; (4dec <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4da8:	6808      	ldr	r0, [r1, #0]
    4daa:	6018      	str	r0, [r3, #0]
    4dac:	6848      	ldr	r0, [r1, #4]
    4dae:	6058      	str	r0, [r3, #4]
    4db0:	6888      	ldr	r0, [r1, #8]
    4db2:	6098      	str	r0, [r3, #8]
    4db4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    4db8:	60d8      	str	r0, [r3, #12]
    4dba:	6119      	str	r1, [r3, #16]
    4dbc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4dc0:	06db      	lsls	r3, r3, #27
    4dc2:	d50d      	bpl.n	4de0 <nrf_cc3xx_platform_set_mutexes+0x50>
    4dc4:	2300      	movs	r3, #0
    4dc6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    4dca:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4dce:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4dd2:	4790      	blx	r2
    4dd4:	6823      	ldr	r3, [r4, #0]
    4dd6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4dde:	4718      	bx	r3
    4de0:	bd70      	pop	{r4, r5, r6, pc}
    4de2:	bf00      	nop
    4de4:	200000f0 	.word	0x200000f0
    4de8:	20000e34 	.word	0x20000e34
    4dec:	20000100 	.word	0x20000100

00004df0 <CC_LibInitNoRng>:
    4df0:	b538      	push	{r3, r4, r5, lr}
    4df2:	f000 f82f 	bl	4e54 <CC_HalInit>
    4df6:	b120      	cbz	r0, 4e02 <CC_LibInitNoRng+0x12>
    4df8:	2403      	movs	r4, #3
    4dfa:	f000 f863 	bl	4ec4 <CC_PalTerminate>
    4dfe:	4620      	mov	r0, r4
    4e00:	bd38      	pop	{r3, r4, r5, pc}
    4e02:	f000 f831 	bl	4e68 <CC_PalInit>
    4e06:	b998      	cbnz	r0, 4e30 <CC_LibInitNoRng+0x40>
    4e08:	f000 f8ac 	bl	4f64 <CC_PalPowerSaveModeSelect>
    4e0c:	b998      	cbnz	r0, 4e36 <CC_LibInitNoRng+0x46>
    4e0e:	4d0f      	ldr	r5, [pc, #60]	; (4e4c <CC_LibInitNoRng+0x5c>)
    4e10:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    4e14:	0e1b      	lsrs	r3, r3, #24
    4e16:	2bf0      	cmp	r3, #240	; 0xf0
    4e18:	d108      	bne.n	4e2c <CC_LibInitNoRng+0x3c>
    4e1a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    4e1e:	4b0c      	ldr	r3, [pc, #48]	; (4e50 <CC_LibInitNoRng+0x60>)
    4e20:	429a      	cmp	r2, r3
    4e22:	d00a      	beq.n	4e3a <CC_LibInitNoRng+0x4a>
    4e24:	2407      	movs	r4, #7
    4e26:	f000 f817 	bl	4e58 <CC_HalTerminate>
    4e2a:	e7e6      	b.n	4dfa <CC_LibInitNoRng+0xa>
    4e2c:	2406      	movs	r4, #6
    4e2e:	e7fa      	b.n	4e26 <CC_LibInitNoRng+0x36>
    4e30:	2404      	movs	r4, #4
    4e32:	4620      	mov	r0, r4
    4e34:	bd38      	pop	{r3, r4, r5, pc}
    4e36:	2400      	movs	r4, #0
    4e38:	e7f5      	b.n	4e26 <CC_LibInitNoRng+0x36>
    4e3a:	2001      	movs	r0, #1
    4e3c:	f000 f892 	bl	4f64 <CC_PalPowerSaveModeSelect>
    4e40:	4604      	mov	r4, r0
    4e42:	2800      	cmp	r0, #0
    4e44:	d1f7      	bne.n	4e36 <CC_LibInitNoRng+0x46>
    4e46:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    4e4a:	e7d8      	b.n	4dfe <CC_LibInitNoRng+0xe>
    4e4c:	5002b000 	.word	0x5002b000
    4e50:	20e00000 	.word	0x20e00000

00004e54 <CC_HalInit>:
    4e54:	2000      	movs	r0, #0
    4e56:	4770      	bx	lr

00004e58 <CC_HalTerminate>:
    4e58:	2000      	movs	r0, #0
    4e5a:	4770      	bx	lr

00004e5c <CC_HalMaskInterrupt>:
    4e5c:	4b01      	ldr	r3, [pc, #4]	; (4e64 <CC_HalMaskInterrupt+0x8>)
    4e5e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    4e62:	4770      	bx	lr
    4e64:	5002b000 	.word	0x5002b000

00004e68 <CC_PalInit>:
    4e68:	b510      	push	{r4, lr}
    4e6a:	4811      	ldr	r0, [pc, #68]	; (4eb0 <CC_PalInit+0x48>)
    4e6c:	f000 f848 	bl	4f00 <CC_PalMutexCreate>
    4e70:	b100      	cbz	r0, 4e74 <CC_PalInit+0xc>
    4e72:	bd10      	pop	{r4, pc}
    4e74:	480f      	ldr	r0, [pc, #60]	; (4eb4 <CC_PalInit+0x4c>)
    4e76:	f000 f843 	bl	4f00 <CC_PalMutexCreate>
    4e7a:	2800      	cmp	r0, #0
    4e7c:	d1f9      	bne.n	4e72 <CC_PalInit+0xa>
    4e7e:	4c0e      	ldr	r4, [pc, #56]	; (4eb8 <CC_PalInit+0x50>)
    4e80:	4620      	mov	r0, r4
    4e82:	f000 f83d 	bl	4f00 <CC_PalMutexCreate>
    4e86:	2800      	cmp	r0, #0
    4e88:	d1f3      	bne.n	4e72 <CC_PalInit+0xa>
    4e8a:	4b0c      	ldr	r3, [pc, #48]	; (4ebc <CC_PalInit+0x54>)
    4e8c:	480c      	ldr	r0, [pc, #48]	; (4ec0 <CC_PalInit+0x58>)
    4e8e:	601c      	str	r4, [r3, #0]
    4e90:	f000 f836 	bl	4f00 <CC_PalMutexCreate>
    4e94:	4601      	mov	r1, r0
    4e96:	2800      	cmp	r0, #0
    4e98:	d1eb      	bne.n	4e72 <CC_PalInit+0xa>
    4e9a:	f000 f82d 	bl	4ef8 <CC_PalDmaInit>
    4e9e:	4604      	mov	r4, r0
    4ea0:	b108      	cbz	r0, 4ea6 <CC_PalInit+0x3e>
    4ea2:	4620      	mov	r0, r4
    4ea4:	bd10      	pop	{r4, pc}
    4ea6:	f000 f83f 	bl	4f28 <CC_PalPowerSaveModeInit>
    4eaa:	4620      	mov	r0, r4
    4eac:	e7fa      	b.n	4ea4 <CC_PalInit+0x3c>
    4eae:	bf00      	nop
    4eb0:	20000138 	.word	0x20000138
    4eb4:	2000012c 	.word	0x2000012c
    4eb8:	20000134 	.word	0x20000134
    4ebc:	2000013c 	.word	0x2000013c
    4ec0:	20000130 	.word	0x20000130

00004ec4 <CC_PalTerminate>:
    4ec4:	b508      	push	{r3, lr}
    4ec6:	4808      	ldr	r0, [pc, #32]	; (4ee8 <CC_PalTerminate+0x24>)
    4ec8:	f000 f824 	bl	4f14 <CC_PalMutexDestroy>
    4ecc:	4807      	ldr	r0, [pc, #28]	; (4eec <CC_PalTerminate+0x28>)
    4ece:	f000 f821 	bl	4f14 <CC_PalMutexDestroy>
    4ed2:	4807      	ldr	r0, [pc, #28]	; (4ef0 <CC_PalTerminate+0x2c>)
    4ed4:	f000 f81e 	bl	4f14 <CC_PalMutexDestroy>
    4ed8:	4806      	ldr	r0, [pc, #24]	; (4ef4 <CC_PalTerminate+0x30>)
    4eda:	f000 f81b 	bl	4f14 <CC_PalMutexDestroy>
    4ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ee2:	f000 b80b 	b.w	4efc <CC_PalDmaTerminate>
    4ee6:	bf00      	nop
    4ee8:	20000138 	.word	0x20000138
    4eec:	2000012c 	.word	0x2000012c
    4ef0:	20000134 	.word	0x20000134
    4ef4:	20000130 	.word	0x20000130

00004ef8 <CC_PalDmaInit>:
    4ef8:	2000      	movs	r0, #0
    4efa:	4770      	bx	lr

00004efc <CC_PalDmaTerminate>:
    4efc:	4770      	bx	lr
    4efe:	bf00      	nop

00004f00 <CC_PalMutexCreate>:
    4f00:	b508      	push	{r3, lr}
    4f02:	4b03      	ldr	r3, [pc, #12]	; (4f10 <CC_PalMutexCreate+0x10>)
    4f04:	6802      	ldr	r2, [r0, #0]
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	6810      	ldr	r0, [r2, #0]
    4f0a:	4798      	blx	r3
    4f0c:	2000      	movs	r0, #0
    4f0e:	bd08      	pop	{r3, pc}
    4f10:	200000f0 	.word	0x200000f0

00004f14 <CC_PalMutexDestroy>:
    4f14:	b508      	push	{r3, lr}
    4f16:	4b03      	ldr	r3, [pc, #12]	; (4f24 <CC_PalMutexDestroy+0x10>)
    4f18:	6802      	ldr	r2, [r0, #0]
    4f1a:	685b      	ldr	r3, [r3, #4]
    4f1c:	6810      	ldr	r0, [r2, #0]
    4f1e:	4798      	blx	r3
    4f20:	2000      	movs	r0, #0
    4f22:	bd08      	pop	{r3, pc}
    4f24:	200000f0 	.word	0x200000f0

00004f28 <CC_PalPowerSaveModeInit>:
    4f28:	b570      	push	{r4, r5, r6, lr}
    4f2a:	4c09      	ldr	r4, [pc, #36]	; (4f50 <CC_PalPowerSaveModeInit+0x28>)
    4f2c:	4d09      	ldr	r5, [pc, #36]	; (4f54 <CC_PalPowerSaveModeInit+0x2c>)
    4f2e:	6920      	ldr	r0, [r4, #16]
    4f30:	68ab      	ldr	r3, [r5, #8]
    4f32:	4798      	blx	r3
    4f34:	b118      	cbz	r0, 4f3e <CC_PalPowerSaveModeInit+0x16>
    4f36:	4b08      	ldr	r3, [pc, #32]	; (4f58 <CC_PalPowerSaveModeInit+0x30>)
    4f38:	4808      	ldr	r0, [pc, #32]	; (4f5c <CC_PalPowerSaveModeInit+0x34>)
    4f3a:	685b      	ldr	r3, [r3, #4]
    4f3c:	4798      	blx	r3
    4f3e:	4a08      	ldr	r2, [pc, #32]	; (4f60 <CC_PalPowerSaveModeInit+0x38>)
    4f40:	68eb      	ldr	r3, [r5, #12]
    4f42:	6920      	ldr	r0, [r4, #16]
    4f44:	2100      	movs	r1, #0
    4f46:	6011      	str	r1, [r2, #0]
    4f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f4c:	4718      	bx	r3
    4f4e:	bf00      	nop
    4f50:	20000100 	.word	0x20000100
    4f54:	200000f0 	.word	0x200000f0
    4f58:	200000e0 	.word	0x200000e0
    4f5c:	00006b80 	.word	0x00006b80
    4f60:	20000e30 	.word	0x20000e30

00004f64 <CC_PalPowerSaveModeSelect>:
    4f64:	b570      	push	{r4, r5, r6, lr}
    4f66:	4d1b      	ldr	r5, [pc, #108]	; (4fd4 <CC_PalPowerSaveModeSelect+0x70>)
    4f68:	4e1b      	ldr	r6, [pc, #108]	; (4fd8 <CC_PalPowerSaveModeSelect+0x74>)
    4f6a:	4604      	mov	r4, r0
    4f6c:	68b2      	ldr	r2, [r6, #8]
    4f6e:	6928      	ldr	r0, [r5, #16]
    4f70:	4790      	blx	r2
    4f72:	b9f8      	cbnz	r0, 4fb4 <CC_PalPowerSaveModeSelect+0x50>
    4f74:	b15c      	cbz	r4, 4f8e <CC_PalPowerSaveModeSelect+0x2a>
    4f76:	4c19      	ldr	r4, [pc, #100]	; (4fdc <CC_PalPowerSaveModeSelect+0x78>)
    4f78:	6823      	ldr	r3, [r4, #0]
    4f7a:	b1b3      	cbz	r3, 4faa <CC_PalPowerSaveModeSelect+0x46>
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	d01b      	beq.n	4fb8 <CC_PalPowerSaveModeSelect+0x54>
    4f80:	3b01      	subs	r3, #1
    4f82:	6023      	str	r3, [r4, #0]
    4f84:	6928      	ldr	r0, [r5, #16]
    4f86:	68f3      	ldr	r3, [r6, #12]
    4f88:	4798      	blx	r3
    4f8a:	2000      	movs	r0, #0
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
    4f8e:	4c13      	ldr	r4, [pc, #76]	; (4fdc <CC_PalPowerSaveModeSelect+0x78>)
    4f90:	6821      	ldr	r1, [r4, #0]
    4f92:	b941      	cbnz	r1, 4fa6 <CC_PalPowerSaveModeSelect+0x42>
    4f94:	4b12      	ldr	r3, [pc, #72]	; (4fe0 <CC_PalPowerSaveModeSelect+0x7c>)
    4f96:	2201      	movs	r2, #1
    4f98:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4f9c:	4a11      	ldr	r2, [pc, #68]	; (4fe4 <CC_PalPowerSaveModeSelect+0x80>)
    4f9e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d1fb      	bne.n	4f9e <CC_PalPowerSaveModeSelect+0x3a>
    4fa6:	3101      	adds	r1, #1
    4fa8:	6021      	str	r1, [r4, #0]
    4faa:	68f3      	ldr	r3, [r6, #12]
    4fac:	6928      	ldr	r0, [r5, #16]
    4fae:	4798      	blx	r3
    4fb0:	2000      	movs	r0, #0
    4fb2:	bd70      	pop	{r4, r5, r6, pc}
    4fb4:	480c      	ldr	r0, [pc, #48]	; (4fe8 <CC_PalPowerSaveModeSelect+0x84>)
    4fb6:	bd70      	pop	{r4, r5, r6, pc}
    4fb8:	4a0a      	ldr	r2, [pc, #40]	; (4fe4 <CC_PalPowerSaveModeSelect+0x80>)
    4fba:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d1fb      	bne.n	4fba <CC_PalPowerSaveModeSelect+0x56>
    4fc2:	4a07      	ldr	r2, [pc, #28]	; (4fe0 <CC_PalPowerSaveModeSelect+0x7c>)
    4fc4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4fc8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4fcc:	f7ff ff46 	bl	4e5c <CC_HalMaskInterrupt>
    4fd0:	6823      	ldr	r3, [r4, #0]
    4fd2:	e7d5      	b.n	4f80 <CC_PalPowerSaveModeSelect+0x1c>
    4fd4:	20000100 	.word	0x20000100
    4fd8:	200000f0 	.word	0x200000f0
    4fdc:	20000e30 	.word	0x20000e30
    4fe0:	5002a000 	.word	0x5002a000
    4fe4:	5002b000 	.word	0x5002b000
    4fe8:	ffff8fe9 	.word	0xffff8fe9

00004fec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4fec:	4602      	mov	r2, r0
    4fee:	b158      	cbz	r0, 5008 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4ff0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4ff2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4ff6:	2b01      	cmp	r3, #1
    4ff8:	d003      	beq.n	5002 <sys_notify_validate+0x16>
    4ffa:	2b03      	cmp	r3, #3
    4ffc:	d107      	bne.n	500e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4ffe:	6803      	ldr	r3, [r0, #0]
    5000:	b143      	cbz	r3, 5014 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5002:	2000      	movs	r0, #0
    5004:	6090      	str	r0, [r2, #8]
    5006:	4770      	bx	lr
		return -EINVAL;
    5008:	f06f 0015 	mvn.w	r0, #21
    500c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    500e:	f06f 0015 	mvn.w	r0, #21
    5012:	4770      	bx	lr
			rv = -EINVAL;
    5014:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5018:	4770      	bx	lr

0000501a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    501a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    501c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    501e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5022:	6081      	str	r1, [r0, #8]
	switch (method) {
    5024:	2a03      	cmp	r2, #3
    5026:	d103      	bne.n	5030 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5028:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    502a:	2200      	movs	r2, #0
    502c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    502e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5030:	2000      	movs	r0, #0
    5032:	e7fa      	b.n	502a <sys_notify_finalize+0x10>

00005034 <arch_printk_char_out>:
}
    5034:	2000      	movs	r0, #0
    5036:	4770      	bx	lr

00005038 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5038:	b40f      	push	{r0, r1, r2, r3}
    503a:	b500      	push	{lr}
    503c:	b083      	sub	sp, #12
    503e:	a904      	add	r1, sp, #16
    5040:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5044:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5046:	f7fb f9ff 	bl	448 <vprintk>

	va_end(ap);
}
    504a:	b003      	add	sp, #12
    504c:	f85d eb04 	ldr.w	lr, [sp], #4
    5050:	b004      	add	sp, #16
    5052:	4770      	bx	lr

00005054 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    5054:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5058:	8b01      	ldrh	r1, [r0, #24]
    505a:	f021 0107 	bic.w	r1, r1, #7
    505e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    5060:	8301      	strh	r1, [r0, #24]
}
    5062:	4770      	bx	lr

00005064 <notify_monitors>:
{
    5064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5068:	4606      	mov	r6, r0
    506a:	460f      	mov	r7, r1
    506c:	4690      	mov	r8, r2
	return list->head;
    506e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5070:	b119      	cbz	r1, 507a <notify_monitors+0x16>
    5072:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5074:	b131      	cbz	r1, 5084 <notify_monitors+0x20>
	return node->next;
    5076:	680c      	ldr	r4, [r1, #0]
    5078:	e004      	b.n	5084 <notify_monitors+0x20>
    507a:	460c      	mov	r4, r1
    507c:	e002      	b.n	5084 <notify_monitors+0x20>
    507e:	4623      	mov	r3, r4
    5080:	4621      	mov	r1, r4
    5082:	461c      	mov	r4, r3
    5084:	b159      	cbz	r1, 509e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    5086:	684d      	ldr	r5, [r1, #4]
    5088:	4643      	mov	r3, r8
    508a:	463a      	mov	r2, r7
    508c:	4630      	mov	r0, r6
    508e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5090:	2c00      	cmp	r4, #0
    5092:	d0f4      	beq.n	507e <notify_monitors+0x1a>
    5094:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5096:	2c00      	cmp	r4, #0
    5098:	d0f2      	beq.n	5080 <notify_monitors+0x1c>
	return node->next;
    509a:	6823      	ldr	r3, [r4, #0]
    509c:	e7f0      	b.n	5080 <notify_monitors+0x1c>
}
    509e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000050a2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    50a2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    50a4:	f013 0307 	ands.w	r3, r3, #7
    50a8:	d103      	bne.n	50b2 <process_recheck+0x10>
	return list->head;
    50aa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    50ac:	b10a      	cbz	r2, 50b2 <process_recheck+0x10>
		evt = EVT_START;
    50ae:	2003      	movs	r0, #3
    50b0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    50b2:	2b02      	cmp	r3, #2
    50b4:	d003      	beq.n	50be <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    50b6:	2b01      	cmp	r3, #1
    50b8:	d006      	beq.n	50c8 <process_recheck+0x26>
	int evt = EVT_NOP;
    50ba:	2000      	movs	r0, #0
    50bc:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    50be:	8b42      	ldrh	r2, [r0, #26]
    50c0:	2a00      	cmp	r2, #0
    50c2:	d1f8      	bne.n	50b6 <process_recheck+0x14>
		evt = EVT_STOP;
    50c4:	2004      	movs	r0, #4
    50c6:	4770      	bx	lr
    50c8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    50ca:	b10b      	cbz	r3, 50d0 <process_recheck+0x2e>
		evt = EVT_RESET;
    50cc:	2005      	movs	r0, #5
}
    50ce:	4770      	bx	lr
	int evt = EVT_NOP;
    50d0:	2000      	movs	r0, #0
    50d2:	4770      	bx	lr

000050d4 <process_complete>:
{
    50d4:	b510      	push	{r4, lr}
    50d6:	4604      	mov	r4, r0
    50d8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    50da:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    50dc:	2a00      	cmp	r2, #0
    50de:	db07      	blt.n	50f0 <process_complete+0x1c>
    50e0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    50e4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    50e6:	2a01      	cmp	r2, #1
    50e8:	d90e      	bls.n	5108 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    50ea:	2b04      	cmp	r3, #4
    50ec:	d033      	beq.n	5156 <process_complete+0x82>
}
    50ee:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    50f0:	e9d0 0100 	ldrd	r0, r1, [r0]
    50f4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    50f8:	2300      	movs	r3, #0
    50fa:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    50fc:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    50fe:	2101      	movs	r1, #1
    5100:	4620      	mov	r0, r4
    5102:	f7ff ffa7 	bl	5054 <set_state>
    5106:	e7f2      	b.n	50ee <process_complete+0x1a>
		*clients = mgr->clients;
    5108:	e9d0 0100 	ldrd	r0, r1, [r0]
    510c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5110:	2200      	movs	r2, #0
    5112:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5114:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5116:	2b06      	cmp	r3, #6
    5118:	d118      	bne.n	514c <process_complete+0x78>
	return list->head;
    511a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    511e:	b13b      	cbz	r3, 5130 <process_complete+0x5c>
				mgr->refs += 1U;
    5120:	8b62      	ldrh	r2, [r4, #26]
    5122:	3201      	adds	r2, #1
    5124:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5126:	2b00      	cmp	r3, #0
    5128:	d0f9      	beq.n	511e <process_complete+0x4a>
	return node->next;
    512a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    512c:	2b00      	cmp	r3, #0
    512e:	d1f6      	bne.n	511e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    5130:	2102      	movs	r1, #2
    5132:	4620      	mov	r0, r4
    5134:	f7ff ff8e 	bl	5054 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5138:	4620      	mov	r0, r4
    513a:	f7ff ffb2 	bl	50a2 <process_recheck>
    513e:	2800      	cmp	r0, #0
    5140:	d0d5      	beq.n	50ee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5142:	8b23      	ldrh	r3, [r4, #24]
    5144:	f043 0320 	orr.w	r3, r3, #32
    5148:	8323      	strh	r3, [r4, #24]
    514a:	e7d0      	b.n	50ee <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    514c:	2100      	movs	r1, #0
    514e:	4620      	mov	r0, r4
    5150:	f7ff ff80 	bl	5054 <set_state>
    5154:	e7f0      	b.n	5138 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    5156:	2100      	movs	r1, #0
    5158:	f7ff ff7c 	bl	5054 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    515c:	4620      	mov	r0, r4
    515e:	f7ff ffa0 	bl	50a2 <process_recheck>
    5162:	2800      	cmp	r0, #0
    5164:	d0c3      	beq.n	50ee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5166:	8b23      	ldrh	r3, [r4, #24]
    5168:	f043 0320 	orr.w	r3, r3, #32
    516c:	8323      	strh	r3, [r4, #24]
}
    516e:	e7be      	b.n	50ee <process_complete+0x1a>

00005170 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5170:	b158      	cbz	r0, 518a <validate_args+0x1a>
{
    5172:	b510      	push	{r4, lr}
    5174:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5176:	b159      	cbz	r1, 5190 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    5178:	1d08      	adds	r0, r1, #4
    517a:	f7ff ff37 	bl	4fec <sys_notify_validate>
	if ((rv == 0)
    517e:	b918      	cbnz	r0, 5188 <validate_args+0x18>
	    && ((cli->notify.flags
    5180:	68a3      	ldr	r3, [r4, #8]
    5182:	f033 0303 	bics.w	r3, r3, #3
    5186:	d106      	bne.n	5196 <validate_args+0x26>
}
    5188:	bd10      	pop	{r4, pc}
		return -EINVAL;
    518a:	f06f 0015 	mvn.w	r0, #21
}
    518e:	4770      	bx	lr
		return -EINVAL;
    5190:	f06f 0015 	mvn.w	r0, #21
    5194:	e7f8      	b.n	5188 <validate_args+0x18>
		rv = -EINVAL;
    5196:	f06f 0015 	mvn.w	r0, #21
    519a:	e7f5      	b.n	5188 <validate_args+0x18>

0000519c <notify_one>:
{
    519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a0:	4607      	mov	r7, r0
    51a2:	460c      	mov	r4, r1
    51a4:	4616      	mov	r6, r2
    51a6:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    51a8:	4619      	mov	r1, r3
    51aa:	1d20      	adds	r0, r4, #4
    51ac:	f7ff ff35 	bl	501a <sys_notify_finalize>
	if (cb) {
    51b0:	b128      	cbz	r0, 51be <notify_one+0x22>
    51b2:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    51b4:	462b      	mov	r3, r5
    51b6:	4632      	mov	r2, r6
    51b8:	4621      	mov	r1, r4
    51ba:	4638      	mov	r0, r7
    51bc:	47c0      	blx	r8
}
    51be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000051c2 <notify_all>:
{
    51c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c6:	4680      	mov	r8, r0
    51c8:	460c      	mov	r4, r1
    51ca:	4617      	mov	r7, r2
    51cc:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    51ce:	e004      	b.n	51da <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    51d0:	4633      	mov	r3, r6
    51d2:	463a      	mov	r2, r7
    51d4:	4640      	mov	r0, r8
    51d6:	f7ff ffe1 	bl	519c <notify_one>
	return list->head;
    51da:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    51dc:	b131      	cbz	r1, 51ec <notify_all+0x2a>
	return node->next;
    51de:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    51e0:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    51e2:	6863      	ldr	r3, [r4, #4]
    51e4:	428b      	cmp	r3, r1
    51e6:	d1f3      	bne.n	51d0 <notify_all+0xe>
	list->tail = node;
    51e8:	6065      	str	r5, [r4, #4]
}
    51ea:	e7f1      	b.n	51d0 <notify_all+0xe>
}
    51ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000051f0 <transition_complete>:
{
    51f0:	b508      	push	{r3, lr}
	__asm__ volatile(
    51f2:	f04f 0c20 	mov.w	ip, #32
    51f6:	f3ef 8211 	mrs	r2, BASEPRI
    51fa:	f38c 8812 	msr	BASEPRI_MAX, ip
    51fe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5202:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5204:	2101      	movs	r1, #1
    5206:	f7fb f92f 	bl	468 <process_event>
}
    520a:	bd08      	pop	{r3, pc}

0000520c <onoff_manager_init>:
	if ((mgr == NULL)
    520c:	4603      	mov	r3, r0
    520e:	b170      	cbz	r0, 522e <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5210:	b181      	cbz	r1, 5234 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5212:	680a      	ldr	r2, [r1, #0]
    5214:	b18a      	cbz	r2, 523a <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5216:	684a      	ldr	r2, [r1, #4]
    5218:	b192      	cbz	r2, 5240 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    521a:	2000      	movs	r0, #0
    521c:	6018      	str	r0, [r3, #0]
    521e:	6058      	str	r0, [r3, #4]
    5220:	6098      	str	r0, [r3, #8]
    5222:	60d8      	str	r0, [r3, #12]
    5224:	6118      	str	r0, [r3, #16]
    5226:	6158      	str	r0, [r3, #20]
    5228:	6198      	str	r0, [r3, #24]
    522a:	6119      	str	r1, [r3, #16]
	return 0;
    522c:	4770      	bx	lr
		return -EINVAL;
    522e:	f06f 0015 	mvn.w	r0, #21
    5232:	4770      	bx	lr
    5234:	f06f 0015 	mvn.w	r0, #21
    5238:	4770      	bx	lr
    523a:	f06f 0015 	mvn.w	r0, #21
    523e:	4770      	bx	lr
    5240:	f06f 0015 	mvn.w	r0, #21
}
    5244:	4770      	bx	lr

00005246 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5248:	4604      	mov	r4, r0
    524a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    524c:	f7ff ff90 	bl	5170 <validate_args>

	if (rv < 0) {
    5250:	1e06      	subs	r6, r0, #0
    5252:	db37      	blt.n	52c4 <onoff_request+0x7e>
    5254:	f04f 0320 	mov.w	r3, #32
    5258:	f3ef 8211 	mrs	r2, BASEPRI
    525c:	f383 8812 	msr	BASEPRI_MAX, r3
    5260:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5264:	8b25      	ldrh	r5, [r4, #24]
    5266:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    526a:	8b63      	ldrh	r3, [r4, #26]
    526c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5270:	428b      	cmp	r3, r1
    5272:	d02f      	beq.n	52d4 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5274:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    5276:	2d02      	cmp	r5, #2
    5278:	d00c      	beq.n	5294 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    527a:	b18d      	cbz	r5, 52a0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    527c:	2d04      	cmp	r5, #4
    527e:	d00f      	beq.n	52a0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    5280:	2d06      	cmp	r5, #6
    5282:	d00d      	beq.n	52a0 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    5284:	2d05      	cmp	r5, #5
    5286:	d01f      	beq.n	52c8 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    5288:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    528c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    528e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5290:	4608      	mov	r0, r1
    5292:	e00a      	b.n	52aa <onoff_request+0x64>
		mgr->refs += 1U;
    5294:	3301      	adds	r3, #1
    5296:	8363      	strh	r3, [r4, #26]
		notify = true;
    5298:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    529a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    529c:	4618      	mov	r0, r3
    529e:	e004      	b.n	52aa <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    52a0:	fab5 f385 	clz	r3, r5
    52a4:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    52a6:	2100      	movs	r1, #0
		add_client = true;
    52a8:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    52aa:	b128      	cbz	r0, 52b8 <onoff_request+0x72>
	parent->next = child;
    52ac:	2000      	movs	r0, #0
    52ae:	6038      	str	r0, [r7, #0]
	return list->tail;
    52b0:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    52b2:	b1a8      	cbz	r0, 52e0 <onoff_request+0x9a>
	parent->next = child;
    52b4:	6007      	str	r7, [r0, #0]
	list->tail = node;
    52b6:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    52b8:	b9ab      	cbnz	r3, 52e6 <onoff_request+0xa0>
	__asm__ volatile(
    52ba:	f382 8811 	msr	BASEPRI, r2
    52be:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    52c2:	b9a9      	cbnz	r1, 52f0 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    52c4:	4630      	mov	r0, r6
    52c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    52c8:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    52cc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    52ce:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    52d0:	4608      	mov	r0, r1
    52d2:	e7ea      	b.n	52aa <onoff_request+0x64>
		rv = -EAGAIN;
    52d4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    52d8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    52da:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    52dc:	4608      	mov	r0, r1
    52de:	e7e4      	b.n	52aa <onoff_request+0x64>
    52e0:	6067      	str	r7, [r4, #4]
	list->head = node;
    52e2:	6027      	str	r7, [r4, #0]
}
    52e4:	e7e8      	b.n	52b8 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    52e6:	2102      	movs	r1, #2
    52e8:	4620      	mov	r0, r4
    52ea:	f7fb f8bd 	bl	468 <process_event>
    52ee:	e7e9      	b.n	52c4 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    52f0:	2300      	movs	r3, #0
    52f2:	462a      	mov	r2, r5
    52f4:	4639      	mov	r1, r7
    52f6:	4620      	mov	r0, r4
    52f8:	f7ff ff50 	bl	519c <notify_one>
    52fc:	e7e2      	b.n	52c4 <onoff_request+0x7e>

000052fe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    52fe:	b508      	push	{r3, lr}
    5300:	4604      	mov	r4, r0
    5302:	4608      	mov	r0, r1
    5304:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5306:	461a      	mov	r2, r3
    5308:	47a0      	blx	r4
	return z_impl_z_current_get();
    530a:	f7ff faed 	bl	48e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    530e:	f7fc fb2f 	bl	1970 <z_impl_k_thread_abort>

00005312 <extract_decimal>:
{
    5312:	4684      	mov	ip, r0
	const char *sp = *str;
    5314:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5316:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    5318:	e005      	b.n	5326 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    531a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    531e:	3201      	adds	r2, #1
    5320:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5324:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5326:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5328:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    532c:	2909      	cmp	r1, #9
    532e:	d9f4      	bls.n	531a <extract_decimal+0x8>
	*str = sp;
    5330:	f8cc 2000 	str.w	r2, [ip]
}
    5334:	4770      	bx	lr

00005336 <encode_uint>:
{
    5336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    533a:	b083      	sub	sp, #12
    533c:	4604      	mov	r4, r0
    533e:	460d      	mov	r5, r1
    5340:	9201      	str	r2, [sp, #4]
    5342:	469a      	mov	sl, r3
    5344:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    5346:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5348:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    534c:	2b6f      	cmp	r3, #111	; 0x6f
    534e:	d00f      	beq.n	5370 <encode_uint+0x3a>
    5350:	d906      	bls.n	5360 <encode_uint+0x2a>
    5352:	2b70      	cmp	r3, #112	; 0x70
    5354:	d00f      	beq.n	5376 <encode_uint+0x40>
    5356:	2b78      	cmp	r3, #120	; 0x78
    5358:	d110      	bne.n	537c <encode_uint+0x46>
		return 16;
    535a:	f04f 0910 	mov.w	r9, #16
    535e:	e026      	b.n	53ae <encode_uint+0x78>
	switch (specifier) {
    5360:	2b58      	cmp	r3, #88	; 0x58
    5362:	d002      	beq.n	536a <encode_uint+0x34>
    5364:	f04f 090a 	mov.w	r9, #10
    5368:	e021      	b.n	53ae <encode_uint+0x78>
		return 16;
    536a:	f04f 0910 	mov.w	r9, #16
    536e:	e01e      	b.n	53ae <encode_uint+0x78>
		return 8;
    5370:	f04f 0908 	mov.w	r9, #8
    5374:	e01b      	b.n	53ae <encode_uint+0x78>
		return 16;
    5376:	f04f 0910 	mov.w	r9, #16
    537a:	e018      	b.n	53ae <encode_uint+0x78>
	switch (specifier) {
    537c:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    5380:	e015      	b.n	53ae <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5382:	f1bb 0f19 	cmp.w	fp, #25
    5386:	d821      	bhi.n	53cc <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5388:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    538a:	3237      	adds	r2, #55	; 0x37
    538c:	b2d2      	uxtb	r2, r2
    538e:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    5392:	463a      	mov	r2, r7
    5394:	4643      	mov	r3, r8
    5396:	4620      	mov	r0, r4
    5398:	4629      	mov	r1, r5
    539a:	f7fa feb1 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    539e:	42bc      	cmp	r4, r7
    53a0:	f175 0300 	sbcs.w	r3, r5, #0
    53a4:	d316      	bcc.n	53d4 <encode_uint+0x9e>
    53a6:	4556      	cmp	r6, sl
    53a8:	d914      	bls.n	53d4 <encode_uint+0x9e>
		value /= radix;
    53aa:	4604      	mov	r4, r0
    53ac:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    53ae:	f04f 0800 	mov.w	r8, #0
    53b2:	464f      	mov	r7, r9
    53b4:	464a      	mov	r2, r9
    53b6:	4643      	mov	r3, r8
    53b8:	4620      	mov	r0, r4
    53ba:	4629      	mov	r1, r5
    53bc:	f7fa fea0 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    53c0:	2a09      	cmp	r2, #9
    53c2:	d8de      	bhi.n	5382 <encode_uint+0x4c>
    53c4:	b2d2      	uxtb	r2, r2
    53c6:	3230      	adds	r2, #48	; 0x30
    53c8:	b2d2      	uxtb	r2, r2
    53ca:	e7e0      	b.n	538e <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    53cc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    53ce:	3257      	adds	r2, #87	; 0x57
    53d0:	b2d2      	uxtb	r2, r2
    53d2:	e7dc      	b.n	538e <encode_uint+0x58>
	if (conv->flag_hash) {
    53d4:	9b01      	ldr	r3, [sp, #4]
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	f013 0f20 	tst.w	r3, #32
    53dc:	d005      	beq.n	53ea <encode_uint+0xb4>
		if (radix == 8) {
    53de:	f1b9 0f08 	cmp.w	r9, #8
    53e2:	d006      	beq.n	53f2 <encode_uint+0xbc>
		} else if (radix == 16) {
    53e4:	f1b9 0f10 	cmp.w	r9, #16
    53e8:	d009      	beq.n	53fe <encode_uint+0xc8>
}
    53ea:	4630      	mov	r0, r6
    53ec:	b003      	add	sp, #12
    53ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    53f2:	9a01      	ldr	r2, [sp, #4]
    53f4:	7893      	ldrb	r3, [r2, #2]
    53f6:	f043 0308 	orr.w	r3, r3, #8
    53fa:	7093      	strb	r3, [r2, #2]
    53fc:	e7f5      	b.n	53ea <encode_uint+0xb4>
			conv->altform_0c = true;
    53fe:	9a01      	ldr	r2, [sp, #4]
    5400:	7893      	ldrb	r3, [r2, #2]
    5402:	f043 0310 	orr.w	r3, r3, #16
    5406:	7093      	strb	r3, [r2, #2]
    5408:	e7ef      	b.n	53ea <encode_uint+0xb4>

0000540a <outs>:
{
    540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    540e:	4607      	mov	r7, r0
    5410:	460e      	mov	r6, r1
    5412:	4614      	mov	r4, r2
    5414:	4698      	mov	r8, r3
	size_t count = 0;
    5416:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5418:	e006      	b.n	5428 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    541a:	4631      	mov	r1, r6
    541c:	f814 0b01 	ldrb.w	r0, [r4], #1
    5420:	47b8      	blx	r7
		if (rc < 0) {
    5422:	2800      	cmp	r0, #0
    5424:	db09      	blt.n	543a <outs+0x30>
		++count;
    5426:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5428:	4544      	cmp	r4, r8
    542a:	d3f6      	bcc.n	541a <outs+0x10>
    542c:	f1b8 0f00 	cmp.w	r8, #0
    5430:	d102      	bne.n	5438 <outs+0x2e>
    5432:	7823      	ldrb	r3, [r4, #0]
    5434:	2b00      	cmp	r3, #0
    5436:	d1f0      	bne.n	541a <outs+0x10>
	return (int)count;
    5438:	4628      	mov	r0, r5
}
    543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000543e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    543e:	4770      	bx	lr

00005440 <abort_function>:
{
    5440:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5442:	2000      	movs	r0, #0
    5444:	f7fb fd2e 	bl	ea4 <sys_reboot>

00005448 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5448:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    544a:	f000 fe79 	bl	6140 <z_fatal_error>
}
    544e:	bd08      	pop	{r3, pc}

00005450 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5450:	b508      	push	{r3, lr}
    5452:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5454:	6800      	ldr	r0, [r0, #0]
    5456:	f7ff fff7 	bl	5448 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    545a:	bd08      	pop	{r3, pc}

0000545c <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    545c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    545e:	2100      	movs	r1, #0
    5460:	2001      	movs	r0, #1
    5462:	f7ff fff1 	bl	5448 <z_arm_fatal_error>
}
    5466:	bd08      	pop	{r3, pc}

00005468 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5468:	b508      	push	{r3, lr}
	handler();
    546a:	f7fb ffd3 	bl	1414 <z_SysNmiOnReset>
	z_arm_int_exit();
    546e:	f7fc f8c9 	bl	1604 <z_arm_exc_exit>
}
    5472:	bd08      	pop	{r3, pc}

00005474 <memory_fault_recoverable>:
}
    5474:	2000      	movs	r0, #0
    5476:	4770      	bx	lr

00005478 <debug_monitor>:
	*recoverable = false;
    5478:	2300      	movs	r3, #0
    547a:	700b      	strb	r3, [r1, #0]
}
    547c:	4770      	bx	lr

0000547e <fault_handle>:
{
    547e:	b508      	push	{r3, lr}
	*recoverable = false;
    5480:	2300      	movs	r3, #0
    5482:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5484:	1ecb      	subs	r3, r1, #3
    5486:	2b09      	cmp	r3, #9
    5488:	d81a      	bhi.n	54c0 <fault_handle+0x42>
    548a:	e8df f003 	tbb	[pc, r3]
    548e:	0905      	.short	0x0905
    5490:	1919110d 	.word	0x1919110d
    5494:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    5498:	4611      	mov	r1, r2
    549a:	f7fc f94d 	bl	1738 <hard_fault>
		break;
    549e:	e010      	b.n	54c2 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    54a0:	2100      	movs	r1, #0
    54a2:	f7fc f8f9 	bl	1698 <mem_manage_fault>
		break;
    54a6:	e00c      	b.n	54c2 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    54a8:	2100      	movs	r1, #0
    54aa:	f7fc f8b9 	bl	1620 <bus_fault>
		break;
    54ae:	e008      	b.n	54c2 <fault_handle+0x44>
		reason = usage_fault(esf);
    54b0:	f7fc f8e0 	bl	1674 <usage_fault>
		break;
    54b4:	e005      	b.n	54c2 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    54b6:	4611      	mov	r1, r2
    54b8:	f7ff ffde 	bl	5478 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    54bc:	2000      	movs	r0, #0
		break;
    54be:	e000      	b.n	54c2 <fault_handle+0x44>
	switch (fault) {
    54c0:	2000      	movs	r0, #0
}
    54c2:	bd08      	pop	{r3, pc}

000054c4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    54c4:	6843      	ldr	r3, [r0, #4]
    54c6:	1e5a      	subs	r2, r3, #1
		&&
    54c8:	4213      	tst	r3, r2
    54ca:	d106      	bne.n	54da <mpu_partition_is_valid+0x16>
		&&
    54cc:	2b1f      	cmp	r3, #31
    54ce:	d906      	bls.n	54de <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    54d0:	6803      	ldr	r3, [r0, #0]
		&&
    54d2:	421a      	tst	r2, r3
    54d4:	d005      	beq.n	54e2 <mpu_partition_is_valid+0x1e>
    54d6:	2000      	movs	r0, #0
    54d8:	4770      	bx	lr
    54da:	2000      	movs	r0, #0
    54dc:	4770      	bx	lr
    54de:	2000      	movs	r0, #0
    54e0:	4770      	bx	lr
    54e2:	2001      	movs	r0, #1
}
    54e4:	4770      	bx	lr

000054e6 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    54e6:	2807      	cmp	r0, #7
    54e8:	d805      	bhi.n	54f6 <region_allocate_and_init+0x10>
{
    54ea:	b510      	push	{r4, lr}
    54ec:	4604      	mov	r4, r0
	region_init(index, region_conf);
    54ee:	f7fc fa79 	bl	19e4 <region_init>
	return index;
    54f2:	4620      	mov	r0, r4
}
    54f4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    54f6:	f06f 0015 	mvn.w	r0, #21
}
    54fa:	4770      	bx	lr

000054fc <mpu_configure_region>:
{
    54fc:	b500      	push	{lr}
    54fe:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5500:	680b      	ldr	r3, [r1, #0]
    5502:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    5504:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5506:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    5508:	2b20      	cmp	r3, #32
    550a:	d912      	bls.n	5532 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    550c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5510:	d811      	bhi.n	5536 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5512:	3b01      	subs	r3, #1
    5514:	fab3 f383 	clz	r3, r3
    5518:	f1c3 031f 	rsb	r3, r3, #31
    551c:	005b      	lsls	r3, r3, #1
    551e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5522:	4313      	orrs	r3, r2
    5524:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5526:	a901      	add	r1, sp, #4
    5528:	f7ff ffdd 	bl	54e6 <region_allocate_and_init>
}
    552c:	b005      	add	sp, #20
    552e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    5532:	2308      	movs	r3, #8
    5534:	e7f5      	b.n	5522 <mpu_configure_region+0x26>
		return REGION_4G;
    5536:	233e      	movs	r3, #62	; 0x3e
    5538:	e7f3      	b.n	5522 <mpu_configure_region+0x26>

0000553a <mpu_configure_regions>:
{
    553a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    553e:	4680      	mov	r8, r0
    5540:	460f      	mov	r7, r1
    5542:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    5544:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    5546:	2500      	movs	r5, #0
    5548:	e009      	b.n	555e <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    554a:	4621      	mov	r1, r4
    554c:	b2f0      	uxtb	r0, r6
    554e:	f7ff ffd5 	bl	54fc <mpu_configure_region>
    5552:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    5554:	f110 0f16 	cmn.w	r0, #22
    5558:	d014      	beq.n	5584 <mpu_configure_regions+0x4a>
		reg_index++;
    555a:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    555c:	3501      	adds	r5, #1
    555e:	42bd      	cmp	r5, r7
    5560:	da10      	bge.n	5584 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    5562:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    5566:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    556a:	6862      	ldr	r2, [r4, #4]
    556c:	2a00      	cmp	r2, #0
    556e:	d0f5      	beq.n	555c <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    5570:	f1b9 0f00 	cmp.w	r9, #0
    5574:	d0e9      	beq.n	554a <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    5576:	4620      	mov	r0, r4
    5578:	f7ff ffa4 	bl	54c4 <mpu_partition_is_valid>
		if (do_sanity_check &&
    557c:	2800      	cmp	r0, #0
    557e:	d1e4      	bne.n	554a <mpu_configure_regions+0x10>
			return -EINVAL;
    5580:	f06f 0615 	mvn.w	r6, #21
}
    5584:	4630      	mov	r0, r6
    5586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000558a <arm_core_mpu_configure_static_mpu_regions>:
{
    558a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    558c:	f7fc fa3e 	bl	1a0c <mpu_configure_static_mpu_regions>
}
    5590:	bd08      	pop	{r3, pc}

00005592 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    5592:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    5594:	f7fc fa44 	bl	1a20 <mpu_configure_dynamic_mpu_regions>
}
    5598:	bd08      	pop	{r3, pc}

0000559a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    559a:	4602      	mov	r2, r0
    559c:	e002      	b.n	55a4 <strcpy+0xa>
		*d = *s;
    559e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    55a2:	3101      	adds	r1, #1
	while (*s != '\0') {
    55a4:	780b      	ldrb	r3, [r1, #0]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d1f9      	bne.n	559e <strcpy+0x4>
	}

	*d = '\0';
    55aa:	7013      	strb	r3, [r2, #0]

	return dest;
}
    55ac:	4770      	bx	lr

000055ae <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    55ae:	4603      	mov	r3, r0
    55b0:	b1a2      	cbz	r2, 55dc <strncpy+0x2e>
{
    55b2:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    55b4:	780c      	ldrb	r4, [r1, #0]
    55b6:	b12c      	cbz	r4, 55c4 <strncpy+0x16>
		*d = *s;
    55b8:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    55bc:	3101      	adds	r1, #1
		d++;
		n--;
    55be:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    55c0:	2a00      	cmp	r2, #0
    55c2:	d1f7      	bne.n	55b4 <strncpy+0x6>
	}

	while (n > 0) {
    55c4:	b122      	cbz	r2, 55d0 <strncpy+0x22>
		*d = '\0';
    55c6:	2100      	movs	r1, #0
    55c8:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    55cc:	3a01      	subs	r2, #1
    55ce:	e7f9      	b.n	55c4 <strncpy+0x16>
	}

	return dest;
}
    55d0:	bc10      	pop	{r4}
    55d2:	4770      	bx	lr
		*d = '\0';
    55d4:	2100      	movs	r1, #0
    55d6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    55da:	3a01      	subs	r2, #1
	while (n > 0) {
    55dc:	2a00      	cmp	r2, #0
    55de:	d1f9      	bne.n	55d4 <strncpy+0x26>
    55e0:	4770      	bx	lr

000055e2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    55e2:	4603      	mov	r3, r0
	size_t n = 0;
    55e4:	2000      	movs	r0, #0

	while (*s != '\0') {
    55e6:	e001      	b.n	55ec <strlen+0xa>
		s++;
    55e8:	3301      	adds	r3, #1
		n++;
    55ea:	3001      	adds	r0, #1
	while (*s != '\0') {
    55ec:	781a      	ldrb	r2, [r3, #0]
    55ee:	2a00      	cmp	r2, #0
    55f0:	d1fa      	bne.n	55e8 <strlen+0x6>
	}

	return n;
}
    55f2:	4770      	bx	lr

000055f4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    55f4:	4603      	mov	r3, r0
	size_t n = 0;
    55f6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    55f8:	e001      	b.n	55fe <strnlen+0xa>
		s++;
    55fa:	3301      	adds	r3, #1
		n++;
    55fc:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    55fe:	781a      	ldrb	r2, [r3, #0]
    5600:	b10a      	cbz	r2, 5606 <strnlen+0x12>
    5602:	4288      	cmp	r0, r1
    5604:	d3f9      	bcc.n	55fa <strnlen+0x6>
	}

	return n;
}
    5606:	4770      	bx	lr

00005608 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5608:	ea80 0301 	eor.w	r3, r0, r1
    560c:	f013 0f03 	tst.w	r3, #3
    5610:	d001      	beq.n	5616 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    5612:	4603      	mov	r3, r0
    5614:	e023      	b.n	565e <memcpy+0x56>
    5616:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5618:	f013 0f03 	tst.w	r3, #3
    561c:	d00f      	beq.n	563e <memcpy+0x36>
			if (n == 0) {
    561e:	b30a      	cbz	r2, 5664 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5620:	f811 cb01 	ldrb.w	ip, [r1], #1
    5624:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5628:	3a01      	subs	r2, #1
    562a:	e7f5      	b.n	5618 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    562c:	f811 cb01 	ldrb.w	ip, [r1], #1
    5630:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5634:	3a01      	subs	r2, #1
	while (n > 0) {
    5636:	2a00      	cmp	r2, #0
    5638:	d1f8      	bne.n	562c <memcpy+0x24>
	}

	return d;
}
    563a:	bc10      	pop	{r4}
    563c:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    563e:	2a03      	cmp	r2, #3
    5640:	d90d      	bls.n	565e <memcpy+0x56>
{
    5642:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5644:	f851 4b04 	ldr.w	r4, [r1], #4
    5648:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    564c:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    564e:	2a03      	cmp	r2, #3
    5650:	d8f8      	bhi.n	5644 <memcpy+0x3c>
    5652:	e7f0      	b.n	5636 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5654:	f811 cb01 	ldrb.w	ip, [r1], #1
    5658:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    565c:	3a01      	subs	r2, #1
	while (n > 0) {
    565e:	2a00      	cmp	r2, #0
    5660:	d1f8      	bne.n	5654 <memcpy+0x4c>
    5662:	4770      	bx	lr
}
    5664:	4770      	bx	lr

00005666 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5666:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    566a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    566c:	e002      	b.n	5674 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    566e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5672:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5674:	f013 0f03 	tst.w	r3, #3
    5678:	d002      	beq.n	5680 <memset+0x1a>
		if (n == 0) {
    567a:	2a00      	cmp	r2, #0
    567c:	d1f7      	bne.n	566e <memset+0x8>
    567e:	e00f      	b.n	56a0 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5680:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5682:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5686:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    568a:	2a03      	cmp	r2, #3
    568c:	d906      	bls.n	569c <memset+0x36>
		*(d_word++) = c_word;
    568e:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5692:	3a04      	subs	r2, #4
    5694:	e7f9      	b.n	568a <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5696:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    569a:	3a01      	subs	r2, #1
	while (n > 0) {
    569c:	2a00      	cmp	r2, #0
    569e:	d1fa      	bne.n	5696 <memset+0x30>
	}

	return buf;
}
    56a0:	4770      	bx	lr

000056a2 <_stdout_hook_default>:
}
    56a2:	f04f 30ff 	mov.w	r0, #4294967295
    56a6:	4770      	bx	lr

000056a8 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    56ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    56b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    56b4:	2a08      	cmp	r2, #8
    56b6:	d001      	beq.n	56bc <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr
                switch(var2)
    56bc:	2b02      	cmp	r3, #2
    56be:	d001      	beq.n	56c4 <nrf52_errata_197+0x1c>
                        return false;
    56c0:	2000      	movs	r0, #0
    56c2:	4770      	bx	lr
                        return true;
    56c4:	2001      	movs	r0, #1
    #endif
}
    56c6:	4770      	bx	lr

000056c8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    56c8:	2806      	cmp	r0, #6
    56ca:	d000      	beq.n	56ce <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    56cc:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    56ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56d2:	2201      	movs	r2, #1
    56d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    56d8:	f3bf 8f4f 	dsb	sy
        __WFE();
    56dc:	bf20      	wfe
    while (true)
    56de:	e7fd      	b.n	56dc <pm_state_set+0x14>

000056e0 <pm_state_exit_post_ops>:
    56e0:	2300      	movs	r3, #0
    56e2:	f383 8811 	msr	BASEPRI, r3
    56e6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    56ea:	4770      	bx	lr

000056ec <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    56ec:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    56ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    56f2:	0089      	lsls	r1, r1, #2
    56f4:	3138      	adds	r1, #56	; 0x38
}
    56f6:	4408      	add	r0, r1
    56f8:	4770      	bx	lr

000056fa <get_sub_config>:
	const struct nrf_clock_control_config *config =
    56fa:	6840      	ldr	r0, [r0, #4]
}
    56fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5700:	4770      	bx	lr

00005702 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5702:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5704:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5708:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    570c:	4770      	bx	lr

0000570e <get_status>:
{
    570e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5710:	b2c9      	uxtb	r1, r1
    5712:	f7ff ffeb 	bl	56ec <get_sub_data>
    5716:	6880      	ldr	r0, [r0, #8]
}
    5718:	f000 0007 	and.w	r0, r0, #7
    571c:	bd08      	pop	{r3, pc}

0000571e <set_off_state>:
	__asm__ volatile(
    571e:	f04f 0320 	mov.w	r3, #32
    5722:	f3ef 8211 	mrs	r2, BASEPRI
    5726:	f383 8812 	msr	BASEPRI_MAX, r3
    572a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    572e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5730:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5734:	d001      	beq.n	573a <set_off_state+0x1c>
    5736:	428b      	cmp	r3, r1
    5738:	d107      	bne.n	574a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    573a:	2301      	movs	r3, #1
    573c:	6003      	str	r3, [r0, #0]
	int err = 0;
    573e:	2000      	movs	r0, #0
	__asm__ volatile(
    5740:	f382 8811 	msr	BASEPRI, r2
    5744:	f3bf 8f6f 	isb	sy
}
    5748:	4770      	bx	lr
		err = -EPERM;
    574a:	f04f 30ff 	mov.w	r0, #4294967295
    574e:	e7f7      	b.n	5740 <set_off_state+0x22>

00005750 <set_starting_state>:
	__asm__ volatile(
    5750:	f04f 0320 	mov.w	r3, #32
    5754:	f3ef 8211 	mrs	r2, BASEPRI
    5758:	f383 8812 	msr	BASEPRI_MAX, r3
    575c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5760:	6803      	ldr	r3, [r0, #0]
    5762:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5766:	f003 0307 	and.w	r3, r3, #7
    576a:	2b01      	cmp	r3, #1
    576c:	d008      	beq.n	5780 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    576e:	458c      	cmp	ip, r1
    5770:	d009      	beq.n	5786 <set_starting_state+0x36>
		err = -EPERM;
    5772:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    5776:	f382 8811 	msr	BASEPRI, r2
    577a:	f3bf 8f6f 	isb	sy
}
    577e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5780:	6001      	str	r1, [r0, #0]
	int err = 0;
    5782:	2000      	movs	r0, #0
    5784:	e7f7      	b.n	5776 <set_starting_state+0x26>
		err = -EALREADY;
    5786:	f06f 0077 	mvn.w	r0, #119	; 0x77
    578a:	e7f4      	b.n	5776 <set_starting_state+0x26>

0000578c <set_on_state>:
	__asm__ volatile(
    578c:	f04f 0320 	mov.w	r3, #32
    5790:	f3ef 8211 	mrs	r2, BASEPRI
    5794:	f383 8812 	msr	BASEPRI_MAX, r3
    5798:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    579c:	6803      	ldr	r3, [r0, #0]
    579e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    57a2:	f043 0302 	orr.w	r3, r3, #2
    57a6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    57a8:	f382 8811 	msr	BASEPRI, r2
    57ac:	f3bf 8f6f 	isb	sy
}
    57b0:	4770      	bx	lr

000057b2 <clkstarted_handle>:
{
    57b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57b4:	4606      	mov	r6, r0
    57b6:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    57b8:	f7ff ff98 	bl	56ec <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    57bc:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    57be:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    57c0:	2300      	movs	r3, #0
    57c2:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    57c6:	f7ff ffe1 	bl	578c <set_on_state>
	if (callback) {
    57ca:	b11d      	cbz	r5, 57d4 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    57cc:	463a      	mov	r2, r7
    57ce:	4621      	mov	r1, r4
    57d0:	4630      	mov	r0, r6
    57d2:	47a8      	blx	r5
}
    57d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000057d6 <stop>:
{
    57d6:	b570      	push	{r4, r5, r6, lr}
    57d8:	4606      	mov	r6, r0
    57da:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57dc:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    57de:	4621      	mov	r1, r4
    57e0:	f7ff ff84 	bl	56ec <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    57e4:	4629      	mov	r1, r5
    57e6:	3008      	adds	r0, #8
    57e8:	f7ff ff99 	bl	571e <set_off_state>
	if (err < 0) {
    57ec:	2800      	cmp	r0, #0
    57ee:	db06      	blt.n	57fe <stop+0x28>
	get_sub_config(dev, type)->stop();
    57f0:	4621      	mov	r1, r4
    57f2:	4630      	mov	r0, r6
    57f4:	f7ff ff81 	bl	56fa <get_sub_config>
    57f8:	6843      	ldr	r3, [r0, #4]
    57fa:	4798      	blx	r3
	return 0;
    57fc:	2000      	movs	r0, #0
}
    57fe:	bd70      	pop	{r4, r5, r6, pc}

00005800 <api_stop>:
{
    5800:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5802:	2280      	movs	r2, #128	; 0x80
    5804:	f7ff ffe7 	bl	57d6 <stop>
}
    5808:	bd08      	pop	{r3, pc}

0000580a <async_start>:
{
    580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    580e:	4606      	mov	r6, r0
    5810:	4690      	mov	r8, r2
    5812:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5814:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5816:	4629      	mov	r1, r5
    5818:	f7ff ff68 	bl	56ec <get_sub_data>
    581c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    581e:	9906      	ldr	r1, [sp, #24]
    5820:	3008      	adds	r0, #8
    5822:	f7ff ff95 	bl	5750 <set_starting_state>
	if (err < 0) {
    5826:	2800      	cmp	r0, #0
    5828:	db09      	blt.n	583e <async_start+0x34>
	subdata->cb = cb;
    582a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    582e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5830:	4629      	mov	r1, r5
    5832:	4630      	mov	r0, r6
    5834:	f7ff ff61 	bl	56fa <get_sub_config>
    5838:	6803      	ldr	r3, [r0, #0]
    583a:	4798      	blx	r3
	return 0;
    583c:	2000      	movs	r0, #0
}
    583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005842 <api_start>:
{
    5842:	b510      	push	{r4, lr}
    5844:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5846:	2480      	movs	r4, #128	; 0x80
    5848:	9400      	str	r4, [sp, #0]
    584a:	f7ff ffde 	bl	580a <async_start>
}
    584e:	b002      	add	sp, #8
    5850:	bd10      	pop	{r4, pc}

00005852 <onoff_started_callback>:
{
    5852:	b510      	push	{r4, lr}
    5854:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5856:	b2c9      	uxtb	r1, r1
    5858:	f7ff ff53 	bl	5702 <get_onoff_manager>
	notify(mgr, 0);
    585c:	2100      	movs	r1, #0
    585e:	47a0      	blx	r4
}
    5860:	bd10      	pop	{r4, pc}

00005862 <hfclk_start>:
{
    5862:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5864:	2001      	movs	r0, #1
    5866:	f000 fbe4 	bl	6032 <nrfx_clock_start>
}
    586a:	bd08      	pop	{r3, pc}

0000586c <lfclk_start>:
{
    586c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    586e:	2000      	movs	r0, #0
    5870:	f000 fbdf 	bl	6032 <nrfx_clock_start>
}
    5874:	bd08      	pop	{r3, pc}

00005876 <hfclk_stop>:
{
    5876:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5878:	2001      	movs	r0, #1
    587a:	f000 fc2a 	bl	60d2 <nrfx_clock_stop>
}
    587e:	bd08      	pop	{r3, pc}

00005880 <lfclk_stop>:
{
    5880:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5882:	2000      	movs	r0, #0
    5884:	f000 fc25 	bl	60d2 <nrfx_clock_stop>
}
    5888:	bd08      	pop	{r3, pc}

0000588a <blocking_start_callback>:
{
    588a:	b508      	push	{r3, lr}
    588c:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    588e:	f7fe fc05 	bl	409c <z_impl_k_sem_give>
}
    5892:	bd08      	pop	{r3, pc}

00005894 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    5894:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    5898:	f020 0001 	bic.w	r0, r0, #1
    589c:	0540      	lsls	r0, r0, #21
    589e:	0d40      	lsrs	r0, r0, #21
    58a0:	f240 2306 	movw	r3, #518	; 0x206
    58a4:	4298      	cmp	r0, r3
    58a6:	d033      	beq.n	5910 <get_drive+0x7c>
    58a8:	d816      	bhi.n	58d8 <get_drive+0x44>
    58aa:	2806      	cmp	r0, #6
    58ac:	d02c      	beq.n	5908 <get_drive+0x74>
    58ae:	d906      	bls.n	58be <get_drive+0x2a>
    58b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    58b4:	d10d      	bne.n	58d2 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    58b6:	2301      	movs	r3, #1
    58b8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    58ba:	2000      	movs	r0, #0
		break;
    58bc:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    58be:	b300      	cbz	r0, 5902 <get_drive+0x6e>
    58c0:	2802      	cmp	r0, #2
    58c2:	d103      	bne.n	58cc <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    58c4:	2304      	movs	r3, #4
    58c6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    58c8:	2000      	movs	r0, #0
		break;
    58ca:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    58cc:	f06f 0015 	mvn.w	r0, #21
    58d0:	4770      	bx	lr
    58d2:	f06f 0015 	mvn.w	r0, #21
    58d6:	4770      	bx	lr
    58d8:	f240 4302 	movw	r3, #1026	; 0x402
    58dc:	4298      	cmp	r0, r3
    58de:	d01b      	beq.n	5918 <get_drive+0x84>
    58e0:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    58e4:	d103      	bne.n	58ee <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    58e6:	2303      	movs	r3, #3
    58e8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    58ea:	2000      	movs	r0, #0
		break;
    58ec:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    58ee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    58f2:	d103      	bne.n	58fc <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    58f4:	2302      	movs	r3, #2
    58f6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    58f8:	2000      	movs	r0, #0
		break;
    58fa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    58fc:	f06f 0015 	mvn.w	r0, #21
    5900:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5902:	2000      	movs	r0, #0
    5904:	7008      	strb	r0, [r1, #0]
		break;
    5906:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5908:	2306      	movs	r3, #6
    590a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    590c:	2000      	movs	r0, #0
		break;
    590e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5910:	2307      	movs	r3, #7
    5912:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5914:	2000      	movs	r0, #0
		break;
    5916:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5918:	2305      	movs	r3, #5
    591a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    591c:	2000      	movs	r0, #0
}
    591e:	4770      	bx	lr

00005920 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5920:	f010 0f10 	tst.w	r0, #16
    5924:	d104      	bne.n	5930 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5926:	f010 0f20 	tst.w	r0, #32
    592a:	d103      	bne.n	5934 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    592c:	2000      	movs	r0, #0
    592e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5930:	2003      	movs	r0, #3
    5932:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5934:	2001      	movs	r0, #1
}
    5936:	4770      	bx	lr

00005938 <gpio_nrfx_port_get_raw>:
	return port->config;
    5938:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    593a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    593c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5940:	600b      	str	r3, [r1, #0]
}
    5942:	2000      	movs	r0, #0
    5944:	4770      	bx	lr

00005946 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5946:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5948:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    594a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    594e:	4042      	eors	r2, r0
    5950:	400a      	ands	r2, r1
    5952:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5954:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5958:	2000      	movs	r0, #0
    595a:	4770      	bx	lr

0000595c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    595c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    595e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5960:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    5964:	2000      	movs	r0, #0
    5966:	4770      	bx	lr

00005968 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5968:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    596a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    596c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    5970:	2000      	movs	r0, #0
    5972:	4770      	bx	lr

00005974 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5974:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5976:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5978:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    597c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    597e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5982:	2000      	movs	r0, #0
    5984:	4770      	bx	lr

00005986 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5986:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    598a:	d007      	beq.n	599c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    598c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5990:	d00d      	beq.n	59ae <get_trigger+0x28>
    5992:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5996:	d008      	beq.n	59aa <get_trigger+0x24>
    5998:	2001      	movs	r0, #1
}
    599a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    599c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    59a0:	d001      	beq.n	59a6 <get_trigger+0x20>
    59a2:	2005      	movs	r0, #5
    59a4:	4770      	bx	lr
    59a6:	2004      	movs	r0, #4
    59a8:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    59aa:	2002      	movs	r0, #2
    59ac:	4770      	bx	lr
    59ae:	2003      	movs	r0, #3
    59b0:	4770      	bx	lr

000059b2 <gpio_nrfx_manage_callback>:
{
    59b2:	b410      	push	{r4}
	return port->data;
    59b4:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    59b6:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    59ba:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    59bc:	b1fb      	cbz	r3, 59fe <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    59be:	2000      	movs	r0, #0
    59c0:	e00d      	b.n	59de <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    59c2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    59c4:	6063      	str	r3, [r4, #4]
	return list->tail;
    59c6:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    59ca:	4281      	cmp	r1, r0
    59cc:	d112      	bne.n	59f4 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    59ce:	f8cc 3004 	str.w	r3, [ip, #4]
}
    59d2:	e00f      	b.n	59f4 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    59d4:	f8cc 0004 	str.w	r0, [ip, #4]
}
    59d8:	e00c      	b.n	59f4 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    59da:	4618      	mov	r0, r3
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	b163      	cbz	r3, 59fa <gpio_nrfx_manage_callback+0x48>
    59e0:	4299      	cmp	r1, r3
    59e2:	d1fa      	bne.n	59da <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    59e4:	2800      	cmp	r0, #0
    59e6:	d0ec      	beq.n	59c2 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    59e8:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    59ea:	6003      	str	r3, [r0, #0]
	return list->tail;
    59ec:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    59f0:	4299      	cmp	r1, r3
    59f2:	d0ef      	beq.n	59d4 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    59f4:	2300      	movs	r3, #0
    59f6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    59f8:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    59fa:	b903      	cbnz	r3, 59fe <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    59fc:	b162      	cbz	r2, 5a18 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    59fe:	b172      	cbz	r2, 5a1e <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    5a00:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    5a02:	600b      	str	r3, [r1, #0]
	list->head = node;
    5a04:	6061      	str	r1, [r4, #4]
	return list->tail;
    5a06:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    5a0a:	b10b      	cbz	r3, 5a10 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5a0c:	2000      	movs	r0, #0
    5a0e:	e007      	b.n	5a20 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    5a10:	f8cc 1004 	str.w	r1, [ip, #4]
    5a14:	2000      	movs	r0, #0
}
    5a16:	e003      	b.n	5a20 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    5a18:	f06f 0015 	mvn.w	r0, #21
    5a1c:	e000      	b.n	5a20 <gpio_nrfx_manage_callback+0x6e>
	return 0;
    5a1e:	2000      	movs	r0, #0
}
    5a20:	bc10      	pop	{r4}
    5a22:	4770      	bx	lr

00005a24 <nrfx_gpio_handler>:
{
    5a24:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    5a26:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5a2a:	0940      	lsrs	r0, r0, #5
    5a2c:	f7fc fa54 	bl	1ed8 <get_dev>
	if (port == NULL) {
    5a30:	b1d8      	cbz	r0, 5a6a <nrfx_gpio_handler+0x46>
    5a32:	4606      	mov	r6, r0
	return port->data;
    5a34:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5a36:	2501      	movs	r5, #1
    5a38:	40a5      	lsls	r5, r4
	return list->head;
    5a3a:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5a3c:	b119      	cbz	r1, 5a46 <nrfx_gpio_handler+0x22>
    5a3e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5a40:	b149      	cbz	r1, 5a56 <nrfx_gpio_handler+0x32>
	return node->next;
    5a42:	680c      	ldr	r4, [r1, #0]
    5a44:	e007      	b.n	5a56 <nrfx_gpio_handler+0x32>
    5a46:	460c      	mov	r4, r1
    5a48:	e005      	b.n	5a56 <nrfx_gpio_handler+0x32>
    5a4a:	b164      	cbz	r4, 5a66 <nrfx_gpio_handler+0x42>
    5a4c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5a4e:	b104      	cbz	r4, 5a52 <nrfx_gpio_handler+0x2e>
	return node->next;
    5a50:	6823      	ldr	r3, [r4, #0]
    5a52:	4621      	mov	r1, r4
    5a54:	461c      	mov	r4, r3
    5a56:	b141      	cbz	r1, 5a6a <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    5a58:	688a      	ldr	r2, [r1, #8]
    5a5a:	402a      	ands	r2, r5
    5a5c:	d0f5      	beq.n	5a4a <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5a5e:	684b      	ldr	r3, [r1, #4]
    5a60:	4630      	mov	r0, r6
    5a62:	4798      	blx	r3
    5a64:	e7f1      	b.n	5a4a <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5a66:	4623      	mov	r3, r4
    5a68:	e7f3      	b.n	5a52 <nrfx_gpio_handler+0x2e>
}
    5a6a:	bd70      	pop	{r4, r5, r6, pc}

00005a6c <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5a6c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5a6e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5a70:	f04f 0120 	mov.w	r1, #32
    5a74:	f3ef 8211 	mrs	r2, BASEPRI
    5a78:	f381 8812 	msr	BASEPRI_MAX, r1
    5a7c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a80:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5a84:	b131      	cbz	r1, 5a94 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a86:	2100      	movs	r1, #0
    5a88:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5a8c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a90:	2101      	movs	r1, #1
    5a92:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5a94:	f382 8811 	msr	BASEPRI, r2
    5a98:	f3bf 8f6f 	isb	sy
}
    5a9c:	4770      	bx	lr

00005a9e <uarte_nrfx_isr_int>:
{
    5a9e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5aa0:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5aa2:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5aa4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5aa8:	f413 7f80 	tst.w	r3, #256	; 0x100
    5aac:	d002      	beq.n	5ab4 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5aae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5ab2:	b9d3      	cbnz	r3, 5aea <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5ab4:	686b      	ldr	r3, [r5, #4]
    5ab6:	f013 0f10 	tst.w	r3, #16
    5aba:	d015      	beq.n	5ae8 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5abc:	f04f 0220 	mov.w	r2, #32
    5ac0:	f3ef 8311 	mrs	r3, BASEPRI
    5ac4:	f382 8812 	msr	BASEPRI_MAX, r2
    5ac8:	f3bf 8f6f 	isb	sy
    5acc:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5ad0:	b112      	cbz	r2, 5ad8 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5ad2:	2200      	movs	r2, #0
    5ad4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5ad8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5adc:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5ae0:	f383 8811 	msr	BASEPRI, r3
    5ae4:	f3bf 8f6f 	isb	sy
}
    5ae8:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5aea:	f7ff ffbf 	bl	5a6c <endtx_isr>
    5aee:	e7e1      	b.n	5ab4 <uarte_nrfx_isr_int+0x16>

00005af0 <uarte_nrfx_configure>:
{
    5af0:	b570      	push	{r4, r5, r6, lr}
    5af2:	b082      	sub	sp, #8
    5af4:	4606      	mov	r6, r0
    5af6:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5af8:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    5afa:	794b      	ldrb	r3, [r1, #5]
    5afc:	2b01      	cmp	r3, #1
    5afe:	d006      	beq.n	5b0e <uarte_nrfx_configure+0x1e>
    5b00:	2b03      	cmp	r3, #3
    5b02:	d011      	beq.n	5b28 <uarte_nrfx_configure+0x38>
    5b04:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    5b08:	4618      	mov	r0, r3
    5b0a:	b002      	add	sp, #8
    5b0c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5b0e:	2300      	movs	r3, #0
    5b10:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5b14:	79a3      	ldrb	r3, [r4, #6]
    5b16:	2b03      	cmp	r3, #3
    5b18:	d137      	bne.n	5b8a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    5b1a:	79e3      	ldrb	r3, [r4, #7]
    5b1c:	b143      	cbz	r3, 5b30 <uarte_nrfx_configure+0x40>
    5b1e:	2b01      	cmp	r3, #1
    5b20:	d010      	beq.n	5b44 <uarte_nrfx_configure+0x54>
    5b22:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b26:	e7ef      	b.n	5b08 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5b28:	2310      	movs	r3, #16
    5b2a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    5b2e:	e7f1      	b.n	5b14 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5b30:	2300      	movs	r3, #0
    5b32:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    5b36:	7923      	ldrb	r3, [r4, #4]
    5b38:	b143      	cbz	r3, 5b4c <uarte_nrfx_configure+0x5c>
    5b3a:	2b02      	cmp	r3, #2
    5b3c:	d021      	beq.n	5b82 <uarte_nrfx_configure+0x92>
    5b3e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b42:	e7e1      	b.n	5b08 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5b44:	2301      	movs	r3, #1
    5b46:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    5b4a:	e7f4      	b.n	5b36 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5b4c:	2300      	movs	r3, #0
    5b4e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5b52:	6821      	ldr	r1, [r4, #0]
    5b54:	4630      	mov	r0, r6
    5b56:	f7fc faf5 	bl	2144 <baudrate_set>
    5b5a:	4603      	mov	r3, r0
    5b5c:	b9c0      	cbnz	r0, 5b90 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    5b5e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    5b60:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b62:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    5b66:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    5b6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5b6e:	4331      	orrs	r1, r6
    5b70:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b72:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    5b76:	3504      	adds	r5, #4
    5b78:	e894 0003 	ldmia.w	r4, {r0, r1}
    5b7c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    5b80:	e7c2      	b.n	5b08 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5b82:	230e      	movs	r3, #14
    5b84:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5b88:	e7e3      	b.n	5b52 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    5b8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b8e:	e7bb      	b.n	5b08 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5b90:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b94:	e7b8      	b.n	5b08 <uarte_nrfx_configure+0x18>

00005b96 <uarte_nrfx_config_get>:
{
    5b96:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5b98:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5b9a:	3304      	adds	r3, #4
    5b9c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5ba0:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5ba4:	2000      	movs	r0, #0
    5ba6:	4770      	bx	lr

00005ba8 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5ba8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5baa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5bac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5bb0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5bb4:	4770      	bx	lr

00005bb6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5bb6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bb8:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5bba:	685b      	ldr	r3, [r3, #4]
    5bbc:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bc0:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5bc4:	b929      	cbnz	r1, 5bd2 <is_tx_ready+0x1c>
    5bc6:	b933      	cbnz	r3, 5bd6 <is_tx_ready+0x20>
    5bc8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5bcc:	b92b      	cbnz	r3, 5bda <is_tx_ready+0x24>
    5bce:	2000      	movs	r0, #0
    5bd0:	4770      	bx	lr
    5bd2:	2001      	movs	r0, #1
    5bd4:	4770      	bx	lr
    5bd6:	2000      	movs	r0, #0
    5bd8:	4770      	bx	lr
    5bda:	2001      	movs	r0, #1
}
    5bdc:	4770      	bx	lr

00005bde <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5bde:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5be0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5be2:	2208      	movs	r2, #8
    5be4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5be8:	4770      	bx	lr

00005bea <tx_start>:
{
    5bea:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5bec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bee:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5bf0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5bf4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bf8:	2200      	movs	r2, #0
    5bfa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5bfe:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5c02:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5c06:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c0a:	685b      	ldr	r3, [r3, #4]
    5c0c:	f013 0f10 	tst.w	r3, #16
    5c10:	d102      	bne.n	5c18 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c12:	2301      	movs	r3, #1
    5c14:	60a3      	str	r3, [r4, #8]
}
    5c16:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5c18:	2101      	movs	r1, #1
    5c1a:	f7ff ffe0 	bl	5bde <uarte_enable>
    p_reg->INTENSET = mask;
    5c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5c22:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5c26:	e7f4      	b.n	5c12 <tx_start+0x28>

00005c28 <uarte_nrfx_poll_in>:
{
    5c28:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5c2a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5c2c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c2e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5c34:	b152      	cbz	r2, 5c4c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5c36:	7c62      	ldrb	r2, [r4, #17]
    5c38:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c3a:	2000      	movs	r0, #0
    5c3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5c40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c44:	2201      	movs	r2, #1
    5c46:	601a      	str	r2, [r3, #0]
}
    5c48:	bc10      	pop	{r4}
    5c4a:	4770      	bx	lr
		return -1;
    5c4c:	f04f 30ff 	mov.w	r0, #4294967295
    5c50:	e7fa      	b.n	5c48 <uarte_nrfx_poll_in+0x20>

00005c52 <wait_tx_ready>:
{
    5c52:	b570      	push	{r4, r5, r6, lr}
    5c54:	4606      	mov	r6, r0
    5c56:	e014      	b.n	5c82 <wait_tx_ready+0x30>
		if (res) {
    5c58:	b17d      	cbz	r5, 5c7a <wait_tx_ready+0x28>
	__asm__ volatile(
    5c5a:	f04f 0320 	mov.w	r3, #32
    5c5e:	f3ef 8411 	mrs	r4, BASEPRI
    5c62:	f383 8812 	msr	BASEPRI_MAX, r3
    5c66:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5c6a:	4630      	mov	r0, r6
    5c6c:	f7ff ffa3 	bl	5bb6 <is_tx_ready>
    5c70:	b9a0      	cbnz	r0, 5c9c <wait_tx_ready+0x4a>
	__asm__ volatile(
    5c72:	f384 8811 	msr	BASEPRI, r4
    5c76:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5c7a:	2021      	movs	r0, #33	; 0x21
    5c7c:	2100      	movs	r1, #0
    5c7e:	f7fe fe07 	bl	4890 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5c82:	2464      	movs	r4, #100	; 0x64
    5c84:	4630      	mov	r0, r6
    5c86:	f7ff ff96 	bl	5bb6 <is_tx_ready>
    5c8a:	4605      	mov	r5, r0
    5c8c:	2800      	cmp	r0, #0
    5c8e:	d1e3      	bne.n	5c58 <wait_tx_ready+0x6>
    5c90:	2001      	movs	r0, #1
    5c92:	f000 f9a3 	bl	5fdc <nrfx_busy_wait>
    5c96:	3c01      	subs	r4, #1
    5c98:	d1f4      	bne.n	5c84 <wait_tx_ready+0x32>
    5c9a:	e7dd      	b.n	5c58 <wait_tx_ready+0x6>
}
    5c9c:	4620      	mov	r0, r4
    5c9e:	bd70      	pop	{r4, r5, r6, pc}

00005ca0 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ca4:	b083      	sub	sp, #12
    5ca6:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    5ca8:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5caa:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5cac:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5cb0:	2100      	movs	r1, #0
    5cb2:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5cb6:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5cba:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5cbe:	aa01      	add	r2, sp, #4
    5cc0:	4648      	mov	r0, r9
    5cc2:	f000 f8e2 	bl	5e8a <pinctrl_lookup_state>
	if (ret < 0) {
    5cc6:	1e04      	subs	r4, r0, #0
    5cc8:	db07      	blt.n	5cda <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5cca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5ccc:	f8d9 2000 	ldr.w	r2, [r9]
    5cd0:	7919      	ldrb	r1, [r3, #4]
    5cd2:	6818      	ldr	r0, [r3, #0]
    5cd4:	f7fc fdaa 	bl	282c <pinctrl_configure_pins>
    5cd8:	4604      	mov	r4, r0
	if (err < 0) {
    5cda:	2c00      	cmp	r4, #0
    5cdc:	db35      	blt.n	5d4a <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5cde:	f108 0104 	add.w	r1, r8, #4
    5ce2:	4628      	mov	r0, r5
    5ce4:	f7ff ff04 	bl	5af0 <uarte_nrfx_configure>
	if (err) {
    5ce8:	4604      	mov	r4, r0
    5cea:	bb70      	cbnz	r0, 5d4a <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5cec:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5cee:	f013 0f02 	tst.w	r3, #2
    5cf2:	d12e      	bne.n	5d52 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5cf4:	2308      	movs	r3, #8
    5cf6:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5cfa:	7a3b      	ldrb	r3, [r7, #8]
    5cfc:	b95b      	cbnz	r3, 5d16 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5cfe:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5d02:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5d06:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5d0a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5d0e:	2301      	movs	r3, #1
    5d10:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d14:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	f013 0f02 	tst.w	r3, #2
    5d1c:	d103      	bne.n	5d26 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    5d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d22:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	f013 0f10 	tst.w	r3, #16
    5d2c:	d003      	beq.n	5d36 <uarte_instance_init+0x96>
    5d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d32:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5d36:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5d3a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5d3e:	2300      	movs	r3, #0
    5d40:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d44:	2301      	movs	r3, #1
    5d46:	60b3      	str	r3, [r6, #8]
    5d48:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5d4a:	4620      	mov	r0, r4
    5d4c:	b003      	add	sp, #12
    5d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5d52:	4641      	mov	r1, r8
    5d54:	4630      	mov	r0, r6
    5d56:	f7fc fad5 	bl	2304 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5d5a:	2800      	cmp	r0, #0
    5d5c:	daca      	bge.n	5cf4 <uarte_instance_init+0x54>
			return err;
    5d5e:	4604      	mov	r4, r0
    5d60:	e7f3      	b.n	5d4a <uarte_instance_init+0xaa>

00005d62 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5d62:	b510      	push	{r4, lr}
    5d64:	4604      	mov	r4, r0
    5d66:	2200      	movs	r2, #0
    5d68:	2101      	movs	r1, #1
    5d6a:	2002      	movs	r0, #2
    5d6c:	f7fb fb3c 	bl	13e8 <z_arm_irq_priority_set>
    5d70:	2002      	movs	r0, #2
    5d72:	f7fb fb1d 	bl	13b0 <arch_irq_enable>
    5d76:	2100      	movs	r1, #0
    5d78:	4620      	mov	r0, r4
    5d7a:	f7ff ff91 	bl	5ca0 <uarte_instance_init>
    5d7e:	bd10      	pop	{r4, pc}

00005d80 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5d80:	b510      	push	{r4, lr}
    5d82:	4604      	mov	r4, r0
    5d84:	2200      	movs	r2, #0
    5d86:	2101      	movs	r1, #1
    5d88:	2028      	movs	r0, #40	; 0x28
    5d8a:	f7fb fb2d 	bl	13e8 <z_arm_irq_priority_set>
    5d8e:	2028      	movs	r0, #40	; 0x28
    5d90:	f7fb fb0e 	bl	13b0 <arch_irq_enable>
    5d94:	2100      	movs	r1, #0
    5d96:	4620      	mov	r0, r4
    5d98:	f7ff ff82 	bl	5ca0 <uarte_instance_init>
    5d9c:	bd10      	pop	{r4, pc}

00005d9e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5d9e:	4770      	bx	lr

00005da0 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5da0:	1a40      	subs	r0, r0, r1
}
    5da2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5da6:	4770      	bx	lr

00005da8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5da8:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5dac:	009b      	lsls	r3, r3, #2
    5dae:	b29b      	uxth	r3, r3
    5db0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5db4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5db8:	2200      	movs	r2, #0
    5dba:	601a      	str	r2, [r3, #0]
    5dbc:	681b      	ldr	r3, [r3, #0]
}
    5dbe:	4770      	bx	lr

00005dc0 <absolute_time_to_cc>:
}
    5dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5dc4:	4770      	bx	lr

00005dc6 <full_int_lock>:
	__asm__ volatile(
    5dc6:	f04f 0320 	mov.w	r3, #32
    5dca:	f3ef 8011 	mrs	r0, BASEPRI
    5dce:	f383 8812 	msr	BASEPRI_MAX, r3
    5dd2:	f3bf 8f6f 	isb	sy
}
    5dd6:	4770      	bx	lr

00005dd8 <full_int_unlock>:
	__asm__ volatile(
    5dd8:	f380 8811 	msr	BASEPRI, r0
    5ddc:	f3bf 8f6f 	isb	sy
}
    5de0:	4770      	bx	lr

00005de2 <set_absolute_alarm>:
{
    5de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5de4:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5de6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5dea:	f7fc fab9 	bl	2360 <get_comparator>
    5dee:	4607      	mov	r7, r0
    5df0:	e019      	b.n	5e26 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5df2:	2013      	movs	r0, #19
    5df4:	f000 fbdd 	bl	65b2 <z_impl_k_busy_wait>
}
    5df8:	e022      	b.n	5e40 <set_absolute_alarm+0x5e>
		event_clear(chan);
    5dfa:	4630      	mov	r0, r6
    5dfc:	f7ff ffd4 	bl	5da8 <event_clear>
		event_enable(chan);
    5e00:	4630      	mov	r0, r6
    5e02:	f7fc fab5 	bl	2370 <event_enable>
		set_comparator(chan, cc_val);
    5e06:	4629      	mov	r1, r5
    5e08:	4630      	mov	r0, r6
    5e0a:	f7fc fa9f 	bl	234c <set_comparator>
		now2 = counter();
    5e0e:	f7fc fac3 	bl	2398 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5e12:	4284      	cmp	r4, r0
    5e14:	d01e      	beq.n	5e54 <set_absolute_alarm+0x72>
    5e16:	1c81      	adds	r1, r0, #2
    5e18:	4628      	mov	r0, r5
    5e1a:	f7ff ffc1 	bl	5da0 <counter_sub>
	} while ((now2 != now) &&
    5e1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e22:	d917      	bls.n	5e54 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5e24:	462f      	mov	r7, r5
		now = counter();
    5e26:	f7fc fab7 	bl	2398 <counter>
    5e2a:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5e2c:	4601      	mov	r1, r0
    5e2e:	4630      	mov	r0, r6
    5e30:	f7fc fa8c 	bl	234c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5e34:	4621      	mov	r1, r4
    5e36:	4638      	mov	r0, r7
    5e38:	f7ff ffb2 	bl	5da0 <counter_sub>
    5e3c:	2801      	cmp	r0, #1
    5e3e:	d0d8      	beq.n	5df2 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5e40:	1ca7      	adds	r7, r4, #2
    5e42:	4639      	mov	r1, r7
    5e44:	4628      	mov	r0, r5
    5e46:	f7ff ffab 	bl	5da0 <counter_sub>
    5e4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e4e:	d9d4      	bls.n	5dfa <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5e50:	463d      	mov	r5, r7
    5e52:	e7d2      	b.n	5dfa <set_absolute_alarm+0x18>
}
    5e54:	4628      	mov	r0, r5
    5e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005e58 <compare_set>:
{
    5e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e5a:	b083      	sub	sp, #12
    5e5c:	4604      	mov	r4, r0
    5e5e:	4617      	mov	r7, r2
    5e60:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5e62:	f7fc fa9f 	bl	23a4 <compare_int_lock>
    5e66:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e6a:	9301      	str	r3, [sp, #4]
    5e6c:	9b08      	ldr	r3, [sp, #32]
    5e6e:	9300      	str	r3, [sp, #0]
    5e70:	463a      	mov	r2, r7
    5e72:	462b      	mov	r3, r5
    5e74:	4620      	mov	r0, r4
    5e76:	f7fc fb85 	bl	2584 <compare_set_nolocks>
    5e7a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5e7c:	4631      	mov	r1, r6
    5e7e:	4620      	mov	r0, r4
    5e80:	f7fc faf4 	bl	246c <compare_int_unlock>
}
    5e84:	4628      	mov	r0, r5
    5e86:	b003      	add	sp, #12
    5e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005e8a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5e8a:	b410      	push	{r4}
	*state = &config->states[0];
    5e8c:	6843      	ldr	r3, [r0, #4]
    5e8e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5e90:	e001      	b.n	5e96 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5e92:	3408      	adds	r4, #8
    5e94:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5e96:	6814      	ldr	r4, [r2, #0]
    5e98:	7a03      	ldrb	r3, [r0, #8]
    5e9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5e9e:	3b01      	subs	r3, #1
    5ea0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5ea4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5ea8:	429c      	cmp	r4, r3
    5eaa:	d804      	bhi.n	5eb6 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5eac:	7963      	ldrb	r3, [r4, #5]
    5eae:	428b      	cmp	r3, r1
    5eb0:	d1ef      	bne.n	5e92 <pinctrl_lookup_state+0x8>
			return 0;
    5eb2:	2000      	movs	r0, #0
    5eb4:	e001      	b.n	5eba <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5eb6:	f06f 0001 	mvn.w	r0, #1
}
    5eba:	bc10      	pop	{r4}
    5ebc:	4770      	bx	lr

00005ebe <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5ebe:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5ec0:	2000      	movs	r0, #0
    5ec2:	f7fb fe2b 	bl	1b1c <sys_arch_reboot>

00005ec6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5ec6:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5ec8:	f7fe feba 	bl	4c40 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5ecc:	bd08      	pop	{r3, pc}

00005ece <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5ece:	b510      	push	{r4, lr}
    5ed0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5ed2:	f7fb f97d 	bl	11d0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5ed6:	f7fb fa39 	bl	134c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5eda:	4620      	mov	r0, r4
    5edc:	f7ff fff3 	bl	5ec6 <hw_cc3xx_init_internal>
	return res;
}
    5ee0:	bd10      	pop	{r4, pc}

00005ee2 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5ee2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5ee6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5eea:	2b08      	cmp	r3, #8
    5eec:	d001      	beq.n	5ef2 <nrf52_errata_36+0x10>
        return false;
    5eee:	2000      	movs	r0, #0
    5ef0:	4770      	bx	lr
                        return true;
    5ef2:	2001      	movs	r0, #1
}
    5ef4:	4770      	bx	lr

00005ef6 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5efa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5efe:	2b08      	cmp	r3, #8
    5f00:	d001      	beq.n	5f06 <nrf52_errata_66+0x10>
        return false;
    5f02:	2000      	movs	r0, #0
    5f04:	4770      	bx	lr
                        return true;
    5f06:	2001      	movs	r0, #1
}
    5f08:	4770      	bx	lr

00005f0a <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f0e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f16:	2a08      	cmp	r2, #8
    5f18:	d001      	beq.n	5f1e <nrf52_errata_98+0x14>
        return false;
    5f1a:	2000      	movs	r0, #0
    5f1c:	4770      	bx	lr
                switch(var2)
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d804      	bhi.n	5f2c <nrf52_errata_98+0x22>
    5f22:	e8df f003 	tbb	[pc, r3]
    5f26:	01          	.byte	0x01
    5f27:	00          	.byte	0x00
    5f28:	2001      	movs	r0, #1
    5f2a:	4770      	bx	lr
                        return false;
    5f2c:	2000      	movs	r0, #0
}
    5f2e:	4770      	bx	lr

00005f30 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f3c:	2a08      	cmp	r2, #8
    5f3e:	d001      	beq.n	5f44 <nrf52_errata_103+0x14>
        return false;
    5f40:	2000      	movs	r0, #0
    5f42:	4770      	bx	lr
                switch(var2)
    5f44:	2b00      	cmp	r3, #0
    5f46:	d804      	bhi.n	5f52 <nrf52_errata_103+0x22>
    5f48:	e8df f003 	tbb	[pc, r3]
    5f4c:	01          	.byte	0x01
    5f4d:	00          	.byte	0x00
    5f4e:	2001      	movs	r0, #1
    5f50:	4770      	bx	lr
                        return false;
    5f52:	2000      	movs	r0, #0
}
    5f54:	4770      	bx	lr

00005f56 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f5a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f62:	2a08      	cmp	r2, #8
    5f64:	d001      	beq.n	5f6a <nrf52_errata_115+0x14>
        return false;
    5f66:	2000      	movs	r0, #0
    5f68:	4770      	bx	lr
                switch(var2)
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d804      	bhi.n	5f78 <nrf52_errata_115+0x22>
    5f6e:	e8df f003 	tbb	[pc, r3]
    5f72:	01          	.byte	0x01
    5f73:	00          	.byte	0x00
    5f74:	2001      	movs	r0, #1
    5f76:	4770      	bx	lr
                        return false;
    5f78:	2000      	movs	r0, #0
}
    5f7a:	4770      	bx	lr

00005f7c <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f80:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f84:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f88:	2a08      	cmp	r2, #8
    5f8a:	d001      	beq.n	5f90 <nrf52_errata_120+0x14>
        return false;
    5f8c:	2000      	movs	r0, #0
    5f8e:	4770      	bx	lr
                switch(var2)
    5f90:	2b00      	cmp	r3, #0
    5f92:	d804      	bhi.n	5f9e <nrf52_errata_120+0x22>
    5f94:	e8df f003 	tbb	[pc, r3]
    5f98:	01          	.byte	0x01
    5f99:	00          	.byte	0x00
    5f9a:	2001      	movs	r0, #1
    5f9c:	4770      	bx	lr
                        return false;
    5f9e:	2000      	movs	r0, #0
}
    5fa0:	4770      	bx	lr

00005fa2 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fa6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5faa:	2b08      	cmp	r3, #8
    5fac:	d001      	beq.n	5fb2 <nrf52_errata_136+0x10>
        return false;
    5fae:	2000      	movs	r0, #0
    5fb0:	4770      	bx	lr
                        return true;
    5fb2:	2001      	movs	r0, #1
}
    5fb4:	4770      	bx	lr

00005fb6 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5fc2:	2a08      	cmp	r2, #8
    5fc4:	d001      	beq.n	5fca <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5fc6:	2000      	movs	r0, #0
    5fc8:	4770      	bx	lr
                switch(var2)
    5fca:	2b04      	cmp	r3, #4
    5fcc:	d801      	bhi.n	5fd2 <nrf52_configuration_249+0x1c>
    5fce:	2000      	movs	r0, #0
    5fd0:	4770      	bx	lr
                        return true;
    5fd2:	2001      	movs	r0, #1
    #endif
}
    5fd4:	4770      	bx	lr

00005fd6 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    5fd6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    5fd8:	4780      	blx	r0
}
    5fda:	bd08      	pop	{r3, pc}

00005fdc <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    5fdc:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    5fde:	f000 fae8 	bl	65b2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    5fe2:	bd08      	pop	{r3, pc}

00005fe4 <clock_initial_lfclksrc_get>:
}
    5fe4:	2000      	movs	r0, #0
    5fe6:	4770      	bx	lr

00005fe8 <clock_lfclksrc_tweak>:
{
    5fe8:	b538      	push	{r3, r4, r5, lr}
    5fea:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    5fec:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5fee:	2b01      	cmp	r3, #1
    5ff0:	d002      	beq.n	5ff8 <clock_lfclksrc_tweak+0x10>
    5ff2:	b933      	cbnz	r3, 6002 <clock_lfclksrc_tweak+0x1a>
    5ff4:	2301      	movs	r3, #1
    5ff6:	e000      	b.n	5ffa <clock_lfclksrc_tweak+0x12>
    5ff8:	2301      	movs	r3, #1
    if (!is_correct_clk)
    5ffa:	461d      	mov	r5, r3
    5ffc:	b11b      	cbz	r3, 6006 <clock_lfclksrc_tweak+0x1e>
}
    5ffe:	4628      	mov	r0, r5
    6000:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6002:	2300      	movs	r3, #0
    6004:	e7f9      	b.n	5ffa <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6006:	2000      	movs	r0, #0
    6008:	f7fc ff32 	bl	2e70 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    600c:	f7ff ffea 	bl	5fe4 <clock_initial_lfclksrc_get>
    6010:	6020      	str	r0, [r4, #0]
    6012:	e7f4      	b.n	5ffe <clock_lfclksrc_tweak+0x16>

00006014 <nrfx_clock_enable>:
{
    6014:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6016:	2000      	movs	r0, #0
    6018:	f7fb f9d8 	bl	13cc <arch_irq_is_enabled>
    601c:	b130      	cbz	r0, 602c <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    601e:	f7ff ffe1 	bl	5fe4 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6026:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    602a:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    602c:	f7fb f9c0 	bl	13b0 <arch_irq_enable>
    6030:	e7f5      	b.n	601e <nrfx_clock_enable+0xa>

00006032 <nrfx_clock_start>:
    switch (domain)
    6032:	b110      	cbz	r0, 603a <nrfx_clock_start+0x8>
    6034:	2801      	cmp	r0, #1
    6036:	d040      	beq.n	60ba <nrfx_clock_start+0x88>
    6038:	4770      	bx	lr
{
    603a:	b500      	push	{lr}
    603c:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    603e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6042:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6046:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    604a:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    604c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6050:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6054:	d11b      	bne.n	608e <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    605a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    605e:	f013 0f01 	tst.w	r3, #1
    6062:	d118      	bne.n	6096 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    6064:	f7ff ffbe 	bl	5fe4 <clock_initial_lfclksrc_get>
    6068:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    606a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    606e:	9a01      	ldr	r2, [sp, #4]
    6070:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6074:	2200      	movs	r2, #0
    6076:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    607a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    607e:	2202      	movs	r2, #2
    6080:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6084:	2201      	movs	r2, #1
    6086:	609a      	str	r2, [r3, #8]
}
    6088:	b003      	add	sp, #12
    608a:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    608e:	a801      	add	r0, sp, #4
    6090:	f7ff ffaa 	bl	5fe8 <clock_lfclksrc_tweak>
    6094:	e7e9      	b.n	606a <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    609a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    609e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    60a2:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    60a4:	a801      	add	r0, sp, #4
    60a6:	f7ff ff9f 	bl	5fe8 <clock_lfclksrc_tweak>
    60aa:	2800      	cmp	r0, #0
    60ac:	d0dd      	beq.n	606a <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    60ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60b2:	2202      	movs	r2, #2
    60b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    60b8:	e7e6      	b.n	6088 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60be:	2200      	movs	r2, #0
    60c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    60c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    60c8:	2201      	movs	r2, #1
    60ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60ce:	601a      	str	r2, [r3, #0]
    60d0:	4770      	bx	lr

000060d2 <nrfx_clock_stop>:
{
    60d2:	b508      	push	{r3, lr}
    clock_stop(domain);
    60d4:	f7fc fecc 	bl	2e70 <clock_stop>
}
    60d8:	bd08      	pop	{r3, pc}

000060da <pin_is_task_output>:
{
    60da:	b510      	push	{r4, lr}
    60dc:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    60de:	f7fc ffa3 	bl	3028 <pin_is_output>
    60e2:	b128      	cbz	r0, 60f0 <pin_is_task_output+0x16>
    60e4:	4620      	mov	r0, r4
    60e6:	f7fc ff89 	bl	2ffc <pin_in_use_by_te>
    60ea:	b118      	cbz	r0, 60f4 <pin_is_task_output+0x1a>
    60ec:	2001      	movs	r0, #1
    60ee:	e000      	b.n	60f2 <pin_is_task_output+0x18>
    60f0:	2000      	movs	r0, #0
}
    60f2:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    60f4:	2000      	movs	r0, #0
    60f6:	e7fc      	b.n	60f2 <pin_is_task_output+0x18>

000060f8 <pin_is_input>:
{
    60f8:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    60fa:	f7fc ff95 	bl	3028 <pin_is_output>
    60fe:	f080 0001 	eor.w	r0, r0, #1
}
    6102:	b2c0      	uxtb	r0, r0
    6104:	bd08      	pop	{r3, pc}

00006106 <gpiote_polarity_to_trigger>:
}
    6106:	4770      	bx	lr

00006108 <gpiote_trigger_to_polarity>:
}
    6108:	4770      	bx	lr

0000610a <is_level>:
}
    610a:	2803      	cmp	r0, #3
    610c:	bf94      	ite	ls
    610e:	2000      	movls	r0, #0
    6110:	2001      	movhi	r0, #1
    6112:	4770      	bx	lr

00006114 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    6114:	b508      	push	{r3, lr}
  _DoInit();
    6116:	f7fd fc53 	bl	39c0 <_DoInit>
}
    611a:	bd08      	pop	{r3, pc}

0000611c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    611c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    611e:	f7ff fff9 	bl	6114 <SEGGER_RTT_Init>

	return 0;
}
    6122:	2000      	movs	r0, #0
    6124:	bd08      	pop	{r3, pc}

00006126 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6126:	b148      	cbz	r0, 613c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6128:	68c3      	ldr	r3, [r0, #12]
    612a:	8818      	ldrh	r0, [r3, #0]
    612c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6130:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    6134:	bf14      	ite	ne
    6136:	2000      	movne	r0, #0
    6138:	2001      	moveq	r0, #1
    613a:	4770      	bx	lr
		return false;
    613c:	2000      	movs	r0, #0
}
    613e:	4770      	bx	lr

00006140 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6142:	4605      	mov	r5, r0
    6144:	460e      	mov	r6, r1
	__asm__ volatile(
    6146:	f04f 0320 	mov.w	r3, #32
    614a:	f3ef 8711 	mrs	r7, BASEPRI
    614e:	f383 8812 	msr	BASEPRI_MAX, r3
    6152:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6156:	f7fe fbc7 	bl	48e8 <z_impl_z_current_get>
    615a:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    615c:	4631      	mov	r1, r6
    615e:	4628      	mov	r0, r5
    6160:	f7ff fead 	bl	5ebe <k_sys_fatal_error_handler>
	__asm__ volatile(
    6164:	f387 8811 	msr	BASEPRI, r7
    6168:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    616c:	4620      	mov	r0, r4
    616e:	f7fb fbff 	bl	1970 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006174 <z_early_memset>:
{
    6174:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    6176:	f7ff fa76 	bl	5666 <memset>
}
    617a:	bd08      	pop	{r3, pc}

0000617c <z_early_memcpy>:
{
    617c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    617e:	f7ff fa43 	bl	5608 <memcpy>
}
    6182:	bd08      	pop	{r3, pc}

00006184 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6184:	68c2      	ldr	r2, [r0, #12]
    6186:	6903      	ldr	r3, [r0, #16]
    6188:	431a      	orrs	r2, r3
    618a:	f012 0203 	ands.w	r2, r2, #3
    618e:	d10d      	bne.n	61ac <create_free_list+0x28>
	slab->free_list = NULL;
    6190:	2100      	movs	r1, #0
    6192:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6194:	e005      	b.n	61a2 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    6196:	6941      	ldr	r1, [r0, #20]
    6198:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    619a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    619c:	68c1      	ldr	r1, [r0, #12]
    619e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    61a0:	3201      	adds	r2, #1
    61a2:	6881      	ldr	r1, [r0, #8]
    61a4:	4291      	cmp	r1, r2
    61a6:	d8f6      	bhi.n	6196 <create_free_list+0x12>
	return 0;
    61a8:	2000      	movs	r0, #0
    61aa:	4770      	bx	lr
		return -EINVAL;
    61ac:	f06f 0015 	mvn.w	r0, #21
}
    61b0:	4770      	bx	lr

000061b2 <k_mem_slab_init>:
{
    61b2:	b510      	push	{r4, lr}
    61b4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    61b6:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    61b8:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    61ba:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    61bc:	2300      	movs	r3, #0
    61be:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    61c0:	f7ff ffe0 	bl	6184 <create_free_list>
	if (rc < 0) {
    61c4:	2800      	cmp	r0, #0
    61c6:	db01      	blt.n	61cc <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    61c8:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    61ca:	6064      	str	r4, [r4, #4]
}
    61cc:	bd10      	pop	{r4, pc}

000061ce <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    61ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61d0:	4604      	mov	r4, r0
    61d2:	460d      	mov	r5, r1
	__asm__ volatile(
    61d4:	f04f 0320 	mov.w	r3, #32
    61d8:	f3ef 8611 	mrs	r6, BASEPRI
    61dc:	f383 8812 	msr	BASEPRI_MAX, r3
    61e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    61e4:	6943      	ldr	r3, [r0, #20]
    61e6:	b163      	cbz	r3, 6202 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    61e8:	682b      	ldr	r3, [r5, #0]
    61ea:	6962      	ldr	r2, [r4, #20]
    61ec:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    61ee:	682b      	ldr	r3, [r5, #0]
    61f0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    61f2:	69a3      	ldr	r3, [r4, #24]
    61f4:	3b01      	subs	r3, #1
    61f6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    61f8:	f386 8811 	msr	BASEPRI, r6
    61fc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6202:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6206:	f000 f92a 	bl	645e <z_unpend_first_thread>
		if (pending_thread != NULL) {
    620a:	2800      	cmp	r0, #0
    620c:	d0ec      	beq.n	61e8 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    620e:	682a      	ldr	r2, [r5, #0]
    6210:	2100      	movs	r1, #0
    6212:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6216:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6218:	f000 f881 	bl	631e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    621c:	4631      	mov	r1, r6
    621e:	4638      	mov	r0, r7
    6220:	f7fd ffe6 	bl	41f0 <z_reschedule>
			return;
    6224:	e7ec      	b.n	6200 <k_mem_slab_free+0x32>

00006226 <setup_thread_stack>:
{
    6226:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6228:	3207      	adds	r2, #7
    622a:	f022 0207 	bic.w	r2, r2, #7
    622e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6232:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6236:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    623a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    623e:	2200      	movs	r2, #0
    6240:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    6244:	18c8      	adds	r0, r1, r3
    6246:	bc10      	pop	{r4}
    6248:	4770      	bx	lr

0000624a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    624a:	f3ef 8005 	mrs	r0, IPSR
}
    624e:	3800      	subs	r0, #0
    6250:	bf18      	it	ne
    6252:	2001      	movne	r0, #1
    6254:	4770      	bx	lr

00006256 <z_impl_k_thread_start>:
{
    6256:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6258:	f7fe f918 	bl	448c <z_sched_start>
}
    625c:	bd08      	pop	{r3, pc}

0000625e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    625e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6260:	2400      	movs	r4, #0
    6262:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6264:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6266:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6268:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    626a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    626c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    626e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6270:	bc10      	pop	{r4}
    6272:	4770      	bx	lr

00006274 <z_pm_save_idle_exit>:
{
    6274:	b508      	push	{r3, lr}
	pm_system_resume();
    6276:	f7fa fe29 	bl	ecc <pm_system_resume>
	sys_clock_idle_exit();
    627a:	f7ff fd90 	bl	5d9e <sys_clock_idle_exit>
}
    627e:	bd08      	pop	{r3, pc}

00006280 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6280:	4288      	cmp	r0, r1
    6282:	da00      	bge.n	6286 <new_prio_for_inheritance+0x6>
    6284:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6286:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    628a:	db01      	blt.n	6290 <new_prio_for_inheritance+0x10>
    628c:	4608      	mov	r0, r1
    628e:	4770      	bx	lr
    6290:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6294:	4770      	bx	lr

00006296 <adjust_owner_prio>:
{
    6296:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6298:	6880      	ldr	r0, [r0, #8]
    629a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    629e:	428b      	cmp	r3, r1
    62a0:	d101      	bne.n	62a6 <adjust_owner_prio+0x10>
	return false;
    62a2:	2000      	movs	r0, #0
}
    62a4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    62a6:	f7fe f93f 	bl	4528 <z_set_prio>
    62aa:	e7fb      	b.n	62a4 <adjust_owner_prio+0xe>

000062ac <z_impl_k_mutex_init>:
{
    62ac:	4603      	mov	r3, r0
	mutex->owner = NULL;
    62ae:	2000      	movs	r0, #0
    62b0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    62b2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    62b4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    62b6:	605b      	str	r3, [r3, #4]
}
    62b8:	4770      	bx	lr

000062ba <thread_active_elsewhere>:
}
    62ba:	2000      	movs	r0, #0
    62bc:	4770      	bx	lr

000062be <pended_on_thread>:
}
    62be:	6880      	ldr	r0, [r0, #8]
    62c0:	4770      	bx	lr

000062c2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    62c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    62c6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    62ca:	4283      	cmp	r3, r0
    62cc:	d001      	beq.n	62d2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    62ce:	1ac0      	subs	r0, r0, r3
    62d0:	4770      	bx	lr
	return 0;
    62d2:	2000      	movs	r0, #0
}
    62d4:	4770      	bx	lr

000062d6 <z_reschedule_irqlock>:
{
    62d6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    62d8:	4603      	mov	r3, r0
    62da:	b920      	cbnz	r0, 62e6 <z_reschedule_irqlock+0x10>
    62dc:	f3ef 8205 	mrs	r2, IPSR
    62e0:	b942      	cbnz	r2, 62f4 <z_reschedule_irqlock+0x1e>
    62e2:	2201      	movs	r2, #1
    62e4:	e000      	b.n	62e8 <z_reschedule_irqlock+0x12>
    62e6:	2200      	movs	r2, #0
	if (resched(key)) {
    62e8:	b932      	cbnz	r2, 62f8 <z_reschedule_irqlock+0x22>
    62ea:	f383 8811 	msr	BASEPRI, r3
    62ee:	f3bf 8f6f 	isb	sy
}
    62f2:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    62f4:	2200      	movs	r2, #0
    62f6:	e7f7      	b.n	62e8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    62f8:	4618      	mov	r0, r3
    62fa:	f7fb f8ab 	bl	1454 <arch_swap>
	return ret;
    62fe:	e7f8      	b.n	62f2 <z_reschedule_irqlock+0x1c>

00006300 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6300:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6302:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6304:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6306:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6308:	2300      	movs	r3, #0
    630a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    630c:	604b      	str	r3, [r1, #4]
}
    630e:	4770      	bx	lr

00006310 <z_priq_dumb_best>:
{
    6310:	4603      	mov	r3, r0
	return list->head == list;
    6312:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6314:	4283      	cmp	r3, r0
    6316:	d000      	beq.n	631a <z_priq_dumb_best+0xa>
}
    6318:	4770      	bx	lr
	struct k_thread *thread = NULL;
    631a:	2000      	movs	r0, #0
	return thread;
    631c:	e7fc      	b.n	6318 <z_priq_dumb_best+0x8>

0000631e <z_ready_thread>:
{
    631e:	b538      	push	{r3, r4, r5, lr}
    6320:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6322:	2300      	movs	r3, #0
	__asm__ volatile(
    6324:	f04f 0220 	mov.w	r2, #32
    6328:	f3ef 8511 	mrs	r5, BASEPRI
    632c:	f382 8812 	msr	BASEPRI_MAX, r2
    6330:	f3bf 8f6f 	isb	sy
    6334:	e004      	b.n	6340 <z_ready_thread+0x22>
	__asm__ volatile(
    6336:	f385 8811 	msr	BASEPRI, r5
    633a:	f3bf 8f6f 	isb	sy
    633e:	2301      	movs	r3, #1
    6340:	b943      	cbnz	r3, 6354 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6342:	4620      	mov	r0, r4
    6344:	f7ff ffb9 	bl	62ba <thread_active_elsewhere>
    6348:	2800      	cmp	r0, #0
    634a:	d1f4      	bne.n	6336 <z_ready_thread+0x18>
			ready_thread(thread);
    634c:	4620      	mov	r0, r4
    634e:	f7fe f85d 	bl	440c <ready_thread>
    6352:	e7f0      	b.n	6336 <z_ready_thread+0x18>
}
    6354:	bd38      	pop	{r3, r4, r5, pc}

00006356 <z_thread_timeout>:
{
    6356:	b570      	push	{r4, r5, r6, lr}
    6358:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    635a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    635e:	2300      	movs	r3, #0
	__asm__ volatile(
    6360:	f04f 0220 	mov.w	r2, #32
    6364:	f3ef 8611 	mrs	r6, BASEPRI
    6368:	f382 8812 	msr	BASEPRI_MAX, r2
    636c:	f3bf 8f6f 	isb	sy
    6370:	e011      	b.n	6396 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6372:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6376:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    637a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    637e:	f023 0310 	bic.w	r3, r3, #16
    6382:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6386:	4628      	mov	r0, r5
    6388:	f7fe f840 	bl	440c <ready_thread>
	__asm__ volatile(
    638c:	f386 8811 	msr	BASEPRI, r6
    6390:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6394:	2301      	movs	r3, #1
    6396:	b9ab      	cbnz	r3, 63c4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6398:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    639c:	f013 0f28 	tst.w	r3, #40	; 0x28
    63a0:	d1f4      	bne.n	638c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    63a2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    63a6:	2b00      	cmp	r3, #0
    63a8:	d0e3      	beq.n	6372 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    63aa:	4628      	mov	r0, r5
    63ac:	f7ff ff87 	bl	62be <pended_on_thread>
    63b0:	4629      	mov	r1, r5
    63b2:	f7ff ffa5 	bl	6300 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    63b6:	7b6b      	ldrb	r3, [r5, #13]
    63b8:	f023 0302 	bic.w	r3, r3, #2
    63bc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    63be:	2300      	movs	r3, #0
    63c0:	60ab      	str	r3, [r5, #8]
}
    63c2:	e7d6      	b.n	6372 <z_thread_timeout+0x1c>
}
    63c4:	bd70      	pop	{r4, r5, r6, pc}

000063c6 <add_to_waitq_locked>:
{
    63c6:	b570      	push	{r4, r5, r6, lr}
    63c8:	4605      	mov	r5, r0
    63ca:	460e      	mov	r6, r1
	unready_thread(thread);
    63cc:	f7fe f87c 	bl	44c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    63d0:	7b6b      	ldrb	r3, [r5, #13]
    63d2:	f043 0302 	orr.w	r3, r3, #2
    63d6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    63d8:	b1b6      	cbz	r6, 6408 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    63da:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    63dc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63de:	42a6      	cmp	r6, r4
    63e0:	d019      	beq.n	6416 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63e2:	b164      	cbz	r4, 63fe <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    63e4:	4621      	mov	r1, r4
    63e6:	4628      	mov	r0, r5
    63e8:	f7ff ff6b 	bl	62c2 <z_sched_prio_cmp>
    63ec:	2800      	cmp	r0, #0
    63ee:	dc0c      	bgt.n	640a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    63f0:	b12c      	cbz	r4, 63fe <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    63f2:	6873      	ldr	r3, [r6, #4]
    63f4:	429c      	cmp	r4, r3
    63f6:	d002      	beq.n	63fe <add_to_waitq_locked+0x38>
    63f8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63fa:	2c00      	cmp	r4, #0
    63fc:	d1f1      	bne.n	63e2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    63fe:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6400:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6402:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6404:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6406:	6075      	str	r5, [r6, #4]
}
    6408:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    640a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    640c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    640e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6410:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6412:	6065      	str	r5, [r4, #4]
}
    6414:	e7f8      	b.n	6408 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6416:	2400      	movs	r4, #0
    6418:	e7e3      	b.n	63e2 <add_to_waitq_locked+0x1c>

0000641a <pend>:
{
    641a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    641e:	4605      	mov	r5, r0
    6420:	460e      	mov	r6, r1
    6422:	4691      	mov	r9, r2
    6424:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    6426:	2400      	movs	r4, #0
	__asm__ volatile(
    6428:	f04f 0320 	mov.w	r3, #32
    642c:	f3ef 8711 	mrs	r7, BASEPRI
    6430:	f383 8812 	msr	BASEPRI_MAX, r3
    6434:	f3bf 8f6f 	isb	sy
    6438:	e008      	b.n	644c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    643a:	4631      	mov	r1, r6
    643c:	4628      	mov	r0, r5
    643e:	f7ff ffc2 	bl	63c6 <add_to_waitq_locked>
	__asm__ volatile(
    6442:	f387 8811 	msr	BASEPRI, r7
    6446:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    644a:	2401      	movs	r4, #1
    644c:	2c00      	cmp	r4, #0
    644e:	d0f4      	beq.n	643a <pend+0x20>
	add_thread_timeout(thread, timeout);
    6450:	464a      	mov	r2, r9
    6452:	4643      	mov	r3, r8
    6454:	4628      	mov	r0, r5
    6456:	f7fd fe6d 	bl	4134 <add_thread_timeout>
}
    645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000645e <z_unpend_first_thread>:
{
    645e:	b570      	push	{r4, r5, r6, lr}
    6460:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6462:	2300      	movs	r3, #0
	__asm__ volatile(
    6464:	f04f 0220 	mov.w	r2, #32
    6468:	f3ef 8611 	mrs	r6, BASEPRI
    646c:	f382 8812 	msr	BASEPRI_MAX, r2
    6470:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6474:	461c      	mov	r4, r3
    6476:	e004      	b.n	6482 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    6478:	f386 8811 	msr	BASEPRI, r6
    647c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6480:	2301      	movs	r3, #1
    6482:	b9ab      	cbnz	r3, 64b0 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    6484:	4628      	mov	r0, r5
    6486:	f7ff ff43 	bl	6310 <z_priq_dumb_best>
		if (thread != NULL) {
    648a:	4604      	mov	r4, r0
    648c:	2800      	cmp	r0, #0
    648e:	d0f3      	beq.n	6478 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6490:	f7ff ff15 	bl	62be <pended_on_thread>
    6494:	4621      	mov	r1, r4
    6496:	f7ff ff33 	bl	6300 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    649a:	7b63      	ldrb	r3, [r4, #13]
    649c:	f023 0302 	bic.w	r3, r3, #2
    64a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    64a2:	2300      	movs	r3, #0
    64a4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    64a6:	f104 0018 	add.w	r0, r4, #24
    64aa:	f000 f81e 	bl	64ea <z_abort_timeout>
    64ae:	e7e3      	b.n	6478 <z_unpend_first_thread+0x1a>
}
    64b0:	4620      	mov	r0, r4
    64b2:	bd70      	pop	{r4, r5, r6, pc}

000064b4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    64b4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    64b6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    64b8:	6083      	str	r3, [r0, #8]
}
    64ba:	4770      	bx	lr

000064bc <remove_timeout>:
{
    64bc:	b510      	push	{r4, lr}
    64be:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    64c0:	f7fe fa64 	bl	498c <next>
    64c4:	b148      	cbz	r0, 64da <remove_timeout+0x1e>
    64c6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    64c8:	6920      	ldr	r0, [r4, #16]
    64ca:	6961      	ldr	r1, [r4, #20]
    64cc:	6913      	ldr	r3, [r2, #16]
    64ce:	181b      	adds	r3, r3, r0
    64d0:	6950      	ldr	r0, [r2, #20]
    64d2:	eb41 0100 	adc.w	r1, r1, r0
    64d6:	6113      	str	r3, [r2, #16]
    64d8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    64da:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    64dc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    64de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    64e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    64e2:	2300      	movs	r3, #0
    64e4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    64e6:	6063      	str	r3, [r4, #4]
}
    64e8:	bd10      	pop	{r4, pc}

000064ea <z_abort_timeout>:
{
    64ea:	b570      	push	{r4, r5, r6, lr}
    64ec:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    64ee:	2300      	movs	r3, #0
	__asm__ volatile(
    64f0:	f04f 0220 	mov.w	r2, #32
    64f4:	f3ef 8611 	mrs	r6, BASEPRI
    64f8:	f382 8812 	msr	BASEPRI_MAX, r2
    64fc:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6500:	f06f 0015 	mvn.w	r0, #21
    6504:	e004      	b.n	6510 <z_abort_timeout+0x26>
	__asm__ volatile(
    6506:	f386 8811 	msr	BASEPRI, r6
    650a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    650e:	2301      	movs	r3, #1
    6510:	461d      	mov	r5, r3
    6512:	b93b      	cbnz	r3, 6524 <z_abort_timeout+0x3a>
	return node->next != NULL;
    6514:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6516:	2b00      	cmp	r3, #0
    6518:	d0f5      	beq.n	6506 <z_abort_timeout+0x1c>
			remove_timeout(to);
    651a:	4620      	mov	r0, r4
    651c:	f7ff ffce 	bl	64bc <remove_timeout>
			ret = 0;
    6520:	4628      	mov	r0, r5
    6522:	e7f0      	b.n	6506 <z_abort_timeout+0x1c>
}
    6524:	bd70      	pop	{r4, r5, r6, pc}

00006526 <z_get_next_timeout_expiry>:
{
    6526:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    6528:	2300      	movs	r3, #0
	__asm__ volatile(
    652a:	f04f 0220 	mov.w	r2, #32
    652e:	f3ef 8411 	mrs	r4, BASEPRI
    6532:	f382 8812 	msr	BASEPRI_MAX, r2
    6536:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    653a:	f04f 30ff 	mov.w	r0, #4294967295
    653e:	e006      	b.n	654e <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6540:	f7fe fa3c 	bl	49bc <next_timeout>
	__asm__ volatile(
    6544:	f384 8811 	msr	BASEPRI, r4
    6548:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    654c:	2301      	movs	r3, #1
    654e:	2b00      	cmp	r3, #0
    6550:	d0f6      	beq.n	6540 <z_get_next_timeout_expiry+0x1a>
}
    6552:	bd10      	pop	{r4, pc}

00006554 <z_set_timeout_expiry>:
{
    6554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6556:	4605      	mov	r5, r0
    6558:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    655a:	2300      	movs	r3, #0
	__asm__ volatile(
    655c:	f04f 0220 	mov.w	r2, #32
    6560:	f3ef 8611 	mrs	r6, BASEPRI
    6564:	f382 8812 	msr	BASEPRI_MAX, r2
    6568:	f3bf 8f6f 	isb	sy
    656c:	e00a      	b.n	6584 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    656e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6570:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6574:	2801      	cmp	r0, #1
    6576:	dd00      	ble.n	657a <z_set_timeout_expiry+0x26>
    6578:	b97c      	cbnz	r4, 659a <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    657a:	f386 8811 	msr	BASEPRI, r6
    657e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6582:	2301      	movs	r3, #1
    6584:	461c      	mov	r4, r3
    6586:	b97b      	cbnz	r3, 65a8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    6588:	f7fe fa18 	bl	49bc <next_timeout>
			      || (ticks <= next_to);
    658c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6590:	d0ed      	beq.n	656e <z_set_timeout_expiry+0x1a>
    6592:	42a8      	cmp	r0, r5
    6594:	dbec      	blt.n	6570 <z_set_timeout_expiry+0x1c>
    6596:	2401      	movs	r4, #1
    6598:	e7ea      	b.n	6570 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    659a:	4639      	mov	r1, r7
    659c:	42a8      	cmp	r0, r5
    659e:	bfa8      	it	ge
    65a0:	4628      	movge	r0, r5
    65a2:	f7fc f8e5 	bl	2770 <sys_clock_set_timeout>
    65a6:	e7e8      	b.n	657a <z_set_timeout_expiry+0x26>
}
    65a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000065aa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    65aa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    65ac:	f7fe fb1a 	bl	4be4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    65b0:	bd08      	pop	{r3, pc}

000065b2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    65b2:	b900      	cbnz	r0, 65b6 <z_impl_k_busy_wait+0x4>
    65b4:	4770      	bx	lr
{
    65b6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    65b8:	f7fb fac6 	bl	1b48 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    65bc:	bd08      	pop	{r3, pc}

000065be <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    65be:	4770      	bx	lr

000065c0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    65c0:	f7fc bb36 	b.w	2c30 <SystemInit>
