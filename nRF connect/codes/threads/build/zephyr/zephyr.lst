
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 2d 00 20 b9 26 00 00 d1 93 00 00 71 26 00 00     `-. .&......q&..
  10:	71 26 00 00 71 26 00 00 71 26 00 00 00 00 00 00     q&..q&..q&......
	...
  2c:	39 22 00 00 71 26 00 00 00 00 00 00 e1 21 00 00     9"..q&.......!..
  3c:	71 26 00 00                                         q&..

00000040 <_irq_vector_table>:
  40:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  50:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  60:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  70:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  80:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  90:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  a0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  b0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  c0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  d0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  e0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..
  f0:	19 23 00 00 19 23 00 00 19 23 00 00 19 23 00 00     .#...#...#...#..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3e0:	4605      	mov	r5, r0
     3e2:	460e      	mov	r6, r1
     3e4:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     3e6:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     3ea:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     3ee:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     3f2:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     3f6:	d136      	bne.n	466 <CONFIG_FLASH_SIZE+0x66>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     3f8:	f004 0330 	and.w	r3, r4, #48	; 0x30
     3fc:	2b30      	cmp	r3, #48	; 0x30
     3fe:	d043      	beq.n	488 <CONFIG_FLASH_SIZE+0x88>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     400:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     404:	2b02      	cmp	r3, #2
     406:	d050      	beq.n	4aa <CONFIG_FLASH_SIZE+0xaa>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     408:	f004 0306 	and.w	r3, r4, #6
     40c:	2b04      	cmp	r3, #4
     40e:	d05d      	beq.n	4cc <CONFIG_FLASH_SIZE+0xcc>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     410:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     414:	d002      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     41a:	d065      	beq.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     41c:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     420:	d074      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     422:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     426:	d005      	beq.n	434 <CONFIG_FLASH_SIZE+0x34>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     428:	b127      	cbz	r7, 434 <CONFIG_FLASH_SIZE+0x34>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     42a:	f014 0f01 	tst.w	r4, #1
     42e:	d001      	beq.n	434 <CONFIG_FLASH_SIZE+0x34>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     430:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     434:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     438:	f8db 3000 	ldr.w	r3, [fp]
     43c:	2701      	movs	r7, #1
     43e:	40b7      	lsls	r7, r6
     440:	423b      	tst	r3, r7
     442:	d075      	beq.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     444:	f014 0f01 	tst.w	r4, #1
     448:	f000 8084 	beq.w	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     44c:	f8d8 3000 	ldr.w	r3, [r8]
     450:	433b      	orrs	r3, r7
     452:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     456:	f8da 3000 	ldr.w	r3, [sl]
     45a:	464a      	mov	r2, r9
     45c:	4631      	mov	r1, r6
     45e:	4628      	mov	r0, r5
     460:	4798      	blx	r3
}
     462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     466:	4f3f      	ldr	r7, [pc, #252]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     468:	f240 23b5 	movw	r3, #693	; 0x2b5
     46c:	463a      	mov	r2, r7
     46e:	493e      	ldr	r1, [pc, #248]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     470:	483e      	ldr	r0, [pc, #248]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     472:	f008 ff8a 	bl	938a <assert_print>
     476:	483e      	ldr	r0, [pc, #248]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     478:	f008 ff87 	bl	938a <assert_print>
     47c:	f240 21b5 	movw	r1, #693	; 0x2b5
     480:	4638      	mov	r0, r7
     482:	f008 ff7b 	bl	937c <assert_post_action>
     486:	e7b7      	b.n	3f8 <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     488:	4f36      	ldr	r7, [pc, #216]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     48a:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     48e:	463a      	mov	r2, r7
     490:	4938      	ldr	r1, [pc, #224]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     492:	4836      	ldr	r0, [pc, #216]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     494:	f008 ff79 	bl	938a <assert_print>
     498:	4837      	ldr	r0, [pc, #220]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     49a:	f008 ff76 	bl	938a <assert_print>
     49e:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     4a2:	4638      	mov	r0, r7
     4a4:	f008 ff6a 	bl	937c <assert_post_action>
     4a8:	e7aa      	b.n	400 <CONFIG_FLASH_SIZE>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     4aa:	4f2e      	ldr	r7, [pc, #184]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4ac:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     4b0:	463a      	mov	r2, r7
     4b2:	4932      	ldr	r1, [pc, #200]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     4b4:	482d      	ldr	r0, [pc, #180]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     4b6:	f008 ff68 	bl	938a <assert_print>
     4ba:	4831      	ldr	r0, [pc, #196]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     4bc:	f008 ff65 	bl	938a <assert_print>
     4c0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     4c4:	4638      	mov	r0, r7
     4c6:	f008 ff59 	bl	937c <assert_post_action>
     4ca:	e79d      	b.n	408 <CONFIG_FLASH_SIZE+0x8>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     4cc:	4f25      	ldr	r7, [pc, #148]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4ce:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     4d2:	463a      	mov	r2, r7
     4d4:	492b      	ldr	r1, [pc, #172]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     4d6:	4825      	ldr	r0, [pc, #148]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     4d8:	f008 ff57 	bl	938a <assert_print>
     4dc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     4e0:	4638      	mov	r0, r7
     4e2:	f008 ff4b 	bl	937c <assert_post_action>
     4e6:	e793      	b.n	410 <CONFIG_FLASH_SIZE+0x10>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     4e8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     4ec:	f240 23c3 	movw	r3, #707	; 0x2c3
     4f0:	464a      	mov	r2, r9
     4f2:	4925      	ldr	r1, [pc, #148]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4f4:	481d      	ldr	r0, [pc, #116]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     4f6:	f008 ff48 	bl	938a <assert_print>
     4fa:	4824      	ldr	r0, [pc, #144]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     4fc:	f008 ff45 	bl	938a <assert_print>
     500:	f240 21c3 	movw	r1, #707	; 0x2c3
     504:	4648      	mov	r0, r9
     506:	f008 ff39 	bl	937c <assert_post_action>
     50a:	e787      	b.n	41c <CONFIG_FLASH_SIZE+0x1c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     50c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     510:	f240 23c7 	movw	r3, #711	; 0x2c7
     514:	464a      	mov	r2, r9
     516:	491e      	ldr	r1, [pc, #120]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     518:	4814      	ldr	r0, [pc, #80]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     51a:	f008 ff36 	bl	938a <assert_print>
     51e:	481d      	ldr	r0, [pc, #116]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     520:	f008 ff33 	bl	938a <assert_print>
     524:	f240 21c7 	movw	r1, #711	; 0x2c7
     528:	4648      	mov	r0, r9
     52a:	f008 ff27 	bl	937c <assert_post_action>
     52e:	e778      	b.n	422 <CONFIG_FLASH_SIZE+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     530:	f8df b030 	ldr.w	fp, [pc, #48]	; 564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     534:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     538:	465a      	mov	r2, fp
     53a:	4917      	ldr	r1, [pc, #92]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     53c:	480b      	ldr	r0, [pc, #44]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     53e:	f008 ff24 	bl	938a <assert_print>
     542:	4816      	ldr	r0, [pc, #88]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     544:	f008 ff21 	bl	938a <assert_print>
     548:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     54c:	4658      	mov	r0, fp
     54e:	f008 ff15 	bl	937c <assert_post_action>
     552:	e777      	b.n	444 <CONFIG_FLASH_SIZE+0x44>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     554:	f8d8 3000 	ldr.w	r3, [r8]
     558:	ea23 0307 	bic.w	r3, r3, r7
     55c:	f8c8 3000 	str.w	r3, [r8]
     560:	e779      	b.n	456 <CONFIG_FLASH_SIZE+0x56>
     562:	bf00      	nop
     564:	0000a438 	.word	0x0000a438
     568:	0000a46c 	.word	0x0000a46c
     56c:	0000a4cc 	.word	0x0000a4cc
     570:	0000a4ec 	.word	0x0000a4ec
     574:	0000a510 	.word	0x0000a510
     578:	0000a54c 	.word	0x0000a54c
     57c:	0000a58c 	.word	0x0000a58c
     580:	0000a5c4 	.word	0x0000a5c4
     584:	0000a618 	.word	0x0000a618
     588:	0000a64c 	.word	0x0000a64c
     58c:	0000a694 	.word	0x0000a694
     590:	0000a6d0 	.word	0x0000a6d0
     594:	0000a714 	.word	0x0000a714
     598:	0000a740 	.word	0x0000a740
     59c:	0000a780 	.word	0x0000a780

000005a0 <uart_out>:
void blink3(void)
{
	blink(&led3, 500, 1);
}
void uart_out(void)
{
     5a0:	b510      	push	{r4, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
     5a2:	f04f 32ff 	mov.w	r2, #4294967295
     5a6:	f04f 33ff 	mov.w	r3, #4294967295
     5aa:	4806      	ldr	r0, [pc, #24]	; (5c4 <uart_out+0x24>)
     5ac:	f006 f916 	bl	67dc <z_impl_k_queue_get>
     5b0:	4604      	mov	r4, r0
	while (1) {
		struct printk_data_t *rx_data = k_fifo_get(&printk_fifo,
							   K_FOREVER);
		printk("Toggled led%d; counter=%d\n",
     5b2:	6882      	ldr	r2, [r0, #8]
     5b4:	6841      	ldr	r1, [r0, #4]
     5b6:	4804      	ldr	r0, [pc, #16]	; (5c8 <uart_out+0x28>)
     5b8:	f008 fc59 	bl	8e6e <printk>
		       rx_data->led, rx_data->cnt);
		k_free(rx_data);
     5bc:	4620      	mov	r0, r4
     5be:	f009 fdb0 	bl	a122 <k_free>
	while (1) {
     5c2:	e7ee      	b.n	5a2 <uart_out+0x2>
     5c4:	200002ac 	.word	0x200002ac
     5c8:	0000a794 	.word	0x0000a794

000005cc <blink>:
{
     5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d0:	b087      	sub	sp, #28
     5d2:	4681      	mov	r9, r0
     5d4:	468b      	mov	fp, r1
     5d6:	9201      	str	r2, [sp, #4]
	if (!device_is_ready(spec->port)) {
     5d8:	6800      	ldr	r0, [r0, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     5da:	f009 fc71 	bl	9ec0 <z_device_is_ready>
     5de:	b1a8      	cbz	r0, 60c <blink+0x40>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
     5e0:	f8d9 0000 	ldr.w	r0, [r9]
     5e4:	f899 1004 	ldrb.w	r1, [r9, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
     5e8:	f8b9 2006 	ldrh.w	r2, [r9, #6]
	return gpio_pin_configure(spec->port,
     5ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     5f0:	f7ff fef4 	bl	3dc <z_impl_gpio_pin_configure>
	if (ret != 0) {
     5f4:	4606      	mov	r6, r0
     5f6:	2800      	cmp	r0, #0
     5f8:	d063      	beq.n	6c2 <blink+0xf6>
		printk("Error %d: failed to configure pin %d (LED '%s')\n",
     5fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
     5fe:	f899 2004 	ldrb.w	r2, [r9, #4]
     602:	4601      	mov	r1, r0
     604:	4849      	ldr	r0, [pc, #292]	; (72c <blink+0x160>)
     606:	f008 fc32 	bl	8e6e <printk>
		return;
     60a:	e005      	b.n	618 <blink+0x4c>
		printk("Error: %s device is not ready\n", spec->port->name);
     60c:	f8d9 3000 	ldr.w	r3, [r9]
     610:	6819      	ldr	r1, [r3, #0]
     612:	4847      	ldr	r0, [pc, #284]	; (730 <blink+0x164>)
     614:	f008 fc2b 	bl	8e6e <printk>
}
     618:	b007      	add	sp, #28
     61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     61e:	f240 4392 	movw	r3, #1170	; 0x492
     622:	4a44      	ldr	r2, [pc, #272]	; (734 <blink+0x168>)
     624:	4944      	ldr	r1, [pc, #272]	; (738 <blink+0x16c>)
     626:	4845      	ldr	r0, [pc, #276]	; (73c <blink+0x170>)
     628:	f008 feaf 	bl	938a <assert_print>
     62c:	4844      	ldr	r0, [pc, #272]	; (740 <blink+0x174>)
     62e:	f008 feac 	bl	938a <assert_print>
     632:	f240 4192 	movw	r1, #1170	; 0x492
     636:	483f      	ldr	r0, [pc, #252]	; (734 <blink+0x168>)
     638:	f008 fea0 	bl	937c <assert_post_action>
     63c:	e053      	b.n	6e6 <blink+0x11a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     63e:	4f3d      	ldr	r7, [pc, #244]	; (734 <blink+0x168>)
     640:	f44f 638d 	mov.w	r3, #1128	; 0x468
     644:	463a      	mov	r2, r7
     646:	493c      	ldr	r1, [pc, #240]	; (738 <blink+0x16c>)
     648:	483c      	ldr	r0, [pc, #240]	; (73c <blink+0x170>)
     64a:	f008 fe9e 	bl	938a <assert_print>
     64e:	483c      	ldr	r0, [pc, #240]	; (740 <blink+0x174>)
     650:	f008 fe9b 	bl	938a <assert_print>
     654:	f44f 618d 	mov.w	r1, #1128	; 0x468
     658:	4638      	mov	r0, r7
     65a:	f008 fe8f 	bl	937c <assert_post_action>
     65e:	e051      	b.n	704 <blink+0x138>
	const struct gpio_driver_api *api =
     660:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
     662:	68db      	ldr	r3, [r3, #12]
     664:	4641      	mov	r1, r8
     666:	4628      	mov	r0, r5
     668:	4798      	blx	r3
		struct printk_data_t tx_data = { .led = id, .cnt = cnt };
     66a:	2300      	movs	r3, #0
     66c:	9303      	str	r3, [sp, #12]
     66e:	9304      	str	r3, [sp, #16]
     670:	9305      	str	r3, [sp, #20]
     672:	9b01      	ldr	r3, [sp, #4]
     674:	9304      	str	r3, [sp, #16]
     676:	9605      	str	r6, [sp, #20]
		char *mem_ptr = k_malloc(size);
     678:	200c      	movs	r0, #12
     67a:	f009 fd5b 	bl	a134 <k_malloc>
		__ASSERT_NO_MSG(mem_ptr != 0);
     67e:	4604      	mov	r4, r0
     680:	2800      	cmp	r0, #0
     682:	d047      	beq.n	714 <blink+0x148>
		memcpy(mem_ptr, &tx_data, size);
     684:	220c      	movs	r2, #12
     686:	eb0d 0102 	add.w	r1, sp, r2
     68a:	4620      	mov	r0, r4
     68c:	f008 ff68 	bl	9560 <memcpy>
		k_fifo_put(&printk_fifo, mem_ptr);
     690:	4621      	mov	r1, r4
     692:	482c      	ldr	r0, [pc, #176]	; (744 <blink+0x178>)
     694:	f009 fcb0 	bl	9ff8 <k_queue_append>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     698:	ea2b 70eb 	bic.w	r0, fp, fp, asr #31
     69c:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     69e:	03c9      	lsls	r1, r1, #15
     6a0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     6a4:	03c0      	lsls	r0, r0, #15
     6a6:	f240 33e7 	movw	r3, #999	; 0x3e7
     6aa:	18c0      	adds	r0, r0, r3
     6ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     6b0:	f04f 0300 	mov.w	r3, #0
     6b4:	f141 0100 	adc.w	r1, r1, #0
     6b8:	f7ff fd22 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     6bc:	f007 fba2 	bl	7e04 <z_impl_k_sleep>
		cnt++;
     6c0:	3601      	adds	r6, #1
		gpio_pin_set(spec->port, spec->pin, cnt % 2);
     6c2:	f8d9 5000 	ldr.w	r5, [r9]
     6c6:	f899 8004 	ldrb.w	r8, [r9, #4]
     6ca:	2e00      	cmp	r6, #0
     6cc:	f006 0401 	and.w	r4, r6, #1
     6d0:	bfb8      	it	lt
     6d2:	4264      	neglt	r4, r4
	const struct gpio_driver_config *const cfg =
     6d4:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
     6d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	2701      	movs	r7, #1
     6de:	fa07 f708 	lsl.w	r7, r7, r8
     6e2:	423b      	tst	r3, r7
     6e4:	d09b      	beq.n	61e <blink+0x52>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     6e6:	f8da 3000 	ldr.w	r3, [sl]
     6ea:	421f      	tst	r7, r3
     6ec:	d002      	beq.n	6f4 <blink+0x128>
		value = (value != 0) ? 0 : 1;
     6ee:	fab4 f484 	clz	r4, r4
     6f2:	0964      	lsrs	r4, r4, #5
	const struct gpio_driver_config *const cfg =
     6f4:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	2201      	movs	r2, #1
     6fa:	fa02 f808 	lsl.w	r8, r2, r8
     6fe:	ea13 0f08 	tst.w	r3, r8
     702:	d09c      	beq.n	63e <blink+0x72>
	if (value != 0)	{
     704:	2c00      	cmp	r4, #0
     706:	d1ab      	bne.n	660 <blink+0x94>
	const struct gpio_driver_api *api =
     708:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
     70a:	691b      	ldr	r3, [r3, #16]
     70c:	4641      	mov	r1, r8
     70e:	4628      	mov	r0, r5
     710:	4798      	blx	r3
     712:	e7aa      	b.n	66a <blink+0x9e>
		__ASSERT_NO_MSG(mem_ptr != 0);
     714:	4d0c      	ldr	r5, [pc, #48]	; (748 <blink+0x17c>)
     716:	2360      	movs	r3, #96	; 0x60
     718:	462a      	mov	r2, r5
     71a:	490c      	ldr	r1, [pc, #48]	; (74c <blink+0x180>)
     71c:	4807      	ldr	r0, [pc, #28]	; (73c <blink+0x170>)
     71e:	f008 fe34 	bl	938a <assert_print>
     722:	2160      	movs	r1, #96	; 0x60
     724:	4628      	mov	r0, r5
     726:	f008 fe29 	bl	937c <assert_post_action>
     72a:	e7ab      	b.n	684 <blink+0xb8>
     72c:	0000a7d0 	.word	0x0000a7d0
     730:	0000a7b0 	.word	0x0000a7b0
     734:	0000a438 	.word	0x0000a438
     738:	0000a740 	.word	0x0000a740
     73c:	0000a4cc 	.word	0x0000a4cc
     740:	0000a780 	.word	0x0000a780
     744:	200002ac 	.word	0x200002ac
     748:	0000a804 	.word	0x0000a804
     74c:	0000a814 	.word	0x0000a814

00000750 <blink0>:
{
     750:	b508      	push	{r3, lr}
	blink(&led0, 100, 0);
     752:	2200      	movs	r2, #0
     754:	2164      	movs	r1, #100	; 0x64
     756:	4802      	ldr	r0, [pc, #8]	; (760 <blink0+0x10>)
     758:	f7ff ff38 	bl	5cc <blink>
}
     75c:	bd08      	pop	{r3, pc}
     75e:	bf00      	nop
     760:	0000a890 	.word	0x0000a890

00000764 <blink1>:
{
     764:	b508      	push	{r3, lr}
	blink(&led1, 1000, 1);
     766:	2201      	movs	r2, #1
     768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     76c:	4801      	ldr	r0, [pc, #4]	; (774 <blink1+0x10>)
     76e:	f7ff ff2d 	bl	5cc <blink>
}
     772:	bd08      	pop	{r3, pc}
     774:	0000a89c 	.word	0x0000a89c

00000778 <blink2>:
{
     778:	b508      	push	{r3, lr}
	blink(&led2, 5000, 0);
     77a:	2200      	movs	r2, #0
     77c:	f241 3188 	movw	r1, #5000	; 0x1388
     780:	4801      	ldr	r0, [pc, #4]	; (788 <blink2+0x10>)
     782:	f7ff ff23 	bl	5cc <blink>
}
     786:	bd08      	pop	{r3, pc}
     788:	0000a8a8 	.word	0x0000a8a8

0000078c <blink3>:
{
     78c:	b508      	push	{r3, lr}
	blink(&led3, 500, 1);
     78e:	2201      	movs	r2, #1
     790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     794:	4801      	ldr	r0, [pc, #4]	; (79c <blink3+0x10>)
     796:	f7ff ff19 	bl	5cc <blink>
}
     79a:	bd08      	pop	{r3, pc}
     79c:	0000a8b4 	.word	0x0000a8b4

000007a0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     7a0:	b538      	push	{r3, r4, r5, lr}
     7a2:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     7a4:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     7a6:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     7aa:	6081      	str	r1, [r0, #8]
	switch (method) {
     7ac:	2b02      	cmp	r3, #2
     7ae:	d903      	bls.n	7b8 <sys_notify_finalize+0x18>
     7b0:	2b03      	cmp	r3, #3
     7b2:	d102      	bne.n	7ba <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     7b4:	6800      	ldr	r0, [r0, #0]
		break;
     7b6:	e00e      	b.n	7d6 <sys_notify_finalize+0x36>
	switch (method) {
     7b8:	b963      	cbnz	r3, 7d4 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     7ba:	4d08      	ldr	r5, [pc, #32]	; (7dc <sys_notify_finalize+0x3c>)
     7bc:	2345      	movs	r3, #69	; 0x45
     7be:	462a      	mov	r2, r5
     7c0:	4907      	ldr	r1, [pc, #28]	; (7e0 <sys_notify_finalize+0x40>)
     7c2:	4808      	ldr	r0, [pc, #32]	; (7e4 <sys_notify_finalize+0x44>)
     7c4:	f008 fde1 	bl	938a <assert_print>
     7c8:	2145      	movs	r1, #69	; 0x45
     7ca:	4628      	mov	r0, r5
     7cc:	f008 fdd6 	bl	937c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     7d0:	2000      	movs	r0, #0
     7d2:	e000      	b.n	7d6 <sys_notify_finalize+0x36>
	switch (method) {
     7d4:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     7d6:	2300      	movs	r3, #0
     7d8:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     7da:	bd38      	pop	{r3, r4, r5, pc}
     7dc:	0000a8c0 	.word	0x0000a8c0
     7e0:	0000a690 	.word	0x0000a690
     7e4:	0000a4cc 	.word	0x0000a4cc

000007e8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     7e8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     7ea:	680b      	ldr	r3, [r1, #0]
     7ec:	3301      	adds	r3, #1
     7ee:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     7f0:	4b01      	ldr	r3, [pc, #4]	; (7f8 <char_out+0x10>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	4798      	blx	r3
}
     7f6:	bd08      	pop	{r3, pc}
     7f8:	20000000 	.word	0x20000000

000007fc <__printk_hook_install>:
	_char_out = fn;
     7fc:	4b01      	ldr	r3, [pc, #4]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7fe:	6018      	str	r0, [r3, #0]
}
     800:	4770      	bx	lr
     802:	bf00      	nop
     804:	20000000 	.word	0x20000000

00000808 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     808:	b500      	push	{lr}
     80a:	b083      	sub	sp, #12
     80c:	4602      	mov	r2, r0
     80e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     810:	2100      	movs	r1, #0
     812:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     814:	a901      	add	r1, sp, #4
     816:	4803      	ldr	r0, [pc, #12]	; (824 <vprintk+0x1c>)
     818:	f000 fe72 	bl	1500 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     81c:	b003      	add	sp, #12
     81e:	f85d fb04 	ldr.w	pc, [sp], #4
     822:	bf00      	nop
     824:	000007e9 	.word	0x000007e9

00000828 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     828:	b538      	push	{r3, r4, r5, lr}
     82a:	4604      	mov	r4, r0
     82c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     82e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     830:	2a00      	cmp	r2, #0
     832:	db14      	blt.n	85e <process_complete+0x36>
     834:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     838:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     83a:	2a01      	cmp	r2, #1
     83c:	d91b      	bls.n	876 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     83e:	2b04      	cmp	r3, #4
     840:	d050      	beq.n	8e4 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     842:	4c2f      	ldr	r4, [pc, #188]	; (900 <process_complete+0xd8>)
     844:	f240 131b 	movw	r3, #283	; 0x11b
     848:	4622      	mov	r2, r4
     84a:	492e      	ldr	r1, [pc, #184]	; (904 <process_complete+0xdc>)
     84c:	482e      	ldr	r0, [pc, #184]	; (908 <process_complete+0xe0>)
     84e:	f008 fd9c 	bl	938a <assert_print>
     852:	f240 111b 	movw	r1, #283	; 0x11b
     856:	4620      	mov	r0, r4
     858:	f008 fd90 	bl	937c <assert_post_action>
	}
}
     85c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     85e:	e9d0 0100 	ldrd	r0, r1, [r0]
     862:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     866:	2300      	movs	r3, #0
     868:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     86a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     86c:	2101      	movs	r1, #1
     86e:	4620      	mov	r0, r4
     870:	f008 fb0b 	bl	8e8a <set_state>
     874:	e7f2      	b.n	85c <process_complete+0x34>
		*clients = mgr->clients;
     876:	e9d0 0100 	ldrd	r0, r1, [r0]
     87a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     87e:	2200      	movs	r2, #0
     880:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     882:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     884:	2b06      	cmp	r3, #6
     886:	d00f      	beq.n	8a8 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     888:	2b05      	cmp	r3, #5
     88a:	d11d      	bne.n	8c8 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     88c:	2100      	movs	r1, #0
     88e:	4620      	mov	r0, r4
     890:	f008 fafb 	bl	8e8a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     894:	4620      	mov	r0, r4
     896:	f008 fb1f 	bl	8ed8 <process_recheck>
     89a:	2800      	cmp	r0, #0
     89c:	d0de      	beq.n	85c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     89e:	8ba3      	ldrh	r3, [r4, #28]
     8a0:	f043 0320 	orr.w	r3, r3, #32
     8a4:	83a3      	strh	r3, [r4, #28]
     8a6:	e7d9      	b.n	85c <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     8a8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     8ac:	b13b      	cbz	r3, 8be <process_complete+0x96>
				mgr->refs += 1U;
     8ae:	8be2      	ldrh	r2, [r4, #30]
     8b0:	3201      	adds	r2, #1
     8b2:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     8b4:	2b00      	cmp	r3, #0
     8b6:	d0f9      	beq.n	8ac <process_complete+0x84>
	return node->next;
     8b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     8ba:	2b00      	cmp	r3, #0
     8bc:	d1f6      	bne.n	8ac <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     8be:	2102      	movs	r1, #2
     8c0:	4620      	mov	r0, r4
     8c2:	f008 fae2 	bl	8e8a <set_state>
     8c6:	e7e5      	b.n	894 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     8c8:	4d0d      	ldr	r5, [pc, #52]	; (900 <process_complete+0xd8>)
     8ca:	f240 1309 	movw	r3, #265	; 0x109
     8ce:	462a      	mov	r2, r5
     8d0:	490e      	ldr	r1, [pc, #56]	; (90c <process_complete+0xe4>)
     8d2:	480d      	ldr	r0, [pc, #52]	; (908 <process_complete+0xe0>)
     8d4:	f008 fd59 	bl	938a <assert_print>
     8d8:	f240 1109 	movw	r1, #265	; 0x109
     8dc:	4628      	mov	r0, r5
     8de:	f008 fd4d 	bl	937c <assert_post_action>
     8e2:	e7d3      	b.n	88c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     8e4:	2100      	movs	r1, #0
     8e6:	f008 fad0 	bl	8e8a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     8ea:	4620      	mov	r0, r4
     8ec:	f008 faf4 	bl	8ed8 <process_recheck>
     8f0:	2800      	cmp	r0, #0
     8f2:	d0b3      	beq.n	85c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     8f4:	8ba3      	ldrh	r3, [r4, #28]
     8f6:	f043 0320 	orr.w	r3, r3, #32
     8fa:	83a3      	strh	r3, [r4, #28]
     8fc:	e7ae      	b.n	85c <process_complete+0x34>
     8fe:	bf00      	nop
     900:	0000a8e4 	.word	0x0000a8e4
     904:	0000a690 	.word	0x0000a690
     908:	0000a4cc 	.word	0x0000a4cc
     90c:	0000a908 	.word	0x0000a908

00000910 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     914:	b083      	sub	sp, #12
     916:	4604      	mov	r4, r0
     918:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     91a:	8b83      	ldrh	r3, [r0, #28]
     91c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     920:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     924:	460d      	mov	r5, r1
     926:	b131      	cbz	r1, 936 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     928:	f1b8 0f00 	cmp.w	r8, #0
     92c:	d112      	bne.n	954 <process_event+0x44>
	list->head = NULL;
     92e:	2300      	movs	r3, #0
     930:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     932:	9301      	str	r3, [sp, #4]
}
     934:	e0aa      	b.n	a8c <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     936:	f8df 92e0 	ldr.w	r9, [pc, #736]	; c18 <process_event+0x308>
     93a:	f240 1333 	movw	r3, #307	; 0x133
     93e:	464a      	mov	r2, r9
     940:	49b6      	ldr	r1, [pc, #728]	; (c1c <process_event+0x30c>)
     942:	48b7      	ldr	r0, [pc, #732]	; (c20 <process_event+0x310>)
     944:	f008 fd21 	bl	938a <assert_print>
     948:	f240 1133 	movw	r1, #307	; 0x133
     94c:	4648      	mov	r0, r9
     94e:	f008 fd15 	bl	937c <assert_post_action>
     952:	e7e9      	b.n	928 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     954:	2d01      	cmp	r5, #1
     956:	d013      	beq.n	980 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     958:	2d02      	cmp	r5, #2
     95a:	d116      	bne.n	98a <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     95c:	8ba3      	ldrh	r3, [r4, #28]
     95e:	f043 0320 	orr.w	r3, r3, #32
     962:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     964:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     966:	4620      	mov	r0, r4
     968:	f005 fab8 	bl	5edc <z_spin_unlock_valid>
     96c:	2800      	cmp	r0, #0
     96e:	f000 819c 	beq.w	caa <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     972:	f386 8811 	msr	BASEPRI, r6
     976:	f3bf 8f6f 	isb	sy
}
     97a:	b003      	add	sp, #12
     97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     980:	8ba3      	ldrh	r3, [r4, #28]
     982:	f043 0310 	orr.w	r3, r3, #16
     986:	83a3      	strh	r3, [r4, #28]
     988:	e7ec      	b.n	964 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     98a:	4da3      	ldr	r5, [pc, #652]	; (c18 <process_event+0x308>)
     98c:	f44f 739e 	mov.w	r3, #316	; 0x13c
     990:	462a      	mov	r2, r5
     992:	49a4      	ldr	r1, [pc, #656]	; (c24 <process_event+0x314>)
     994:	48a2      	ldr	r0, [pc, #648]	; (c20 <process_event+0x310>)
     996:	f008 fcf8 	bl	938a <assert_print>
     99a:	f44f 719e 	mov.w	r1, #316	; 0x13c
     99e:	4628      	mov	r0, r5
     9a0:	f008 fcec 	bl	937c <assert_post_action>
     9a4:	e7da      	b.n	95c <process_event+0x4c>
			evt = process_recheck(mgr);
     9a6:	4620      	mov	r0, r4
     9a8:	f008 fa96 	bl	8ed8 <process_recheck>
     9ac:	4605      	mov	r5, r0
     9ae:	e06f      	b.n	a90 <process_event+0x180>
			res = mgr->last_res;
     9b0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     9b4:	464a      	mov	r2, r9
     9b6:	4669      	mov	r1, sp
     9b8:	4620      	mov	r0, r4
     9ba:	f7ff ff35 	bl	828 <process_complete>
		onoff_transition_fn transit = NULL;
     9be:	2500      	movs	r5, #0
     9c0:	e011      	b.n	9e6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     9c2:	2f00      	cmp	r7, #0
     9c4:	f040 8081 	bne.w	aca <process_event+0x1ba>
	return list->head;
     9c8:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     9ca:	2b00      	cmp	r3, #0
     9cc:	f000 808b 	beq.w	ae6 <process_event+0x1d6>
			transit = mgr->transitions->start;
     9d0:	6923      	ldr	r3, [r4, #16]
     9d2:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     9d4:	2d00      	cmp	r5, #0
     9d6:	f000 8094 	beq.w	b02 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     9da:	2106      	movs	r1, #6
     9dc:	4620      	mov	r0, r4
     9de:	f008 fa54 	bl	8e8a <set_state>
		res = 0;
     9e2:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9e6:	8ba3      	ldrh	r3, [r4, #28]
     9e8:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     9ec:	45b8      	cmp	r8, r7
     9ee:	f000 810b 	beq.w	c08 <process_event+0x2f8>
     9f2:	68a2      	ldr	r2, [r4, #8]
     9f4:	2a00      	cmp	r2, #0
     9f6:	f000 8109 	beq.w	c0c <process_event+0x2fc>
     9fa:	2201      	movs	r2, #1
		if (do_monitors
     9fc:	4617      	mov	r7, r2
     9fe:	b91a      	cbnz	r2, a08 <process_event+0xf8>
     a00:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     a02:	2a00      	cmp	r2, #0
     a04:	f000 8104 	beq.w	c10 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a08:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     a0c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     a0e:	f104 0a14 	add.w	sl, r4, #20
     a12:	4650      	mov	r0, sl
     a14:	f005 fa62 	bl	5edc <z_spin_unlock_valid>
     a18:	2800      	cmp	r0, #0
     a1a:	f000 8115 	beq.w	c48 <process_event+0x338>
     a1e:	f386 8811 	msr	BASEPRI, r6
     a22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a26:	2f00      	cmp	r7, #0
     a28:	f040 811f 	bne.w	c6a <process_event+0x35a>
     a2c:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     a2e:	b12b      	cbz	r3, a3c <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     a30:	464b      	mov	r3, r9
     a32:	4642      	mov	r2, r8
     a34:	4669      	mov	r1, sp
     a36:	4620      	mov	r0, r4
     a38:	f008 fa90 	bl	8f5c <notify_all>
			if (transit != NULL) {
     a3c:	b115      	cbz	r5, a44 <process_event+0x134>
				transit(mgr, transition_complete);
     a3e:	497a      	ldr	r1, [pc, #488]	; (c28 <process_event+0x318>)
     a40:	4620      	mov	r0, r4
     a42:	47a8      	blx	r5
	__asm__ volatile(
     a44:	f04f 0320 	mov.w	r3, #32
     a48:	f3ef 8611 	mrs	r6, BASEPRI
     a4c:	f383 8812 	msr	BASEPRI_MAX, r3
     a50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a54:	4650      	mov	r0, sl
     a56:	f005 fa31 	bl	5ebc <z_spin_lock_valid>
     a5a:	2800      	cmp	r0, #0
     a5c:	f000 810b 	beq.w	c76 <process_event+0x366>
	z_spin_lock_set_owner(l);
     a60:	4650      	mov	r0, sl
     a62:	f005 fa4b 	bl	5efc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a66:	8ba3      	ldrh	r3, [r4, #28]
     a68:	f023 0308 	bic.w	r3, r3, #8
     a6c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a6e:	8ba3      	ldrh	r3, [r4, #28]
     a70:	f013 0f10 	tst.w	r3, #16
     a74:	f000 810f 	beq.w	c96 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a78:	f023 0310 	bic.w	r3, r3, #16
     a7c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     a7e:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a80:	8ba7      	ldrh	r7, [r4, #28]
     a82:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     a86:	2d00      	cmp	r5, #0
     a88:	f43f af6c 	beq.w	964 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     a8c:	2d02      	cmp	r5, #2
     a8e:	d08a      	beq.n	9a6 <process_event+0x96>
		if (evt == EVT_NOP) {
     a90:	2d00      	cmp	r5, #0
     a92:	f43f af67 	beq.w	964 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     a96:	2d01      	cmp	r5, #1
     a98:	d08a      	beq.n	9b0 <process_event+0xa0>
		} else if (evt == EVT_START) {
     a9a:	2d03      	cmp	r5, #3
     a9c:	d091      	beq.n	9c2 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     a9e:	2d04      	cmp	r5, #4
     aa0:	d03e      	beq.n	b20 <process_event+0x210>
		} else if (evt == EVT_RESET) {
     aa2:	2d05      	cmp	r5, #5
     aa4:	f040 80a0 	bne.w	be8 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     aa8:	2f01      	cmp	r7, #1
     aaa:	d172      	bne.n	b92 <process_event+0x282>
     aac:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     aae:	2b00      	cmp	r3, #0
     ab0:	d07d      	beq.n	bae <process_event+0x29e>
			transit = mgr->transitions->reset;
     ab2:	6923      	ldr	r3, [r4, #16]
     ab4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     ab6:	2d00      	cmp	r5, #0
     ab8:	f000 8087 	beq.w	bca <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     abc:	2105      	movs	r1, #5
     abe:	4620      	mov	r0, r4
     ac0:	f008 f9e3 	bl	8e8a <set_state>
		res = 0;
     ac4:	f04f 0900 	mov.w	r9, #0
     ac8:	e78d      	b.n	9e6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     aca:	4d53      	ldr	r5, [pc, #332]	; (c18 <process_event+0x308>)
     acc:	f44f 73ab 	mov.w	r3, #342	; 0x156
     ad0:	462a      	mov	r2, r5
     ad2:	4956      	ldr	r1, [pc, #344]	; (c2c <process_event+0x31c>)
     ad4:	4852      	ldr	r0, [pc, #328]	; (c20 <process_event+0x310>)
     ad6:	f008 fc58 	bl	938a <assert_print>
     ada:	f44f 71ab 	mov.w	r1, #342	; 0x156
     ade:	4628      	mov	r0, r5
     ae0:	f008 fc4c 	bl	937c <assert_post_action>
     ae4:	e770      	b.n	9c8 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     ae6:	4d4c      	ldr	r5, [pc, #304]	; (c18 <process_event+0x308>)
     ae8:	f240 1357 	movw	r3, #343	; 0x157
     aec:	462a      	mov	r2, r5
     aee:	4950      	ldr	r1, [pc, #320]	; (c30 <process_event+0x320>)
     af0:	484b      	ldr	r0, [pc, #300]	; (c20 <process_event+0x310>)
     af2:	f008 fc4a 	bl	938a <assert_print>
     af6:	f240 1157 	movw	r1, #343	; 0x157
     afa:	4628      	mov	r0, r5
     afc:	f008 fc3e 	bl	937c <assert_post_action>
     b00:	e766      	b.n	9d0 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     b02:	f8df 8114 	ldr.w	r8, [pc, #276]	; c18 <process_event+0x308>
     b06:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     b0a:	4642      	mov	r2, r8
     b0c:	4949      	ldr	r1, [pc, #292]	; (c34 <process_event+0x324>)
     b0e:	4844      	ldr	r0, [pc, #272]	; (c20 <process_event+0x310>)
     b10:	f008 fc3b 	bl	938a <assert_print>
     b14:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     b18:	4640      	mov	r0, r8
     b1a:	f008 fc2f 	bl	937c <assert_post_action>
     b1e:	e75c      	b.n	9da <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     b20:	2f02      	cmp	r7, #2
     b22:	d10b      	bne.n	b3c <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     b24:	8be3      	ldrh	r3, [r4, #30]
     b26:	b9bb      	cbnz	r3, b58 <process_event+0x248>
			transit = mgr->transitions->stop;
     b28:	6923      	ldr	r3, [r4, #16]
     b2a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     b2c:	b315      	cbz	r5, b74 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     b2e:	2104      	movs	r1, #4
     b30:	4620      	mov	r0, r4
     b32:	f008 f9aa 	bl	8e8a <set_state>
		res = 0;
     b36:	f04f 0900 	mov.w	r9, #0
     b3a:	e754      	b.n	9e6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     b3c:	4d36      	ldr	r5, [pc, #216]	; (c18 <process_event+0x308>)
     b3e:	f240 135d 	movw	r3, #349	; 0x15d
     b42:	462a      	mov	r2, r5
     b44:	493c      	ldr	r1, [pc, #240]	; (c38 <process_event+0x328>)
     b46:	4836      	ldr	r0, [pc, #216]	; (c20 <process_event+0x310>)
     b48:	f008 fc1f 	bl	938a <assert_print>
     b4c:	f240 115d 	movw	r1, #349	; 0x15d
     b50:	4628      	mov	r0, r5
     b52:	f008 fc13 	bl	937c <assert_post_action>
     b56:	e7e5      	b.n	b24 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     b58:	4d2f      	ldr	r5, [pc, #188]	; (c18 <process_event+0x308>)
     b5a:	f44f 73af 	mov.w	r3, #350	; 0x15e
     b5e:	462a      	mov	r2, r5
     b60:	4936      	ldr	r1, [pc, #216]	; (c3c <process_event+0x32c>)
     b62:	482f      	ldr	r0, [pc, #188]	; (c20 <process_event+0x310>)
     b64:	f008 fc11 	bl	938a <assert_print>
     b68:	f44f 71af 	mov.w	r1, #350	; 0x15e
     b6c:	4628      	mov	r0, r5
     b6e:	f008 fc05 	bl	937c <assert_post_action>
     b72:	e7d9      	b.n	b28 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     b74:	f8df 80a0 	ldr.w	r8, [pc, #160]	; c18 <process_event+0x308>
     b78:	f240 1361 	movw	r3, #353	; 0x161
     b7c:	4642      	mov	r2, r8
     b7e:	492d      	ldr	r1, [pc, #180]	; (c34 <process_event+0x324>)
     b80:	4827      	ldr	r0, [pc, #156]	; (c20 <process_event+0x310>)
     b82:	f008 fc02 	bl	938a <assert_print>
     b86:	f240 1161 	movw	r1, #353	; 0x161
     b8a:	4640      	mov	r0, r8
     b8c:	f008 fbf6 	bl	937c <assert_post_action>
     b90:	e7cd      	b.n	b2e <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b92:	4d21      	ldr	r5, [pc, #132]	; (c18 <process_event+0x308>)
     b94:	f44f 73b2 	mov.w	r3, #356	; 0x164
     b98:	462a      	mov	r2, r5
     b9a:	4929      	ldr	r1, [pc, #164]	; (c40 <process_event+0x330>)
     b9c:	4820      	ldr	r0, [pc, #128]	; (c20 <process_event+0x310>)
     b9e:	f008 fbf4 	bl	938a <assert_print>
     ba2:	f44f 71b2 	mov.w	r1, #356	; 0x164
     ba6:	4628      	mov	r0, r5
     ba8:	f008 fbe8 	bl	937c <assert_post_action>
     bac:	e77e      	b.n	aac <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     bae:	4d1a      	ldr	r5, [pc, #104]	; (c18 <process_event+0x308>)
     bb0:	f240 1365 	movw	r3, #357	; 0x165
     bb4:	462a      	mov	r2, r5
     bb6:	491e      	ldr	r1, [pc, #120]	; (c30 <process_event+0x320>)
     bb8:	4819      	ldr	r0, [pc, #100]	; (c20 <process_event+0x310>)
     bba:	f008 fbe6 	bl	938a <assert_print>
     bbe:	f240 1165 	movw	r1, #357	; 0x165
     bc2:	4628      	mov	r0, r5
     bc4:	f008 fbda 	bl	937c <assert_post_action>
     bc8:	e773      	b.n	ab2 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     bca:	f8df 804c 	ldr.w	r8, [pc, #76]	; c18 <process_event+0x308>
     bce:	f44f 73b4 	mov.w	r3, #360	; 0x168
     bd2:	4642      	mov	r2, r8
     bd4:	4917      	ldr	r1, [pc, #92]	; (c34 <process_event+0x324>)
     bd6:	4812      	ldr	r0, [pc, #72]	; (c20 <process_event+0x310>)
     bd8:	f008 fbd7 	bl	938a <assert_print>
     bdc:	f44f 71b4 	mov.w	r1, #360	; 0x168
     be0:	4640      	mov	r0, r8
     be2:	f008 fbcb 	bl	937c <assert_post_action>
     be6:	e769      	b.n	abc <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     be8:	4d0b      	ldr	r5, [pc, #44]	; (c18 <process_event+0x308>)
     bea:	f240 136b 	movw	r3, #363	; 0x16b
     bee:	462a      	mov	r2, r5
     bf0:	4914      	ldr	r1, [pc, #80]	; (c44 <process_event+0x334>)
     bf2:	480b      	ldr	r0, [pc, #44]	; (c20 <process_event+0x310>)
     bf4:	f008 fbc9 	bl	938a <assert_print>
     bf8:	f240 116b 	movw	r1, #363	; 0x16b
     bfc:	4628      	mov	r0, r5
     bfe:	f008 fbbd 	bl	937c <assert_post_action>
		onoff_transition_fn transit = NULL;
     c02:	2500      	movs	r5, #0
		res = 0;
     c04:	46a9      	mov	r9, r5
     c06:	e6ee      	b.n	9e6 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     c08:	2200      	movs	r2, #0
     c0a:	e6f7      	b.n	9fc <process_event+0xec>
     c0c:	2200      	movs	r2, #0
     c0e:	e6f5      	b.n	9fc <process_event+0xec>
		    || (transit != NULL)) {
     c10:	2d00      	cmp	r5, #0
     c12:	f47f aef9 	bne.w	a08 <process_event+0xf8>
     c16:	e72a      	b.n	a6e <process_event+0x15e>
     c18:	0000a8e4 	.word	0x0000a8e4
     c1c:	0000a930 	.word	0x0000a930
     c20:	0000a4cc 	.word	0x0000a4cc
     c24:	0000a940 	.word	0x0000a940
     c28:	00000ce5 	.word	0x00000ce5
     c2c:	0000a954 	.word	0x0000a954
     c30:	0000a960 	.word	0x0000a960
     c34:	0000a984 	.word	0x0000a984
     c38:	0000a99c 	.word	0x0000a99c
     c3c:	0000a9b4 	.word	0x0000a9b4
     c40:	0000a9c4 	.word	0x0000a9c4
     c44:	0000a690 	.word	0x0000a690
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     c48:	f8df b080 	ldr.w	fp, [pc, #128]	; ccc <process_event+0x3bc>
     c4c:	23b9      	movs	r3, #185	; 0xb9
     c4e:	465a      	mov	r2, fp
     c50:	491f      	ldr	r1, [pc, #124]	; (cd0 <process_event+0x3c0>)
     c52:	4820      	ldr	r0, [pc, #128]	; (cd4 <process_event+0x3c4>)
     c54:	f008 fb99 	bl	938a <assert_print>
     c58:	4651      	mov	r1, sl
     c5a:	481f      	ldr	r0, [pc, #124]	; (cd8 <process_event+0x3c8>)
     c5c:	f008 fb95 	bl	938a <assert_print>
     c60:	21b9      	movs	r1, #185	; 0xb9
     c62:	4658      	mov	r0, fp
     c64:	f008 fb8a 	bl	937c <assert_post_action>
     c68:	e6d9      	b.n	a1e <process_event+0x10e>
				notify_monitors(mgr, state, res);
     c6a:	464a      	mov	r2, r9
     c6c:	4641      	mov	r1, r8
     c6e:	4620      	mov	r0, r4
     c70:	f008 f913 	bl	8e9a <notify_monitors>
     c74:	e6da      	b.n	a2c <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     c76:	4d15      	ldr	r5, [pc, #84]	; (ccc <process_event+0x3bc>)
     c78:	238e      	movs	r3, #142	; 0x8e
     c7a:	462a      	mov	r2, r5
     c7c:	4917      	ldr	r1, [pc, #92]	; (cdc <process_event+0x3cc>)
     c7e:	4815      	ldr	r0, [pc, #84]	; (cd4 <process_event+0x3c4>)
     c80:	f008 fb83 	bl	938a <assert_print>
     c84:	4651      	mov	r1, sl
     c86:	4816      	ldr	r0, [pc, #88]	; (ce0 <process_event+0x3d0>)
     c88:	f008 fb7f 	bl	938a <assert_print>
     c8c:	218e      	movs	r1, #142	; 0x8e
     c8e:	4628      	mov	r0, r5
     c90:	f008 fb74 	bl	937c <assert_post_action>
     c94:	e6e4      	b.n	a60 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     c96:	f013 0f20 	tst.w	r3, #32
     c9a:	d004      	beq.n	ca6 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     c9c:	f023 0320 	bic.w	r3, r3, #32
     ca0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     ca2:	2502      	movs	r5, #2
     ca4:	e6ec      	b.n	a80 <process_event+0x170>
		evt = EVT_NOP;
     ca6:	2500      	movs	r5, #0
     ca8:	e6ea      	b.n	a80 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     caa:	4d08      	ldr	r5, [pc, #32]	; (ccc <process_event+0x3bc>)
     cac:	23b9      	movs	r3, #185	; 0xb9
     cae:	462a      	mov	r2, r5
     cb0:	4907      	ldr	r1, [pc, #28]	; (cd0 <process_event+0x3c0>)
     cb2:	4808      	ldr	r0, [pc, #32]	; (cd4 <process_event+0x3c4>)
     cb4:	f008 fb69 	bl	938a <assert_print>
     cb8:	4621      	mov	r1, r4
     cba:	4807      	ldr	r0, [pc, #28]	; (cd8 <process_event+0x3c8>)
     cbc:	f008 fb65 	bl	938a <assert_print>
     cc0:	21b9      	movs	r1, #185	; 0xb9
     cc2:	4628      	mov	r0, r5
     cc4:	f008 fb5a 	bl	937c <assert_post_action>
     cc8:	e653      	b.n	972 <process_event+0x62>
     cca:	bf00      	nop
     ccc:	0000a9dc 	.word	0x0000a9dc
     cd0:	0000aa0c 	.word	0x0000aa0c
     cd4:	0000a4cc 	.word	0x0000a4cc
     cd8:	0000aa24 	.word	0x0000aa24
     cdc:	0000aa3c 	.word	0x0000aa3c
     ce0:	0000aa54 	.word	0x0000aa54

00000ce4 <transition_complete>:
{
     ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ce8:	4604      	mov	r4, r0
     cea:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     cec:	f100 0614 	add.w	r6, r0, #20
     cf0:	f04f 0320 	mov.w	r3, #32
     cf4:	f3ef 8711 	mrs	r7, BASEPRI
     cf8:	f383 8812 	msr	BASEPRI_MAX, r3
     cfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d00:	4630      	mov	r0, r6
     d02:	f005 f8db 	bl	5ebc <z_spin_lock_valid>
     d06:	b150      	cbz	r0, d1e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
     d08:	4630      	mov	r0, r6
     d0a:	f005 f8f7 	bl	5efc <z_spin_lock_set_owner>
	mgr->last_res = res;
     d0e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     d10:	463a      	mov	r2, r7
     d12:	2101      	movs	r1, #1
     d14:	4620      	mov	r0, r4
     d16:	f7ff fdfb 	bl	910 <process_event>
}
     d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d1e:	f8df 8020 	ldr.w	r8, [pc, #32]	; d40 <transition_complete+0x5c>
     d22:	238e      	movs	r3, #142	; 0x8e
     d24:	4642      	mov	r2, r8
     d26:	4907      	ldr	r1, [pc, #28]	; (d44 <transition_complete+0x60>)
     d28:	4807      	ldr	r0, [pc, #28]	; (d48 <transition_complete+0x64>)
     d2a:	f008 fb2e 	bl	938a <assert_print>
     d2e:	4631      	mov	r1, r6
     d30:	4806      	ldr	r0, [pc, #24]	; (d4c <transition_complete+0x68>)
     d32:	f008 fb2a 	bl	938a <assert_print>
     d36:	218e      	movs	r1, #142	; 0x8e
     d38:	4640      	mov	r0, r8
     d3a:	f008 fb1f 	bl	937c <assert_post_action>
     d3e:	e7e3      	b.n	d08 <transition_complete+0x24>
     d40:	0000a9dc 	.word	0x0000a9dc
     d44:	0000aa3c 	.word	0x0000aa3c
     d48:	0000a4cc 	.word	0x0000a4cc
     d4c:	0000aa54 	.word	0x0000aa54

00000d50 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d54:	4604      	mov	r4, r0
     d56:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     d58:	f008 f8d7 	bl	8f0a <validate_args>

	if (rv < 0) {
     d5c:	1e06      	subs	r6, r0, #0
     d5e:	db58      	blt.n	e12 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     d60:	f104 0714 	add.w	r7, r4, #20
     d64:	f04f 0320 	mov.w	r3, #32
     d68:	f3ef 8911 	mrs	r9, BASEPRI
     d6c:	f383 8812 	msr	BASEPRI_MAX, r3
     d70:	f3bf 8f6f 	isb	sy
     d74:	4638      	mov	r0, r7
     d76:	f005 f8a1 	bl	5ebc <z_spin_lock_valid>
     d7a:	b1e8      	cbz	r0, db8 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
     d7c:	4638      	mov	r0, r7
     d7e:	f005 f8bd 	bl	5efc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d82:	8ba5      	ldrh	r5, [r4, #28]
     d84:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     d88:	8be3      	ldrh	r3, [r4, #30]
     d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d8e:	4293      	cmp	r3, r2
     d90:	d056      	beq.n	e40 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
     d92:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
     d94:	2d02      	cmp	r5, #2
     d96:	d01f      	beq.n	dd8 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
     d98:	b32d      	cbz	r5, de6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
     d9a:	2d04      	cmp	r5, #4
     d9c:	d023      	beq.n	de6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
     d9e:	2d06      	cmp	r5, #6
     da0:	d021      	beq.n	de6 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
     da2:	2d05      	cmp	r5, #5
     da4:	d053      	beq.n	e4e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     da6:	2d01      	cmp	r5, #1
     da8:	d136      	bne.n	e18 <onoff_request+0xc8>
		rv = -EIO;
     daa:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     dae:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     db2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     db4:	4652      	mov	r2, sl
     db6:	e01c      	b.n	df2 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     db8:	4d3c      	ldr	r5, [pc, #240]	; (eac <onoff_request+0x15c>)
     dba:	238e      	movs	r3, #142	; 0x8e
     dbc:	462a      	mov	r2, r5
     dbe:	493c      	ldr	r1, [pc, #240]	; (eb0 <onoff_request+0x160>)
     dc0:	483c      	ldr	r0, [pc, #240]	; (eb4 <onoff_request+0x164>)
     dc2:	f008 fae2 	bl	938a <assert_print>
     dc6:	4639      	mov	r1, r7
     dc8:	483b      	ldr	r0, [pc, #236]	; (eb8 <onoff_request+0x168>)
     dca:	f008 fade 	bl	938a <assert_print>
     dce:	218e      	movs	r1, #142	; 0x8e
     dd0:	4628      	mov	r0, r5
     dd2:	f008 fad3 	bl	937c <assert_post_action>
     dd6:	e7d1      	b.n	d7c <onoff_request+0x2c>
		mgr->refs += 1U;
     dd8:	3301      	adds	r3, #1
     dda:	83e3      	strh	r3, [r4, #30]
		notify = true;
     ddc:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
     de0:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
     de2:	461a      	mov	r2, r3
     de4:	e005      	b.n	df2 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
     de6:	fab5 f385 	clz	r3, r5
     dea:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
     dec:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
     df0:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
     df2:	b142      	cbz	r2, e06 <onoff_request+0xb6>
	parent->next = child;
     df4:	2200      	movs	r2, #0
     df6:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
     dfa:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     dfc:	b372      	cbz	r2, e5c <onoff_request+0x10c>
	parent->next = child;
     dfe:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
     e02:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
     e06:	b373      	cbz	r3, e66 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
     e08:	464a      	mov	r2, r9
     e0a:	2102      	movs	r1, #2
     e0c:	4620      	mov	r0, r4
     e0e:	f7ff fd7f 	bl	910 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
     e12:	4630      	mov	r0, r6
     e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     e18:	4e28      	ldr	r6, [pc, #160]	; (ebc <onoff_request+0x16c>)
     e1a:	f240 13c9 	movw	r3, #457	; 0x1c9
     e1e:	4632      	mov	r2, r6
     e20:	4927      	ldr	r1, [pc, #156]	; (ec0 <onoff_request+0x170>)
     e22:	4824      	ldr	r0, [pc, #144]	; (eb4 <onoff_request+0x164>)
     e24:	f008 fab1 	bl	938a <assert_print>
     e28:	f240 11c9 	movw	r1, #457	; 0x1c9
     e2c:	4630      	mov	r0, r6
     e2e:	f008 faa5 	bl	937c <assert_post_action>
		rv = -EIO;
     e32:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     e36:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     e3a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     e3c:	4652      	mov	r2, sl
     e3e:	e7d8      	b.n	df2 <onoff_request+0xa2>
		rv = -EAGAIN;
     e40:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
     e44:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     e48:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     e4a:	4652      	mov	r2, sl
     e4c:	e7d1      	b.n	df2 <onoff_request+0xa2>
		rv = -ENOTSUP;
     e4e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
     e52:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     e56:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     e58:	4652      	mov	r2, sl
     e5a:	e7ca      	b.n	df2 <onoff_request+0xa2>
     e5c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
     e60:	f8c4 8000 	str.w	r8, [r4]
}
     e64:	e7cf      	b.n	e06 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e66:	4638      	mov	r0, r7
     e68:	f005 f838 	bl	5edc <z_spin_unlock_valid>
     e6c:	b168      	cbz	r0, e8a <onoff_request+0x13a>
	__asm__ volatile(
     e6e:	f389 8811 	msr	BASEPRI, r9
     e72:	f3bf 8f6f 	isb	sy
		if (notify) {
     e76:	f1ba 0f00 	cmp.w	sl, #0
     e7a:	d0ca      	beq.n	e12 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
     e7c:	2300      	movs	r3, #0
     e7e:	462a      	mov	r2, r5
     e80:	4641      	mov	r1, r8
     e82:	4620      	mov	r0, r4
     e84:	f008 f857 	bl	8f36 <notify_one>
     e88:	e7c3      	b.n	e12 <onoff_request+0xc2>
     e8a:	f8df b020 	ldr.w	fp, [pc, #32]	; eac <onoff_request+0x15c>
     e8e:	23b9      	movs	r3, #185	; 0xb9
     e90:	465a      	mov	r2, fp
     e92:	490c      	ldr	r1, [pc, #48]	; (ec4 <onoff_request+0x174>)
     e94:	4807      	ldr	r0, [pc, #28]	; (eb4 <onoff_request+0x164>)
     e96:	f008 fa78 	bl	938a <assert_print>
     e9a:	4639      	mov	r1, r7
     e9c:	480a      	ldr	r0, [pc, #40]	; (ec8 <onoff_request+0x178>)
     e9e:	f008 fa74 	bl	938a <assert_print>
     ea2:	21b9      	movs	r1, #185	; 0xb9
     ea4:	4658      	mov	r0, fp
     ea6:	f008 fa69 	bl	937c <assert_post_action>
     eaa:	e7e0      	b.n	e6e <onoff_request+0x11e>
     eac:	0000a9dc 	.word	0x0000a9dc
     eb0:	0000aa3c 	.word	0x0000aa3c
     eb4:	0000a4cc 	.word	0x0000a4cc
     eb8:	0000aa54 	.word	0x0000aa54
     ebc:	0000a8e4 	.word	0x0000a8e4
     ec0:	0000a9c4 	.word	0x0000a9c4
     ec4:	0000aa0c 	.word	0x0000aa0c
     ec8:	0000aa24 	.word	0x0000aa24

00000ecc <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
     ecc:	2900      	cmp	r1, #0
     ece:	d045      	beq.n	f5c <sys_heap_free+0x90>
{
     ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ed4:	460f      	mov	r7, r1
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
     ed6:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
     ed8:	4620      	mov	r0, r4
     eda:	f008 f8ff 	bl	90dc <mem_to_chunkid>
     ede:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
     ee0:	00c6      	lsls	r6, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
     ee2:	f106 0802 	add.w	r8, r6, #2
     ee6:	f834 3008 	ldrh.w	r3, [r4, r8]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
     eea:	f013 0f01 	tst.w	r3, #1
     eee:	d013      	beq.n	f18 <sys_heap_free+0x4c>
     ef0:	f834 3008 	ldrh.w	r3, [r4, r8]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
     ef4:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		return ((uint16_t *)cmem)[f];
     ef8:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
     efc:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
     efe:	429d      	cmp	r5, r3
     f00:	d11b      	bne.n	f3a <sys_heap_free+0x6e>
	void *cmem = &buf[c];
     f02:	4426      	add	r6, r4
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
     f04:	8873      	ldrh	r3, [r6, #2]
     f06:	f023 0301 	bic.w	r3, r3, #1
     f0a:	8073      	strh	r3, [r6, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
     f0c:	4629      	mov	r1, r5
     f0e:	4620      	mov	r0, r4
     f10:	f008 f900 	bl	9114 <free_chunk>
}
     f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(chunk_used(h, c),
     f18:	f8df 9044 	ldr.w	r9, [pc, #68]	; f60 <sys_heap_free+0x94>
     f1c:	23ac      	movs	r3, #172	; 0xac
     f1e:	464a      	mov	r2, r9
     f20:	4910      	ldr	r1, [pc, #64]	; (f64 <sys_heap_free+0x98>)
     f22:	4811      	ldr	r0, [pc, #68]	; (f68 <sys_heap_free+0x9c>)
     f24:	f008 fa31 	bl	938a <assert_print>
     f28:	4639      	mov	r1, r7
     f2a:	4810      	ldr	r0, [pc, #64]	; (f6c <sys_heap_free+0xa0>)
     f2c:	f008 fa2d 	bl	938a <assert_print>
     f30:	21ac      	movs	r1, #172	; 0xac
     f32:	4648      	mov	r0, r9
     f34:	f008 fa22 	bl	937c <assert_post_action>
     f38:	e7da      	b.n	ef0 <sys_heap_free+0x24>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
     f3a:	f8df 8024 	ldr.w	r8, [pc, #36]	; f60 <sys_heap_free+0x94>
     f3e:	23b4      	movs	r3, #180	; 0xb4
     f40:	4642      	mov	r2, r8
     f42:	490b      	ldr	r1, [pc, #44]	; (f70 <sys_heap_free+0xa4>)
     f44:	4808      	ldr	r0, [pc, #32]	; (f68 <sys_heap_free+0x9c>)
     f46:	f008 fa20 	bl	938a <assert_print>
     f4a:	4639      	mov	r1, r7
     f4c:	4809      	ldr	r0, [pc, #36]	; (f74 <sys_heap_free+0xa8>)
     f4e:	f008 fa1c 	bl	938a <assert_print>
     f52:	21b4      	movs	r1, #180	; 0xb4
     f54:	4640      	mov	r0, r8
     f56:	f008 fa11 	bl	937c <assert_post_action>
     f5a:	e7d2      	b.n	f02 <sys_heap_free+0x36>
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	0000aa6c 	.word	0x0000aa6c
     f64:	0000aa90 	.word	0x0000aa90
     f68:	0000a4cc 	.word	0x0000a4cc
     f6c:	0000aaa4 	.word	0x0000aaa4
     f70:	0000aadc 	.word	0x0000aadc
     f74:	0000ab04 	.word	0x0000ab04

00000f78 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
     f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f7c:	460c      	mov	r4, r1
     f7e:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
     f80:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
     f82:	424b      	negs	r3, r1
     f84:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
     f88:	ea31 0303 	bics.w	r3, r1, r3
     f8c:	d041      	beq.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
		align -= rew;
     f8e:	eba1 0408 	sub.w	r4, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
     f92:	f1b8 0f03 	cmp.w	r8, #3
     f96:	d847      	bhi.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     f98:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
     f9a:	1e63      	subs	r3, r4, #1
     f9c:	4223      	tst	r3, r4
     f9e:	d145      	bne.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>

	if (bytes == 0 || size_too_big(h, bytes)) {
     fa0:	2d00      	cmp	r5, #0
     fa2:	d069      	beq.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
     fa4:	68b3      	ldr	r3, [r6, #8]
     fa6:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
     faa:	d967      	bls.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
     fac:	1961      	adds	r1, r4, r5
     fae:	1bc9      	subs	r1, r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     fb0:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
     fb2:	08c9      	lsrs	r1, r1, #3
     fb4:	4630      	mov	r0, r6
     fb6:	f008 f8de 	bl	9176 <alloc_chunk>

	if (c0 == 0) {
     fba:	4607      	mov	r7, r0
     fbc:	2800      	cmp	r0, #0
     fbe:	d05f      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
     fc0:	4601      	mov	r1, r0
     fc2:	4630      	mov	r0, r6
     fc4:	f008 f807 	bl	8fd6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
     fc8:	4440      	add	r0, r8
     fca:	4420      	add	r0, r4
     fcc:	3801      	subs	r0, #1
     fce:	4264      	negs	r4, r4
     fd0:	4004      	ands	r4, r0
     fd2:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
     fd6:	4425      	add	r5, r4
     fd8:	3507      	adds	r5, #7
     fda:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
     fde:	4621      	mov	r1, r4
     fe0:	4630      	mov	r0, r6
     fe2:	f008 f87b 	bl	90dc <mem_to_chunkid>
     fe6:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
     fe8:	1bad      	subs	r5, r5, r6
     fea:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
     fec:	4287      	cmp	r7, r0
     fee:	d32f      	bcc.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
	void *cmem = &buf[c];
     ff0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
     ff4:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
     ff8:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
     ffa:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
     ffe:	429d      	cmp	r5, r3
    1000:	d330      	bcc.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
	void *cmem = &buf[c];
    1002:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1004:	8873      	ldrh	r3, [r6, #2]
    1006:	f043 0301 	orr.w	r3, r3, #1
    100a:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    100c:	4620      	mov	r0, r4
    100e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    1012:	2904      	cmp	r1, #4
    1014:	d903      	bls.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
		rew = 0;
    1016:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
    101a:	2704      	movs	r7, #4
    101c:	e7bd      	b.n	f9a <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
    101e:	4611      	mov	r1, r2
    1020:	f008 f8e4 	bl	91ec <sys_heap_alloc>
    1024:	4604      	mov	r4, r0
    1026:	e7f1      	b.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
		gap = MIN(rew, chunk_header_bytes(h));
    1028:	2704      	movs	r7, #4
    102a:	e7b6      	b.n	f9a <sys_heap_aligned_alloc+0x22>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    102c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1030:	f44f 73a0 	mov.w	r3, #320	; 0x140
    1034:	464a      	mov	r2, r9
    1036:	4914      	ldr	r1, [pc, #80]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1038:	4814      	ldr	r0, [pc, #80]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    103a:	f008 f9a6 	bl	938a <assert_print>
    103e:	4814      	ldr	r0, [pc, #80]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1040:	f008 f9a3 	bl	938a <assert_print>
    1044:	f44f 71a0 	mov.w	r1, #320	; 0x140
    1048:	4648      	mov	r0, r9
    104a:	f008 f997 	bl	937c <assert_post_action>
    104e:	e7a7      	b.n	fa0 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
    1050:	4602      	mov	r2, r0
    1052:	4639      	mov	r1, r7
    1054:	4630      	mov	r0, r6
    1056:	f008 f80a 	bl	906e <split_chunks>
		free_list_add(h, c0);
    105a:	4639      	mov	r1, r7
    105c:	4630      	mov	r0, r6
    105e:	f008 f84d 	bl	90fc <free_list_add>
    1062:	e7c5      	b.n	ff0 <sys_heap_aligned_alloc+0x78>
		split_chunks(h, c, c_end);
    1064:	462a      	mov	r2, r5
    1066:	4641      	mov	r1, r8
    1068:	4630      	mov	r0, r6
    106a:	f008 f800 	bl	906e <split_chunks>
		free_list_add(h, c_end);
    106e:	4629      	mov	r1, r5
    1070:	4630      	mov	r0, r6
    1072:	f008 f843 	bl	90fc <free_list_add>
    1076:	e7c4      	b.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
		return NULL;
    1078:	2400      	movs	r4, #0
    107a:	e7c7      	b.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    107c:	2400      	movs	r4, #0
    107e:	e7c5      	b.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
		return NULL;
    1080:	2400      	movs	r4, #0
    1082:	e7c3      	b.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1084:	0000aa6c 	.word	0x0000aa6c
    1088:	0000ab40 	.word	0x0000ab40
    108c:	0000a4cc 	.word	0x0000a4cc
    1090:	0000ab5c 	.word	0x0000ab5c

00001094 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1098:	4606      	mov	r6, r0
    109a:	460d      	mov	r5, r1
    109c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    109e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    10a2:	d222      	bcs.n	10ea <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    10a4:	2c04      	cmp	r4, #4
    10a6:	d931      	bls.n	110c <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    10a8:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    10aa:	1dec      	adds	r4, r5, #7
    10ac:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    10b0:	4415      	add	r5, r2
    10b2:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    10b6:	1b2d      	subs	r5, r5, r4
    10b8:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    10bc:	2d17      	cmp	r5, #23
    10be:	d936      	bls.n	112e <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    10c0:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    10c2:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    10c6:	2300      	movs	r3, #0
    10c8:	60e3      	str	r3, [r4, #12]
	return 31 - __builtin_clz(usable_sz);
    10ca:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    10ce:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    10d2:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    10d6:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    10d8:	3607      	adds	r6, #7
    10da:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    10de:	f109 0301 	add.w	r3, r9, #1
    10e2:	4543      	cmp	r3, r8
    10e4:	d834      	bhi.n	1150 <sys_heap_init+0xbc>
{
    10e6:	2300      	movs	r3, #0
    10e8:	e049      	b.n	117e <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    10ea:	4f38      	ldr	r7, [pc, #224]	; (11cc <sys_heap_init+0x138>)
    10ec:	f240 13e3 	movw	r3, #483	; 0x1e3
    10f0:	463a      	mov	r2, r7
    10f2:	4937      	ldr	r1, [pc, #220]	; (11d0 <sys_heap_init+0x13c>)
    10f4:	4837      	ldr	r0, [pc, #220]	; (11d4 <sys_heap_init+0x140>)
    10f6:	f008 f948 	bl	938a <assert_print>
    10fa:	4837      	ldr	r0, [pc, #220]	; (11d8 <sys_heap_init+0x144>)
    10fc:	f008 f945 	bl	938a <assert_print>
    1100:	f240 11e3 	movw	r1, #483	; 0x1e3
    1104:	4638      	mov	r0, r7
    1106:	f008 f939 	bl	937c <assert_post_action>
    110a:	e7cb      	b.n	10a4 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    110c:	4f2f      	ldr	r7, [pc, #188]	; (11cc <sys_heap_init+0x138>)
    110e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1112:	463a      	mov	r2, r7
    1114:	4931      	ldr	r1, [pc, #196]	; (11dc <sys_heap_init+0x148>)
    1116:	482f      	ldr	r0, [pc, #188]	; (11d4 <sys_heap_init+0x140>)
    1118:	f008 f937 	bl	938a <assert_print>
    111c:	4830      	ldr	r0, [pc, #192]	; (11e0 <sys_heap_init+0x14c>)
    111e:	f008 f934 	bl	938a <assert_print>
    1122:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1126:	4638      	mov	r0, r7
    1128:	f008 f928 	bl	937c <assert_post_action>
    112c:	e7bc      	b.n	10a8 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    112e:	4f27      	ldr	r7, [pc, #156]	; (11cc <sys_heap_init+0x138>)
    1130:	f240 13f3 	movw	r3, #499	; 0x1f3
    1134:	463a      	mov	r2, r7
    1136:	492b      	ldr	r1, [pc, #172]	; (11e4 <sys_heap_init+0x150>)
    1138:	4826      	ldr	r0, [pc, #152]	; (11d4 <sys_heap_init+0x140>)
    113a:	f008 f926 	bl	938a <assert_print>
    113e:	4828      	ldr	r0, [pc, #160]	; (11e0 <sys_heap_init+0x14c>)
    1140:	f008 f923 	bl	938a <assert_print>
    1144:	f240 11f3 	movw	r1, #499	; 0x1f3
    1148:	4638      	mov	r0, r7
    114a:	f008 f917 	bl	937c <assert_post_action>
    114e:	e7b7      	b.n	10c0 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1150:	f8df a078 	ldr.w	sl, [pc, #120]	; 11cc <sys_heap_init+0x138>
    1154:	f44f 7301 	mov.w	r3, #516	; 0x204
    1158:	4652      	mov	r2, sl
    115a:	4923      	ldr	r1, [pc, #140]	; (11e8 <sys_heap_init+0x154>)
    115c:	481d      	ldr	r0, [pc, #116]	; (11d4 <sys_heap_init+0x140>)
    115e:	f008 f914 	bl	938a <assert_print>
    1162:	481f      	ldr	r0, [pc, #124]	; (11e0 <sys_heap_init+0x14c>)
    1164:	f008 f911 	bl	938a <assert_print>
    1168:	f44f 7101 	mov.w	r1, #516	; 0x204
    116c:	4650      	mov	r0, sl
    116e:	f008 f905 	bl	937c <assert_post_action>
    1172:	e7b8      	b.n	10e6 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1174:	1d1a      	adds	r2, r3, #4
    1176:	2100      	movs	r1, #0
    1178:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    117c:	3301      	adds	r3, #1
    117e:	42bb      	cmp	r3, r7
    1180:	dbf8      	blt.n	1174 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1182:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    1186:	b29b      	uxth	r3, r3
    1188:	8063      	strh	r3, [r4, #2]
    118a:	2200      	movs	r2, #0
    118c:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    118e:	f043 0301 	orr.w	r3, r3, #1
    1192:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1194:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1198:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    119c:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    11a0:	1cb3      	adds	r3, r6, #2
    11a2:	52e1      	strh	r1, [r4, r3]
    11a4:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    11a8:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    11ac:	1ca9      	adds	r1, r5, #2
    11ae:	5262      	strh	r2, [r4, r1]
    11b0:	4425      	add	r5, r4
    11b2:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    11b6:	886b      	ldrh	r3, [r5, #2]
    11b8:	f043 0301 	orr.w	r3, r3, #1
    11bc:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    11be:	4649      	mov	r1, r9
    11c0:	4620      	mov	r0, r4
    11c2:	f007 ff9b 	bl	90fc <free_list_add>
}
    11c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11ca:	bf00      	nop
    11cc:	0000aa6c 	.word	0x0000aa6c
    11d0:	0000ab7c 	.word	0x0000ab7c
    11d4:	0000a4cc 	.word	0x0000a4cc
    11d8:	0000ab94 	.word	0x0000ab94
    11dc:	0000abac 	.word	0x0000abac
    11e0:	0000abd0 	.word	0x0000abd0
    11e4:	0000abec 	.word	0x0000abec
    11e8:	0000ac18 	.word	0x0000ac18

000011ec <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	b082      	sub	sp, #8
    11f0:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    11f2:	2300      	movs	r3, #0
    11f4:	6003      	str	r3, [r0, #0]
    11f6:	6043      	str	r3, [r0, #4]
    11f8:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    11fa:	784b      	ldrb	r3, [r1, #1]
    11fc:	2b25      	cmp	r3, #37	; 0x25
    11fe:	d002      	beq.n	1206 <extract_conversion+0x1a>
    1200:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    1202:	2501      	movs	r5, #1
    1204:	e01f      	b.n	1246 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    1206:	1c88      	adds	r0, r1, #2
    1208:	70e3      	strb	r3, [r4, #3]
		return sp;
    120a:	e145      	b.n	1498 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    120c:	7823      	ldrb	r3, [r4, #0]
    120e:	f043 0304 	orr.w	r3, r3, #4
    1212:	7023      	strb	r3, [r4, #0]
		if (loop) {
    1214:	b1b5      	cbz	r5, 1244 <extract_conversion+0x58>
			++sp;
    1216:	3601      	adds	r6, #1
    1218:	e014      	b.n	1244 <extract_conversion+0x58>
			conv->flag_plus = true;
    121a:	7823      	ldrb	r3, [r4, #0]
    121c:	f043 0308 	orr.w	r3, r3, #8
    1220:	7023      	strb	r3, [r4, #0]
			break;
    1222:	e7f7      	b.n	1214 <extract_conversion+0x28>
			conv->flag_space = true;
    1224:	7823      	ldrb	r3, [r4, #0]
    1226:	f043 0310 	orr.w	r3, r3, #16
    122a:	7023      	strb	r3, [r4, #0]
			break;
    122c:	e7f2      	b.n	1214 <extract_conversion+0x28>
			conv->flag_hash = true;
    122e:	7823      	ldrb	r3, [r4, #0]
    1230:	f043 0320 	orr.w	r3, r3, #32
    1234:	7023      	strb	r3, [r4, #0]
			break;
    1236:	e7ed      	b.n	1214 <extract_conversion+0x28>
			conv->flag_zero = true;
    1238:	7823      	ldrb	r3, [r4, #0]
    123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    123e:	7023      	strb	r3, [r4, #0]
			break;
    1240:	e7e8      	b.n	1214 <extract_conversion+0x28>
		switch (*sp) {
    1242:	2500      	movs	r5, #0
	} while (loop);
    1244:	b345      	cbz	r5, 1298 <extract_conversion+0xac>
		switch (*sp) {
    1246:	7833      	ldrb	r3, [r6, #0]
    1248:	3b20      	subs	r3, #32
    124a:	2b10      	cmp	r3, #16
    124c:	d8f9      	bhi.n	1242 <extract_conversion+0x56>
    124e:	a201      	add	r2, pc, #4	; (adr r2, 1254 <extract_conversion+0x68>)
    1250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1254:	00001225 	.word	0x00001225
    1258:	00001243 	.word	0x00001243
    125c:	00001243 	.word	0x00001243
    1260:	0000122f 	.word	0x0000122f
    1264:	00001243 	.word	0x00001243
    1268:	00001243 	.word	0x00001243
    126c:	00001243 	.word	0x00001243
    1270:	00001243 	.word	0x00001243
    1274:	00001243 	.word	0x00001243
    1278:	00001243 	.word	0x00001243
    127c:	00001243 	.word	0x00001243
    1280:	0000121b 	.word	0x0000121b
    1284:	00001243 	.word	0x00001243
    1288:	0000120d 	.word	0x0000120d
    128c:	00001243 	.word	0x00001243
    1290:	00001243 	.word	0x00001243
    1294:	00001239 	.word	0x00001239
	if (conv->flag_zero && conv->flag_dash) {
    1298:	7823      	ldrb	r3, [r4, #0]
    129a:	f003 0344 	and.w	r3, r3, #68	; 0x44
    129e:	2b44      	cmp	r3, #68	; 0x44
    12a0:	d05f      	beq.n	1362 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    12a2:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    12a4:	7823      	ldrb	r3, [r4, #0]
    12a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    12aa:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    12ac:	7833      	ldrb	r3, [r6, #0]
    12ae:	2b2a      	cmp	r3, #42	; 0x2a
    12b0:	d05c      	beq.n	136c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    12b2:	a801      	add	r0, sp, #4
    12b4:	f007 ffcc 	bl	9250 <extract_decimal>
	if (sp != wp) {
    12b8:	9b01      	ldr	r3, [sp, #4]
    12ba:	429e      	cmp	r6, r3
    12bc:	d00f      	beq.n	12de <extract_conversion+0xf2>
		conv->width_present = true;
    12be:	7823      	ldrb	r3, [r4, #0]
    12c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    12c4:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    12c6:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    12c8:	b2db      	uxtb	r3, r3
    12ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    12ce:	2800      	cmp	r0, #0
    12d0:	db54      	blt.n	137c <extract_conversion+0x190>
    12d2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    12d4:	4313      	orrs	r3, r2
    12d6:	7822      	ldrb	r2, [r4, #0]
    12d8:	f363 0241 	bfi	r2, r3, #1, #1
    12dc:	7022      	strb	r2, [r4, #0]
	return sp;
    12de:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    12e0:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	2b2e      	cmp	r3, #46	; 0x2e
    12e6:	bf14      	ite	ne
    12e8:	2300      	movne	r3, #0
    12ea:	2301      	moveq	r3, #1
    12ec:	7862      	ldrb	r2, [r4, #1]
    12ee:	f363 0241 	bfi	r2, r3, #1, #1
    12f2:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    12f4:	2b00      	cmp	r3, #0
    12f6:	d043      	beq.n	1380 <extract_conversion+0x194>
	++sp;
    12f8:	9b01      	ldr	r3, [sp, #4]
    12fa:	1c5a      	adds	r2, r3, #1
    12fc:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    12fe:	785b      	ldrb	r3, [r3, #1]
    1300:	2b2a      	cmp	r3, #42	; 0x2a
    1302:	d03f      	beq.n	1384 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1304:	a801      	add	r0, sp, #4
    1306:	f007 ffa3 	bl	9250 <extract_decimal>
	conv->prec_value = prec;
    130a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    130c:	7823      	ldrb	r3, [r4, #0]
    130e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1312:	2800      	cmp	r0, #0
    1314:	db3e      	blt.n	1394 <extract_conversion+0x1a8>
    1316:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1318:	4313      	orrs	r3, r2
    131a:	7822      	ldrb	r2, [r4, #0]
    131c:	f363 0241 	bfi	r2, r3, #1, #1
    1320:	7022      	strb	r2, [r4, #0]
	return sp;
    1322:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    1324:	7803      	ldrb	r3, [r0, #0]
    1326:	3b4c      	subs	r3, #76	; 0x4c
    1328:	2b2e      	cmp	r3, #46	; 0x2e
    132a:	f200 809d 	bhi.w	1468 <extract_conversion+0x27c>
    132e:	e8df f003 	tbb	[pc, r3]
    1332:	9b90      	.short	0x9b90
    1334:	9b9b9b9b 	.word	0x9b9b9b9b
    1338:	9b9b9b9b 	.word	0x9b9b9b9b
    133c:	9b9b9b9b 	.word	0x9b9b9b9b
    1340:	9b9b9b9b 	.word	0x9b9b9b9b
    1344:	9b9b9b9b 	.word	0x9b9b9b9b
    1348:	9b9b9b9b 	.word	0x9b9b9b9b
    134c:	9b339b9b 	.word	0x9b339b9b
    1350:	9b459b57 	.word	0x9b459b57
    1354:	9b9b9b9b 	.word	0x9b9b9b9b
    1358:	9b899b9b 	.word	0x9b899b9b
    135c:	9b9b9b9b 	.word	0x9b9b9b9b
    1360:	82          	.byte	0x82
    1361:	00          	.byte	0x00
		conv->flag_zero = false;
    1362:	7823      	ldrb	r3, [r4, #0]
    1364:	f36f 1386 	bfc	r3, #6, #1
    1368:	7023      	strb	r3, [r4, #0]
    136a:	e79a      	b.n	12a2 <extract_conversion+0xb6>
		conv->width_star = true;
    136c:	7863      	ldrb	r3, [r4, #1]
    136e:	f043 0301 	orr.w	r3, r3, #1
    1372:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1374:	4633      	mov	r3, r6
    1376:	3301      	adds	r3, #1
    1378:	9301      	str	r3, [sp, #4]
    137a:	e7b1      	b.n	12e0 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    137c:	2201      	movs	r2, #1
    137e:	e7a9      	b.n	12d4 <extract_conversion+0xe8>
		return sp;
    1380:	9801      	ldr	r0, [sp, #4]
    1382:	e7cf      	b.n	1324 <extract_conversion+0x138>
		conv->prec_star = true;
    1384:	7863      	ldrb	r3, [r4, #1]
    1386:	f043 0304 	orr.w	r3, r3, #4
    138a:	7063      	strb	r3, [r4, #1]
		return ++sp;
    138c:	4610      	mov	r0, r2
    138e:	3001      	adds	r0, #1
    1390:	9001      	str	r0, [sp, #4]
    1392:	e7c7      	b.n	1324 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1394:	2201      	movs	r2, #1
    1396:	e7bf      	b.n	1318 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1398:	1c42      	adds	r2, r0, #1
    139a:	7843      	ldrb	r3, [r0, #1]
    139c:	2b68      	cmp	r3, #104	; 0x68
    139e:	d006      	beq.n	13ae <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    13a0:	7863      	ldrb	r3, [r4, #1]
    13a2:	2102      	movs	r1, #2
    13a4:	f361 03c6 	bfi	r3, r1, #3, #4
    13a8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    13aa:	4610      	mov	r0, r2
    13ac:	e01e      	b.n	13ec <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    13ae:	7863      	ldrb	r3, [r4, #1]
    13b0:	2201      	movs	r2, #1
    13b2:	f362 03c6 	bfi	r3, r2, #3, #4
    13b6:	7063      	strb	r3, [r4, #1]
			++sp;
    13b8:	3002      	adds	r0, #2
    13ba:	e017      	b.n	13ec <extract_conversion+0x200>
		if (*++sp == 'l') {
    13bc:	1c42      	adds	r2, r0, #1
    13be:	7843      	ldrb	r3, [r0, #1]
    13c0:	2b6c      	cmp	r3, #108	; 0x6c
    13c2:	d006      	beq.n	13d2 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    13c4:	7863      	ldrb	r3, [r4, #1]
    13c6:	2103      	movs	r1, #3
    13c8:	f361 03c6 	bfi	r3, r1, #3, #4
    13cc:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    13ce:	4610      	mov	r0, r2
    13d0:	e00c      	b.n	13ec <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    13d2:	7863      	ldrb	r3, [r4, #1]
    13d4:	2204      	movs	r2, #4
    13d6:	f362 03c6 	bfi	r3, r2, #3, #4
    13da:	7063      	strb	r3, [r4, #1]
			++sp;
    13dc:	3002      	adds	r0, #2
    13de:	e005      	b.n	13ec <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    13e0:	7863      	ldrb	r3, [r4, #1]
    13e2:	2205      	movs	r2, #5
    13e4:	f362 03c6 	bfi	r3, r2, #3, #4
    13e8:	7063      	strb	r3, [r4, #1]
		++sp;
    13ea:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    13ec:	f810 3b01 	ldrb.w	r3, [r0], #1
    13f0:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    13f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    13f6:	2a37      	cmp	r2, #55	; 0x37
    13f8:	d87d      	bhi.n	14f6 <extract_conversion+0x30a>
    13fa:	e8df f002 	tbb	[pc, r2]
    13fe:	7c5e      	.short	0x7c5e
    1400:	5e5e7c7c 	.word	0x5e5e7c7c
    1404:	7c7c7c5e 	.word	0x7c7c7c5e
    1408:	7c7c7c7c 	.word	0x7c7c7c7c
    140c:	7c7c7c7c 	.word	0x7c7c7c7c
    1410:	7c7c7c7c 	.word	0x7c7c7c7c
    1414:	7c7c4f7c 	.word	0x7c7c4f7c
    1418:	7c7c7c7c 	.word	0x7c7c7c7c
    141c:	7c5e7c7c 	.word	0x7c5e7c7c
    1420:	5e5e3a4f 	.word	0x5e5e3a4f
    1424:	7c3a7c5e 	.word	0x7c3a7c5e
    1428:	657c7c7c 	.word	0x657c7c7c
    142c:	7c7c714f 	.word	0x7c7c714f
    1430:	7c4f7c71 	.word	0x7c4f7c71
    1434:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    1436:	7863      	ldrb	r3, [r4, #1]
    1438:	2206      	movs	r2, #6
    143a:	f362 03c6 	bfi	r3, r2, #3, #4
    143e:	7063      	strb	r3, [r4, #1]
		++sp;
    1440:	3001      	adds	r0, #1
		break;
    1442:	e7d3      	b.n	13ec <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    1444:	7863      	ldrb	r3, [r4, #1]
    1446:	2207      	movs	r2, #7
    1448:	f362 03c6 	bfi	r3, r2, #3, #4
    144c:	7063      	strb	r3, [r4, #1]
		++sp;
    144e:	3001      	adds	r0, #1
		break;
    1450:	e7cc      	b.n	13ec <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1452:	7863      	ldrb	r3, [r4, #1]
    1454:	2208      	movs	r2, #8
    1456:	f362 03c6 	bfi	r3, r2, #3, #4
    145a:	7063      	strb	r3, [r4, #1]
		++sp;
    145c:	3001      	adds	r0, #1
		conv->unsupported = true;
    145e:	7823      	ldrb	r3, [r4, #0]
    1460:	f043 0302 	orr.w	r3, r3, #2
    1464:	7023      	strb	r3, [r4, #0]
		break;
    1466:	e7c1      	b.n	13ec <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1468:	7863      	ldrb	r3, [r4, #1]
    146a:	f36f 03c6 	bfc	r3, #3, #4
    146e:	7063      	strb	r3, [r4, #1]
		break;
    1470:	e7bc      	b.n	13ec <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1472:	78a2      	ldrb	r2, [r4, #2]
    1474:	2101      	movs	r1, #1
    1476:	f361 0202 	bfi	r2, r1, #0, #3
    147a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    147c:	7862      	ldrb	r2, [r4, #1]
    147e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1482:	2a40      	cmp	r2, #64	; 0x40
    1484:	d010      	beq.n	14a8 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    1486:	2b63      	cmp	r3, #99	; 0x63
    1488:	d013      	beq.n	14b2 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    148a:	7823      	ldrb	r3, [r4, #0]
    148c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1490:	4315      	orrs	r5, r2
    1492:	f365 0341 	bfi	r3, r5, #1, #1
    1496:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1498:	b002      	add	sp, #8
    149a:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    149c:	78a2      	ldrb	r2, [r4, #2]
    149e:	2102      	movs	r1, #2
    14a0:	f361 0202 	bfi	r2, r1, #0, #3
    14a4:	70a2      	strb	r2, [r4, #2]
    14a6:	e7e9      	b.n	147c <extract_conversion+0x290>
			conv->invalid = true;
    14a8:	7821      	ldrb	r1, [r4, #0]
    14aa:	f041 0101 	orr.w	r1, r1, #1
    14ae:	7021      	strb	r1, [r4, #0]
    14b0:	e7e9      	b.n	1486 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    14b2:	1e15      	subs	r5, r2, #0
    14b4:	bf18      	it	ne
    14b6:	2501      	movne	r5, #1
    14b8:	e7e7      	b.n	148a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    14ba:	78a3      	ldrb	r3, [r4, #2]
    14bc:	2204      	movs	r2, #4
    14be:	f362 0302 	bfi	r3, r2, #0, #3
    14c2:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    14c4:	2501      	movs	r5, #1
			break;
    14c6:	e7e0      	b.n	148a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    14c8:	78a3      	ldrb	r3, [r4, #2]
    14ca:	2203      	movs	r2, #3
    14cc:	f362 0302 	bfi	r3, r2, #0, #3
    14d0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    14d2:	7863      	ldrb	r3, [r4, #1]
    14d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    14d8:	2b40      	cmp	r3, #64	; 0x40
    14da:	d1d6      	bne.n	148a <extract_conversion+0x29e>
			unsupported = true;
    14dc:	2501      	movs	r5, #1
    14de:	e7d4      	b.n	148a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    14e0:	78a3      	ldrb	r3, [r4, #2]
    14e2:	2203      	movs	r2, #3
    14e4:	f362 0302 	bfi	r3, r2, #0, #3
    14e8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    14ea:	7863      	ldrb	r3, [r4, #1]
    14ec:	f013 0f78 	tst.w	r3, #120	; 0x78
    14f0:	d0cb      	beq.n	148a <extract_conversion+0x29e>
			unsupported = true;
    14f2:	2501      	movs	r5, #1
    14f4:	e7c9      	b.n	148a <extract_conversion+0x29e>
		conv->invalid = true;
    14f6:	7823      	ldrb	r3, [r4, #0]
    14f8:	f043 0301 	orr.w	r3, r3, #1
    14fc:	7023      	strb	r3, [r4, #0]
		break;
    14fe:	e7c4      	b.n	148a <extract_conversion+0x29e>

00001500 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1504:	b091      	sub	sp, #68	; 0x44
    1506:	4606      	mov	r6, r0
    1508:	460d      	mov	r5, r1
    150a:	4691      	mov	r9, r2
    150c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    150e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1510:	f899 0000 	ldrb.w	r0, [r9]
    1514:	2800      	cmp	r0, #0
    1516:	f000 82d5 	beq.w	1ac4 <cbvprintf+0x5c4>
		if (*fp != '%') {
    151a:	2825      	cmp	r0, #37	; 0x25
    151c:	d008      	beq.n	1530 <cbvprintf+0x30>
			OUTC(*fp++);
    151e:	f109 0901 	add.w	r9, r9, #1
    1522:	4629      	mov	r1, r5
    1524:	47b0      	blx	r6
    1526:	2800      	cmp	r0, #0
    1528:	f2c0 82cd 	blt.w	1ac6 <cbvprintf+0x5c6>
    152c:	3401      	adds	r4, #1
			continue;
    152e:	e7ef      	b.n	1510 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1530:	2300      	movs	r3, #0
    1532:	9304      	str	r3, [sp, #16]
    1534:	9305      	str	r3, [sp, #20]
    1536:	9306      	str	r3, [sp, #24]
    1538:	9307      	str	r3, [sp, #28]
    153a:	9308      	str	r3, [sp, #32]
    153c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    153e:	4649      	mov	r1, r9
    1540:	a806      	add	r0, sp, #24
    1542:	f7ff fe53 	bl	11ec <extract_conversion>
    1546:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1548:	f89d 3019 	ldrb.w	r3, [sp, #25]
    154c:	f013 0f01 	tst.w	r3, #1
    1550:	f000 8097 	beq.w	1682 <cbvprintf+0x182>
			width = va_arg(ap, int);
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	1d1a      	adds	r2, r3, #4
    1558:	9203      	str	r2, [sp, #12]
    155a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    155c:	2f00      	cmp	r7, #0
    155e:	f2c0 8088 	blt.w	1672 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1562:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1566:	f013 0f04 	tst.w	r3, #4
    156a:	f000 809c 	beq.w	16a6 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    156e:	9b03      	ldr	r3, [sp, #12]
    1570:	1d1a      	adds	r2, r3, #4
    1572:	9203      	str	r2, [sp, #12]
    1574:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1578:	f1ba 0f00 	cmp.w	sl, #0
    157c:	f2c0 808a 	blt.w	1694 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1580:	2300      	movs	r3, #0
    1582:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1584:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1586:	f89d 301a 	ldrb.w	r3, [sp, #26]
    158a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    158e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1592:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1596:	2b01      	cmp	r3, #1
    1598:	f000 808e 	beq.w	16b8 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    159c:	2b02      	cmp	r3, #2
    159e:	f000 80d3 	beq.w	1748 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    15a2:	2b04      	cmp	r3, #4
    15a4:	f000 8124 	beq.w	17f0 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    15a8:	2b03      	cmp	r3, #3
    15aa:	f000 813b 	beq.w	1824 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    15ae:	f89d 8018 	ldrb.w	r8, [sp, #24]
    15b2:	f018 0b03 	ands.w	fp, r8, #3
    15b6:	f040 813b 	bne.w	1830 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    15ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
    15be:	3b25      	subs	r3, #37	; 0x25
    15c0:	2b53      	cmp	r3, #83	; 0x53
    15c2:	f200 81e6 	bhi.w	1992 <cbvprintf+0x492>
    15c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    15ca:	0140      	.short	0x0140
    15cc:	01e401e4 	.word	0x01e401e4
    15d0:	01e401e4 	.word	0x01e401e4
    15d4:	01e401e4 	.word	0x01e401e4
    15d8:	01e401e4 	.word	0x01e401e4
    15dc:	01e401e4 	.word	0x01e401e4
    15e0:	01e401e4 	.word	0x01e401e4
    15e4:	01e401e4 	.word	0x01e401e4
    15e8:	01e401e4 	.word	0x01e401e4
    15ec:	01e401e4 	.word	0x01e401e4
    15f0:	01e401e4 	.word	0x01e401e4
    15f4:	01e401e4 	.word	0x01e401e4
    15f8:	01e401e4 	.word	0x01e401e4
    15fc:	01e401e4 	.word	0x01e401e4
    1600:	01e401e4 	.word	0x01e401e4
    1604:	01e401e4 	.word	0x01e401e4
    1608:	01e401e4 	.word	0x01e401e4
    160c:	01e401e4 	.word	0x01e401e4
    1610:	01e401e4 	.word	0x01e401e4
    1614:	01e401e4 	.word	0x01e401e4
    1618:	01e401e4 	.word	0x01e401e4
    161c:	01e401e4 	.word	0x01e401e4
    1620:	01e401e4 	.word	0x01e401e4
    1624:	01e401e4 	.word	0x01e401e4
    1628:	01e401e4 	.word	0x01e401e4
    162c:	01e401e4 	.word	0x01e401e4
    1630:	01e40181 	.word	0x01e40181
    1634:	01e401e4 	.word	0x01e401e4
    1638:	01e401e4 	.word	0x01e401e4
    163c:	01e401e4 	.word	0x01e401e4
    1640:	01e401e4 	.word	0x01e401e4
    1644:	015e01e4 	.word	0x015e01e4
    1648:	01e40167 	.word	0x01e40167
    164c:	01e401e4 	.word	0x01e401e4
    1650:	016701e4 	.word	0x016701e4
    1654:	01e401e4 	.word	0x01e401e4
    1658:	01e401e4 	.word	0x01e401e4
    165c:	018101be 	.word	0x018101be
    1660:	01e401a2 	.word	0x01e401a2
    1664:	014d01e4 	.word	0x014d01e4
    1668:	018101e4 	.word	0x018101e4
    166c:	01e401e4 	.word	0x01e401e4
    1670:	0181      	.short	0x0181
				conv->flag_dash = true;
    1672:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1676:	f043 0304 	orr.w	r3, r3, #4
    167a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    167e:	427f      	negs	r7, r7
    1680:	e76f      	b.n	1562 <cbvprintf+0x62>
		} else if (conv->width_present) {
    1682:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1686:	2b00      	cmp	r3, #0
    1688:	db02      	blt.n	1690 <cbvprintf+0x190>
		int width = -1;
    168a:	f04f 37ff 	mov.w	r7, #4294967295
    168e:	e768      	b.n	1562 <cbvprintf+0x62>
			width = conv->width_value;
    1690:	9f07      	ldr	r7, [sp, #28]
    1692:	e766      	b.n	1562 <cbvprintf+0x62>
				conv->prec_present = false;
    1694:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1698:	f36f 0341 	bfc	r3, #1, #1
    169c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    16a0:	f04f 3aff 	mov.w	sl, #4294967295
    16a4:	e76c      	b.n	1580 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    16a6:	f013 0f02 	tst.w	r3, #2
    16aa:	d002      	beq.n	16b2 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    16ac:	f8dd a020 	ldr.w	sl, [sp, #32]
    16b0:	e766      	b.n	1580 <cbvprintf+0x80>
		int precision = -1;
    16b2:	f04f 3aff 	mov.w	sl, #4294967295
    16b6:	e763      	b.n	1580 <cbvprintf+0x80>
			switch (length_mod) {
    16b8:	1ecb      	subs	r3, r1, #3
    16ba:	2b04      	cmp	r3, #4
    16bc:	d804      	bhi.n	16c8 <cbvprintf+0x1c8>
    16be:	e8df f003 	tbb	[pc, r3]
    16c2:	1d0b      	.short	0x1d0b
    16c4:	3529      	.short	0x3529
    16c6:	35          	.byte	0x35
    16c7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    16c8:	9b03      	ldr	r3, [sp, #12]
    16ca:	1d1a      	adds	r2, r3, #4
    16cc:	9203      	str	r2, [sp, #12]
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	17da      	asrs	r2, r3, #31
    16d2:	9304      	str	r3, [sp, #16]
    16d4:	9205      	str	r2, [sp, #20]
				break;
    16d6:	e006      	b.n	16e6 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    16d8:	9b03      	ldr	r3, [sp, #12]
    16da:	1d1a      	adds	r2, r3, #4
    16dc:	9203      	str	r2, [sp, #12]
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	17da      	asrs	r2, r3, #31
    16e2:	9304      	str	r3, [sp, #16]
    16e4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    16e6:	2901      	cmp	r1, #1
    16e8:	d028      	beq.n	173c <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    16ea:	2902      	cmp	r1, #2
    16ec:	f47f af5f 	bne.w	15ae <cbvprintf+0xae>
				value->sint = (short)value->sint;
    16f0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    16f4:	17da      	asrs	r2, r3, #31
    16f6:	9304      	str	r3, [sp, #16]
    16f8:	9205      	str	r2, [sp, #20]
    16fa:	e758      	b.n	15ae <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    16fc:	9b03      	ldr	r3, [sp, #12]
    16fe:	3307      	adds	r3, #7
    1700:	f023 0307 	bic.w	r3, r3, #7
    1704:	f103 0208 	add.w	r2, r3, #8
    1708:	9203      	str	r2, [sp, #12]
    170a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    170e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1712:	e7e8      	b.n	16e6 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1714:	9b03      	ldr	r3, [sp, #12]
    1716:	3307      	adds	r3, #7
    1718:	f023 0307 	bic.w	r3, r3, #7
    171c:	f103 0208 	add.w	r2, r3, #8
    1720:	9203      	str	r2, [sp, #12]
    1722:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1726:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    172a:	e7dc      	b.n	16e6 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    172c:	9b03      	ldr	r3, [sp, #12]
    172e:	1d1a      	adds	r2, r3, #4
    1730:	9203      	str	r2, [sp, #12]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	17da      	asrs	r2, r3, #31
				value->sint =
    1736:	9304      	str	r3, [sp, #16]
    1738:	9205      	str	r2, [sp, #20]
				break;
    173a:	e7d4      	b.n	16e6 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    173c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1740:	9304      	str	r3, [sp, #16]
    1742:	2300      	movs	r3, #0
    1744:	9305      	str	r3, [sp, #20]
    1746:	e732      	b.n	15ae <cbvprintf+0xae>
			switch (length_mod) {
    1748:	1ecb      	subs	r3, r1, #3
    174a:	2b04      	cmp	r3, #4
    174c:	d804      	bhi.n	1758 <cbvprintf+0x258>
    174e:	e8df f003 	tbb	[pc, r3]
    1752:	1f0b      	.short	0x1f0b
    1754:	4135      	.short	0x4135
    1756:	41          	.byte	0x41
    1757:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1758:	9b03      	ldr	r3, [sp, #12]
    175a:	1d1a      	adds	r2, r3, #4
    175c:	9203      	str	r2, [sp, #12]
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	9304      	str	r3, [sp, #16]
    1762:	2300      	movs	r3, #0
    1764:	9305      	str	r3, [sp, #20]
				break;
    1766:	e01e      	b.n	17a6 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    1768:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    176c:	2b63      	cmp	r3, #99	; 0x63
    176e:	d007      	beq.n	1780 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1770:	9b03      	ldr	r3, [sp, #12]
    1772:	1d1a      	adds	r2, r3, #4
    1774:	9203      	str	r2, [sp, #12]
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	9304      	str	r3, [sp, #16]
    177a:	2300      	movs	r3, #0
    177c:	9305      	str	r3, [sp, #20]
    177e:	e012      	b.n	17a6 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1780:	9b03      	ldr	r3, [sp, #12]
    1782:	1d1a      	adds	r2, r3, #4
    1784:	9203      	str	r2, [sp, #12]
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	9304      	str	r3, [sp, #16]
    178a:	2300      	movs	r3, #0
    178c:	9305      	str	r3, [sp, #20]
    178e:	e00a      	b.n	17a6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1790:	9b03      	ldr	r3, [sp, #12]
    1792:	3307      	adds	r3, #7
    1794:	f023 0307 	bic.w	r3, r3, #7
    1798:	f103 0208 	add.w	r2, r3, #8
    179c:	9203      	str	r2, [sp, #12]
    179e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    17a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    17a6:	2901      	cmp	r1, #1
    17a8:	d01c      	beq.n	17e4 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    17aa:	2902      	cmp	r1, #2
    17ac:	f47f aeff 	bne.w	15ae <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    17b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    17b4:	9304      	str	r3, [sp, #16]
    17b6:	2300      	movs	r3, #0
    17b8:	9305      	str	r3, [sp, #20]
    17ba:	e6f8      	b.n	15ae <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	3307      	adds	r3, #7
    17c0:	f023 0307 	bic.w	r3, r3, #7
    17c4:	f103 0208 	add.w	r2, r3, #8
    17c8:	9203      	str	r2, [sp, #12]
    17ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    17ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    17d2:	e7e8      	b.n	17a6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    17d4:	9b03      	ldr	r3, [sp, #12]
    17d6:	1d1a      	adds	r2, r3, #4
    17d8:	9203      	str	r2, [sp, #12]
    17da:	681b      	ldr	r3, [r3, #0]
				value->uint =
    17dc:	9304      	str	r3, [sp, #16]
    17de:	2300      	movs	r3, #0
    17e0:	9305      	str	r3, [sp, #20]
				break;
    17e2:	e7e0      	b.n	17a6 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    17e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    17e8:	9304      	str	r3, [sp, #16]
    17ea:	2300      	movs	r3, #0
    17ec:	9305      	str	r3, [sp, #20]
    17ee:	e6de      	b.n	15ae <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    17f0:	2908      	cmp	r1, #8
    17f2:	d00b      	beq.n	180c <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    17f4:	9b03      	ldr	r3, [sp, #12]
    17f6:	3307      	adds	r3, #7
    17f8:	f023 0307 	bic.w	r3, r3, #7
    17fc:	f103 0208 	add.w	r2, r3, #8
    1800:	9203      	str	r2, [sp, #12]
    1802:	e9d3 2300 	ldrd	r2, r3, [r3]
    1806:	e9cd 2304 	strd	r2, r3, [sp, #16]
    180a:	e6d0      	b.n	15ae <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    180c:	9b03      	ldr	r3, [sp, #12]
    180e:	3307      	adds	r3, #7
    1810:	f023 0307 	bic.w	r3, r3, #7
    1814:	f103 0208 	add.w	r2, r3, #8
    1818:	9203      	str	r2, [sp, #12]
    181a:	e9d3 2300 	ldrd	r2, r3, [r3]
    181e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1822:	e6c4      	b.n	15ae <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    1824:	9b03      	ldr	r3, [sp, #12]
    1826:	1d1a      	adds	r2, r3, #4
    1828:	9203      	str	r2, [sp, #12]
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	9304      	str	r3, [sp, #16]
    182e:	e6be      	b.n	15ae <cbvprintf+0xae>
			OUTS(sp, fp);
    1830:	9f02      	ldr	r7, [sp, #8]
    1832:	463b      	mov	r3, r7
    1834:	464a      	mov	r2, r9
    1836:	4629      	mov	r1, r5
    1838:	4630      	mov	r0, r6
    183a:	f007 fd85 	bl	9348 <outs>
    183e:	2800      	cmp	r0, #0
    1840:	f2c0 8141 	blt.w	1ac6 <cbvprintf+0x5c6>
    1844:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1846:	46b9      	mov	r9, r7
			continue;
    1848:	e662      	b.n	1510 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    184a:	4629      	mov	r1, r5
    184c:	2025      	movs	r0, #37	; 0x25
    184e:	47b0      	blx	r6
    1850:	2800      	cmp	r0, #0
    1852:	f2c0 8138 	blt.w	1ac6 <cbvprintf+0x5c6>
    1856:	3401      	adds	r4, #1
		char sign = 0;
    1858:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    185a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    185e:	f04f 0900 	mov.w	r9, #0
			break;
    1862:	e09b      	b.n	199c <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    1864:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1868:	f1ba 0f00 	cmp.w	sl, #0
    186c:	db07      	blt.n	187e <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    186e:	4651      	mov	r1, sl
    1870:	4648      	mov	r0, r9
    1872:	f007 fe6b 	bl	954c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1876:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    187a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    187c:	e08e      	b.n	199c <cbvprintf+0x49c>
				len = strlen(bps);
    187e:	4648      	mov	r0, r9
    1880:	f007 fe5b 	bl	953a <strlen>
    1884:	e7f7      	b.n	1876 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1886:	9b04      	ldr	r3, [sp, #16]
    1888:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    188c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    188e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1892:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1896:	e081      	b.n	199c <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1898:	f018 0f08 	tst.w	r8, #8
    189c:	d105      	bne.n	18aa <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    189e:	f018 0810 	ands.w	r8, r8, #16
    18a2:	d004      	beq.n	18ae <cbvprintf+0x3ae>
				sign = ' ';
    18a4:	f04f 0820 	mov.w	r8, #32
    18a8:	e001      	b.n	18ae <cbvprintf+0x3ae>
				sign = '+';
    18aa:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    18ae:	9a04      	ldr	r2, [sp, #16]
    18b0:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    18b2:	2b00      	cmp	r3, #0
    18b4:	db02      	blt.n	18bc <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    18b6:	9204      	str	r2, [sp, #16]
    18b8:	9305      	str	r3, [sp, #20]
    18ba:	e008      	b.n	18ce <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    18bc:	4252      	negs	r2, r2
    18be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    18c2:	9204      	str	r2, [sp, #16]
    18c4:	9305      	str	r3, [sp, #20]
				sign = '-';
    18c6:	f04f 082d 	mov.w	r8, #45	; 0x2d
    18ca:	e000      	b.n	18ce <cbvprintf+0x3ce>
		switch (conv->specifier) {
    18cc:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    18ce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    18d2:	9300      	str	r3, [sp, #0]
    18d4:	ab0a      	add	r3, sp, #40	; 0x28
    18d6:	aa06      	add	r2, sp, #24
    18d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    18dc:	f007 fcca 	bl	9274 <encode_uint>
    18e0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    18e2:	f1ba 0f00 	cmp.w	sl, #0
    18e6:	f2c0 8088 	blt.w	19fa <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    18ea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    18ee:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    18f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    18f6:	f36f 1286 	bfc	r2, #6, #1
    18fa:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    18fe:	459a      	cmp	sl, r3
    1900:	d97e      	bls.n	1a00 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1902:	ebaa 0303 	sub.w	r3, sl, r3
    1906:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1908:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    190c:	e046      	b.n	199c <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    190e:	9804      	ldr	r0, [sp, #16]
    1910:	b928      	cbnz	r0, 191e <cbvprintf+0x41e>
		char sign = 0;
    1912:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1914:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1acc <cbvprintf+0x5cc>
			bps = "(nil)";
    1918:	f1aa 0905 	sub.w	r9, sl, #5
    191c:	e03e      	b.n	199c <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    191e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1922:	9300      	str	r3, [sp, #0]
    1924:	ab0a      	add	r3, sp, #40	; 0x28
    1926:	aa06      	add	r2, sp, #24
    1928:	2100      	movs	r1, #0
    192a:	f007 fca3 	bl	9274 <encode_uint>
    192e:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1930:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1934:	f043 0310 	orr.w	r3, r3, #16
    1938:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    193c:	2378      	movs	r3, #120	; 0x78
    193e:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1942:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1944:	e7cd      	b.n	18e2 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1946:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1948:	f89d 3019 	ldrb.w	r3, [sp, #25]
    194c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1950:	2b07      	cmp	r3, #7
    1952:	d806      	bhi.n	1962 <cbvprintf+0x462>
    1954:	e8df f003 	tbb	[pc, r3]
    1958:	0f0d0b04 	.word	0x0f0d0b04
    195c:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1960:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1962:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1964:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1968:	f04f 0900 	mov.w	r9, #0
}
    196c:	e016      	b.n	199c <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    196e:	7014      	strb	r4, [r2, #0]
		break;
    1970:	e7f7      	b.n	1962 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1972:	8014      	strh	r4, [r2, #0]
		break;
    1974:	e7f5      	b.n	1962 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1976:	6014      	str	r4, [r2, #0]
		break;
    1978:	e7f3      	b.n	1962 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    197a:	17e3      	asrs	r3, r4, #31
    197c:	6014      	str	r4, [r2, #0]
    197e:	6053      	str	r3, [r2, #4]
		break;
    1980:	e7ef      	b.n	1962 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1982:	17e3      	asrs	r3, r4, #31
    1984:	6014      	str	r4, [r2, #0]
    1986:	6053      	str	r3, [r2, #4]
		break;
    1988:	e7eb      	b.n	1962 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    198a:	6014      	str	r4, [r2, #0]
		break;
    198c:	e7e9      	b.n	1962 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    198e:	6014      	str	r4, [r2, #0]
		break;
    1990:	e7e7      	b.n	1962 <cbvprintf+0x462>
		switch (conv->specifier) {
    1992:	46d8      	mov	r8, fp
    1994:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1998:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    199c:	f1b9 0f00 	cmp.w	r9, #0
    19a0:	f000 808d 	beq.w	1abe <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    19a4:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    19a8:	f1b8 0f00 	cmp.w	r8, #0
    19ac:	d000      	beq.n	19b0 <cbvprintf+0x4b0>
			nj_len += 1U;
    19ae:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    19b0:	f89d 201a 	ldrb.w	r2, [sp, #26]
    19b4:	f012 0f10 	tst.w	r2, #16
    19b8:	d025      	beq.n	1a06 <cbvprintf+0x506>
			nj_len += 2U;
    19ba:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    19bc:	9907      	ldr	r1, [sp, #28]
    19be:	440b      	add	r3, r1
		if (conv->pad_fp) {
    19c0:	f012 0f40 	tst.w	r2, #64	; 0x40
    19c4:	d001      	beq.n	19ca <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    19c6:	9a08      	ldr	r2, [sp, #32]
    19c8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    19ca:	2f00      	cmp	r7, #0
    19cc:	dd31      	ble.n	1a32 <cbvprintf+0x532>
			width -= (int)nj_len;
    19ce:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    19d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    19d4:	f013 0f04 	tst.w	r3, #4
    19d8:	d12b      	bne.n	1a32 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    19da:	f013 0f40 	tst.w	r3, #64	; 0x40
    19de:	d017      	beq.n	1a10 <cbvprintf+0x510>
					if (sign != 0) {
    19e0:	f1b8 0f00 	cmp.w	r8, #0
    19e4:	d017      	beq.n	1a16 <cbvprintf+0x516>
						OUTC(sign);
    19e6:	4629      	mov	r1, r5
    19e8:	4640      	mov	r0, r8
    19ea:	47b0      	blx	r6
    19ec:	2800      	cmp	r0, #0
    19ee:	db6a      	blt.n	1ac6 <cbvprintf+0x5c6>
    19f0:	3401      	adds	r4, #1
						sign = 0;
    19f2:	46d8      	mov	r8, fp
					}
					pad = '0';
    19f4:	f04f 0b30 	mov.w	fp, #48	; 0x30
    19f8:	e00f      	b.n	1a1a <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    19fa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    19fe:	e7cd      	b.n	199c <cbvprintf+0x49c>
    1a00:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1a04:	e7ca      	b.n	199c <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1a06:	f012 0f08 	tst.w	r2, #8
    1a0a:	d0d7      	beq.n	19bc <cbvprintf+0x4bc>
			nj_len += 1U;
    1a0c:	3301      	adds	r3, #1
    1a0e:	e7d5      	b.n	19bc <cbvprintf+0x4bc>
				char pad = ' ';
    1a10:	f04f 0b20 	mov.w	fp, #32
    1a14:	e001      	b.n	1a1a <cbvprintf+0x51a>
					pad = '0';
    1a16:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1a1a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1a1c:	1e5f      	subs	r7, r3, #1
    1a1e:	2b00      	cmp	r3, #0
    1a20:	dd07      	ble.n	1a32 <cbvprintf+0x532>
					OUTC(pad);
    1a22:	4629      	mov	r1, r5
    1a24:	4658      	mov	r0, fp
    1a26:	47b0      	blx	r6
    1a28:	2800      	cmp	r0, #0
    1a2a:	db4c      	blt.n	1ac6 <cbvprintf+0x5c6>
    1a2c:	3401      	adds	r4, #1
				while (width-- > 0) {
    1a2e:	463b      	mov	r3, r7
    1a30:	e7f4      	b.n	1a1c <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1a32:	f1b8 0f00 	cmp.w	r8, #0
    1a36:	d005      	beq.n	1a44 <cbvprintf+0x544>
			OUTC(sign);
    1a38:	4629      	mov	r1, r5
    1a3a:	4640      	mov	r0, r8
    1a3c:	47b0      	blx	r6
    1a3e:	2800      	cmp	r0, #0
    1a40:	db41      	blt.n	1ac6 <cbvprintf+0x5c6>
    1a42:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1a44:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1a48:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1a50:	4313      	orrs	r3, r2
    1a52:	d005      	beq.n	1a60 <cbvprintf+0x560>
				OUTC('0');
    1a54:	4629      	mov	r1, r5
    1a56:	2030      	movs	r0, #48	; 0x30
    1a58:	47b0      	blx	r6
    1a5a:	2800      	cmp	r0, #0
    1a5c:	db33      	blt.n	1ac6 <cbvprintf+0x5c6>
    1a5e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1a60:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1a64:	f013 0f10 	tst.w	r3, #16
    1a68:	d006      	beq.n	1a78 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1a6a:	4629      	mov	r1, r5
    1a6c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1a70:	47b0      	blx	r6
    1a72:	2800      	cmp	r0, #0
    1a74:	db27      	blt.n	1ac6 <cbvprintf+0x5c6>
    1a76:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1a78:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1a7a:	f103 38ff 	add.w	r8, r3, #4294967295
    1a7e:	2b00      	cmp	r3, #0
    1a80:	dd07      	ble.n	1a92 <cbvprintf+0x592>
				OUTC('0');
    1a82:	4629      	mov	r1, r5
    1a84:	2030      	movs	r0, #48	; 0x30
    1a86:	47b0      	blx	r6
    1a88:	2800      	cmp	r0, #0
    1a8a:	db1c      	blt.n	1ac6 <cbvprintf+0x5c6>
    1a8c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1a8e:	4643      	mov	r3, r8
    1a90:	e7f3      	b.n	1a7a <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1a92:	4653      	mov	r3, sl
    1a94:	464a      	mov	r2, r9
    1a96:	4629      	mov	r1, r5
    1a98:	4630      	mov	r0, r6
    1a9a:	f007 fc55 	bl	9348 <outs>
    1a9e:	2800      	cmp	r0, #0
    1aa0:	db11      	blt.n	1ac6 <cbvprintf+0x5c6>
    1aa2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1aa4:	2f00      	cmp	r7, #0
    1aa6:	dd07      	ble.n	1ab8 <cbvprintf+0x5b8>
			OUTC(' ');
    1aa8:	4629      	mov	r1, r5
    1aaa:	2020      	movs	r0, #32
    1aac:	47b0      	blx	r6
    1aae:	2800      	cmp	r0, #0
    1ab0:	db09      	blt.n	1ac6 <cbvprintf+0x5c6>
    1ab2:	3401      	adds	r4, #1
			--width;
    1ab4:	3f01      	subs	r7, #1
    1ab6:	e7f5      	b.n	1aa4 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1ab8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1abc:	e528      	b.n	1510 <cbvprintf+0x10>
    1abe:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1ac2:	e525      	b.n	1510 <cbvprintf+0x10>
		}
	}

	return count;
    1ac4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1ac6:	b011      	add	sp, #68	; 0x44
    1ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1acc:	0000ac49 	.word	0x0000ac49

00001ad0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1ad0:	b508      	push	{r3, lr}
	__asm__ volatile(
    1ad2:	f04f 0220 	mov.w	r2, #32
    1ad6:	f3ef 8311 	mrs	r3, BASEPRI
    1ada:	f382 8812 	msr	BASEPRI_MAX, r2
    1ade:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1ae2:	f000 ffa5 	bl	2a30 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1ae6:	4803      	ldr	r0, [pc, #12]	; (1af4 <sys_reboot+0x24>)
    1ae8:	f007 f9c1 	bl	8e6e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1aec:	f000 fad2 	bl	2094 <arch_cpu_idle>
    1af0:	e7fc      	b.n	1aec <sys_reboot+0x1c>
    1af2:	bf00      	nop
    1af4:	0000ac4c 	.word	0x0000ac4c

00001af8 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    1af8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    1afa:	4b40      	ldr	r3, [pc, #256]	; (1bfc <pm_system_resume+0x104>)
    1afc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1afe:	f005 031f 	and.w	r3, r5, #31
    1b02:	2201      	movs	r2, #1
    1b04:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1b06:	0969      	lsrs	r1, r5, #5
    1b08:	4b3d      	ldr	r3, [pc, #244]	; (1c00 <pm_system_resume+0x108>)
    1b0a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1b0e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b10:	f3bf 8f5b 	dmb	ish
    1b14:	e853 1f00 	ldrex	r1, [r3]
    1b18:	ea01 0400 	and.w	r4, r1, r0
    1b1c:	e843 4600 	strex	r6, r4, [r3]
    1b20:	2e00      	cmp	r6, #0
    1b22:	d1f7      	bne.n	1b14 <pm_system_resume+0x1c>
    1b24:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1b28:	420a      	tst	r2, r1
    1b2a:	d100      	bne.n	1b2e <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1b2c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    1b2e:	4a35      	ldr	r2, [pc, #212]	; (1c04 <pm_system_resume+0x10c>)
    1b30:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1b34:	0098      	lsls	r0, r3, #2
    1b36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    1b3a:	4933      	ldr	r1, [pc, #204]	; (1c08 <pm_system_resume+0x110>)
    1b3c:	b1a9      	cbz	r1, 1b6a <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1b3e:	7859      	ldrb	r1, [r3, #1]
    1b40:	5c10      	ldrb	r0, [r2, r0]
    1b42:	f007 fd79 	bl	9638 <pm_state_exit_post_ops>
    1b46:	f04f 0320 	mov.w	r3, #32
    1b4a:	f3ef 8611 	mrs	r6, BASEPRI
    1b4e:	f383 8812 	msr	BASEPRI_MAX, r3
    1b52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b56:	482d      	ldr	r0, [pc, #180]	; (1c0c <pm_system_resume+0x114>)
    1b58:	f004 f9b0 	bl	5ebc <z_spin_lock_valid>
    1b5c:	b158      	cbz	r0, 1b76 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    1b5e:	482b      	ldr	r0, [pc, #172]	; (1c0c <pm_system_resume+0x114>)
    1b60:	f004 f9cc 	bl	5efc <z_spin_lock_set_owner>
	return list->head;
    1b64:	4b2a      	ldr	r3, [pc, #168]	; (1c10 <pm_system_resume+0x118>)
    1b66:	681c      	ldr	r4, [r3, #0]
    1b68:	e020      	b.n	1bac <pm_system_resume+0xb4>
	__asm__ volatile(
    1b6a:	2300      	movs	r3, #0
    1b6c:	f383 8811 	msr	BASEPRI, r3
    1b70:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1b74:	e7e7      	b.n	1b46 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b76:	4c27      	ldr	r4, [pc, #156]	; (1c14 <pm_system_resume+0x11c>)
    1b78:	238e      	movs	r3, #142	; 0x8e
    1b7a:	4622      	mov	r2, r4
    1b7c:	4926      	ldr	r1, [pc, #152]	; (1c18 <pm_system_resume+0x120>)
    1b7e:	4827      	ldr	r0, [pc, #156]	; (1c1c <pm_system_resume+0x124>)
    1b80:	f007 fc03 	bl	938a <assert_print>
    1b84:	4921      	ldr	r1, [pc, #132]	; (1c0c <pm_system_resume+0x114>)
    1b86:	4826      	ldr	r0, [pc, #152]	; (1c20 <pm_system_resume+0x128>)
    1b88:	f007 fbff 	bl	938a <assert_print>
    1b8c:	218e      	movs	r1, #142	; 0x8e
    1b8e:	4620      	mov	r0, r4
    1b90:	f007 fbf4 	bl	937c <assert_post_action>
    1b94:	e7e3      	b.n	1b5e <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1b96:	4b19      	ldr	r3, [pc, #100]	; (1bfc <pm_system_resume+0x104>)
    1b98:	7d1b      	ldrb	r3, [r3, #20]
    1b9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b9e:	4919      	ldr	r1, [pc, #100]	; (1c04 <pm_system_resume+0x10c>)
    1ba0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1ba4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1ba6:	b10c      	cbz	r4, 1bac <pm_system_resume+0xb4>
	return node->next;
    1ba8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1baa:	b124      	cbz	r4, 1bb6 <pm_system_resume+0xbe>
    1bac:	b11c      	cbz	r4, 1bb6 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    1bae:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    1bb0:	2a00      	cmp	r2, #0
    1bb2:	d1f0      	bne.n	1b96 <pm_system_resume+0x9e>
    1bb4:	e7f7      	b.n	1ba6 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1bb6:	4815      	ldr	r0, [pc, #84]	; (1c0c <pm_system_resume+0x114>)
    1bb8:	f004 f990 	bl	5edc <z_spin_unlock_valid>
    1bbc:	b170      	cbz	r0, 1bdc <pm_system_resume+0xe4>
	__asm__ volatile(
    1bbe:	f386 8811 	msr	BASEPRI, r6
    1bc2:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1bc6:	4a0f      	ldr	r2, [pc, #60]	; (1c04 <pm_system_resume+0x10c>)
    1bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1bcc:	00a9      	lsls	r1, r5, #2
    1bce:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1bd2:	2300      	movs	r3, #0
    1bd4:	5053      	str	r3, [r2, r1]
    1bd6:	606b      	str	r3, [r5, #4]
    1bd8:	60ab      	str	r3, [r5, #8]
}
    1bda:	e7a7      	b.n	1b2c <pm_system_resume+0x34>
    1bdc:	4c0d      	ldr	r4, [pc, #52]	; (1c14 <pm_system_resume+0x11c>)
    1bde:	23b9      	movs	r3, #185	; 0xb9
    1be0:	4622      	mov	r2, r4
    1be2:	4910      	ldr	r1, [pc, #64]	; (1c24 <pm_system_resume+0x12c>)
    1be4:	480d      	ldr	r0, [pc, #52]	; (1c1c <pm_system_resume+0x124>)
    1be6:	f007 fbd0 	bl	938a <assert_print>
    1bea:	4908      	ldr	r1, [pc, #32]	; (1c0c <pm_system_resume+0x114>)
    1bec:	480e      	ldr	r0, [pc, #56]	; (1c28 <pm_system_resume+0x130>)
    1bee:	f007 fbcc 	bl	938a <assert_print>
    1bf2:	21b9      	movs	r1, #185	; 0xb9
    1bf4:	4620      	mov	r0, r4
    1bf6:	f007 fbc1 	bl	937c <assert_post_action>
    1bfa:	e7e0      	b.n	1bbe <pm_system_resume+0xc6>
    1bfc:	20001278 	.word	0x20001278
    1c00:	200007d4 	.word	0x200007d4
    1c04:	200007c4 	.word	0x200007c4
    1c08:	00009639 	.word	0x00009639
    1c0c:	200007b8 	.word	0x200007b8
    1c10:	200007bc 	.word	0x200007bc
    1c14:	0000a9dc 	.word	0x0000a9dc
    1c18:	0000aa3c 	.word	0x0000aa3c
    1c1c:	0000a4cc 	.word	0x0000a4cc
    1c20:	0000aa54 	.word	0x0000aa54
    1c24:	0000aa0c 	.word	0x0000aa0c
    1c28:	0000aa24 	.word	0x0000aa24

00001c2c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1c2c:	b570      	push	{r4, r5, r6, lr}
    1c2e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1c30:	4b6d      	ldr	r3, [pc, #436]	; (1de8 <pm_system_suspend+0x1bc>)
    1c32:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1c34:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c36:	f3bf 8f5b 	dmb	ish
    1c3a:	4b6c      	ldr	r3, [pc, #432]	; (1dec <pm_system_suspend+0x1c0>)
    1c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1c40:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1c44:	f005 021f 	and.w	r2, r5, #31
    1c48:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1c4a:	f013 0f01 	tst.w	r3, #1
    1c4e:	d01d      	beq.n	1c8c <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1c50:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1c54:	4a66      	ldr	r2, [pc, #408]	; (1df0 <pm_system_suspend+0x1c4>)
    1c56:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1c5a:	b333      	cbz	r3, 1caa <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1c5c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1c60:	d139      	bne.n	1cd6 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1c62:	f005 f827 	bl	6cb4 <k_sched_lock>
	__asm__ volatile(
    1c66:	f04f 0320 	mov.w	r3, #32
    1c6a:	f3ef 8611 	mrs	r6, BASEPRI
    1c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    1c72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c76:	485f      	ldr	r0, [pc, #380]	; (1df4 <pm_system_suspend+0x1c8>)
    1c78:	f004 f920 	bl	5ebc <z_spin_lock_valid>
    1c7c:	2800      	cmp	r0, #0
    1c7e:	d040      	beq.n	1d02 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    1c80:	485c      	ldr	r0, [pc, #368]	; (1df4 <pm_system_suspend+0x1c8>)
    1c82:	f004 f93b 	bl	5efc <z_spin_lock_set_owner>
	return list->head;
    1c86:	4b5c      	ldr	r3, [pc, #368]	; (1df8 <pm_system_suspend+0x1cc>)
    1c88:	681c      	ldr	r4, [r3, #0]
    1c8a:	e055      	b.n	1d38 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    1c8c:	4601      	mov	r1, r0
    1c8e:	4628      	mov	r0, r5
    1c90:	f000 f8d6 	bl	1e40 <pm_policy_next_state>
		if (info != NULL) {
    1c94:	2800      	cmp	r0, #0
    1c96:	d0db      	beq.n	1c50 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    1c98:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1c9c:	4a54      	ldr	r2, [pc, #336]	; (1df0 <pm_system_suspend+0x1c4>)
    1c9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ca2:	c807      	ldmia	r0, {r0, r1, r2}
    1ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1ca8:	e7d2      	b.n	1c50 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1caa:	f005 021f 	and.w	r2, r5, #31
    1cae:	2301      	movs	r3, #1
    1cb0:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1cb2:	096d      	lsrs	r5, r5, #5
    1cb4:	4a4d      	ldr	r2, [pc, #308]	; (1dec <pm_system_suspend+0x1c0>)
    1cb6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1cba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cbc:	f3bf 8f5b 	dmb	ish
    1cc0:	e855 2f00 	ldrex	r2, [r5]
    1cc4:	401a      	ands	r2, r3
    1cc6:	e845 2100 	strex	r1, r2, [r5]
    1cca:	2900      	cmp	r1, #0
    1ccc:	d1f8      	bne.n	1cc0 <pm_system_suspend+0x94>
    1cce:	f3bf 8f5b 	dmb	ish
		ret = false;
    1cd2:	2000      	movs	r0, #0
		goto end;
    1cd4:	e077      	b.n	1dc6 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    1cd6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1cda:	4a45      	ldr	r2, [pc, #276]	; (1df0 <pm_system_suspend+0x1c4>)
    1cdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ce0:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    1ce2:	0c41      	lsrs	r1, r0, #17
    1ce4:	03c0      	lsls	r0, r0, #15
    1ce6:	4b45      	ldr	r3, [pc, #276]	; (1dfc <pm_system_suspend+0x1d0>)
    1ce8:	18c0      	adds	r0, r0, r3
    1cea:	4a45      	ldr	r2, [pc, #276]	; (1e00 <pm_system_suspend+0x1d4>)
    1cec:	f04f 0300 	mov.w	r3, #0
    1cf0:	f141 0100 	adc.w	r1, r1, #0
    1cf4:	f7fe fa04 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1cf8:	2101      	movs	r1, #1
    1cfa:	1a20      	subs	r0, r4, r0
    1cfc:	f006 fb68 	bl	83d0 <z_set_timeout_expiry>
    1d00:	e7af      	b.n	1c62 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d02:	4c40      	ldr	r4, [pc, #256]	; (1e04 <pm_system_suspend+0x1d8>)
    1d04:	238e      	movs	r3, #142	; 0x8e
    1d06:	4622      	mov	r2, r4
    1d08:	493f      	ldr	r1, [pc, #252]	; (1e08 <pm_system_suspend+0x1dc>)
    1d0a:	4840      	ldr	r0, [pc, #256]	; (1e0c <pm_system_suspend+0x1e0>)
    1d0c:	f007 fb3d 	bl	938a <assert_print>
    1d10:	4938      	ldr	r1, [pc, #224]	; (1df4 <pm_system_suspend+0x1c8>)
    1d12:	483f      	ldr	r0, [pc, #252]	; (1e10 <pm_system_suspend+0x1e4>)
    1d14:	f007 fb39 	bl	938a <assert_print>
    1d18:	218e      	movs	r1, #142	; 0x8e
    1d1a:	4620      	mov	r0, r4
    1d1c:	f007 fb2e 	bl	937c <assert_post_action>
    1d20:	e7ae      	b.n	1c80 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d22:	4b31      	ldr	r3, [pc, #196]	; (1de8 <pm_system_suspend+0x1bc>)
    1d24:	7d1b      	ldrb	r3, [r3, #20]
    1d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d2a:	4931      	ldr	r1, [pc, #196]	; (1df0 <pm_system_suspend+0x1c4>)
    1d2c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1d30:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1d32:	b10c      	cbz	r4, 1d38 <pm_system_suspend+0x10c>
	return node->next;
    1d34:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d36:	b124      	cbz	r4, 1d42 <pm_system_suspend+0x116>
    1d38:	b11c      	cbz	r4, 1d42 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    1d3a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    1d3c:	2a00      	cmp	r2, #0
    1d3e:	d1f0      	bne.n	1d22 <pm_system_suspend+0xf6>
    1d40:	e7f7      	b.n	1d32 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1d42:	482c      	ldr	r0, [pc, #176]	; (1df4 <pm_system_suspend+0x1c8>)
    1d44:	f004 f8ca 	bl	5edc <z_spin_unlock_valid>
    1d48:	2800      	cmp	r0, #0
    1d4a:	d03d      	beq.n	1dc8 <pm_system_suspend+0x19c>
	__asm__ volatile(
    1d4c:	f386 8811 	msr	BASEPRI, r6
    1d50:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1d54:	f005 031f 	and.w	r3, r5, #31
    1d58:	2101      	movs	r1, #1
    1d5a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1d5c:	096b      	lsrs	r3, r5, #5
    1d5e:	4a2d      	ldr	r2, [pc, #180]	; (1e14 <pm_system_suspend+0x1e8>)
    1d60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d64:	f3bf 8f5b 	dmb	ish
    1d68:	e853 2f00 	ldrex	r2, [r3]
    1d6c:	430a      	orrs	r2, r1
    1d6e:	e843 2000 	strex	r0, r2, [r3]
    1d72:	2800      	cmp	r0, #0
    1d74:	d1f8      	bne.n	1d68 <pm_system_suspend+0x13c>
    1d76:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1d7a:	4b27      	ldr	r3, [pc, #156]	; (1e18 <pm_system_suspend+0x1ec>)
    1d7c:	b14b      	cbz	r3, 1d92 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    1d7e:	4b1c      	ldr	r3, [pc, #112]	; (1df0 <pm_system_suspend+0x1c4>)
    1d80:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1d84:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1d88:	7849      	ldrb	r1, [r1, #1]
    1d8a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1d8e:	f007 fc47 	bl	9620 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1d92:	f7ff feb1 	bl	1af8 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    1d96:	f005 031f 	and.w	r3, r5, #31
    1d9a:	2401      	movs	r4, #1
    1d9c:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1da0:	096d      	lsrs	r5, r5, #5
    1da2:	4a12      	ldr	r2, [pc, #72]	; (1dec <pm_system_suspend+0x1c0>)
    1da4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1da8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1daa:	f3bf 8f5b 	dmb	ish
    1dae:	e855 2f00 	ldrex	r2, [r5]
    1db2:	401a      	ands	r2, r3
    1db4:	e845 2100 	strex	r1, r2, [r5]
    1db8:	2900      	cmp	r1, #0
    1dba:	d1f8      	bne.n	1dae <pm_system_suspend+0x182>
    1dbc:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    1dc0:	f005 fd62 	bl	7888 <k_sched_unlock>
	bool ret = true;
    1dc4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1dc6:	bd70      	pop	{r4, r5, r6, pc}
    1dc8:	4c0e      	ldr	r4, [pc, #56]	; (1e04 <pm_system_suspend+0x1d8>)
    1dca:	23b9      	movs	r3, #185	; 0xb9
    1dcc:	4622      	mov	r2, r4
    1dce:	4913      	ldr	r1, [pc, #76]	; (1e1c <pm_system_suspend+0x1f0>)
    1dd0:	480e      	ldr	r0, [pc, #56]	; (1e0c <pm_system_suspend+0x1e0>)
    1dd2:	f007 fada 	bl	938a <assert_print>
    1dd6:	4907      	ldr	r1, [pc, #28]	; (1df4 <pm_system_suspend+0x1c8>)
    1dd8:	4811      	ldr	r0, [pc, #68]	; (1e20 <pm_system_suspend+0x1f4>)
    1dda:	f007 fad6 	bl	938a <assert_print>
    1dde:	21b9      	movs	r1, #185	; 0xb9
    1de0:	4620      	mov	r0, r4
    1de2:	f007 facb 	bl	937c <assert_post_action>
    1de6:	e7b1      	b.n	1d4c <pm_system_suspend+0x120>
    1de8:	20001278 	.word	0x20001278
    1dec:	200007d0 	.word	0x200007d0
    1df0:	200007c4 	.word	0x200007c4
    1df4:	200007b8 	.word	0x200007b8
    1df8:	200007bc 	.word	0x200007bc
    1dfc:	000f423f 	.word	0x000f423f
    1e00:	000f4240 	.word	0x000f4240
    1e04:	0000a9dc 	.word	0x0000a9dc
    1e08:	0000aa3c 	.word	0x0000aa3c
    1e0c:	0000a4cc 	.word	0x0000a4cc
    1e10:	0000aa54 	.word	0x0000aa54
    1e14:	200007d4 	.word	0x200007d4
    1e18:	00009621 	.word	0x00009621
    1e1c:	0000aa0c 	.word	0x0000aa0c
    1e20:	0000aa24 	.word	0x0000aa24

00001e24 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	4b04      	ldr	r3, [pc, #16]	; (1e3c <pm_policy_state_lock_is_active+0x18>)
    1e2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1e2e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1e32:	3800      	subs	r0, #0
    1e34:	bf18      	it	ne
    1e36:	2001      	movne	r0, #1
    1e38:	4770      	bx	lr
    1e3a:	bf00      	nop
    1e3c:	200007d8 	.word	0x200007d8

00001e40 <pm_policy_next_state>:
{
    1e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e44:	b082      	sub	sp, #8
    1e46:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1e48:	a901      	add	r1, sp, #4
    1e4a:	f000 f843 	bl	1ed4 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1e4e:	1e44      	subs	r4, r0, #1
    1e50:	b224      	sxth	r4, r4
    1e52:	e007      	b.n	1e64 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    1e54:	f1b6 3fff 	cmp.w	r6, #4294967295
    1e58:	d032      	beq.n	1ec0 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    1e5a:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1e5c:	42b0      	cmp	r0, r6
    1e5e:	d92f      	bls.n	1ec0 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1e60:	3c01      	subs	r4, #1
    1e62:	b224      	sxth	r4, r4
    1e64:	2c00      	cmp	r4, #0
    1e66:	db2a      	blt.n	1ebe <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    1e68:	9b01      	ldr	r3, [sp, #4]
    1e6a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1e6e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1e72:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1e76:	f7ff ffd5 	bl	1e24 <pm_policy_state_lock_is_active>
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d1f0      	bne.n	1e60 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1e7e:	6868      	ldr	r0, [r5, #4]
    1e80:	0c41      	lsrs	r1, r0, #17
    1e82:	03c0      	lsls	r0, r0, #15
    1e84:	4f10      	ldr	r7, [pc, #64]	; (1ec8 <pm_policy_next_state+0x88>)
    1e86:	19c0      	adds	r0, r0, r7
    1e88:	4a10      	ldr	r2, [pc, #64]	; (1ecc <pm_policy_next_state+0x8c>)
    1e8a:	f04f 0300 	mov.w	r3, #0
    1e8e:	f141 0100 	adc.w	r1, r1, #0
    1e92:	f7fe f935 	bl	100 <__aeabi_uldivmod>
    1e96:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1e98:	68ab      	ldr	r3, [r5, #8]
    1e9a:	0c59      	lsrs	r1, r3, #17
    1e9c:	03db      	lsls	r3, r3, #15
    1e9e:	19d8      	adds	r0, r3, r7
    1ea0:	4a0a      	ldr	r2, [pc, #40]	; (1ecc <pm_policy_next_state+0x8c>)
    1ea2:	f04f 0300 	mov.w	r3, #0
    1ea6:	f141 0100 	adc.w	r1, r1, #0
    1eaa:	f7fe f929 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1eae:	4b08      	ldr	r3, [pc, #32]	; (1ed0 <pm_policy_next_state+0x90>)
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    1eb6:	d0cd      	beq.n	1e54 <pm_policy_next_state+0x14>
    1eb8:	4283      	cmp	r3, r0
    1eba:	d8cb      	bhi.n	1e54 <pm_policy_next_state+0x14>
    1ebc:	e7d0      	b.n	1e60 <pm_policy_next_state+0x20>
	return NULL;
    1ebe:	2500      	movs	r5, #0
}
    1ec0:	4628      	mov	r0, r5
    1ec2:	b002      	add	sp, #8
    1ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ec8:	000f423f 	.word	0x000f423f
    1ecc:	000f4240 	.word	0x000f4240
    1ed0:	20000004 	.word	0x20000004

00001ed4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1ed4:	b908      	cbnz	r0, 1eda <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1ed6:	4b02      	ldr	r3, [pc, #8]	; (1ee0 <pm_state_cpu_get_all+0xc>)
    1ed8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1eda:	2000      	movs	r0, #0
    1edc:	4770      	bx	lr
    1ede:	bf00      	nop
    1ee0:	0000ac78 	.word	0x0000ac78

00001ee4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1ee4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1ee6:	4802      	ldr	r0, [pc, #8]	; (1ef0 <nrf_cc3xx_platform_abort_init+0xc>)
    1ee8:	f006 fe1a 	bl	8b20 <nrf_cc3xx_platform_set_abort>
}
    1eec:	bd08      	pop	{r3, pc}
    1eee:	bf00      	nop
    1ef0:	0000ac78 	.word	0x0000ac78

00001ef4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1ef4:	b1d0      	cbz	r0, 1f2c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ef6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1ef8:	6842      	ldr	r2, [r0, #4]
    1efa:	2a04      	cmp	r2, #4
    1efc:	d005      	beq.n	1f0a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1efe:	b1d2      	cbz	r2, 1f36 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1f00:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1f02:	f004 faf1 	bl	64e8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f06:	2000      	movs	r0, #0
    }
}
    1f08:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1f0a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f0c:	2200      	movs	r2, #0
    1f0e:	f3bf 8f5b 	dmb	ish
    1f12:	e853 1f00 	ldrex	r1, [r3]
    1f16:	2901      	cmp	r1, #1
    1f18:	d103      	bne.n	1f22 <mutex_unlock_platform+0x2e>
    1f1a:	e843 2000 	strex	r0, r2, [r3]
    1f1e:	2800      	cmp	r0, #0
    1f20:	d1f7      	bne.n	1f12 <mutex_unlock_platform+0x1e>
    1f22:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f26:	d104      	bne.n	1f32 <mutex_unlock_platform+0x3e>
    1f28:	4610      	mov	r0, r2
    1f2a:	e7ed      	b.n	1f08 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f2c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1f30:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f32:	4802      	ldr	r0, [pc, #8]	; (1f3c <mutex_unlock_platform+0x48>)
    1f34:	e7e8      	b.n	1f08 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f36:	4802      	ldr	r0, [pc, #8]	; (1f40 <mutex_unlock_platform+0x4c>)
    1f38:	e7e6      	b.n	1f08 <mutex_unlock_platform+0x14>
    1f3a:	bf00      	nop
    1f3c:	ffff8fe9 	.word	0xffff8fe9
    1f40:	ffff8fea 	.word	0xffff8fea

00001f44 <mutex_lock_platform>:
    if(mutex == NULL) {
    1f44:	b320      	cbz	r0, 1f90 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f46:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1f48:	6842      	ldr	r2, [r0, #4]
    1f4a:	2a04      	cmp	r2, #4
    1f4c:	d002      	beq.n	1f54 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f4e:	b992      	cbnz	r2, 1f76 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f50:	4811      	ldr	r0, [pc, #68]	; (1f98 <mutex_lock_platform+0x54>)
    1f52:	e00f      	b.n	1f74 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1f54:	6803      	ldr	r3, [r0, #0]
    1f56:	2201      	movs	r2, #1
    1f58:	f3bf 8f5b 	dmb	ish
    1f5c:	e853 1f00 	ldrex	r1, [r3]
    1f60:	2900      	cmp	r1, #0
    1f62:	d103      	bne.n	1f6c <mutex_lock_platform+0x28>
    1f64:	e843 2000 	strex	r0, r2, [r3]
    1f68:	2800      	cmp	r0, #0
    1f6a:	d1f7      	bne.n	1f5c <mutex_lock_platform+0x18>
    1f6c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f70:	d10c      	bne.n	1f8c <mutex_lock_platform+0x48>
    1f72:	2000      	movs	r0, #0
}
    1f74:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f76:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1f78:	f04f 32ff 	mov.w	r2, #4294967295
    1f7c:	f04f 33ff 	mov.w	r3, #4294967295
    1f80:	f004 f992 	bl	62a8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1f84:	2800      	cmp	r0, #0
    1f86:	d0f5      	beq.n	1f74 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1f88:	4804      	ldr	r0, [pc, #16]	; (1f9c <mutex_lock_platform+0x58>)
    1f8a:	e7f3      	b.n	1f74 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f8c:	4803      	ldr	r0, [pc, #12]	; (1f9c <mutex_lock_platform+0x58>)
    1f8e:	e7f1      	b.n	1f74 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f90:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop
    1f98:	ffff8fea 	.word	0xffff8fea
    1f9c:	ffff8fe9 	.word	0xffff8fe9

00001fa0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fa0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fa2:	4604      	mov	r4, r0
    1fa4:	b188      	cbz	r0, 1fca <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fa6:	6863      	ldr	r3, [r4, #4]
    1fa8:	2b04      	cmp	r3, #4
    1faa:	d00d      	beq.n	1fc8 <mutex_free_platform+0x28>
    1fac:	2b08      	cmp	r3, #8
    1fae:	d00b      	beq.n	1fc8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fb0:	b153      	cbz	r3, 1fc8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1fb2:	f013 0f02 	tst.w	r3, #2
    1fb6:	d00d      	beq.n	1fd4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1fb8:	4621      	mov	r1, r4
    1fba:	4809      	ldr	r0, [pc, #36]	; (1fe0 <mutex_free_platform+0x40>)
    1fbc:	f003 ff08 	bl	5dd0 <k_mem_slab_free>
        mutex->mutex = NULL;
    1fc0:	2300      	movs	r3, #0
    1fc2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1fc4:	2300      	movs	r3, #0
    1fc6:	6063      	str	r3, [r4, #4]
}
    1fc8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1fca:	4b06      	ldr	r3, [pc, #24]	; (1fe4 <mutex_free_platform+0x44>)
    1fcc:	685b      	ldr	r3, [r3, #4]
    1fce:	4806      	ldr	r0, [pc, #24]	; (1fe8 <mutex_free_platform+0x48>)
    1fd0:	4798      	blx	r3
    1fd2:	e7e8      	b.n	1fa6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1fd4:	2214      	movs	r2, #20
    1fd6:	2100      	movs	r1, #0
    1fd8:	6820      	ldr	r0, [r4, #0]
    1fda:	f007 faf0 	bl	95be <memset>
    1fde:	e7f1      	b.n	1fc4 <mutex_free_platform+0x24>
    1fe0:	200007f4 	.word	0x200007f4
    1fe4:	200000e0 	.word	0x200000e0
    1fe8:	0000ac80 	.word	0x0000ac80

00001fec <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fec:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fee:	4604      	mov	r4, r0
    1ff0:	b178      	cbz	r0, 2012 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1ff2:	6863      	ldr	r3, [r4, #4]
    1ff4:	2b04      	cmp	r3, #4
    1ff6:	d00b      	beq.n	2010 <mutex_init_platform+0x24>
    1ff8:	2b08      	cmp	r3, #8
    1ffa:	d009      	beq.n	2010 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1ffc:	b90b      	cbnz	r3, 2002 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1ffe:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2000:	b163      	cbz	r3, 201c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2002:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2004:	f007 ffda 	bl	9fbc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2008:	6863      	ldr	r3, [r4, #4]
    200a:	f043 0301 	orr.w	r3, r3, #1
    200e:	6063      	str	r3, [r4, #4]
}
    2010:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2012:	4b0f      	ldr	r3, [pc, #60]	; (2050 <mutex_init_platform+0x64>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	480f      	ldr	r0, [pc, #60]	; (2054 <mutex_init_platform+0x68>)
    2018:	4798      	blx	r3
    201a:	e7ea      	b.n	1ff2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    201c:	f04f 32ff 	mov.w	r2, #4294967295
    2020:	f04f 33ff 	mov.w	r3, #4294967295
    2024:	4621      	mov	r1, r4
    2026:	480c      	ldr	r0, [pc, #48]	; (2058 <mutex_init_platform+0x6c>)
    2028:	f003 fe5c 	bl	5ce4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    202c:	b908      	cbnz	r0, 2032 <mutex_init_platform+0x46>
    202e:	6823      	ldr	r3, [r4, #0]
    2030:	b91b      	cbnz	r3, 203a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2032:	4b07      	ldr	r3, [pc, #28]	; (2050 <mutex_init_platform+0x64>)
    2034:	685b      	ldr	r3, [r3, #4]
    2036:	4809      	ldr	r0, [pc, #36]	; (205c <mutex_init_platform+0x70>)
    2038:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    203a:	2214      	movs	r2, #20
    203c:	2100      	movs	r1, #0
    203e:	6820      	ldr	r0, [r4, #0]
    2040:	f007 fabd 	bl	95be <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2044:	6863      	ldr	r3, [r4, #4]
    2046:	f043 0302 	orr.w	r3, r3, #2
    204a:	6063      	str	r3, [r4, #4]
    204c:	e7d9      	b.n	2002 <mutex_init_platform+0x16>
    204e:	bf00      	nop
    2050:	200000e0 	.word	0x200000e0
    2054:	0000ac80 	.word	0x0000ac80
    2058:	200007f4 	.word	0x200007f4
    205c:	0000aca8 	.word	0x0000aca8

00002060 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2060:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2062:	2340      	movs	r3, #64	; 0x40
    2064:	2214      	movs	r2, #20
    2066:	4904      	ldr	r1, [pc, #16]	; (2078 <nrf_cc3xx_platform_mutex_init+0x18>)
    2068:	4804      	ldr	r0, [pc, #16]	; (207c <nrf_cc3xx_platform_mutex_init+0x1c>)
    206a:	f007 ff55 	bl	9f18 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    206e:	4904      	ldr	r1, [pc, #16]	; (2080 <nrf_cc3xx_platform_mutex_init+0x20>)
    2070:	4804      	ldr	r0, [pc, #16]	; (2084 <nrf_cc3xx_platform_mutex_init+0x24>)
    2072:	f006 fdb5 	bl	8be0 <nrf_cc3xx_platform_set_mutexes>
}
    2076:	bd08      	pop	{r3, pc}
    2078:	20000814 	.word	0x20000814
    207c:	200007f4 	.word	0x200007f4
    2080:	0000ace8 	.word	0x0000ace8
    2084:	0000acd8 	.word	0x0000acd8

00002088 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2088:	4901      	ldr	r1, [pc, #4]	; (2090 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    208a:	2210      	movs	r2, #16
	str	r2, [r1]
    208c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    208e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2090:	e000ed10 	.word	0xe000ed10

00002094 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2094:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2096:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2098:	f380 8811 	msr	BASEPRI, r0
	isb
    209c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    20a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    20a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    20a6:	b662      	cpsie	i
	isb
    20a8:	f3bf 8f6f 	isb	sy

	bx	lr
    20ac:	4770      	bx	lr
    20ae:	bf00      	nop

000020b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    20b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    20b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    20b4:	f381 8811 	msr	BASEPRI, r1

	wfe
    20b8:	bf20      	wfe

	msr	BASEPRI, r0
    20ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    20be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop

000020c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    20c4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    20c6:	2800      	cmp	r0, #0
    20c8:	db07      	blt.n	20da <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20ca:	f000 021f 	and.w	r2, r0, #31
    20ce:	0940      	lsrs	r0, r0, #5
    20d0:	2301      	movs	r3, #1
    20d2:	4093      	lsls	r3, r2
    20d4:	4a01      	ldr	r2, [pc, #4]	; (20dc <arch_irq_enable+0x18>)
    20d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    20da:	4770      	bx	lr
    20dc:	e000e100 	.word	0xe000e100

000020e0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    20e0:	0942      	lsrs	r2, r0, #5
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <arch_irq_is_enabled+0x18>)
    20e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    20e8:	f000 001f 	and.w	r0, r0, #31
    20ec:	2301      	movs	r3, #1
    20ee:	fa03 f000 	lsl.w	r0, r3, r0
}
    20f2:	4010      	ands	r0, r2
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop
    20f8:	e000e100 	.word	0xe000e100

000020fc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    20fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20fe:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2100:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2102:	2d07      	cmp	r5, #7
    2104:	d80b      	bhi.n	211e <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2106:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2108:	2800      	cmp	r0, #0
    210a:	db1b      	blt.n	2144 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210c:	016d      	lsls	r5, r5, #5
    210e:	b2ed      	uxtb	r5, r5
    2110:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2114:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2118:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    211e:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2120:	4f0c      	ldr	r7, [pc, #48]	; (2154 <z_arm_irq_priority_set+0x58>)
    2122:	2357      	movs	r3, #87	; 0x57
    2124:	463a      	mov	r2, r7
    2126:	490c      	ldr	r1, [pc, #48]	; (2158 <z_arm_irq_priority_set+0x5c>)
    2128:	480c      	ldr	r0, [pc, #48]	; (215c <z_arm_irq_priority_set+0x60>)
    212a:	f007 f92e 	bl	938a <assert_print>
    212e:	2307      	movs	r3, #7
    2130:	4622      	mov	r2, r4
    2132:	4631      	mov	r1, r6
    2134:	480a      	ldr	r0, [pc, #40]	; (2160 <z_arm_irq_priority_set+0x64>)
    2136:	f007 f928 	bl	938a <assert_print>
    213a:	2157      	movs	r1, #87	; 0x57
    213c:	4638      	mov	r0, r7
    213e:	f007 f91d 	bl	937c <assert_post_action>
    2142:	e7e0      	b.n	2106 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2144:	f000 000f 	and.w	r0, r0, #15
    2148:	016d      	lsls	r5, r5, #5
    214a:	b2ed      	uxtb	r5, r5
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <z_arm_irq_priority_set+0x68>)
    214e:	541d      	strb	r5, [r3, r0]
}
    2150:	e7e4      	b.n	211c <z_arm_irq_priority_set+0x20>
    2152:	bf00      	nop
    2154:	0000acfc 	.word	0x0000acfc
    2158:	0000ad34 	.word	0x0000ad34
    215c:	0000a4cc 	.word	0x0000a4cc
    2160:	0000ad50 	.word	0x0000ad50
    2164:	e000ed14 	.word	0xe000ed14

00002168 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2168:	bf30      	wfi
    b z_SysNmiOnReset
    216a:	f7ff bffd 	b.w	2168 <z_SysNmiOnReset>
    216e:	bf00      	nop

00002170 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2170:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2172:	4b0b      	ldr	r3, [pc, #44]	; (21a0 <z_arm_prep_c+0x30>)
    2174:	4a0b      	ldr	r2, [pc, #44]	; (21a4 <z_arm_prep_c+0x34>)
    2176:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    217a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    217c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2180:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2184:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2188:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    218c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2190:	f003 fcd6 	bl	5b40 <z_bss_zero>
	z_data_copy();
    2194:	f005 ff2a 	bl	7fec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2198:	f000 fa74 	bl	2684 <z_arm_interrupt_init>
	z_cstart();
    219c:	f003 fd2e 	bl	5bfc <z_cstart>
    21a0:	e000ed00 	.word	0xe000ed00
    21a4:	00000000 	.word	0x00000000

000021a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    21a8:	4a0a      	ldr	r2, [pc, #40]	; (21d4 <arch_swap+0x2c>)
    21aa:	6893      	ldr	r3, [r2, #8]
    21ac:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    21b0:	4909      	ldr	r1, [pc, #36]	; (21d8 <arch_swap+0x30>)
    21b2:	6809      	ldr	r1, [r1, #0]
    21b4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21b8:	4908      	ldr	r1, [pc, #32]	; (21dc <arch_swap+0x34>)
    21ba:	684b      	ldr	r3, [r1, #4]
    21bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21c0:	604b      	str	r3, [r1, #4]
    21c2:	2300      	movs	r3, #0
    21c4:	f383 8811 	msr	BASEPRI, r3
    21c8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    21cc:	6893      	ldr	r3, [r2, #8]
}
    21ce:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    21d2:	4770      	bx	lr
    21d4:	20001278 	.word	0x20001278
    21d8:	0000b454 	.word	0x0000b454
    21dc:	e000ed00 	.word	0xe000ed00

000021e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21e0:	4913      	ldr	r1, [pc, #76]	; (2230 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21e2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21e4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    21e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21f2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    21f4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    21f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    21fc:	4f0d      	ldr	r7, [pc, #52]	; (2234 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2202:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2204:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2206:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2208:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    220c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    220e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2212:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2216:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2218:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    221a:	f000 fadd 	bl	27d8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    221e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2222:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2226:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    222a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    222e:	4770      	bx	lr
    ldr r1, =_kernel
    2230:	20001278 	.word	0x20001278
    ldr v4, =_SCS_ICSR
    2234:	e000ed04 	.word	0xe000ed04

00002238 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2238:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    223c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    223e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2242:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2246:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2248:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    224c:	2902      	cmp	r1, #2
    beq _oops
    224e:	d0ff      	beq.n	2250 <_oops>

00002250 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2250:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2252:	f007 f8b1 	bl	93b8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2256:	bd01      	pop	{r0, pc}

00002258 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2258:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    225a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    225e:	490e      	ldr	r1, [pc, #56]	; (2298 <arch_new_thread+0x40>)
    2260:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2264:	f021 0101 	bic.w	r1, r1, #1
    2268:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    226c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2270:	9b01      	ldr	r3, [sp, #4]
    2272:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2276:	9b02      	ldr	r3, [sp, #8]
    2278:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    227c:	9b03      	ldr	r3, [sp, #12]
    227e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2286:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    228a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    228c:	2300      	movs	r3, #0
    228e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2292:	bc10      	pop	{r4}
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	00008fc3 	.word	0x00008fc3

0000229c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    229c:	4b12      	ldr	r3, [pc, #72]	; (22e8 <z_check_thread_stack_fail+0x4c>)
    229e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    22a0:	b302      	cbz	r2, 22e4 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    22a2:	f110 0f16 	cmn.w	r0, #22
    22a6:	d011      	beq.n	22cc <z_check_thread_stack_fail+0x30>
    22a8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    22ac:	f1a3 0c20 	sub.w	ip, r3, #32
    22b0:	4584      	cmp	ip, r0
    22b2:	d805      	bhi.n	22c0 <z_check_thread_stack_fail+0x24>
    22b4:	4283      	cmp	r3, r0
    22b6:	d905      	bls.n	22c4 <z_check_thread_stack_fail+0x28>
    22b8:	428b      	cmp	r3, r1
    22ba:	d805      	bhi.n	22c8 <z_check_thread_stack_fail+0x2c>
    22bc:	2100      	movs	r1, #0
    22be:	e00b      	b.n	22d8 <z_check_thread_stack_fail+0x3c>
    22c0:	2100      	movs	r1, #0
    22c2:	e009      	b.n	22d8 <z_check_thread_stack_fail+0x3c>
    22c4:	2100      	movs	r1, #0
    22c6:	e007      	b.n	22d8 <z_check_thread_stack_fail+0x3c>
    22c8:	2101      	movs	r1, #1
    22ca:	e005      	b.n	22d8 <z_check_thread_stack_fail+0x3c>
    22cc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    22d0:	428b      	cmp	r3, r1
    22d2:	bf94      	ite	ls
    22d4:	2100      	movls	r1, #0
    22d6:	2101      	movhi	r1, #1
    22d8:	b909      	cbnz	r1, 22de <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    22da:	2000      	movs	r0, #0
}
    22dc:	4770      	bx	lr
		return thread->stack_info.start;
    22de:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    22e2:	4770      	bx	lr
		return 0;
    22e4:	2000      	movs	r0, #0
    22e6:	4770      	bx	lr
    22e8:	20001278 	.word	0x20001278

000022ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    22ec:	b508      	push	{r3, lr}
    22ee:	460d      	mov	r5, r1
    22f0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    22f2:	4b08      	ldr	r3, [pc, #32]	; (2314 <arch_switch_to_main_thread+0x28>)
    22f4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    22f6:	f000 fa6f 	bl	27d8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    22fa:	4620      	mov	r0, r4
    22fc:	f385 8809 	msr	PSP, r5
    2300:	2100      	movs	r1, #0
    2302:	b663      	cpsie	if
    2304:	f381 8811 	msr	BASEPRI, r1
    2308:	f3bf 8f6f 	isb	sy
    230c:	2200      	movs	r2, #0
    230e:	2300      	movs	r3, #0
    2310:	f006 fe57 	bl	8fc2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2314:	20001278 	.word	0x20001278

00002318 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2318:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    231a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    231c:	4a0b      	ldr	r2, [pc, #44]	; (234c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    231e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2320:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2322:	bf1e      	ittt	ne
	movne	r1, #0
    2324:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2326:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2328:	f007 fe2c 	blne	9f84 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    232c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    232e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2332:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2336:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    233a:	4905      	ldr	r1, [pc, #20]	; (2350 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    233c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    233e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2340:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2346:	4903      	ldr	r1, [pc, #12]	; (2354 <_isr_wrapper+0x3c>)
	bx r1
    2348:	4708      	bx	r1
    234a:	0000      	.short	0x0000
	ldr r2, =_kernel
    234c:	20001278 	.word	0x20001278
	ldr r1, =_sw_isr_table
    2350:	0000a244 	.word	0x0000a244
	ldr r1, =z_arm_int_exit
    2354:	00002359 	.word	0x00002359

00002358 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2358:	4b04      	ldr	r3, [pc, #16]	; (236c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    235a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    235c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    235e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2360:	d003      	beq.n	236a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2362:	4903      	ldr	r1, [pc, #12]	; (2370 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2368:	600a      	str	r2, [r1, #0]

0000236a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    236a:	4770      	bx	lr
	ldr r3, =_kernel
    236c:	20001278 	.word	0x20001278
	ldr r1, =_SCS_ICSR
    2370:	e000ed04 	.word	0xe000ed04

00002374 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2374:	b510      	push	{r4, lr}
    2376:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2378:	4b12      	ldr	r3, [pc, #72]	; (23c4 <bus_fault+0x50>)
    237a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    237c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2380:	f413 7f00 	tst.w	r3, #512	; 0x200
    2384:	d00b      	beq.n	239e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2386:	4b0f      	ldr	r3, [pc, #60]	; (23c4 <bus_fault+0x50>)
    2388:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    238c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2390:	d005      	beq.n	239e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2392:	b121      	cbz	r1, 239e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2394:	4a0b      	ldr	r2, [pc, #44]	; (23c4 <bus_fault+0x50>)
    2396:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    239c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    239e:	4b09      	ldr	r3, [pc, #36]	; (23c4 <bus_fault+0x50>)
    23a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    23a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    23a8:	d101      	bne.n	23ae <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    23aa:	4b06      	ldr	r3, [pc, #24]	; (23c4 <bus_fault+0x50>)
    23ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    23ae:	4a05      	ldr	r2, [pc, #20]	; (23c4 <bus_fault+0x50>)
    23b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    23b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    23b6:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    23b8:	2101      	movs	r1, #1
    23ba:	f007 f80f 	bl	93dc <memory_fault_recoverable>
    23be:	7020      	strb	r0, [r4, #0]

	return reason;
}
    23c0:	2000      	movs	r0, #0
    23c2:	bd10      	pop	{r4, pc}
    23c4:	e000ed00 	.word	0xe000ed00

000023c8 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    23c8:	4b07      	ldr	r3, [pc, #28]	; (23e8 <usage_fault+0x20>)
    23ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    23cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    23ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    23d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    23d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    23d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    23d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    23d8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    23dc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    23e0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    23e2:	2000      	movs	r0, #0
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop
    23e8:	e000ed00 	.word	0xe000ed00

000023ec <mem_manage_fault>:
{
    23ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ee:	4605      	mov	r5, r0
    23f0:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    23f2:	4b30      	ldr	r3, [pc, #192]	; (24b4 <mem_manage_fault+0xc8>)
    23f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    23f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    23f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23fa:	f013 0f02 	tst.w	r3, #2
    23fe:	d00c      	beq.n	241a <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    2400:	4b2c      	ldr	r3, [pc, #176]	; (24b4 <mem_manage_fault+0xc8>)
    2402:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2406:	f013 0f80 	tst.w	r3, #128	; 0x80
    240a:	d02f      	beq.n	246c <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    240c:	b139      	cbz	r1, 241e <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    240e:	4a29      	ldr	r2, [pc, #164]	; (24b4 <mem_manage_fault+0xc8>)
    2410:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2416:	6293      	str	r3, [r2, #40]	; 0x28
    2418:	e001      	b.n	241e <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    241a:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    241e:	4b25      	ldr	r3, [pc, #148]	; (24b4 <mem_manage_fault+0xc8>)
    2420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2426:	f013 0f10 	tst.w	r3, #16
    242a:	d104      	bne.n	2436 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    242c:	4b21      	ldr	r3, [pc, #132]	; (24b4 <mem_manage_fault+0xc8>)
    242e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2430:	f014 0402 	ands.w	r4, r4, #2
    2434:	d004      	beq.n	2440 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2436:	4b1f      	ldr	r3, [pc, #124]	; (24b4 <mem_manage_fault+0xc8>)
    2438:	685c      	ldr	r4, [r3, #4]
    243a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    243e:	d118      	bne.n	2472 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2440:	4b1c      	ldr	r3, [pc, #112]	; (24b4 <mem_manage_fault+0xc8>)
    2442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2444:	f013 0f20 	tst.w	r3, #32
    2448:	d004      	beq.n	2454 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    244a:	4a1a      	ldr	r2, [pc, #104]	; (24b4 <mem_manage_fault+0xc8>)
    244c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    244e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2452:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2454:	4a17      	ldr	r2, [pc, #92]	; (24b4 <mem_manage_fault+0xc8>)
    2456:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2458:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    245c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    245e:	2101      	movs	r1, #1
    2460:	4628      	mov	r0, r5
    2462:	f006 ffbb 	bl	93dc <memory_fault_recoverable>
    2466:	7030      	strb	r0, [r6, #0]
}
    2468:	4620      	mov	r0, r4
    246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t mmfar = -EINVAL;
    246c:	f06f 0015 	mvn.w	r0, #21
    2470:	e7d5      	b.n	241e <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2472:	4629      	mov	r1, r5
    2474:	f7ff ff12 	bl	229c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2478:	4607      	mov	r7, r0
    247a:	b9b0      	cbnz	r0, 24aa <mem_manage_fault+0xbe>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    247c:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <mem_manage_fault+0xc8>)
    247e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2480:	f014 0410 	ands.w	r4, r4, #16
    2484:	d0dc      	beq.n	2440 <mem_manage_fault+0x54>
    2486:	4c0c      	ldr	r4, [pc, #48]	; (24b8 <mem_manage_fault+0xcc>)
    2488:	f240 1349 	movw	r3, #329	; 0x149
    248c:	4622      	mov	r2, r4
    248e:	490b      	ldr	r1, [pc, #44]	; (24bc <mem_manage_fault+0xd0>)
    2490:	480b      	ldr	r0, [pc, #44]	; (24c0 <mem_manage_fault+0xd4>)
    2492:	f006 ff7a 	bl	938a <assert_print>
    2496:	480b      	ldr	r0, [pc, #44]	; (24c4 <mem_manage_fault+0xd8>)
    2498:	f006 ff77 	bl	938a <assert_print>
    249c:	f240 1149 	movw	r1, #329	; 0x149
    24a0:	4620      	mov	r0, r4
    24a2:	f006 ff6b 	bl	937c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    24a6:	463c      	mov	r4, r7
    24a8:	e7ca      	b.n	2440 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    24aa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    24ae:	2402      	movs	r4, #2
    24b0:	e7c6      	b.n	2440 <mem_manage_fault+0x54>
    24b2:	bf00      	nop
    24b4:	e000ed00 	.word	0xe000ed00
    24b8:	0000ad90 	.word	0x0000ad90
    24bc:	0000adcc 	.word	0x0000adcc
    24c0:	0000a4cc 	.word	0x0000a4cc
    24c4:	0000ae18 	.word	0x0000ae18

000024c8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    24c8:	b538      	push	{r3, r4, r5, lr}
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    24ca:	2300      	movs	r3, #0
    24cc:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    24ce:	4b2c      	ldr	r3, [pc, #176]	; (2580 <hard_fault+0xb8>)
    24d0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    24d2:	f014 0402 	ands.w	r4, r4, #2
    24d6:	d14f      	bne.n	2578 <hard_fault+0xb0>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    24d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24da:	2b00      	cmp	r3, #0
    24dc:	db4d      	blt.n	257a <hard_fault+0xb2>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    24de:	4b28      	ldr	r3, [pc, #160]	; (2580 <hard_fault+0xb8>)
    24e0:	6add      	ldr	r5, [r3, #44]	; 0x2c
    24e2:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    24e6:	d035      	beq.n	2554 <hard_fault+0x8c>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    24e8:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    24ea:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    24ee:	f64d 7302 	movw	r3, #57090	; 0xdf02
    24f2:	429a      	cmp	r2, r3
    24f4:	d00f      	beq.n	2516 <hard_fault+0x4e>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    24f6:	4b22      	ldr	r3, [pc, #136]	; (2580 <hard_fault+0xb8>)
    24f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    24fc:	b96b      	cbnz	r3, 251a <hard_fault+0x52>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    24fe:	4b20      	ldr	r3, [pc, #128]	; (2580 <hard_fault+0xb8>)
    2500:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    2504:	b97b      	cbnz	r3, 2526 <hard_fault+0x5e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2506:	4b1e      	ldr	r3, [pc, #120]	; (2580 <hard_fault+0xb8>)
    2508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    250a:	b29b      	uxth	r3, r3
    250c:	b18b      	cbz	r3, 2532 <hard_fault+0x6a>
			reason = usage_fault(esf);
    250e:	f7ff ff5b 	bl	23c8 <usage_fault>
    2512:	4604      	mov	r4, r0
    2514:	e031      	b.n	257a <hard_fault+0xb2>
			reason = esf->basic.r0;
    2516:	6804      	ldr	r4, [r0, #0]
    2518:	e02f      	b.n	257a <hard_fault+0xb2>
			reason = mem_manage_fault(esf, 1, recoverable);
    251a:	460a      	mov	r2, r1
    251c:	2101      	movs	r1, #1
    251e:	f7ff ff65 	bl	23ec <mem_manage_fault>
    2522:	4604      	mov	r4, r0
    2524:	e029      	b.n	257a <hard_fault+0xb2>
			reason = bus_fault(esf, 1, recoverable);
    2526:	460a      	mov	r2, r1
    2528:	2101      	movs	r1, #1
    252a:	f7ff ff23 	bl	2374 <bus_fault>
    252e:	4604      	mov	r4, r0
    2530:	e023      	b.n	257a <hard_fault+0xb2>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    2532:	4d14      	ldr	r5, [pc, #80]	; (2584 <hard_fault+0xbc>)
    2534:	f240 23cd 	movw	r3, #717	; 0x2cd
    2538:	462a      	mov	r2, r5
    253a:	4913      	ldr	r1, [pc, #76]	; (2588 <hard_fault+0xc0>)
    253c:	4813      	ldr	r0, [pc, #76]	; (258c <hard_fault+0xc4>)
    253e:	f006 ff24 	bl	938a <assert_print>
    2542:	4813      	ldr	r0, [pc, #76]	; (2590 <hard_fault+0xc8>)
    2544:	f006 ff21 	bl	938a <assert_print>
    2548:	f240 21cd 	movw	r1, #717	; 0x2cd
    254c:	4628      	mov	r0, r5
    254e:	f006 ff15 	bl	937c <assert_post_action>
    2552:	e012      	b.n	257a <hard_fault+0xb2>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    2554:	4c0b      	ldr	r4, [pc, #44]	; (2584 <hard_fault+0xbc>)
    2556:	f240 23d1 	movw	r3, #721	; 0x2d1
    255a:	4622      	mov	r2, r4
    255c:	490a      	ldr	r1, [pc, #40]	; (2588 <hard_fault+0xc0>)
    255e:	480b      	ldr	r0, [pc, #44]	; (258c <hard_fault+0xc4>)
    2560:	f006 ff13 	bl	938a <assert_print>
    2564:	480b      	ldr	r0, [pc, #44]	; (2594 <hard_fault+0xcc>)
    2566:	f006 ff10 	bl	938a <assert_print>
    256a:	f240 21d1 	movw	r1, #721	; 0x2d1
    256e:	4620      	mov	r0, r4
    2570:	f006 ff04 	bl	937c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2574:	462c      	mov	r4, r5
    2576:	e000      	b.n	257a <hard_fault+0xb2>
    2578:	2400      	movs	r4, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    257a:	4620      	mov	r0, r4
    257c:	bd38      	pop	{r3, r4, r5, pc}
    257e:	bf00      	nop
    2580:	e000ed00 	.word	0xe000ed00
    2584:	0000ad90 	.word	0x0000ad90
    2588:	0000a690 	.word	0x0000a690
    258c:	0000a4cc 	.word	0x0000a4cc
    2590:	0000ae3c 	.word	0x0000ae3c
    2594:	0000ae60 	.word	0x0000ae60

00002598 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2598:	b5f0      	push	{r4, r5, r6, r7, lr}
    259a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    259c:	4b2b      	ldr	r3, [pc, #172]	; (264c <z_arm_fault+0xb4>)
    259e:	685d      	ldr	r5, [r3, #4]
    25a0:	f3c5 0508 	ubfx	r5, r5, #0, #9
    25a4:	2300      	movs	r3, #0
    25a6:	f383 8811 	msr	BASEPRI, r3
    25aa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    25ae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    25b2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    25b6:	d10d      	bne.n	25d4 <z_arm_fault+0x3c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    25b8:	f002 030c 	and.w	r3, r2, #12
    25bc:	2b08      	cmp	r3, #8
    25be:	d027      	beq.n	2610 <z_arm_fault+0x78>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    25c0:	f012 0f08 	tst.w	r2, #8
    25c4:	d003      	beq.n	25ce <z_arm_fault+0x36>
			ptr_esf =  (z_arch_esf_t *)psp;
    25c6:	460c      	mov	r4, r1
	*nested_exc = false;
    25c8:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    25ca:	b9ac      	cbnz	r4, 25f8 <z_arm_fault+0x60>
    25cc:	e004      	b.n	25d8 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    25ce:	4604      	mov	r4, r0
			*nested_exc = true;
    25d0:	2601      	movs	r6, #1
    25d2:	e7fa      	b.n	25ca <z_arm_fault+0x32>
	*nested_exc = false;
    25d4:	2600      	movs	r6, #0
		return NULL;
    25d6:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
    25d8:	4f1d      	ldr	r7, [pc, #116]	; (2650 <z_arm_fault+0xb8>)
    25da:	f240 33fb 	movw	r3, #1019	; 0x3fb
    25de:	463a      	mov	r2, r7
    25e0:	491c      	ldr	r1, [pc, #112]	; (2654 <z_arm_fault+0xbc>)
    25e2:	481d      	ldr	r0, [pc, #116]	; (2658 <z_arm_fault+0xc0>)
    25e4:	f006 fed1 	bl	938a <assert_print>
    25e8:	481c      	ldr	r0, [pc, #112]	; (265c <z_arm_fault+0xc4>)
    25ea:	f006 fece 	bl	938a <assert_print>
    25ee:	f240 31fb 	movw	r1, #1019	; 0x3fb
    25f2:	4638      	mov	r0, r7
    25f4:	f006 fec2 	bl	937c <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    25f8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    25fc:	4629      	mov	r1, r5
    25fe:	4620      	mov	r0, r4
    2600:	f006 fef1 	bl	93e6 <fault_handle>
    2604:	4605      	mov	r5, r0
	if (recoverable) {
    2606:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    260a:	b123      	cbz	r3, 2616 <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    260c:	b00b      	add	sp, #44	; 0x2c
    260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*nested_exc = false;
    2610:	2600      	movs	r6, #0
		return NULL;
    2612:	4634      	mov	r4, r6
    2614:	e7e0      	b.n	25d8 <z_arm_fault+0x40>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2616:	2220      	movs	r2, #32
    2618:	4621      	mov	r1, r4
    261a:	a801      	add	r0, sp, #4
    261c:	f006 ffa0 	bl	9560 <memcpy>
	if (nested_exc) {
    2620:	b14e      	cbz	r6, 2636 <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2622:	9b08      	ldr	r3, [sp, #32]
    2624:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2628:	b95a      	cbnz	r2, 2642 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    262a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    262e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2632:	9308      	str	r3, [sp, #32]
    2634:	e005      	b.n	2642 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2636:	9b08      	ldr	r3, [sp, #32]
    2638:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    263c:	f023 0301 	bic.w	r3, r3, #1
    2640:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2642:	a901      	add	r1, sp, #4
    2644:	4628      	mov	r0, r5
    2646:	f006 feb3 	bl	93b0 <z_arm_fatal_error>
    264a:	e7df      	b.n	260c <z_arm_fault+0x74>
    264c:	e000ed00 	.word	0xe000ed00
    2650:	0000ad90 	.word	0x0000ad90
    2654:	0000ae90 	.word	0x0000ae90
    2658:	0000a4cc 	.word	0x0000a4cc
    265c:	0000aea4 	.word	0x0000aea4

00002660 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2660:	4a02      	ldr	r2, [pc, #8]	; (266c <z_arm_fault_init+0xc>)
    2662:	6953      	ldr	r3, [r2, #20]
    2664:	f043 0310 	orr.w	r3, r3, #16
    2668:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    266a:	4770      	bx	lr
    266c:	e000ed00 	.word	0xe000ed00

00002670 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2670:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2674:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2678:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    267a:	4672      	mov	r2, lr
	bl z_arm_fault
    267c:	f7ff ff8c 	bl	2598 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2680:	bd01      	pop	{r0, pc}
    2682:	bf00      	nop

00002684 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2684:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2686:	e006      	b.n	2696 <z_arm_interrupt_init+0x12>
    2688:	f002 010f 	and.w	r1, r2, #15
    268c:	4b09      	ldr	r3, [pc, #36]	; (26b4 <z_arm_interrupt_init+0x30>)
    268e:	440b      	add	r3, r1
    2690:	2120      	movs	r1, #32
    2692:	7619      	strb	r1, [r3, #24]
    2694:	3201      	adds	r2, #1
    2696:	2a2f      	cmp	r2, #47	; 0x2f
    2698:	dc0a      	bgt.n	26b0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    269a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    269c:	2b00      	cmp	r3, #0
    269e:	dbf3      	blt.n	2688 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    26a4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    26a8:	2120      	movs	r1, #32
    26aa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    26ae:	e7f1      	b.n	2694 <z_arm_interrupt_init+0x10>
	}
}
    26b0:	4770      	bx	lr
    26b2:	bf00      	nop
    26b4:	e000ecfc 	.word	0xe000ecfc

000026b8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    26b8:	2000      	movs	r0, #0
    msr CONTROL, r0
    26ba:	f380 8814 	msr	CONTROL, r0
    isb
    26be:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    26c2:	f007 fd49 	bl	a158 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    26c6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    26c8:	490d      	ldr	r1, [pc, #52]	; (2700 <__start+0x48>)
    str r0, [r1]
    26ca:	6008      	str	r0, [r1, #0]
    dsb
    26cc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    26d0:	480c      	ldr	r0, [pc, #48]	; (2704 <__start+0x4c>)
    msr msp, r0
    26d2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    26d6:	f000 f82d 	bl	2734 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    26da:	2020      	movs	r0, #32
    msr BASEPRI, r0
    26dc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    26e0:	4809      	ldr	r0, [pc, #36]	; (2708 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    26e2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    26e6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    26e8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    26ec:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    26f0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    26f2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    26f4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    26f8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    26fc:	f7ff fd38 	bl	2170 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2700:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2704:	20002d60 	.word	0x20002d60
    ldr r0, =z_interrupt_stacks
    2708:	20002ee0 	.word	0x20002ee0

0000270c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    270c:	4b08      	ldr	r3, [pc, #32]	; (2730 <z_arm_clear_arm_mpu_config+0x24>)
    270e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    2712:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    2716:	2300      	movs	r3, #0
    2718:	e006      	b.n	2728 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    271a:	4a05      	ldr	r2, [pc, #20]	; (2730 <z_arm_clear_arm_mpu_config+0x24>)
    271c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2720:	2100      	movs	r1, #0
    2722:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    2726:	3301      	adds	r3, #1
    2728:	4283      	cmp	r3, r0
    272a:	dbf6      	blt.n	271a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    272c:	4770      	bx	lr
    272e:	bf00      	nop
    2730:	e000ed00 	.word	0xe000ed00

00002734 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2734:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2736:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2738:	2400      	movs	r4, #0
    273a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    273e:	f7ff ffe5 	bl	270c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2742:	4623      	mov	r3, r4
    2744:	e008      	b.n	2758 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2746:	f103 0120 	add.w	r1, r3, #32
    274a:	4a0e      	ldr	r2, [pc, #56]	; (2784 <z_arm_init_arch_hw_at_boot+0x50>)
    274c:	f04f 30ff 	mov.w	r0, #4294967295
    2750:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2754:	3301      	adds	r3, #1
    2756:	b2db      	uxtb	r3, r3
    2758:	2b07      	cmp	r3, #7
    275a:	d9f4      	bls.n	2746 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    275c:	2300      	movs	r3, #0
    275e:	e008      	b.n	2772 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2760:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2764:	4a07      	ldr	r2, [pc, #28]	; (2784 <z_arm_init_arch_hw_at_boot+0x50>)
    2766:	f04f 30ff 	mov.w	r0, #4294967295
    276a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    276e:	3301      	adds	r3, #1
    2770:	b2db      	uxtb	r3, r3
    2772:	2b07      	cmp	r3, #7
    2774:	d9f4      	bls.n	2760 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2776:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    277c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2780:	bd10      	pop	{r4, pc}
    2782:	bf00      	nop
    2784:	e000e100 	.word	0xe000e100

00002788 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2788:	b508      	push	{r3, lr}
	if (_current == thread) {
    278a:	4b0a      	ldr	r3, [pc, #40]	; (27b4 <z_impl_k_thread_abort+0x2c>)
    278c:	689b      	ldr	r3, [r3, #8]
    278e:	4283      	cmp	r3, r0
    2790:	d002      	beq.n	2798 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    2792:	f005 fb89 	bl	7ea8 <z_thread_abort>
}
    2796:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2798:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    279c:	2b00      	cmp	r3, #0
    279e:	d0f8      	beq.n	2792 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    27a0:	4b05      	ldr	r3, [pc, #20]	; (27b8 <z_impl_k_thread_abort+0x30>)
    27a2:	685a      	ldr	r2, [r3, #4]
    27a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    27a8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    27aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    27b0:	625a      	str	r2, [r3, #36]	; 0x24
    27b2:	e7ee      	b.n	2792 <z_impl_k_thread_abort+0xa>
    27b4:	20001278 	.word	0x20001278
    27b8:	e000ed00 	.word	0xe000ed00

000027bc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    27bc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    27be:	4b03      	ldr	r3, [pc, #12]	; (27cc <z_arm_configure_static_mpu_regions+0x10>)
    27c0:	4a03      	ldr	r2, [pc, #12]	; (27d0 <z_arm_configure_static_mpu_regions+0x14>)
    27c2:	2101      	movs	r1, #1
    27c4:	4803      	ldr	r0, [pc, #12]	; (27d4 <z_arm_configure_static_mpu_regions+0x18>)
    27c6:	f000 f867 	bl	2898 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    27ca:	bd08      	pop	{r3, pc}
    27cc:	20040000 	.word	0x20040000
    27d0:	20000000 	.word	0x20000000
    27d4:	0000aee4 	.word	0x0000aee4

000027d8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    27d8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    27da:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    27de:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    27e0:	4804      	ldr	r0, [pc, #16]	; (27f4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    27e2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    27e4:	2320      	movs	r3, #32
    27e6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    27e8:	4b03      	ldr	r3, [pc, #12]	; (27f8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    27ea:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    27ec:	2101      	movs	r1, #1
    27ee:	f000 f875 	bl	28dc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    27f2:	bd08      	pop	{r3, pc}
    27f4:	20000d14 	.word	0x20000d14
    27f8:	150b0000 	.word	0x150b0000

000027fc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    27fc:	4a08      	ldr	r2, [pc, #32]	; (2820 <region_init+0x24>)
    27fe:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2802:	680b      	ldr	r3, [r1, #0]
    2804:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2808:	4303      	orrs	r3, r0
    280a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    280e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2812:	688b      	ldr	r3, [r1, #8]
    2814:	f043 0301 	orr.w	r3, r3, #1
    2818:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	e000ed00 	.word	0xe000ed00

00002824 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2824:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2826:	4c03      	ldr	r4, [pc, #12]	; (2834 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2828:	2301      	movs	r3, #1
    282a:	7822      	ldrb	r2, [r4, #0]
    282c:	f006 fe39 	bl	94a2 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2830:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2832:	bd10      	pop	{r4, pc}
    2834:	200014a0 	.word	0x200014a0

00002838 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2838:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    283a:	2300      	movs	r3, #0
    283c:	4a09      	ldr	r2, [pc, #36]	; (2864 <mpu_configure_dynamic_mpu_regions+0x2c>)
    283e:	7812      	ldrb	r2, [r2, #0]
    2840:	f006 fe2f 	bl	94a2 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2844:	f110 0f16 	cmn.w	r0, #22
    2848:	d00a      	beq.n	2860 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    284a:	4603      	mov	r3, r0
    284c:	e006      	b.n	285c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    284e:	4a06      	ldr	r2, [pc, #24]	; (2868 <mpu_configure_dynamic_mpu_regions+0x30>)
    2850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2854:	2100      	movs	r1, #0
    2856:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    285a:	3301      	adds	r3, #1
    285c:	2b07      	cmp	r3, #7
    285e:	ddf6      	ble.n	284e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    2860:	bd08      	pop	{r3, pc}
    2862:	bf00      	nop
    2864:	200014a0 	.word	0x200014a0
    2868:	e000ed00 	.word	0xe000ed00

0000286c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    286c:	4b04      	ldr	r3, [pc, #16]	; (2880 <arm_core_mpu_enable+0x14>)
    286e:	2205      	movs	r2, #5
    2870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2874:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2878:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    287c:	4770      	bx	lr
    287e:	bf00      	nop
    2880:	e000ed00 	.word	0xe000ed00

00002884 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2884:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2888:	4b02      	ldr	r3, [pc, #8]	; (2894 <arm_core_mpu_disable+0x10>)
    288a:	2200      	movs	r2, #0
    288c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2890:	4770      	bx	lr
    2892:	bf00      	nop
    2894:	e000ed00 	.word	0xe000ed00

00002898 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2898:	b538      	push	{r3, r4, r5, lr}
    289a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    289c:	f7ff ffc2 	bl	2824 <mpu_configure_static_mpu_regions>
    28a0:	f110 0f16 	cmn.w	r0, #22
    28a4:	d000      	beq.n	28a8 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    28a6:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    28a8:	4d08      	ldr	r5, [pc, #32]	; (28cc <arm_core_mpu_configure_static_mpu_regions+0x34>)
    28aa:	f240 1311 	movw	r3, #273	; 0x111
    28ae:	462a      	mov	r2, r5
    28b0:	4907      	ldr	r1, [pc, #28]	; (28d0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    28b2:	4808      	ldr	r0, [pc, #32]	; (28d4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    28b4:	f006 fd69 	bl	938a <assert_print>
    28b8:	4621      	mov	r1, r4
    28ba:	4807      	ldr	r0, [pc, #28]	; (28d8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    28bc:	f006 fd65 	bl	938a <assert_print>
    28c0:	f240 1111 	movw	r1, #273	; 0x111
    28c4:	4628      	mov	r0, r5
    28c6:	f006 fd59 	bl	937c <assert_post_action>
}
    28ca:	e7ec      	b.n	28a6 <arm_core_mpu_configure_static_mpu_regions+0xe>
    28cc:	0000aef0 	.word	0x0000aef0
    28d0:	0000a690 	.word	0x0000a690
    28d4:	0000a4cc 	.word	0x0000a4cc
    28d8:	0000af28 	.word	0x0000af28

000028dc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    28dc:	b538      	push	{r3, r4, r5, lr}
    28de:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    28e0:	f7ff ffaa 	bl	2838 <mpu_configure_dynamic_mpu_regions>
    28e4:	f110 0f16 	cmn.w	r0, #22
    28e8:	d000      	beq.n	28ec <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    28ea:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    28ec:	4d08      	ldr	r5, [pc, #32]	; (2910 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    28ee:	f44f 7398 	mov.w	r3, #304	; 0x130
    28f2:	462a      	mov	r2, r5
    28f4:	4907      	ldr	r1, [pc, #28]	; (2914 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    28f6:	4808      	ldr	r0, [pc, #32]	; (2918 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    28f8:	f006 fd47 	bl	938a <assert_print>
    28fc:	4621      	mov	r1, r4
    28fe:	4807      	ldr	r0, [pc, #28]	; (291c <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    2900:	f006 fd43 	bl	938a <assert_print>
    2904:	f44f 7198 	mov.w	r1, #304	; 0x130
    2908:	4628      	mov	r0, r5
    290a:	f006 fd37 	bl	937c <assert_post_action>
}
    290e:	e7ec      	b.n	28ea <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    2910:	0000aef0 	.word	0x0000aef0
    2914:	0000a690 	.word	0x0000a690
    2918:	0000a4cc 	.word	0x0000a4cc
    291c:	0000af54 	.word	0x0000af54

00002920 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2920:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2922:	4b24      	ldr	r3, [pc, #144]	; (29b4 <z_arm_mpu_init+0x94>)
    2924:	681d      	ldr	r5, [r3, #0]
    2926:	2d08      	cmp	r5, #8
    2928:	d803      	bhi.n	2932 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    292a:	f7ff ffab 	bl	2884 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    292e:	2400      	movs	r4, #0
    2930:	e01e      	b.n	2970 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    2932:	4c21      	ldr	r4, [pc, #132]	; (29b8 <z_arm_mpu_init+0x98>)
    2934:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2938:	4622      	mov	r2, r4
    293a:	4920      	ldr	r1, [pc, #128]	; (29bc <z_arm_mpu_init+0x9c>)
    293c:	4820      	ldr	r0, [pc, #128]	; (29c0 <z_arm_mpu_init+0xa0>)
    293e:	f006 fd24 	bl	938a <assert_print>
    2942:	2208      	movs	r2, #8
    2944:	4629      	mov	r1, r5
    2946:	481f      	ldr	r0, [pc, #124]	; (29c4 <z_arm_mpu_init+0xa4>)
    2948:	f006 fd1f 	bl	938a <assert_print>
    294c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2950:	4620      	mov	r0, r4
    2952:	f006 fd13 	bl	937c <assert_post_action>
		return -1;
    2956:	f04f 30ff 	mov.w	r0, #4294967295
    295a:	e017      	b.n	298c <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    295c:	4b15      	ldr	r3, [pc, #84]	; (29b4 <z_arm_mpu_init+0x94>)
    295e:	6859      	ldr	r1, [r3, #4]
    2960:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2964:	0093      	lsls	r3, r2, #2
    2966:	4419      	add	r1, r3
    2968:	4620      	mov	r0, r4
    296a:	f7ff ff47 	bl	27fc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    296e:	3401      	adds	r4, #1
    2970:	42a5      	cmp	r5, r4
    2972:	d8f3      	bhi.n	295c <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2974:	4b14      	ldr	r3, [pc, #80]	; (29c8 <z_arm_mpu_init+0xa8>)
    2976:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2978:	f7ff ff78 	bl	286c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    297c:	4b13      	ldr	r3, [pc, #76]	; (29cc <z_arm_mpu_init+0xac>)
    297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    2982:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2986:	2b08      	cmp	r3, #8
    2988:	d101      	bne.n	298e <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    298a:	2000      	movs	r0, #0
}
    298c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    298e:	4c0a      	ldr	r4, [pc, #40]	; (29b8 <z_arm_mpu_init+0x98>)
    2990:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2994:	4622      	mov	r2, r4
    2996:	490e      	ldr	r1, [pc, #56]	; (29d0 <z_arm_mpu_init+0xb0>)
    2998:	4809      	ldr	r0, [pc, #36]	; (29c0 <z_arm_mpu_init+0xa0>)
    299a:	f006 fcf6 	bl	938a <assert_print>
    299e:	480d      	ldr	r0, [pc, #52]	; (29d4 <z_arm_mpu_init+0xb4>)
    29a0:	f006 fcf3 	bl	938a <assert_print>
    29a4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    29a8:	4620      	mov	r0, r4
    29aa:	f006 fce7 	bl	937c <assert_post_action>
	return 0;
    29ae:	2000      	movs	r0, #0
    29b0:	e7ec      	b.n	298c <z_arm_mpu_init+0x6c>
    29b2:	bf00      	nop
    29b4:	0000b03c 	.word	0x0000b03c
    29b8:	0000aef0 	.word	0x0000aef0
    29bc:	0000a690 	.word	0x0000a690
    29c0:	0000a4cc 	.word	0x0000a4cc
    29c4:	0000af84 	.word	0x0000af84
    29c8:	200014a0 	.word	0x200014a0
    29cc:	e000ed00 	.word	0xe000ed00
    29d0:	0000afb8 	.word	0x0000afb8
    29d4:	0000b008 	.word	0x0000b008

000029d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    29d8:	4b01      	ldr	r3, [pc, #4]	; (29e0 <__stdout_hook_install+0x8>)
    29da:	6018      	str	r0, [r3, #0]
}
    29dc:	4770      	bx	lr
    29de:	bf00      	nop
    29e0:	20000028 	.word	0x20000028

000029e4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    29e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    29e6:	f04f 0320 	mov.w	r3, #32
    29ea:	f3ef 8411 	mrs	r4, BASEPRI
    29ee:	f383 8812 	msr	BASEPRI_MAX, r3
    29f2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    29f6:	2301      	movs	r3, #1
    29f8:	4a0c      	ldr	r2, [pc, #48]	; (2a2c <nordicsemi_nrf52_init+0x48>)
    29fa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    29fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a02:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2a06:	f006 fdfb 	bl	9600 <nrf52_errata_197>
    2a0a:	b120      	cbz	r0, 2a16 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a10:	2201      	movs	r2, #1
    2a12:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a1a:	2201      	movs	r2, #1
    2a1c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2a20:	f384 8811 	msr	BASEPRI, r4
    2a24:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2a28:	2000      	movs	r0, #0
    2a2a:	bd10      	pop	{r4, pc}
    2a2c:	4001e000 	.word	0x4001e000

00002a30 <sys_arch_reboot>:
    *p_gpregret = val;
    2a30:	b2c0      	uxtb	r0, r0
    2a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a36:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2a3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2a3e:	4905      	ldr	r1, [pc, #20]	; (2a54 <sys_arch_reboot+0x24>)
    2a40:	68ca      	ldr	r2, [r1, #12]
    2a42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2a46:	4b04      	ldr	r3, [pc, #16]	; (2a58 <sys_arch_reboot+0x28>)
    2a48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2a4a:	60cb      	str	r3, [r1, #12]
    2a4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2a50:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2a52:	e7fd      	b.n	2a50 <sys_arch_reboot+0x20>
    2a54:	e000ed00 	.word	0xe000ed00
    2a58:	05fa0004 	.word	0x05fa0004

00002a5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2a5c:	b130      	cbz	r0, 2a6c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2a5e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2a60:	0180      	lsls	r0, r0, #6
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <arch_busy_wait+0x14>)
    2a64:	f043 0301 	orr.w	r3, r3, #1
    2a68:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    2a6a:	bd08      	pop	{r3, pc}
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop
    2a70:	0000a430 	.word	0x0000a430

00002a74 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2a74:	4800      	ldr	r0, [pc, #0]	; (2a78 <get_hf_flags+0x4>)
    2a76:	4770      	bx	lr
    2a78:	20000d78 	.word	0x20000d78

00002a7c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2a7c:	4b01      	ldr	r3, [pc, #4]	; (2a84 <get_subsys+0x8>)
    2a7e:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    2a80:	1140      	asrs	r0, r0, #5
    2a82:	4770      	bx	lr
    2a84:	20000d30 	.word	0x20000d30

00002a88 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a88:	b530      	push	{r4, r5, lr}
    2a8a:	b083      	sub	sp, #12
    2a8c:	4605      	mov	r5, r0
    2a8e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2a90:	f7ff fff4 	bl	2a7c <get_subsys>
    2a94:	4601      	mov	r1, r0
    2a96:	2340      	movs	r3, #64	; 0x40
    2a98:	9300      	str	r3, [sp, #0]
    2a9a:	4623      	mov	r3, r4
    2a9c:	4a05      	ldr	r2, [pc, #20]	; (2ab4 <onoff_start+0x2c>)
    2a9e:	4806      	ldr	r0, [pc, #24]	; (2ab8 <onoff_start+0x30>)
    2aa0:	f006 fe3b 	bl	971a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2aa4:	1e01      	subs	r1, r0, #0
    2aa6:	db01      	blt.n	2aac <onoff_start+0x24>
		notify(mgr, err);
	}
}
    2aa8:	b003      	add	sp, #12
    2aaa:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2aac:	4628      	mov	r0, r5
    2aae:	47a0      	blx	r4
}
    2ab0:	e7fa      	b.n	2aa8 <onoff_start+0x20>
    2ab2:	bf00      	nop
    2ab4:	00009763 	.word	0x00009763
    2ab8:	0000a1cc 	.word	0x0000a1cc

00002abc <generic_hfclk_stop>:
{
    2abc:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2abe:	4b0a      	ldr	r3, [pc, #40]	; (2ae8 <generic_hfclk_stop+0x2c>)
    2ac0:	f3bf 8f5b 	dmb	ish
    2ac4:	e853 2f00 	ldrex	r2, [r3]
    2ac8:	f022 0102 	bic.w	r1, r2, #2
    2acc:	e843 1000 	strex	r0, r1, [r3]
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d1f7      	bne.n	2ac4 <generic_hfclk_stop+0x8>
    2ad4:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2ad8:	f012 0f01 	tst.w	r2, #1
    2adc:	d000      	beq.n	2ae0 <generic_hfclk_stop+0x24>
}
    2ade:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2ae0:	f006 fe51 	bl	9786 <hfclk_stop>
    2ae4:	e7fb      	b.n	2ade <generic_hfclk_stop+0x22>
    2ae6:	bf00      	nop
    2ae8:	20000d88 	.word	0x20000d88

00002aec <get_status>:
{
    2aec:	b570      	push	{r4, r5, r6, lr}
    2aee:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2af0:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2af2:	2c01      	cmp	r4, #1
    2af4:	d807      	bhi.n	2b06 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2af6:	4621      	mov	r1, r4
    2af8:	4628      	mov	r0, r5
    2afa:	f006 fda3 	bl	9644 <get_sub_data>
    2afe:	6880      	ldr	r0, [r0, #8]
}
    2b00:	f000 0007 	and.w	r0, r0, #7
    2b04:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b06:	4e06      	ldr	r6, [pc, #24]	; (2b20 <get_status+0x34>)
    2b08:	2379      	movs	r3, #121	; 0x79
    2b0a:	4632      	mov	r2, r6
    2b0c:	4905      	ldr	r1, [pc, #20]	; (2b24 <get_status+0x38>)
    2b0e:	4806      	ldr	r0, [pc, #24]	; (2b28 <get_status+0x3c>)
    2b10:	f006 fc3b 	bl	938a <assert_print>
    2b14:	2179      	movs	r1, #121	; 0x79
    2b16:	4630      	mov	r0, r6
    2b18:	f006 fc30 	bl	937c <assert_post_action>
    2b1c:	e7eb      	b.n	2af6 <get_status+0xa>
    2b1e:	bf00      	nop
    2b20:	0000b05c 	.word	0x0000b05c
    2b24:	0000b09c 	.word	0x0000b09c
    2b28:	0000a4cc 	.word	0x0000a4cc

00002b2c <stop>:
{
    2b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b30:	4607      	mov	r7, r0
    2b32:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2b34:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2b36:	4621      	mov	r1, r4
    2b38:	f006 fd84 	bl	9644 <get_sub_data>
    2b3c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b3e:	2c01      	cmp	r4, #1
    2b40:	d80f      	bhi.n	2b62 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    2b42:	4631      	mov	r1, r6
    2b44:	f105 0008 	add.w	r0, r5, #8
    2b48:	f006 fd8b 	bl	9662 <set_off_state>
	if (err < 0) {
    2b4c:	2800      	cmp	r0, #0
    2b4e:	db06      	blt.n	2b5e <stop+0x32>
	get_sub_config(dev, type)->stop();
    2b50:	4621      	mov	r1, r4
    2b52:	4638      	mov	r0, r7
    2b54:	f006 fd7d 	bl	9652 <get_sub_config>
    2b58:	6843      	ldr	r3, [r0, #4]
    2b5a:	4798      	blx	r3
	return 0;
    2b5c:	2000      	movs	r0, #0
}
    2b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b62:	f8df 801c 	ldr.w	r8, [pc, #28]	; 2b80 <stop+0x54>
    2b66:	f240 134d 	movw	r3, #333	; 0x14d
    2b6a:	4642      	mov	r2, r8
    2b6c:	4905      	ldr	r1, [pc, #20]	; (2b84 <stop+0x58>)
    2b6e:	4806      	ldr	r0, [pc, #24]	; (2b88 <stop+0x5c>)
    2b70:	f006 fc0b 	bl	938a <assert_print>
    2b74:	f240 114d 	movw	r1, #333	; 0x14d
    2b78:	4640      	mov	r0, r8
    2b7a:	f006 fbff 	bl	937c <assert_post_action>
    2b7e:	e7e0      	b.n	2b42 <stop+0x16>
    2b80:	0000b05c 	.word	0x0000b05c
    2b84:	0000b09c 	.word	0x0000b09c
    2b88:	0000a4cc 	.word	0x0000a4cc

00002b8c <onoff_stop>:
{
    2b8c:	b538      	push	{r3, r4, r5, lr}
    2b8e:	4605      	mov	r5, r0
    2b90:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2b92:	f7ff ff73 	bl	2a7c <get_subsys>
    2b96:	4601      	mov	r1, r0
    2b98:	2240      	movs	r2, #64	; 0x40
    2b9a:	4803      	ldr	r0, [pc, #12]	; (2ba8 <onoff_stop+0x1c>)
    2b9c:	f7ff ffc6 	bl	2b2c <stop>
    2ba0:	4601      	mov	r1, r0
	notify(mgr, res);
    2ba2:	4628      	mov	r0, r5
    2ba4:	47a0      	blx	r4
}
    2ba6:	bd38      	pop	{r3, r4, r5, pc}
    2ba8:	0000a1cc 	.word	0x0000a1cc

00002bac <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2bac:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    2bae:	2801      	cmp	r0, #1
    2bb0:	d01d      	beq.n	2bee <clock_event_handler+0x42>
    2bb2:	2803      	cmp	r0, #3
    2bb4:	d020      	beq.n	2bf8 <clock_event_handler+0x4c>
    2bb6:	b168      	cbz	r0, 2bd4 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    2bb8:	4c16      	ldr	r4, [pc, #88]	; (2c14 <clock_event_handler+0x68>)
    2bba:	f240 2362 	movw	r3, #610	; 0x262
    2bbe:	4622      	mov	r2, r4
    2bc0:	4915      	ldr	r1, [pc, #84]	; (2c18 <clock_event_handler+0x6c>)
    2bc2:	4816      	ldr	r0, [pc, #88]	; (2c1c <clock_event_handler+0x70>)
    2bc4:	f006 fbe1 	bl	938a <assert_print>
    2bc8:	f240 2162 	movw	r1, #610	; 0x262
    2bcc:	4620      	mov	r0, r4
    2bce:	f006 fbd5 	bl	937c <assert_post_action>
		break;
	}
}
    2bd2:	e010      	b.n	2bf6 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2bd4:	2100      	movs	r1, #0
    2bd6:	4812      	ldr	r0, [pc, #72]	; (2c20 <clock_event_handler+0x74>)
    2bd8:	f006 fd34 	bl	9644 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2bdc:	6883      	ldr	r3, [r0, #8]
    2bde:	f013 0f07 	tst.w	r3, #7
    2be2:	d108      	bne.n	2bf6 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2be4:	2100      	movs	r1, #0
    2be6:	480e      	ldr	r0, [pc, #56]	; (2c20 <clock_event_handler+0x74>)
    2be8:	f006 fd85 	bl	96f6 <clkstarted_handle>
    2bec:	e003      	b.n	2bf6 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2bee:	2101      	movs	r1, #1
    2bf0:	480b      	ldr	r0, [pc, #44]	; (2c20 <clock_event_handler+0x74>)
    2bf2:	f006 fd80 	bl	96f6 <clkstarted_handle>
}
    2bf6:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    2bf8:	4c06      	ldr	r4, [pc, #24]	; (2c14 <clock_event_handler+0x68>)
    2bfa:	f240 235e 	movw	r3, #606	; 0x25e
    2bfe:	4622      	mov	r2, r4
    2c00:	4905      	ldr	r1, [pc, #20]	; (2c18 <clock_event_handler+0x6c>)
    2c02:	4806      	ldr	r0, [pc, #24]	; (2c1c <clock_event_handler+0x70>)
    2c04:	f006 fbc1 	bl	938a <assert_print>
    2c08:	f240 215e 	movw	r1, #606	; 0x25e
    2c0c:	4620      	mov	r0, r4
    2c0e:	f006 fbb5 	bl	937c <assert_post_action>
		break;
    2c12:	e7f0      	b.n	2bf6 <clock_event_handler+0x4a>
    2c14:	0000b05c 	.word	0x0000b05c
    2c18:	0000a690 	.word	0x0000a690
    2c1c:	0000a4cc 	.word	0x0000a4cc
    2c20:	0000a1cc 	.word	0x0000a1cc

00002c24 <api_blocking_start>:
{
    2c24:	b500      	push	{lr}
    2c26:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2c28:	f8cd d000 	str.w	sp, [sp]
    2c2c:	f8cd d004 	str.w	sp, [sp, #4]
    2c30:	2300      	movs	r3, #0
    2c32:	9302      	str	r3, [sp, #8]
    2c34:	2301      	movs	r3, #1
    2c36:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2c38:	466b      	mov	r3, sp
    2c3a:	4a07      	ldr	r2, [pc, #28]	; (2c58 <api_blocking_start+0x34>)
    2c3c:	f006 fd89 	bl	9752 <api_start>
	if (err < 0) {
    2c40:	2800      	cmp	r0, #0
    2c42:	db05      	blt.n	2c50 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c48:	2300      	movs	r3, #0
    2c4a:	4668      	mov	r0, sp
    2c4c:	f003 fe9a 	bl	6984 <z_impl_k_sem_take>
}
    2c50:	b005      	add	sp, #20
    2c52:	f85d fb04 	ldr.w	pc, [sp], #4
    2c56:	bf00      	nop
    2c58:	000097a5 	.word	0x000097a5

00002c5c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2c5c:	b570      	push	{r4, r5, r6, lr}
    2c5e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c60:	2200      	movs	r2, #0
    2c62:	2101      	movs	r1, #1
    2c64:	4610      	mov	r0, r2
    2c66:	f7ff fa49 	bl	20fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2c6a:	4811      	ldr	r0, [pc, #68]	; (2cb0 <clk_init+0x54>)
    2c6c:	f001 fd66 	bl	473c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2c70:	4b10      	ldr	r3, [pc, #64]	; (2cb4 <clk_init+0x58>)
    2c72:	4298      	cmp	r0, r3
    2c74:	d119      	bne.n	2caa <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2c76:	f001 fd8b 	bl	4790 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2c7a:	2400      	movs	r4, #0
    2c7c:	2c01      	cmp	r4, #1
    2c7e:	d812      	bhi.n	2ca6 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2c80:	4621      	mov	r1, r4
    2c82:	4630      	mov	r0, r6
    2c84:	f006 fcde 	bl	9644 <get_sub_data>
    2c88:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c8a:	4621      	mov	r1, r4
    2c8c:	4630      	mov	r0, r6
    2c8e:	f006 fce4 	bl	965a <get_onoff_manager>
    2c92:	4909      	ldr	r1, [pc, #36]	; (2cb8 <clk_init+0x5c>)
    2c94:	f006 f979 	bl	8f8a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2c98:	2800      	cmp	r0, #0
    2c9a:	db05      	blt.n	2ca8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c9c:	2301      	movs	r3, #1
    2c9e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2ca0:	441c      	add	r4, r3
    2ca2:	b2e4      	uxtb	r4, r4
    2ca4:	e7ea      	b.n	2c7c <clk_init+0x20>
	}

	return 0;
    2ca6:	2000      	movs	r0, #0
}
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2caa:	f06f 0004 	mvn.w	r0, #4
    2cae:	e7fb      	b.n	2ca8 <clk_init+0x4c>
    2cb0:	00002bad 	.word	0x00002bad
    2cb4:	0bad0000 	.word	0x0bad0000
    2cb8:	0000b0fc 	.word	0x0000b0fc

00002cbc <lfclk_spinwait>:
{
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2cc0:	2801      	cmp	r0, #1
    2cc2:	d107      	bne.n	2cd4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cc8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2ccc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2cd0:	2b01      	cmp	r3, #1
    2cd2:	d05a      	beq.n	2d8a <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2cd4:	f007 f941 	bl	9f5a <k_is_in_isr>
    2cd8:	b928      	cbnz	r0, 2ce6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    2cda:	4b2f      	ldr	r3, [pc, #188]	; (2d98 <lfclk_spinwait+0xdc>)
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d043      	beq.n	2d6a <lfclk_spinwait+0xae>
    2ce2:	2300      	movs	r3, #0
    2ce4:	e000      	b.n	2ce8 <lfclk_spinwait+0x2c>
    2ce6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    2ce8:	461c      	mov	r4, r3
    2cea:	2b00      	cmp	r3, #0
    2cec:	d03f      	beq.n	2d6e <lfclk_spinwait+0xb2>
	__asm__ volatile(
    2cee:	f04f 0320 	mov.w	r3, #32
    2cf2:	f3ef 8611 	mrs	r6, BASEPRI
    2cf6:	f383 8812 	msr	BASEPRI_MAX, r3
    2cfa:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    2cfe:	b924      	cbnz	r4, 2d0a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    2d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d04:	2202      	movs	r2, #2
    2d06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d0e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2d12:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d16:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2d1a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2d1e:	d12d      	bne.n	2d7c <lfclk_spinwait+0xc0>
    return false;
    2d20:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2d22:	b11a      	cbz	r2, 2d2c <lfclk_spinwait+0x70>
    2d24:	2b01      	cmp	r3, #1
    2d26:	d02b      	beq.n	2d80 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2d28:	2d01      	cmp	r5, #1
    2d2a:	d029      	beq.n	2d80 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2d2c:	b30c      	cbz	r4, 2d72 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2d2e:	4630      	mov	r0, r6
    2d30:	f7ff f9be 	bl	20b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d38:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d1e4      	bne.n	2d0a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d0de      	beq.n	2d0a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d50:	2200      	movs	r2, #0
    2d52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2d56:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d5a:	2201      	movs	r2, #1
    2d5c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d60:	490e      	ldr	r1, [pc, #56]	; (2d9c <lfclk_spinwait+0xe0>)
    2d62:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d66:	609a      	str	r2, [r3, #8]
}
    2d68:	e7cf      	b.n	2d0a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2d6a:	2301      	movs	r3, #1
    2d6c:	e7bc      	b.n	2ce8 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    2d6e:	2600      	movs	r6, #0
    2d70:	e7c5      	b.n	2cfe <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    2d72:	2021      	movs	r0, #33	; 0x21
    2d74:	2100      	movs	r1, #0
    2d76:	f005 f845 	bl	7e04 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2d7a:	e7db      	b.n	2d34 <lfclk_spinwait+0x78>
                return true;
    2d7c:	2201      	movs	r2, #1
    2d7e:	e7d0      	b.n	2d22 <lfclk_spinwait+0x66>
	if (isr_mode) {
    2d80:	b124      	cbz	r4, 2d8c <lfclk_spinwait+0xd0>
	__asm__ volatile(
    2d82:	f386 8811 	msr	BASEPRI, r6
    2d86:	f3bf 8f6f 	isb	sy
}
    2d8a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    2d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d90:	2202      	movs	r2, #2
    2d92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2d96:	e7f8      	b.n	2d8a <lfclk_spinwait+0xce>
    2d98:	200014a1 	.word	0x200014a1
    2d9c:	e000e100 	.word	0xe000e100

00002da0 <generic_hfclk_start>:
{
    2da0:	b510      	push	{r4, lr}
	__asm__ volatile(
    2da2:	f04f 0320 	mov.w	r3, #32
    2da6:	f3ef 8411 	mrs	r4, BASEPRI
    2daa:	f383 8812 	msr	BASEPRI_MAX, r3
    2dae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2db2:	4a13      	ldr	r2, [pc, #76]	; (2e00 <generic_hfclk_start+0x60>)
    2db4:	6813      	ldr	r3, [r2, #0]
    2db6:	f043 0302 	orr.w	r3, r3, #2
    2dba:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2dbc:	f013 0f01 	tst.w	r3, #1
    2dc0:	d108      	bne.n	2dd4 <generic_hfclk_start+0x34>
	bool already_started = false;
    2dc2:	2300      	movs	r3, #0
	__asm__ volatile(
    2dc4:	f384 8811 	msr	BASEPRI, r4
    2dc8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2dcc:	b99b      	cbnz	r3, 2df6 <generic_hfclk_start+0x56>
	hfclk_start();
    2dce:	f006 fcd0 	bl	9772 <hfclk_start>
}
    2dd2:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2dd8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ddc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2de0:	f012 0f01 	tst.w	r2, #1
    2de4:	d101      	bne.n	2dea <generic_hfclk_start+0x4a>
	bool already_started = false;
    2de6:	2300      	movs	r3, #0
    2de8:	e7ec      	b.n	2dc4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    2dea:	f7ff fe43 	bl	2a74 <get_hf_flags>
    2dee:	f006 fc6f 	bl	96d0 <set_on_state>
			already_started = true;
    2df2:	2301      	movs	r3, #1
    2df4:	e7e6      	b.n	2dc4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    2df6:	2100      	movs	r1, #0
    2df8:	4802      	ldr	r0, [pc, #8]	; (2e04 <generic_hfclk_start+0x64>)
    2dfa:	f006 fc7c 	bl	96f6 <clkstarted_handle>
		return;
    2dfe:	e7e8      	b.n	2dd2 <generic_hfclk_start+0x32>
    2e00:	20000d88 	.word	0x20000d88
    2e04:	0000a1cc 	.word	0x0000a1cc

00002e08 <z_nrf_clock_control_lf_on>:
{
    2e08:	b538      	push	{r3, r4, r5, lr}
    2e0a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2e0c:	4b1f      	ldr	r3, [pc, #124]	; (2e8c <z_nrf_clock_control_lf_on+0x84>)
    2e0e:	2101      	movs	r1, #1
    2e10:	f3bf 8f5b 	dmb	ish
    2e14:	e853 2f00 	ldrex	r2, [r3]
    2e18:	e843 1000 	strex	r0, r1, [r3]
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d1f9      	bne.n	2e14 <z_nrf_clock_control_lf_on+0xc>
    2e20:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2e24:	b142      	cbz	r2, 2e38 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    2e26:	b134      	cbz	r4, 2e36 <z_nrf_clock_control_lf_on+0x2e>
    2e28:	1e63      	subs	r3, r4, #1
    2e2a:	b2db      	uxtb	r3, r3
    2e2c:	2b01      	cmp	r3, #1
    2e2e:	d81f      	bhi.n	2e70 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    2e30:	4620      	mov	r0, r4
    2e32:	f7ff ff43 	bl	2cbc <lfclk_spinwait>
}
    2e36:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2e38:	4815      	ldr	r0, [pc, #84]	; (2e90 <z_nrf_clock_control_lf_on+0x88>)
    2e3a:	f006 fc0e 	bl	965a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2e3e:	4915      	ldr	r1, [pc, #84]	; (2e94 <z_nrf_clock_control_lf_on+0x8c>)
    2e40:	2300      	movs	r3, #0
    2e42:	604b      	str	r3, [r1, #4]
    2e44:	608b      	str	r3, [r1, #8]
    2e46:	60cb      	str	r3, [r1, #12]
    2e48:	2301      	movs	r3, #1
    2e4a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2e4c:	f7fd ff80 	bl	d50 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2e50:	2800      	cmp	r0, #0
    2e52:	dae8      	bge.n	2e26 <z_nrf_clock_control_lf_on+0x1e>
    2e54:	4d10      	ldr	r5, [pc, #64]	; (2e98 <z_nrf_clock_control_lf_on+0x90>)
    2e56:	f44f 7308 	mov.w	r3, #544	; 0x220
    2e5a:	462a      	mov	r2, r5
    2e5c:	490f      	ldr	r1, [pc, #60]	; (2e9c <z_nrf_clock_control_lf_on+0x94>)
    2e5e:	4810      	ldr	r0, [pc, #64]	; (2ea0 <z_nrf_clock_control_lf_on+0x98>)
    2e60:	f006 fa93 	bl	938a <assert_print>
    2e64:	f44f 7108 	mov.w	r1, #544	; 0x220
    2e68:	4628      	mov	r0, r5
    2e6a:	f006 fa87 	bl	937c <assert_post_action>
    2e6e:	e7da      	b.n	2e26 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    2e70:	4c09      	ldr	r4, [pc, #36]	; (2e98 <z_nrf_clock_control_lf_on+0x90>)
    2e72:	f240 2332 	movw	r3, #562	; 0x232
    2e76:	4622      	mov	r2, r4
    2e78:	490a      	ldr	r1, [pc, #40]	; (2ea4 <z_nrf_clock_control_lf_on+0x9c>)
    2e7a:	4809      	ldr	r0, [pc, #36]	; (2ea0 <z_nrf_clock_control_lf_on+0x98>)
    2e7c:	f006 fa85 	bl	938a <assert_print>
    2e80:	f240 2132 	movw	r1, #562	; 0x232
    2e84:	4620      	mov	r0, r4
    2e86:	f006 fa79 	bl	937c <assert_post_action>
    2e8a:	e7d4      	b.n	2e36 <z_nrf_clock_control_lf_on+0x2e>
    2e8c:	20000d8c 	.word	0x20000d8c
    2e90:	0000a1cc 	.word	0x0000a1cc
    2e94:	20000d20 	.word	0x20000d20
    2e98:	0000b05c 	.word	0x0000b05c
    2e9c:	0000b0c0 	.word	0x0000b0c0
    2ea0:	0000a4cc 	.word	0x0000a4cc
    2ea4:	0000a690 	.word	0x0000a690

00002ea8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2ea8:	b510      	push	{r4, lr}
    2eaa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2eac:	280a      	cmp	r0, #10
    2eae:	d007      	beq.n	2ec0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2eb0:	4b07      	ldr	r3, [pc, #28]	; (2ed0 <console_out+0x28>)
    2eb2:	6818      	ldr	r0, [r3, #0]
    2eb4:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2eb6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2eb8:	685b      	ldr	r3, [r3, #4]
    2eba:	4798      	blx	r3

	return c;
}
    2ebc:	4620      	mov	r0, r4
    2ebe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <console_out+0x28>)
    2ec2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2ec4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2ec6:	685b      	ldr	r3, [r3, #4]
    2ec8:	210d      	movs	r1, #13
    2eca:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2ecc:	e7f0      	b.n	2eb0 <console_out+0x8>
    2ece:	bf00      	nop
    2ed0:	20000d90 	.word	0x20000d90

00002ed4 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2ed4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2ed6:	4c04      	ldr	r4, [pc, #16]	; (2ee8 <uart_console_hook_install+0x14>)
    2ed8:	4620      	mov	r0, r4
    2eda:	f7ff fd7d 	bl	29d8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2ede:	4620      	mov	r0, r4
    2ee0:	f7fd fc8c 	bl	7fc <__printk_hook_install>
#endif
}
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	bf00      	nop
    2ee8:	00002ea9 	.word	0x00002ea9

00002eec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2eec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2eee:	4806      	ldr	r0, [pc, #24]	; (2f08 <uart_console_init+0x1c>)
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <uart_console_init+0x20>)
    2ef2:	6018      	str	r0, [r3, #0]
    2ef4:	f006 ffe4 	bl	9ec0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2ef8:	b118      	cbz	r0, 2f02 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    2efa:	f7ff ffeb 	bl	2ed4 <uart_console_hook_install>

	return 0;
    2efe:	2000      	movs	r0, #0
}
    2f00:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2f02:	f06f 0012 	mvn.w	r0, #18
    2f06:	e7fb      	b.n	2f00 <uart_console_init+0x14>
    2f08:	0000a22c 	.word	0x0000a22c
    2f0c:	20000d90 	.word	0x20000d90

00002f10 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2f10:	b128      	cbz	r0, 2f1e <get_dev+0xe>
    2f12:	2801      	cmp	r0, #1
    2f14:	d101      	bne.n	2f1a <get_dev+0xa>
    2f16:	4803      	ldr	r0, [pc, #12]	; (2f24 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2f18:	4770      	bx	lr
	const struct device *dev = NULL;
    2f1a:	2000      	movs	r0, #0
    2f1c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2f1e:	4802      	ldr	r0, [pc, #8]	; (2f28 <get_dev+0x18>)
    2f20:	4770      	bx	lr
    2f22:	bf00      	nop
    2f24:	0000a1e4 	.word	0x0000a1e4
    2f28:	0000a1fc 	.word	0x0000a1fc

00002f2c <gpio_nrfx_manage_callback>:
{
    2f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f30:	4616      	mov	r6, r2
	return port->data;
    2f32:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2f34:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2f36:	460c      	mov	r4, r1
    2f38:	b131      	cbz	r1, 2f48 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    2f3a:	6863      	ldr	r3, [r4, #4]
    2f3c:	b1a3      	cbz	r3, 2f68 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    2f3e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2f40:	2b00      	cmp	r3, #0
    2f42:	d03b      	beq.n	2fbc <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2f44:	2100      	movs	r1, #0
    2f46:	e02a      	b.n	2f9e <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    2f48:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2fe0 <gpio_nrfx_manage_callback+0xb4>
    2f4c:	2324      	movs	r3, #36	; 0x24
    2f4e:	4642      	mov	r2, r8
    2f50:	4924      	ldr	r1, [pc, #144]	; (2fe4 <gpio_nrfx_manage_callback+0xb8>)
    2f52:	4825      	ldr	r0, [pc, #148]	; (2fe8 <gpio_nrfx_manage_callback+0xbc>)
    2f54:	f006 fa19 	bl	938a <assert_print>
    2f58:	4824      	ldr	r0, [pc, #144]	; (2fec <gpio_nrfx_manage_callback+0xc0>)
    2f5a:	f006 fa16 	bl	938a <assert_print>
    2f5e:	2124      	movs	r1, #36	; 0x24
    2f60:	4640      	mov	r0, r8
    2f62:	f006 fa0b 	bl	937c <assert_post_action>
    2f66:	e7e8      	b.n	2f3a <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    2f68:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2fe0 <gpio_nrfx_manage_callback+0xb4>
    2f6c:	2325      	movs	r3, #37	; 0x25
    2f6e:	4642      	mov	r2, r8
    2f70:	491f      	ldr	r1, [pc, #124]	; (2ff0 <gpio_nrfx_manage_callback+0xc4>)
    2f72:	481d      	ldr	r0, [pc, #116]	; (2fe8 <gpio_nrfx_manage_callback+0xbc>)
    2f74:	f006 fa09 	bl	938a <assert_print>
    2f78:	481e      	ldr	r0, [pc, #120]	; (2ff4 <gpio_nrfx_manage_callback+0xc8>)
    2f7a:	f006 fa06 	bl	938a <assert_print>
    2f7e:	2125      	movs	r1, #37	; 0x25
    2f80:	4640      	mov	r0, r8
    2f82:	f006 f9fb 	bl	937c <assert_post_action>
    2f86:	e7da      	b.n	2f3e <gpio_nrfx_manage_callback+0x12>
	return node->next;
    2f88:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    2f8a:	606b      	str	r3, [r5, #4]
	return list->tail;
    2f8c:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2f8e:	4294      	cmp	r4, r2
    2f90:	d10f      	bne.n	2fb2 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    2f92:	607b      	str	r3, [r7, #4]
}
    2f94:	e00d      	b.n	2fb2 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    2f96:	6079      	str	r1, [r7, #4]
}
    2f98:	e00b      	b.n	2fb2 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2f9a:	4619      	mov	r1, r3
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	b15b      	cbz	r3, 2fb8 <gpio_nrfx_manage_callback+0x8c>
    2fa0:	429c      	cmp	r4, r3
    2fa2:	d1fa      	bne.n	2f9a <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    2fa4:	2900      	cmp	r1, #0
    2fa6:	d0ef      	beq.n	2f88 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    2fa8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    2faa:	600b      	str	r3, [r1, #0]
	return list->tail;
    2fac:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2fae:	429c      	cmp	r4, r3
    2fb0:	d0f1      	beq.n	2f96 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    2fb2:	2300      	movs	r3, #0
    2fb4:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2fb6:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    2fb8:	b903      	cbnz	r3, 2fbc <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    2fba:	b156      	cbz	r6, 2fd2 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    2fbc:	b166      	cbz	r6, 2fd8 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    2fbe:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2fc0:	6023      	str	r3, [r4, #0]
	list->head = node;
    2fc2:	606c      	str	r4, [r5, #4]
	return list->tail;
    2fc4:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    2fc6:	b10b      	cbz	r3, 2fcc <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2fc8:	2000      	movs	r0, #0
    2fca:	e006      	b.n	2fda <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    2fcc:	607c      	str	r4, [r7, #4]
    2fce:	2000      	movs	r0, #0
}
    2fd0:	e003      	b.n	2fda <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    2fd2:	f06f 0015 	mvn.w	r0, #21
    2fd6:	e000      	b.n	2fda <gpio_nrfx_manage_callback+0xae>
	return 0;
    2fd8:	2000      	movs	r0, #0
}
    2fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fde:	bf00      	nop
    2fe0:	0000b108 	.word	0x0000b108
    2fe4:	0000b138 	.word	0x0000b138
    2fe8:	0000a4cc 	.word	0x0000a4cc
    2fec:	0000b144 	.word	0x0000b144
    2ff0:	0000b154 	.word	0x0000b154
    2ff4:	0000b168 	.word	0x0000b168

00002ff8 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2ffc:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    3000:	0940      	lsrs	r0, r0, #5
    3002:	f7ff ff85 	bl	2f10 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    3006:	b380      	cbz	r0, 306a <nrfx_gpio_handler+0x72>
    3008:	4607      	mov	r7, r0
	return port->data;
    300a:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    300c:	2601      	movs	r6, #1
    300e:	40a6      	lsls	r6, r4
	return list->head;
    3010:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3012:	b11c      	cbz	r4, 301c <nrfx_gpio_handler+0x24>
    3014:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3016:	b17c      	cbz	r4, 3038 <nrfx_gpio_handler+0x40>
	return node->next;
    3018:	6825      	ldr	r5, [r4, #0]
    301a:	e00d      	b.n	3038 <nrfx_gpio_handler+0x40>
    301c:	4625      	mov	r5, r4
    301e:	e00b      	b.n	3038 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3020:	6863      	ldr	r3, [r4, #4]
    3022:	68a2      	ldr	r2, [r4, #8]
    3024:	4032      	ands	r2, r6
    3026:	4621      	mov	r1, r4
    3028:	4638      	mov	r0, r7
    302a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    302c:	b1dd      	cbz	r5, 3066 <nrfx_gpio_handler+0x6e>
    302e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    3030:	b105      	cbz	r5, 3034 <nrfx_gpio_handler+0x3c>
	return node->next;
    3032:	682b      	ldr	r3, [r5, #0]
    3034:	462c      	mov	r4, r5
    3036:	461d      	mov	r5, r3
    3038:	b1bc      	cbz	r4, 306a <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    303a:	68a3      	ldr	r3, [r4, #8]
    303c:	421e      	tst	r6, r3
    303e:	d0f5      	beq.n	302c <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    3040:	6863      	ldr	r3, [r4, #4]
    3042:	2b00      	cmp	r3, #0
    3044:	d1ec      	bne.n	3020 <nrfx_gpio_handler+0x28>
    3046:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3070 <nrfx_gpio_handler+0x78>
    304a:	2345      	movs	r3, #69	; 0x45
    304c:	4642      	mov	r2, r8
    304e:	4909      	ldr	r1, [pc, #36]	; (3074 <nrfx_gpio_handler+0x7c>)
    3050:	4809      	ldr	r0, [pc, #36]	; (3078 <nrfx_gpio_handler+0x80>)
    3052:	f006 f99a 	bl	938a <assert_print>
    3056:	4809      	ldr	r0, [pc, #36]	; (307c <nrfx_gpio_handler+0x84>)
    3058:	f006 f997 	bl	938a <assert_print>
    305c:	2145      	movs	r1, #69	; 0x45
    305e:	4640      	mov	r0, r8
    3060:	f006 f98c 	bl	937c <assert_post_action>
    3064:	e7dc      	b.n	3020 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3066:	462b      	mov	r3, r5
    3068:	e7e4      	b.n	3034 <nrfx_gpio_handler+0x3c>
}
    306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    306e:	bf00      	nop
    3070:	0000b108 	.word	0x0000b108
    3074:	0000b180 	.word	0x0000b180
    3078:	0000a4cc 	.word	0x0000a4cc
    307c:	0000b168 	.word	0x0000b168

00003080 <gpio_nrfx_pin_interrupt_configure>:
{
    3080:	b5f0      	push	{r4, r5, r6, r7, lr}
    3082:	b085      	sub	sp, #20
    3084:	460e      	mov	r6, r1
    3086:	4619      	mov	r1, r3
	return port->config;
    3088:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    308a:	7b1b      	ldrb	r3, [r3, #12]
    308c:	f006 041f 	and.w	r4, r6, #31
    3090:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3094:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    3098:	d022      	beq.n	30e0 <gpio_nrfx_pin_interrupt_configure+0x60>
    309a:	4607      	mov	r7, r0
    309c:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    309e:	2300      	movs	r3, #0
    30a0:	9302      	str	r3, [sp, #8]
    30a2:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    30a4:	4610      	mov	r0, r2
    30a6:	f006 fbfb 	bl	98a0 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    30aa:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    30ae:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    30b0:	6899      	ldr	r1, [r3, #8]
    30b2:	40f1      	lsrs	r1, r6
    30b4:	f011 0101 	ands.w	r1, r1, #1
    30b8:	d102      	bne.n	30c0 <gpio_nrfx_pin_interrupt_configure+0x40>
    30ba:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    30be:	d014      	beq.n	30ea <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    30c0:	2300      	movs	r3, #0
    30c2:	aa02      	add	r2, sp, #8
    30c4:	4619      	mov	r1, r3
    30c6:	4620      	mov	r0, r4
    30c8:	f001 ffdc 	bl	5084 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    30cc:	4b32      	ldr	r3, [pc, #200]	; (3198 <gpio_nrfx_pin_interrupt_configure+0x118>)
    30ce:	4298      	cmp	r0, r3
    30d0:	d15f      	bne.n	3192 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    30d2:	2101      	movs	r1, #1
    30d4:	4620      	mov	r0, r4
    30d6:	f002 fa39 	bl	554c <nrfx_gpiote_trigger_enable>
	return 0;
    30da:	2000      	movs	r0, #0
}
    30dc:	b005      	add	sp, #20
    30de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    30e0:	4620      	mov	r0, r4
    30e2:	f002 fb3f 	bl	5764 <nrfx_gpiote_trigger_disable>
		return 0;
    30e6:	2000      	movs	r0, #0
    30e8:	e7f8      	b.n	30dc <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    30ea:	0963      	lsrs	r3, r4, #5
    30ec:	d01f      	beq.n	312e <gpio_nrfx_pin_interrupt_configure+0xae>
    30ee:	2b01      	cmp	r3, #1
    30f0:	d101      	bne.n	30f6 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    30f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    30f6:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    30fa:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    30fc:	f011 0f01 	tst.w	r1, #1
    3100:	d018      	beq.n	3134 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    3102:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3106:	0963      	lsrs	r3, r4, #5
    3108:	d022      	beq.n	3150 <gpio_nrfx_pin_interrupt_configure+0xd0>
    310a:	2b01      	cmp	r3, #1
    310c:	d023      	beq.n	3156 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    310e:	4e23      	ldr	r6, [pc, #140]	; (319c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3110:	f240 232e 	movw	r3, #558	; 0x22e
    3114:	4632      	mov	r2, r6
    3116:	4922      	ldr	r1, [pc, #136]	; (31a0 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3118:	4822      	ldr	r0, [pc, #136]	; (31a4 <gpio_nrfx_pin_interrupt_configure+0x124>)
    311a:	f006 f936 	bl	938a <assert_print>
    311e:	f240 212e 	movw	r1, #558	; 0x22e
    3122:	4630      	mov	r0, r6
    3124:	f006 f92a 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    312c:	e014      	b.n	3158 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    312e:	f04f 31ff 	mov.w	r1, #4294967295
    3132:	e7e0      	b.n	30f6 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3134:	4d19      	ldr	r5, [pc, #100]	; (319c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3136:	f240 2329 	movw	r3, #553	; 0x229
    313a:	462a      	mov	r2, r5
    313c:	491a      	ldr	r1, [pc, #104]	; (31a8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    313e:	4819      	ldr	r0, [pc, #100]	; (31a4 <gpio_nrfx_pin_interrupt_configure+0x124>)
    3140:	f006 f923 	bl	938a <assert_print>
    3144:	f240 2129 	movw	r1, #553	; 0x229
    3148:	4628      	mov	r0, r5
    314a:	f006 f917 	bl	937c <assert_post_action>
    314e:	e7d8      	b.n	3102 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    3150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3154:	e000      	b.n	3158 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3156:	4b15      	ldr	r3, [pc, #84]	; (31ac <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3158:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    315c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3160:	f013 0f01 	tst.w	r3, #1
    3164:	d1ac      	bne.n	30c0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3166:	f10d 0107 	add.w	r1, sp, #7
    316a:	4620      	mov	r0, r4
    316c:	f002 f97e 	bl	546c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3170:	4b0f      	ldr	r3, [pc, #60]	; (31b0 <gpio_nrfx_pin_interrupt_configure+0x130>)
    3172:	4298      	cmp	r0, r3
    3174:	d003      	beq.n	317e <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    3176:	f10d 0307 	add.w	r3, sp, #7
    317a:	9303      	str	r3, [sp, #12]
    317c:	e7a0      	b.n	30c0 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    317e:	f10d 0007 	add.w	r0, sp, #7
    3182:	f002 f9db 	bl	553c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3186:	4b04      	ldr	r3, [pc, #16]	; (3198 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3188:	4298      	cmp	r0, r3
    318a:	d0f4      	beq.n	3176 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    318c:	f06f 000b 	mvn.w	r0, #11
    3190:	e7a4      	b.n	30dc <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    3192:	f06f 0004 	mvn.w	r0, #4
    3196:	e7a1      	b.n	30dc <gpio_nrfx_pin_interrupt_configure+0x5c>
    3198:	0bad0000 	.word	0x0bad0000
    319c:	0000b18c 	.word	0x0000b18c
    31a0:	0000a690 	.word	0x0000a690
    31a4:	0000a4cc 	.word	0x0000a4cc
    31a8:	0000b1c0 	.word	0x0000b1c0
    31ac:	50000300 	.word	0x50000300
    31b0:	0bad0004 	.word	0x0bad0004

000031b4 <pin_uninit>:
{
    31b4:	b530      	push	{r4, r5, lr}
    31b6:	b083      	sub	sp, #12
    31b8:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    31ba:	f10d 0107 	add.w	r1, sp, #7
    31be:	f002 f955 	bl	546c <nrfx_gpiote_channel_get>
    31c2:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    31c4:	4620      	mov	r0, r4
    31c6:	f002 fb35 	bl	5834 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    31ca:	4b0b      	ldr	r3, [pc, #44]	; (31f8 <pin_uninit+0x44>)
    31cc:	4298      	cmp	r0, r3
    31ce:	d10f      	bne.n	31f0 <pin_uninit+0x3c>
	if (free_ch) {
    31d0:	429d      	cmp	r5, r3
    31d2:	d005      	beq.n	31e0 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    31d4:	4b08      	ldr	r3, [pc, #32]	; (31f8 <pin_uninit+0x44>)
    31d6:	4298      	cmp	r0, r3
    31d8:	d107      	bne.n	31ea <pin_uninit+0x36>
    31da:	2000      	movs	r0, #0
}
    31dc:	b003      	add	sp, #12
    31de:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    31e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    31e4:	f002 f9a2 	bl	552c <nrfx_gpiote_channel_free>
    31e8:	e7f4      	b.n	31d4 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    31ea:	f06f 0004 	mvn.w	r0, #4
    31ee:	e7f5      	b.n	31dc <pin_uninit+0x28>
		return -EIO;
    31f0:	f06f 0004 	mvn.w	r0, #4
    31f4:	e7f2      	b.n	31dc <pin_uninit+0x28>
    31f6:	bf00      	nop
    31f8:	0bad0000 	.word	0x0bad0000

000031fc <gpio_nrfx_pin_configure>:
{
    31fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3200:	b087      	sub	sp, #28
	return port->config;
    3202:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3206:	f898 300c 	ldrb.w	r3, [r8, #12]
    320a:	f001 051f 	and.w	r5, r1, #31
    320e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3212:	2a00      	cmp	r2, #0
    3214:	d044      	beq.n	32a0 <gpio_nrfx_pin_configure+0xa4>
    3216:	460c      	mov	r4, r1
    3218:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    321a:	2600      	movs	r6, #0
    321c:	9603      	str	r6, [sp, #12]
    321e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3220:	f10d 0117 	add.w	r1, sp, #23
    3224:	4620      	mov	r0, r4
    3226:	f002 f921 	bl	546c <nrfx_gpiote_channel_get>
    322a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    322c:	4633      	mov	r3, r6
    322e:	aa03      	add	r2, sp, #12
    3230:	4631      	mov	r1, r6
    3232:	4628      	mov	r0, r5
    3234:	f001 ff26 	bl	5084 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3238:	4b30      	ldr	r3, [pc, #192]	; (32fc <gpio_nrfx_pin_configure+0x100>)
    323a:	4298      	cmp	r0, r3
    323c:	d15b      	bne.n	32f6 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    323e:	4599      	cmp	r9, r3
    3240:	d036      	beq.n	32b0 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    3242:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    3246:	d043      	beq.n	32d0 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    3248:	f10d 0103 	add.w	r1, sp, #3
    324c:	4638      	mov	r0, r7
    324e:	f006 faae 	bl	97ae <get_drive>
		if (rv != 0) {
    3252:	4606      	mov	r6, r0
    3254:	bb40      	cbnz	r0, 32a8 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    3256:	f89d 3003 	ldrb.w	r3, [sp, #3]
    325a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    325e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    3262:	bf0c      	ite	eq
    3264:	2301      	moveq	r3, #1
    3266:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    3268:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    326c:	4638      	mov	r0, r7
    326e:	f006 fae4 	bl	983a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    3272:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3276:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    327a:	d01e      	beq.n	32ba <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    327c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3280:	2101      	movs	r1, #1
    3282:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    3286:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    328a:	2200      	movs	r2, #0
    328c:	a901      	add	r1, sp, #4
    328e:	4628      	mov	r0, r5
    3290:	f001 ffec 	bl	526c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3294:	4b19      	ldr	r3, [pc, #100]	; (32fc <gpio_nrfx_pin_configure+0x100>)
    3296:	4298      	cmp	r0, r3
    3298:	d006      	beq.n	32a8 <gpio_nrfx_pin_configure+0xac>
    329a:	f06f 0615 	mvn.w	r6, #21
    329e:	e003      	b.n	32a8 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    32a0:	4628      	mov	r0, r5
    32a2:	f7ff ff87 	bl	31b4 <pin_uninit>
    32a6:	4606      	mov	r6, r0
}
    32a8:	4630      	mov	r0, r6
    32aa:	b007      	add	sp, #28
    32ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    32b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    32b4:	f002 f93a 	bl	552c <nrfx_gpiote_channel_free>
    32b8:	e7c3      	b.n	3242 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    32ba:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    32be:	d0e4      	beq.n	328a <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    32c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    32c4:	2301      	movs	r3, #1
    32c6:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    32ca:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    32ce:	e7dc      	b.n	328a <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    32d0:	4638      	mov	r0, r7
    32d2:	f006 fab2 	bl	983a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    32d6:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    32da:	2300      	movs	r3, #0
    32dc:	461a      	mov	r2, r3
    32de:	a902      	add	r1, sp, #8
    32e0:	4628      	mov	r0, r5
    32e2:	f001 fecf 	bl	5084 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    32e6:	4b05      	ldr	r3, [pc, #20]	; (32fc <gpio_nrfx_pin_configure+0x100>)
    32e8:	4298      	cmp	r0, r3
    32ea:	d101      	bne.n	32f0 <gpio_nrfx_pin_configure+0xf4>
    32ec:	2600      	movs	r6, #0
    32ee:	e7db      	b.n	32a8 <gpio_nrfx_pin_configure+0xac>
    32f0:	f06f 0615 	mvn.w	r6, #21
    32f4:	e7d8      	b.n	32a8 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    32f6:	f06f 0615 	mvn.w	r6, #21
    32fa:	e7d5      	b.n	32a8 <gpio_nrfx_pin_configure+0xac>
    32fc:	0bad0000 	.word	0x0bad0000

00003300 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3300:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3302:	f002 f909 	bl	5518 <nrfx_gpiote_is_init>
    3306:	b108      	cbz	r0, 330c <gpio_nrfx_init+0xc>
		return 0;
    3308:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    330a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    330c:	f002 f8da 	bl	54c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3310:	4b08      	ldr	r3, [pc, #32]	; (3334 <gpio_nrfx_init+0x34>)
    3312:	4298      	cmp	r0, r3
    3314:	d10a      	bne.n	332c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3316:	2100      	movs	r1, #0
    3318:	4807      	ldr	r0, [pc, #28]	; (3338 <gpio_nrfx_init+0x38>)
    331a:	f002 f8a1 	bl	5460 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    331e:	2200      	movs	r2, #0
    3320:	2105      	movs	r1, #5
    3322:	2006      	movs	r0, #6
    3324:	f7fe feea 	bl	20fc <z_arm_irq_priority_set>
	return 0;
    3328:	2000      	movs	r0, #0
    332a:	e7ee      	b.n	330a <gpio_nrfx_init+0xa>
		return -EIO;
    332c:	f06f 0004 	mvn.w	r0, #4
    3330:	e7eb      	b.n	330a <gpio_nrfx_init+0xa>
    3332:	bf00      	nop
    3334:	0bad0000 	.word	0x0bad0000
    3338:	00002ff9 	.word	0x00002ff9

0000333c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    333c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    333e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3340:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    3344:	d06f      	beq.n	3426 <baudrate_set+0xea>
    3346:	d83a      	bhi.n	33be <baudrate_set+0x82>
    3348:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    334c:	d06e      	beq.n	342c <baudrate_set+0xf0>
    334e:	d90a      	bls.n	3366 <baudrate_set+0x2a>
    3350:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    3354:	d075      	beq.n	3442 <baudrate_set+0x106>
    3356:	d924      	bls.n	33a2 <baudrate_set+0x66>
    3358:	f647 2312 	movw	r3, #31250	; 0x7a12
    335c:	4299      	cmp	r1, r3
    335e:	d12b      	bne.n	33b8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3360:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3364:	e013      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    3366:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    336a:	d061      	beq.n	3430 <baudrate_set+0xf4>
    336c:	d907      	bls.n	337e <baudrate_set+0x42>
    336e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    3372:	d063      	beq.n	343c <baudrate_set+0x100>
    3374:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    3378:	d110      	bne.n	339c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    337a:	4b3c      	ldr	r3, [pc, #240]	; (346c <baudrate_set+0x130>)
    337c:	e007      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    337e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    3382:	d058      	beq.n	3436 <baudrate_set+0xfa>
    3384:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    3388:	d105      	bne.n	3396 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    338a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    338e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    3392:	2000      	movs	r0, #0
    3394:	4770      	bx	lr
	switch (baudrate) {
    3396:	f06f 0015 	mvn.w	r0, #21
    339a:	4770      	bx	lr
    339c:	f06f 0015 	mvn.w	r0, #21
    33a0:	4770      	bx	lr
    33a2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    33a6:	d04e      	beq.n	3446 <baudrate_set+0x10a>
    33a8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    33ac:	d101      	bne.n	33b2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    33ae:	4b30      	ldr	r3, [pc, #192]	; (3470 <baudrate_set+0x134>)
    33b0:	e7ed      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    33b2:	f06f 0015 	mvn.w	r0, #21
    33b6:	4770      	bx	lr
    33b8:	f06f 0015 	mvn.w	r0, #21
    33bc:	4770      	bx	lr
    33be:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    33c2:	d042      	beq.n	344a <baudrate_set+0x10e>
    33c4:	d909      	bls.n	33da <baudrate_set+0x9e>
    33c6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    33ca:	d046      	beq.n	345a <baudrate_set+0x11e>
    33cc:	d91f      	bls.n	340e <baudrate_set+0xd2>
    33ce:	4b29      	ldr	r3, [pc, #164]	; (3474 <baudrate_set+0x138>)
    33d0:	4299      	cmp	r1, r3
    33d2:	d148      	bne.n	3466 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    33d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    33d8:	e7d9      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    33da:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    33de:	d037      	beq.n	3450 <baudrate_set+0x114>
    33e0:	d905      	bls.n	33ee <baudrate_set+0xb2>
    33e2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    33e6:	d10f      	bne.n	3408 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    33e8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    33ec:	e7cf      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    33ee:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    33f2:	4299      	cmp	r1, r3
    33f4:	d02e      	beq.n	3454 <baudrate_set+0x118>
    33f6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    33fa:	d102      	bne.n	3402 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    33fc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3400:	e7c5      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    3402:	f06f 0015 	mvn.w	r0, #21
    3406:	4770      	bx	lr
    3408:	f06f 0015 	mvn.w	r0, #21
    340c:	4770      	bx	lr
    340e:	4b1a      	ldr	r3, [pc, #104]	; (3478 <baudrate_set+0x13c>)
    3410:	4299      	cmp	r1, r3
    3412:	d025      	beq.n	3460 <baudrate_set+0x124>
    3414:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3418:	d102      	bne.n	3420 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    341a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    341e:	e7b6      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    3420:	f06f 0015 	mvn.w	r0, #21
    3424:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3426:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    342a:	e7b0      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    342c:	4b13      	ldr	r3, [pc, #76]	; (347c <baudrate_set+0x140>)
    342e:	e7ae      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3430:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3434:	e7ab      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    3436:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    343a:	e7a8      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    343c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3440:	e7a5      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3442:	4b0f      	ldr	r3, [pc, #60]	; (3480 <baudrate_set+0x144>)
    3444:	e7a3      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3446:	4b0f      	ldr	r3, [pc, #60]	; (3484 <baudrate_set+0x148>)
    3448:	e7a1      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    344a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    344e:	e79e      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3450:	4b0d      	ldr	r3, [pc, #52]	; (3488 <baudrate_set+0x14c>)
    3452:	e79c      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3454:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3458:	e799      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    345a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    345e:	e796      	b.n	338e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3460:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3464:	e793      	b.n	338e <baudrate_set+0x52>
	switch (baudrate) {
    3466:	f06f 0015 	mvn.w	r0, #21
}
    346a:	4770      	bx	lr
    346c:	0013b000 	.word	0x0013b000
    3470:	004ea000 	.word	0x004ea000
    3474:	000f4240 	.word	0x000f4240
    3478:	0003d090 	.word	0x0003d090
    347c:	00275000 	.word	0x00275000
    3480:	0075c000 	.word	0x0075c000
    3484:	003af000 	.word	0x003af000
    3488:	013a9000 	.word	0x013a9000

0000348c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3490:	4605      	mov	r5, r0
    3492:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    3494:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3498:	f006 fd5f 	bl	9f5a <k_is_in_isr>
    349c:	b920      	cbnz	r0, 34a8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    349e:	4b16      	ldr	r3, [pc, #88]	; (34f8 <uarte_nrfx_poll_out+0x6c>)
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	b143      	cbz	r3, 34b6 <uarte_nrfx_poll_out+0x2a>
    34a4:	2300      	movs	r3, #0
    34a6:	e000      	b.n	34aa <uarte_nrfx_poll_out+0x1e>
    34a8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    34aa:	b953      	cbnz	r3, 34c2 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    34ac:	4628      	mov	r0, r5
    34ae:	f006 fb00 	bl	9ab2 <wait_tx_ready>
    34b2:	4606      	mov	r6, r0
    34b4:	e013      	b.n	34de <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    34b6:	2301      	movs	r3, #1
    34b8:	e7f7      	b.n	34aa <uarte_nrfx_poll_out+0x1e>
    34ba:	f384 8811 	msr	BASEPRI, r4
    34be:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    34c2:	f04f 0320 	mov.w	r3, #32
    34c6:	f3ef 8411 	mrs	r4, BASEPRI
    34ca:	f383 8812 	msr	BASEPRI_MAX, r3
    34ce:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    34d2:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    34d4:	4628      	mov	r0, r5
    34d6:	f006 fa9e 	bl	9a16 <is_tx_ready>
    34da:	2800      	cmp	r0, #0
    34dc:	d0ed      	beq.n	34ba <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    34de:	4641      	mov	r1, r8
    34e0:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    34e4:	2201      	movs	r2, #1
    34e6:	4628      	mov	r0, r5
    34e8:	f006 faaf 	bl	9a4a <tx_start>
	__asm__ volatile(
    34ec:	f386 8811 	msr	BASEPRI, r6
    34f0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    34f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34f8:	200014a1 	.word	0x200014a1

000034fc <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    34fc:	b538      	push	{r3, r4, r5, lr}
    34fe:	4604      	mov	r4, r0
    3500:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3502:	f101 0012 	add.w	r0, r1, #18
    3506:	f002 fa21 	bl	594c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    350a:	4b0c      	ldr	r3, [pc, #48]	; (353c <endtx_stoptx_ppi_init+0x40>)
    350c:	4298      	cmp	r0, r3
    350e:	d111      	bne.n	3534 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3510:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3512:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    3516:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3518:	4a09      	ldr	r2, [pc, #36]	; (3540 <endtx_stoptx_ppi_init+0x44>)
    351a:	33a2      	adds	r3, #162	; 0xa2
    351c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3524:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3526:	7ca9      	ldrb	r1, [r5, #18]
    3528:	2301      	movs	r3, #1
    352a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    352c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    3530:	2000      	movs	r0, #0
}
    3532:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    3534:	f06f 0004 	mvn.w	r0, #4
    3538:	e7fb      	b.n	3532 <endtx_stoptx_ppi_init+0x36>
    353a:	bf00      	nop
    353c:	0bad0000 	.word	0x0bad0000
    3540:	4001f000 	.word	0x4001f000

00003544 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3544:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3548:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    354c:	4b01      	ldr	r3, [pc, #4]	; (3554 <set_comparator+0x10>)
    354e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3552:	4770      	bx	lr
    3554:	40011000 	.word	0x40011000

00003558 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3558:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    355c:	4b01      	ldr	r3, [pc, #4]	; (3564 <get_comparator+0xc>)
    355e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    3562:	4770      	bx	lr
    3564:	40011000 	.word	0x40011000

00003568 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    356c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    356e:	4a02      	ldr	r2, [pc, #8]	; (3578 <event_enable+0x10>)
    3570:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3574:	4770      	bx	lr
    3576:	bf00      	nop
    3578:	40011000 	.word	0x40011000

0000357c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    357c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3580:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3582:	4a02      	ldr	r2, [pc, #8]	; (358c <event_disable+0x10>)
    3584:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3588:	4770      	bx	lr
    358a:	bf00      	nop
    358c:	40011000 	.word	0x40011000

00003590 <counter>:
     return p_reg->COUNTER;
    3590:	4b01      	ldr	r3, [pc, #4]	; (3598 <counter+0x8>)
    3592:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    3596:	4770      	bx	lr
    3598:	40011000 	.word	0x40011000

0000359c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    359c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    359e:	2301      	movs	r3, #1
    35a0:	4083      	lsls	r3, r0
    35a2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    35a6:	4a10      	ldr	r2, [pc, #64]	; (35e8 <compare_int_lock+0x4c>)
    35a8:	f3bf 8f5b 	dmb	ish
    35ac:	e852 1f00 	ldrex	r1, [r2]
    35b0:	ea01 0e0c 	and.w	lr, r1, ip
    35b4:	e842 e400 	strex	r4, lr, [r2]
    35b8:	2c00      	cmp	r4, #0
    35ba:	d1f7      	bne.n	35ac <compare_int_lock+0x10>
    35bc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    35c4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    35c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    35cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    35d0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    35d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35d8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    35dc:	420b      	tst	r3, r1
}
    35de:	bf14      	ite	ne
    35e0:	2001      	movne	r0, #1
    35e2:	2000      	moveq	r0, #0
    35e4:	bd10      	pop	{r4, pc}
    35e6:	bf00      	nop
    35e8:	20000db0 	.word	0x20000db0

000035ec <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    35ec:	b570      	push	{r4, r5, r6, lr}
    35ee:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    35f0:	f006 fb19 	bl	9c26 <full_int_lock>
    35f4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    35f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    35fa:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    35fc:	4a17      	ldr	r2, [pc, #92]	; (365c <channel_processing_check_and_clear+0x70>)
    35fe:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3602:	4213      	tst	r3, r2
    3604:	d105      	bne.n	3612 <channel_processing_check_and_clear+0x26>
	bool result = false;
    3606:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    3608:	4628      	mov	r0, r5
    360a:	f006 fb15 	bl	9c38 <full_int_unlock>

	return result;
}
    360e:	4630      	mov	r0, r6
    3610:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3612:	2301      	movs	r3, #1
    3614:	40a3      	lsls	r3, r4
    3616:	43db      	mvns	r3, r3
    3618:	4a11      	ldr	r2, [pc, #68]	; (3660 <channel_processing_check_and_clear+0x74>)
    361a:	f3bf 8f5b 	dmb	ish
    361e:	e852 1f00 	ldrex	r1, [r2]
    3622:	ea01 0003 	and.w	r0, r1, r3
    3626:	e842 0600 	strex	r6, r0, [r2]
    362a:	2e00      	cmp	r6, #0
    362c:	d1f7      	bne.n	361e <channel_processing_check_and_clear+0x32>
    362e:	f3bf 8f5b 	dmb	ish
    3632:	b959      	cbnz	r1, 364c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3634:	f104 0350 	add.w	r3, r4, #80	; 0x50
    3638:	009b      	lsls	r3, r3, #2
    363a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    363c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3640:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3644:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3646:	b113      	cbz	r3, 364e <channel_processing_check_and_clear+0x62>
    3648:	2301      	movs	r3, #1
    364a:	e000      	b.n	364e <channel_processing_check_and_clear+0x62>
    364c:	2301      	movs	r3, #1
		if (result) {
    364e:	461e      	mov	r6, r3
    3650:	2b00      	cmp	r3, #0
    3652:	d0d9      	beq.n	3608 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    3654:	4620      	mov	r0, r4
    3656:	f006 fad7 	bl	9c08 <event_clear>
    365a:	e7d5      	b.n	3608 <channel_processing_check_and_clear+0x1c>
    365c:	40011000 	.word	0x40011000
    3660:	20000dac 	.word	0x20000dac

00003664 <compare_int_unlock>:
	if (key) {
    3664:	b901      	cbnz	r1, 3668 <compare_int_unlock+0x4>
}
    3666:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    3668:	2301      	movs	r3, #1
    366a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    366c:	4a11      	ldr	r2, [pc, #68]	; (36b4 <compare_int_unlock+0x50>)
    366e:	f3bf 8f5b 	dmb	ish
    3672:	e852 1f00 	ldrex	r1, [r2]
    3676:	4319      	orrs	r1, r3
    3678:	e842 1c00 	strex	ip, r1, [r2]
    367c:	f1bc 0f00 	cmp.w	ip, #0
    3680:	d1f7      	bne.n	3672 <compare_int_unlock+0xe>
    3682:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    368a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    368c:	4a0a      	ldr	r2, [pc, #40]	; (36b8 <compare_int_unlock+0x54>)
    368e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3692:	f3bf 8f5b 	dmb	ish
    3696:	4b09      	ldr	r3, [pc, #36]	; (36bc <compare_int_unlock+0x58>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    369e:	fa23 f000 	lsr.w	r0, r3, r0
    36a2:	f010 0f01 	tst.w	r0, #1
    36a6:	d0de      	beq.n	3666 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36a8:	4b05      	ldr	r3, [pc, #20]	; (36c0 <compare_int_unlock+0x5c>)
    36aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    36ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    36b2:	e7d8      	b.n	3666 <compare_int_unlock+0x2>
    36b4:	20000db0 	.word	0x20000db0
    36b8:	40011000 	.word	0x40011000
    36bc:	20000dac 	.word	0x20000dac
    36c0:	e000e100 	.word	0xe000e100

000036c4 <sys_clock_timeout_handler>:
{
    36c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36c8:	4607      	mov	r7, r0
    36ca:	4614      	mov	r4, r2
    36cc:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    36ce:	4610      	mov	r0, r2
    36d0:	4619      	mov	r1, r3
    36d2:	f006 faa5 	bl	9c20 <absolute_time_to_cc>
    36d6:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    36d8:	4b15      	ldr	r3, [pc, #84]	; (3730 <sys_clock_timeout_handler+0x6c>)
    36da:	681a      	ldr	r2, [r3, #0]
    36dc:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    36de:	601c      	str	r4, [r3, #0]
    36e0:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    36e2:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    36e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    36ea:	d309      	bcc.n	3700 <sys_clock_timeout_handler+0x3c>
	return false;
    36ec:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    36ee:	f004 fed5 	bl	849c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    36f2:	4638      	mov	r0, r7
    36f4:	f7ff ff30 	bl	3558 <get_comparator>
    36f8:	42a8      	cmp	r0, r5
    36fa:	d00e      	beq.n	371a <sys_clock_timeout_handler+0x56>
}
    36fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3700:	4b0c      	ldr	r3, [pc, #48]	; (3734 <sys_clock_timeout_handler+0x70>)
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	0a1a      	lsrs	r2, r3, #8
    3706:	061b      	lsls	r3, r3, #24
    3708:	eb15 0803 	adds.w	r8, r5, r3
    370c:	f142 0900 	adc.w	r9, r2, #0
    3710:	4b09      	ldr	r3, [pc, #36]	; (3738 <sys_clock_timeout_handler+0x74>)
    3712:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    3716:	2401      	movs	r4, #1
    3718:	e7e9      	b.n	36ee <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    371a:	b11c      	cbz	r4, 3724 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    371c:	4638      	mov	r0, r7
    371e:	f7ff ff23 	bl	3568 <event_enable>
}
    3722:	e7eb      	b.n	36fc <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3724:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3728:	4638      	mov	r0, r7
    372a:	f7ff ff0b 	bl	3544 <set_comparator>
    372e:	e7f5      	b.n	371c <sys_clock_timeout_handler+0x58>
    3730:	20000648 	.word	0x20000648
    3734:	20000db4 	.word	0x20000db4
    3738:	20000630 	.word	0x20000630

0000373c <z_nrf_rtc_timer_read>:
{
    373c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    373e:	4b0d      	ldr	r3, [pc, #52]	; (3774 <z_nrf_rtc_timer_read+0x38>)
    3740:	681c      	ldr	r4, [r3, #0]
    3742:	0a25      	lsrs	r5, r4, #8
    3744:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3746:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    374a:	f7ff ff21 	bl	3590 <counter>
    374e:	4603      	mov	r3, r0
	val += cntr;
    3750:	1900      	adds	r0, r0, r4
    3752:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    375a:	d20a      	bcs.n	3772 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    375c:	4b06      	ldr	r3, [pc, #24]	; (3778 <z_nrf_rtc_timer_read+0x3c>)
    375e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3762:	4290      	cmp	r0, r2
    3764:	eb71 0303 	sbcs.w	r3, r1, r3
    3768:	d203      	bcs.n	3772 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    376a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    376e:	f141 0100 	adc.w	r1, r1, #0
}
    3772:	bd38      	pop	{r3, r4, r5, pc}
    3774:	20000db4 	.word	0x20000db4
    3778:	20000630 	.word	0x20000630

0000377c <compare_set_nolocks>:
{
    377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    377e:	4606      	mov	r6, r0
    3780:	4614      	mov	r4, r2
    3782:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3784:	4610      	mov	r0, r2
    3786:	4619      	mov	r1, r3
    3788:	f006 fa4a 	bl	9c20 <absolute_time_to_cc>
    378c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    378e:	f7ff ffd5 	bl	373c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3792:	42a0      	cmp	r0, r4
    3794:	eb71 0305 	sbcs.w	r3, r1, r5
    3798:	d21d      	bcs.n	37d6 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    379a:	1a23      	subs	r3, r4, r0
    379c:	eb65 0101 	sbc.w	r1, r5, r1
    37a0:	4a1b      	ldr	r2, [pc, #108]	; (3810 <compare_set_nolocks+0x94>)
    37a2:	4293      	cmp	r3, r2
    37a4:	f171 0300 	sbcs.w	r3, r1, #0
    37a8:	d22f      	bcs.n	380a <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    37aa:	4b1a      	ldr	r3, [pc, #104]	; (3814 <compare_set_nolocks+0x98>)
    37ac:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    37b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    37b4:	42ab      	cmp	r3, r5
    37b6:	bf08      	it	eq
    37b8:	42a2      	cmpeq	r2, r4
    37ba:	d01a      	beq.n	37f2 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    37bc:	4639      	mov	r1, r7
    37be:	4630      	mov	r0, r6
    37c0:	f006 fa3f 	bl	9c42 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    37c4:	4639      	mov	r1, r7
    37c6:	f006 fa1b 	bl	9c00 <counter_sub>
    37ca:	1900      	adds	r0, r0, r4
    37cc:	f145 0300 	adc.w	r3, r5, #0
    37d0:	4604      	mov	r4, r0
    37d2:	461d      	mov	r5, r3
    37d4:	e00d      	b.n	37f2 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    37d6:	2301      	movs	r3, #1
    37d8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    37da:	4a0f      	ldr	r2, [pc, #60]	; (3818 <compare_set_nolocks+0x9c>)
    37dc:	f3bf 8f5b 	dmb	ish
    37e0:	e852 1f00 	ldrex	r1, [r2]
    37e4:	4319      	orrs	r1, r3
    37e6:	e842 1000 	strex	r0, r1, [r2]
    37ea:	2800      	cmp	r0, #0
    37ec:	d1f8      	bne.n	37e0 <compare_set_nolocks+0x64>
    37ee:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    37f2:	4b08      	ldr	r3, [pc, #32]	; (3814 <compare_set_nolocks+0x98>)
    37f4:	0132      	lsls	r2, r6, #4
    37f6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    37fa:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    37fe:	9906      	ldr	r1, [sp, #24]
    3800:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3802:	9b07      	ldr	r3, [sp, #28]
    3804:	6073      	str	r3, [r6, #4]
	return ret;
    3806:	2000      	movs	r0, #0
}
    3808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    380a:	f06f 0015 	mvn.w	r0, #21
    380e:	e7fb      	b.n	3808 <compare_set_nolocks+0x8c>
    3810:	01000001 	.word	0x01000001
    3814:	20000638 	.word	0x20000638
    3818:	20000dac 	.word	0x20000dac

0000381c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    381c:	b530      	push	{r4, r5, lr}
    381e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    3820:	2300      	movs	r3, #0
    3822:	4a1d      	ldr	r2, [pc, #116]	; (3898 <sys_clock_driver_init+0x7c>)
    3824:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3828:	2b00      	cmp	r3, #0
    382a:	dd24      	ble.n	3876 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    382c:	4c1a      	ldr	r4, [pc, #104]	; (3898 <sys_clock_driver_init+0x7c>)
    382e:	2502      	movs	r5, #2
    3830:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3834:	4b19      	ldr	r3, [pc, #100]	; (389c <sys_clock_driver_init+0x80>)
    3836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    383a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    383e:	2200      	movs	r2, #0
    3840:	2101      	movs	r1, #1
    3842:	2011      	movs	r0, #17
    3844:	f7fe fc5a 	bl	20fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3848:	2011      	movs	r0, #17
    384a:	f7fe fc3b 	bl	20c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    384e:	2301      	movs	r3, #1
    3850:	60a3      	str	r3, [r4, #8]
    3852:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3854:	4a12      	ldr	r2, [pc, #72]	; (38a0 <sys_clock_driver_init+0x84>)
    3856:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3858:	2400      	movs	r4, #0
    385a:	9401      	str	r4, [sp, #4]
    385c:	4b11      	ldr	r3, [pc, #68]	; (38a4 <sys_clock_driver_init+0x88>)
    385e:	9300      	str	r3, [sp, #0]
    3860:	4a11      	ldr	r2, [pc, #68]	; (38a8 <sys_clock_driver_init+0x8c>)
    3862:	2300      	movs	r3, #0
    3864:	4620      	mov	r0, r4
    3866:	f006 fa27 	bl	9cb8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    386a:	4628      	mov	r0, r5
    386c:	f7ff facc 	bl	2e08 <z_nrf_clock_control_lf_on>

	return 0;
}
    3870:	4620      	mov	r0, r4
    3872:	b003      	add	sp, #12
    3874:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3876:	4a0d      	ldr	r2, [pc, #52]	; (38ac <sys_clock_driver_init+0x90>)
    3878:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    387c:	f04f 30ff 	mov.w	r0, #4294967295
    3880:	f04f 31ff 	mov.w	r1, #4294967295
    3884:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3888:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    388c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    388e:	4902      	ldr	r1, [pc, #8]	; (3898 <sys_clock_driver_init+0x7c>)
    3890:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3894:	3301      	adds	r3, #1
    3896:	e7c7      	b.n	3828 <sys_clock_driver_init+0xc>
    3898:	40011000 	.word	0x40011000
    389c:	e000e100 	.word	0xe000e100
    38a0:	20000db0 	.word	0x20000db0
    38a4:	000036c5 	.word	0x000036c5
    38a8:	007fffff 	.word	0x007fffff
    38ac:	20000638 	.word	0x20000638

000038b0 <process_channel>:
{
    38b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38b4:	b082      	sub	sp, #8
    38b6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    38b8:	f7ff fe98 	bl	35ec <channel_processing_check_and_clear>
    38bc:	b910      	cbnz	r0, 38c4 <process_channel+0x14>
}
    38be:	b002      	add	sp, #8
    38c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    38c4:	f7ff ff3a 	bl	373c <z_nrf_rtc_timer_read>
    38c8:	4682      	mov	sl, r0
    38ca:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    38cc:	f006 f9ab 	bl	9c26 <full_int_lock>
    38d0:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    38d2:	4b13      	ldr	r3, [pc, #76]	; (3920 <process_channel+0x70>)
    38d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    38d8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    38dc:	45c2      	cmp	sl, r8
    38de:	eb76 0309 	sbcs.w	r3, r6, r9
    38e2:	d20b      	bcs.n	38fc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    38e4:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    38e6:	4628      	mov	r0, r5
    38e8:	f006 f9a6 	bl	9c38 <full_int_unlock>
		if (handler) {
    38ec:	2e00      	cmp	r6, #0
    38ee:	d0e6      	beq.n	38be <process_channel+0xe>
			handler(chan, expire_time, user_context);
    38f0:	9700      	str	r7, [sp, #0]
    38f2:	4642      	mov	r2, r8
    38f4:	464b      	mov	r3, r9
    38f6:	4620      	mov	r0, r4
    38f8:	47b0      	blx	r6
}
    38fa:	e7e0      	b.n	38be <process_channel+0xe>
			handler = cc_data[chan].callback;
    38fc:	4a08      	ldr	r2, [pc, #32]	; (3920 <process_channel+0x70>)
    38fe:	0123      	lsls	r3, r4, #4
    3900:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3904:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    3906:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    3908:	2000      	movs	r0, #0
    390a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    390c:	f04f 32ff 	mov.w	r2, #4294967295
    3910:	f04f 33ff 	mov.w	r3, #4294967295
    3914:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    3918:	4620      	mov	r0, r4
    391a:	f7ff fe2f 	bl	357c <event_disable>
    391e:	e7e2      	b.n	38e6 <process_channel+0x36>
    3920:	20000638 	.word	0x20000638

00003924 <rtc_nrf_isr>:
{
    3924:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <rtc_nrf_isr+0x3c>)
    3928:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    392c:	f013 0f02 	tst.w	r3, #2
    3930:	d00d      	beq.n	394e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3932:	4b0b      	ldr	r3, [pc, #44]	; (3960 <rtc_nrf_isr+0x3c>)
    3934:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3938:	b14b      	cbz	r3, 394e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    393a:	4b09      	ldr	r3, [pc, #36]	; (3960 <rtc_nrf_isr+0x3c>)
    393c:	2200      	movs	r2, #0
    393e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3942:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    3946:	4a07      	ldr	r2, [pc, #28]	; (3964 <rtc_nrf_isr+0x40>)
    3948:	6813      	ldr	r3, [r2, #0]
    394a:	3301      	adds	r3, #1
    394c:	6013      	str	r3, [r2, #0]
{
    394e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3950:	2c00      	cmp	r4, #0
    3952:	dd00      	ble.n	3956 <rtc_nrf_isr+0x32>
}
    3954:	bd10      	pop	{r4, pc}
		process_channel(chan);
    3956:	4620      	mov	r0, r4
    3958:	f7ff ffaa 	bl	38b0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    395c:	3401      	adds	r4, #1
    395e:	e7f7      	b.n	3950 <rtc_nrf_isr+0x2c>
    3960:	40011000 	.word	0x40011000
    3964:	20000db4 	.word	0x20000db4

00003968 <sys_clock_set_timeout>:
{
    3968:	b510      	push	{r4, lr}
    396a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    396c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3970:	d006      	beq.n	3980 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3972:	2801      	cmp	r0, #1
    3974:	dd06      	ble.n	3984 <sys_clock_set_timeout+0x1c>
    3976:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    397a:	da05      	bge.n	3988 <sys_clock_set_timeout+0x20>
    397c:	1e44      	subs	r4, r0, #1
    397e:	e004      	b.n	398a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3980:	480f      	ldr	r0, [pc, #60]	; (39c0 <sys_clock_set_timeout+0x58>)
    3982:	e7f8      	b.n	3976 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3984:	2400      	movs	r4, #0
    3986:	e000      	b.n	398a <sys_clock_set_timeout+0x22>
    3988:	4c0d      	ldr	r4, [pc, #52]	; (39c0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    398a:	f7ff fed7 	bl	373c <z_nrf_rtc_timer_read>
    398e:	4b0d      	ldr	r3, [pc, #52]	; (39c4 <sys_clock_set_timeout+0x5c>)
    3990:	6819      	ldr	r1, [r3, #0]
    3992:	685b      	ldr	r3, [r3, #4]
    3994:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    3996:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    399a:	d300      	bcc.n	399e <sys_clock_set_timeout+0x36>
		ticks = 0;
    399c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    399e:	4420      	add	r0, r4
    39a0:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    39a2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    39a6:	d300      	bcc.n	39aa <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    39a8:	4a05      	ldr	r2, [pc, #20]	; (39c0 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    39aa:	2000      	movs	r0, #0
    39ac:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    39ae:	9001      	str	r0, [sp, #4]
    39b0:	4905      	ldr	r1, [pc, #20]	; (39c8 <sys_clock_set_timeout+0x60>)
    39b2:	9100      	str	r1, [sp, #0]
    39b4:	f143 0300 	adc.w	r3, r3, #0
    39b8:	f006 f97e 	bl	9cb8 <compare_set>
}
    39bc:	b002      	add	sp, #8
    39be:	bd10      	pop	{r4, pc}
    39c0:	007fffff 	.word	0x007fffff
    39c4:	20000648 	.word	0x20000648
    39c8:	000036c5 	.word	0x000036c5

000039cc <sys_clock_elapsed>:
{
    39cc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    39ce:	f7ff feb5 	bl	373c <z_nrf_rtc_timer_read>
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <sys_clock_elapsed+0x10>)
    39d4:	681b      	ldr	r3, [r3, #0]
}
    39d6:	1ac0      	subs	r0, r0, r3
    39d8:	bd08      	pop	{r3, pc}
    39da:	bf00      	nop
    39dc:	20000648 	.word	0x20000648

000039e0 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    39e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    39e4:	460c      	mov	r4, r1
    39e6:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    39e8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    39ec:	d002      	beq.n	39f4 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    39ee:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    39f2:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    39f4:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    39f8:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    39fc:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    3a00:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    3a04:	f010 0f20 	tst.w	r0, #32
    3a08:	d01d      	beq.n	3a46 <nrf_pin_configure+0x66>
    3a0a:	b1fb      	cbz	r3, 3a4c <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    3a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3a10:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3a14:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3a16:	f013 0f01 	tst.w	r3, #1
    3a1a:	d019      	beq.n	3a50 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    3a1c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a20:	096d      	lsrs	r5, r5, #5
    3a22:	d023      	beq.n	3a6c <nrf_pin_configure+0x8c>
    3a24:	bb2d      	cbnz	r5, 3a72 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    3a26:	4d19      	ldr	r5, [pc, #100]	; (3a8c <nrf_pin_configure+0xac>)
    3a28:	f240 232e 	movw	r3, #558	; 0x22e
    3a2c:	462a      	mov	r2, r5
    3a2e:	4918      	ldr	r1, [pc, #96]	; (3a90 <nrf_pin_configure+0xb0>)
    3a30:	4818      	ldr	r0, [pc, #96]	; (3a94 <nrf_pin_configure+0xb4>)
    3a32:	f005 fcaa 	bl	938a <assert_print>
    3a36:	f240 212e 	movw	r1, #558	; 0x22e
    3a3a:	4628      	mov	r0, r5
    3a3c:	f005 fc9e 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3a44:	e016      	b.n	3a74 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    3a46:	f04f 33ff 	mov.w	r3, #4294967295
    3a4a:	e7e1      	b.n	3a10 <nrf_pin_configure+0x30>
    switch (port)
    3a4c:	2300      	movs	r3, #0
    3a4e:	e7df      	b.n	3a10 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3a50:	4e0e      	ldr	r6, [pc, #56]	; (3a8c <nrf_pin_configure+0xac>)
    3a52:	f240 2329 	movw	r3, #553	; 0x229
    3a56:	4632      	mov	r2, r6
    3a58:	490f      	ldr	r1, [pc, #60]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a5a:	480e      	ldr	r0, [pc, #56]	; (3a94 <nrf_pin_configure+0xb4>)
    3a5c:	f005 fc95 	bl	938a <assert_print>
    3a60:	f240 2129 	movw	r1, #553	; 0x229
    3a64:	4630      	mov	r0, r6
    3a66:	f005 fc89 	bl	937c <assert_post_action>
    3a6a:	e7d7      	b.n	3a1c <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    3a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3a70:	e000      	b.n	3a74 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a72:	4b0a      	ldr	r3, [pc, #40]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3a74:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    3a78:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a7c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    3a80:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3a84:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    3a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3a8c:	0000b18c 	.word	0x0000b18c
    3a90:	0000a690 	.word	0x0000a690
    3a94:	0000a4cc 	.word	0x0000a4cc
    3a98:	0000b1c0 	.word	0x0000b1c0
    3a9c:	50000300 	.word	0x50000300

00003aa0 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aa4:	4605      	mov	r5, r0
    3aa6:	460e      	mov	r6, r1
    3aa8:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3aaa:	2400      	movs	r4, #0
    3aac:	e04e      	b.n	3b4c <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    3aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3ab2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    3ab6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3aba:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3abe:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    3ac2:	f013 0f20 	tst.w	r3, #32
    3ac6:	d01f      	beq.n	3b08 <pinctrl_configure_pins+0x68>
    3ac8:	b109      	cbz	r1, 3ace <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    3aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3ace:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3ad2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ad4:	f012 0f01 	tst.w	r2, #1
    3ad8:	d019      	beq.n	3b0e <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    3ada:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ade:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3ae2:	d023      	beq.n	3b2c <pinctrl_configure_pins+0x8c>
    3ae4:	bb2b      	cbnz	r3, 3b32 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    3ae6:	f8df 9344 	ldr.w	r9, [pc, #836]	; 3e2c <pinctrl_configure_pins+0x38c>
    3aea:	f240 232e 	movw	r3, #558	; 0x22e
    3aee:	464a      	mov	r2, r9
    3af0:	49cf      	ldr	r1, [pc, #828]	; (3e30 <pinctrl_configure_pins+0x390>)
    3af2:	48d0      	ldr	r0, [pc, #832]	; (3e34 <pinctrl_configure_pins+0x394>)
    3af4:	f005 fc49 	bl	938a <assert_print>
    3af8:	f240 212e 	movw	r1, #558	; 0x22e
    3afc:	4648      	mov	r0, r9
    3afe:	f005 fc3d 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3b02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3b06:	e015      	b.n	3b34 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    3b08:	f04f 32ff 	mov.w	r2, #4294967295
    3b0c:	e7df      	b.n	3ace <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b0e:	f8df a31c 	ldr.w	sl, [pc, #796]	; 3e2c <pinctrl_configure_pins+0x38c>
    3b12:	f240 2329 	movw	r3, #553	; 0x229
    3b16:	4652      	mov	r2, sl
    3b18:	49c7      	ldr	r1, [pc, #796]	; (3e38 <pinctrl_configure_pins+0x398>)
    3b1a:	48c6      	ldr	r0, [pc, #792]	; (3e34 <pinctrl_configure_pins+0x394>)
    3b1c:	f005 fc35 	bl	938a <assert_print>
    3b20:	f240 2129 	movw	r1, #553	; 0x229
    3b24:	4650      	mov	r0, sl
    3b26:	f005 fc29 	bl	937c <assert_post_action>
    3b2a:	e7d6      	b.n	3ada <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    3b2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3b30:	e000      	b.n	3b34 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b32:	4ac2      	ldr	r2, [pc, #776]	; (3e3c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3b34:	2101      	movs	r1, #1
    3b36:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    3b3a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3b3e:	460a      	mov	r2, r1
    3b40:	f855 0008 	ldr.w	r0, [r5, r8]
    3b44:	f7ff ff4c 	bl	39e0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3b48:	3401      	adds	r4, #1
    3b4a:	b2e4      	uxtb	r4, r4
    3b4c:	42b4      	cmp	r4, r6
    3b4e:	f080 841e 	bcs.w	438e <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    3b52:	ea4f 0884 	mov.w	r8, r4, lsl #2
    3b56:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3b5a:	0c1a      	lsrs	r2, r3, #16
    3b5c:	2a22      	cmp	r2, #34	; 0x22
    3b5e:	f200 8418 	bhi.w	4392 <pinctrl_configure_pins+0x8f2>
    3b62:	a101      	add	r1, pc, #4	; (adr r1, 3b68 <pinctrl_configure_pins+0xc8>)
    3b64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3b68:	00003aaf 	.word	0x00003aaf
    3b6c:	00003bf5 	.word	0x00003bf5
    3b70:	00003c0b 	.word	0x00003c0b
    3b74:	00003cab 	.word	0x00003cab
    3b78:	00003cc1 	.word	0x00003cc1
    3b7c:	00003d61 	.word	0x00003d61
    3b80:	00003e01 	.word	0x00003e01
    3b84:	00004393 	.word	0x00004393
    3b88:	00004393 	.word	0x00004393
    3b8c:	00004393 	.word	0x00004393
    3b90:	00004393 	.word	0x00004393
    3b94:	00003e17 	.word	0x00003e17
    3b98:	00003e41 	.word	0x00003e41
    3b9c:	00004393 	.word	0x00004393
    3ba0:	00004393 	.word	0x00004393
    3ba4:	00004393 	.word	0x00004393
    3ba8:	00004393 	.word	0x00004393
    3bac:	00004393 	.word	0x00004393
    3bb0:	00004393 	.word	0x00004393
    3bb4:	00004393 	.word	0x00004393
    3bb8:	00004393 	.word	0x00004393
    3bbc:	00004393 	.word	0x00004393
    3bc0:	00003e57 	.word	0x00003e57
    3bc4:	00003f7d 	.word	0x00003f7d
    3bc8:	000040a3 	.word	0x000040a3
    3bcc:	000041df 	.word	0x000041df
    3bd0:	00004393 	.word	0x00004393
    3bd4:	00004393 	.word	0x00004393
    3bd8:	00004393 	.word	0x00004393
    3bdc:	00004305 	.word	0x00004305
    3be0:	0000431b 	.word	0x0000431b
    3be4:	00004331 	.word	0x00004331
    3be8:	00004347 	.word	0x00004347
    3bec:	0000435f 	.word	0x0000435f
    3bf0:	00004377 	.word	0x00004377
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    3bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3bf8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3bfc:	2200      	movs	r2, #0
    3bfe:	4611      	mov	r1, r2
    3c00:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3c04:	f7ff feec 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3c08:	e79e      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    3c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c0e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    3c12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3c16:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3c1a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3c1e:	f013 0f20 	tst.w	r3, #32
    3c22:	d01f      	beq.n	3c64 <pinctrl_configure_pins+0x1c4>
    3c24:	b30a      	cbz	r2, 3c6a <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    3c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3c2a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3c2e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3c30:	f013 0f01 	tst.w	r3, #1
    3c34:	d01b      	beq.n	3c6e <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    3c36:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c3a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3c3e:	d025      	beq.n	3c8c <pinctrl_configure_pins+0x1ec>
    3c40:	bb3b      	cbnz	r3, 3c92 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    3c42:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 3e2c <pinctrl_configure_pins+0x38c>
    3c46:	f240 232e 	movw	r3, #558	; 0x22e
    3c4a:	464a      	mov	r2, r9
    3c4c:	4978      	ldr	r1, [pc, #480]	; (3e30 <pinctrl_configure_pins+0x390>)
    3c4e:	4879      	ldr	r0, [pc, #484]	; (3e34 <pinctrl_configure_pins+0x394>)
    3c50:	f005 fb9b 	bl	938a <assert_print>
    3c54:	f240 212e 	movw	r1, #558	; 0x22e
    3c58:	4648      	mov	r0, r9
    3c5a:	f005 fb8f 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3c62:	e017      	b.n	3c94 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    3c64:	f04f 33ff 	mov.w	r3, #4294967295
    3c68:	e7df      	b.n	3c2a <pinctrl_configure_pins+0x18a>
    switch (port)
    3c6a:	2300      	movs	r3, #0
    3c6c:	e7dd      	b.n	3c2a <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3c6e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 3e2c <pinctrl_configure_pins+0x38c>
    3c72:	f240 2329 	movw	r3, #553	; 0x229
    3c76:	4652      	mov	r2, sl
    3c78:	496f      	ldr	r1, [pc, #444]	; (3e38 <pinctrl_configure_pins+0x398>)
    3c7a:	486e      	ldr	r0, [pc, #440]	; (3e34 <pinctrl_configure_pins+0x394>)
    3c7c:	f005 fb85 	bl	938a <assert_print>
    3c80:	f240 2129 	movw	r1, #553	; 0x229
    3c84:	4650      	mov	r0, sl
    3c86:	f005 fb79 	bl	937c <assert_post_action>
    3c8a:	e7d4      	b.n	3c36 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    3c8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3c90:	e000      	b.n	3c94 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c92:	4a6a      	ldr	r2, [pc, #424]	; (3e3c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c94:	2101      	movs	r1, #1
    3c96:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    3c9a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3c9e:	460a      	mov	r2, r1
    3ca0:	f855 0008 	ldr.w	r0, [r5, r8]
    3ca4:	f7ff fe9c 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3ca8:	e74e      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    3caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3cae:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3cb2:	2200      	movs	r2, #0
    3cb4:	4611      	mov	r1, r2
    3cb6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3cba:	f7ff fe91 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3cbe:	e743      	b.n	3b48 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    3cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3cc4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    3cc8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3ccc:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3cd0:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3cd4:	f013 0f20 	tst.w	r3, #32
    3cd8:	d01f      	beq.n	3d1a <pinctrl_configure_pins+0x27a>
    3cda:	b30a      	cbz	r2, 3d20 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    3cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3ce0:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3ce4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ce6:	f013 0f01 	tst.w	r3, #1
    3cea:	d01b      	beq.n	3d24 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    3cec:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3cf0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3cf4:	d025      	beq.n	3d42 <pinctrl_configure_pins+0x2a2>
    3cf6:	bb3b      	cbnz	r3, 3d48 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    3cf8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 3e2c <pinctrl_configure_pins+0x38c>
    3cfc:	f240 232e 	movw	r3, #558	; 0x22e
    3d00:	464a      	mov	r2, r9
    3d02:	494b      	ldr	r1, [pc, #300]	; (3e30 <pinctrl_configure_pins+0x390>)
    3d04:	484b      	ldr	r0, [pc, #300]	; (3e34 <pinctrl_configure_pins+0x394>)
    3d06:	f005 fb40 	bl	938a <assert_print>
    3d0a:	f240 212e 	movw	r1, #558	; 0x22e
    3d0e:	4648      	mov	r0, r9
    3d10:	f005 fb34 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3d14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3d18:	e017      	b.n	3d4a <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    3d1a:	f04f 33ff 	mov.w	r3, #4294967295
    3d1e:	e7df      	b.n	3ce0 <pinctrl_configure_pins+0x240>
    switch (port)
    3d20:	2300      	movs	r3, #0
    3d22:	e7dd      	b.n	3ce0 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d24:	f8df a104 	ldr.w	sl, [pc, #260]	; 3e2c <pinctrl_configure_pins+0x38c>
    3d28:	f240 2329 	movw	r3, #553	; 0x229
    3d2c:	4652      	mov	r2, sl
    3d2e:	4942      	ldr	r1, [pc, #264]	; (3e38 <pinctrl_configure_pins+0x398>)
    3d30:	4840      	ldr	r0, [pc, #256]	; (3e34 <pinctrl_configure_pins+0x394>)
    3d32:	f005 fb2a 	bl	938a <assert_print>
    3d36:	f240 2129 	movw	r1, #553	; 0x229
    3d3a:	4650      	mov	r0, sl
    3d3c:	f005 fb1e 	bl	937c <assert_post_action>
    3d40:	e7d4      	b.n	3cec <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    3d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3d46:	e000      	b.n	3d4a <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d48:	4a3c      	ldr	r2, [pc, #240]	; (3e3c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3d4a:	2101      	movs	r1, #1
    3d4c:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    3d50:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3d54:	2200      	movs	r2, #0
    3d56:	f855 0008 	ldr.w	r0, [r5, r8]
    3d5a:	f7ff fe41 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3d5e:	e6f3      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    3d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3d64:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    3d68:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3d6c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3d70:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3d74:	f013 0f20 	tst.w	r3, #32
    3d78:	d01f      	beq.n	3dba <pinctrl_configure_pins+0x31a>
    3d7a:	b30a      	cbz	r2, 3dc0 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    3d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3d80:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3d84:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d86:	f013 0f01 	tst.w	r3, #1
    3d8a:	d01b      	beq.n	3dc4 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    3d8c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d90:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3d94:	d025      	beq.n	3de2 <pinctrl_configure_pins+0x342>
    3d96:	bb3b      	cbnz	r3, 3de8 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    3d98:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3e2c <pinctrl_configure_pins+0x38c>
    3d9c:	f240 232e 	movw	r3, #558	; 0x22e
    3da0:	464a      	mov	r2, r9
    3da2:	4923      	ldr	r1, [pc, #140]	; (3e30 <pinctrl_configure_pins+0x390>)
    3da4:	4823      	ldr	r0, [pc, #140]	; (3e34 <pinctrl_configure_pins+0x394>)
    3da6:	f005 faf0 	bl	938a <assert_print>
    3daa:	f240 212e 	movw	r1, #558	; 0x22e
    3dae:	4648      	mov	r0, r9
    3db0:	f005 fae4 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3db4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3db8:	e017      	b.n	3dea <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    3dba:	f04f 33ff 	mov.w	r3, #4294967295
    3dbe:	e7df      	b.n	3d80 <pinctrl_configure_pins+0x2e0>
    switch (port)
    3dc0:	2300      	movs	r3, #0
    3dc2:	e7dd      	b.n	3d80 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3dc4:	f8df a064 	ldr.w	sl, [pc, #100]	; 3e2c <pinctrl_configure_pins+0x38c>
    3dc8:	f240 2329 	movw	r3, #553	; 0x229
    3dcc:	4652      	mov	r2, sl
    3dce:	491a      	ldr	r1, [pc, #104]	; (3e38 <pinctrl_configure_pins+0x398>)
    3dd0:	4818      	ldr	r0, [pc, #96]	; (3e34 <pinctrl_configure_pins+0x394>)
    3dd2:	f005 fada 	bl	938a <assert_print>
    3dd6:	f240 2129 	movw	r1, #553	; 0x229
    3dda:	4650      	mov	r0, sl
    3ddc:	f005 face 	bl	937c <assert_post_action>
    3de0:	e7d4      	b.n	3d8c <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    3de2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3de6:	e000      	b.n	3dea <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3de8:	4a14      	ldr	r2, [pc, #80]	; (3e3c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3dea:	2101      	movs	r1, #1
    3dec:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    3df0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3df4:	460a      	mov	r2, r1
    3df6:	f855 0008 	ldr.w	r0, [r5, r8]
    3dfa:	f7ff fdf1 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3dfe:	e6a3      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    3e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3e04:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3e08:	2200      	movs	r2, #0
    3e0a:	4611      	mov	r1, r2
    3e0c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3e10:	f7ff fde6 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3e14:	e698      	b.n	3b48 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    3e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3e1a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3e1e:	2200      	movs	r2, #0
    3e20:	4611      	mov	r1, r2
    3e22:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3e26:	f7ff fddb 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3e2a:	e68d      	b.n	3b48 <pinctrl_configure_pins+0xa8>
    3e2c:	0000b18c 	.word	0x0000b18c
    3e30:	0000a690 	.word	0x0000a690
    3e34:	0000a4cc 	.word	0x0000a4cc
    3e38:	0000b1c0 	.word	0x0000b1c0
    3e3c:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    3e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3e44:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3e48:	2200      	movs	r2, #0
    3e4a:	4611      	mov	r1, r2
    3e4c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3e50:	f7ff fdc6 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3e54:	e678      	b.n	3b48 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    3e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3e5a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3e5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3e62:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    3e66:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    3e6a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3e6e:	d144      	bne.n	3efa <pinctrl_configure_pins+0x45a>
    switch (port)
    3e70:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3e74:	d01f      	beq.n	3eb6 <pinctrl_configure_pins+0x416>
    3e76:	b10b      	cbz	r3, 3e7c <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    3e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3e7c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3e80:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e82:	f012 0f01 	tst.w	r2, #1
    3e86:	d019      	beq.n	3ebc <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    3e88:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e8c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3e90:	d023      	beq.n	3eda <pinctrl_configure_pins+0x43a>
    3e92:	bb2b      	cbnz	r3, 3ee0 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    3e94:	f8df 9300 	ldr.w	r9, [pc, #768]	; 4198 <pinctrl_configure_pins+0x6f8>
    3e98:	f240 232e 	movw	r3, #558	; 0x22e
    3e9c:	464a      	mov	r2, r9
    3e9e:	49bf      	ldr	r1, [pc, #764]	; (419c <pinctrl_configure_pins+0x6fc>)
    3ea0:	48bf      	ldr	r0, [pc, #764]	; (41a0 <pinctrl_configure_pins+0x700>)
    3ea2:	f005 fa72 	bl	938a <assert_print>
    3ea6:	f240 212e 	movw	r1, #558	; 0x22e
    3eaa:	4648      	mov	r0, r9
    3eac:	f005 fa66 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3eb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3eb4:	e015      	b.n	3ee2 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    3eb6:	f04f 32ff 	mov.w	r2, #4294967295
    3eba:	e7df      	b.n	3e7c <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ebc:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 4198 <pinctrl_configure_pins+0x6f8>
    3ec0:	f240 2329 	movw	r3, #553	; 0x229
    3ec4:	4652      	mov	r2, sl
    3ec6:	49b7      	ldr	r1, [pc, #732]	; (41a4 <pinctrl_configure_pins+0x704>)
    3ec8:	48b5      	ldr	r0, [pc, #724]	; (41a0 <pinctrl_configure_pins+0x700>)
    3eca:	f005 fa5e 	bl	938a <assert_print>
    3ece:	f240 2129 	movw	r1, #553	; 0x229
    3ed2:	4650      	mov	r0, sl
    3ed4:	f005 fa52 	bl	937c <assert_post_action>
    3ed8:	e7d6      	b.n	3e88 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    3eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3ede:	e000      	b.n	3ee2 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ee0:	4ab1      	ldr	r2, [pc, #708]	; (41a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3ee2:	2301      	movs	r3, #1
    3ee4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    3ee8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3eec:	2201      	movs	r2, #1
    3eee:	4611      	mov	r1, r2
    3ef0:	f855 0008 	ldr.w	r0, [r5, r8]
    3ef4:	f7ff fd74 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3ef8:	e626      	b.n	3b48 <pinctrl_configure_pins+0xa8>
    switch (port)
    3efa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3efe:	d01f      	beq.n	3f40 <pinctrl_configure_pins+0x4a0>
    3f00:	b30b      	cbz	r3, 3f46 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    3f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3f06:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3f0a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3f0c:	f013 0f01 	tst.w	r3, #1
    3f10:	d01b      	beq.n	3f4a <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    3f12:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f16:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3f1a:	d025      	beq.n	3f68 <pinctrl_configure_pins+0x4c8>
    3f1c:	bb3b      	cbnz	r3, 3f6e <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    3f1e:	f8df 9278 	ldr.w	r9, [pc, #632]	; 4198 <pinctrl_configure_pins+0x6f8>
    3f22:	f240 232e 	movw	r3, #558	; 0x22e
    3f26:	464a      	mov	r2, r9
    3f28:	499c      	ldr	r1, [pc, #624]	; (419c <pinctrl_configure_pins+0x6fc>)
    3f2a:	489d      	ldr	r0, [pc, #628]	; (41a0 <pinctrl_configure_pins+0x700>)
    3f2c:	f005 fa2d 	bl	938a <assert_print>
    3f30:	f240 212e 	movw	r1, #558	; 0x22e
    3f34:	4648      	mov	r0, r9
    3f36:	f005 fa21 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3f3e:	e017      	b.n	3f70 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    3f40:	f04f 33ff 	mov.w	r3, #4294967295
    3f44:	e7df      	b.n	3f06 <pinctrl_configure_pins+0x466>
    switch (port)
    3f46:	2300      	movs	r3, #0
    3f48:	e7dd      	b.n	3f06 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3f4a:	f8df a24c 	ldr.w	sl, [pc, #588]	; 4198 <pinctrl_configure_pins+0x6f8>
    3f4e:	f240 2329 	movw	r3, #553	; 0x229
    3f52:	4652      	mov	r2, sl
    3f54:	4993      	ldr	r1, [pc, #588]	; (41a4 <pinctrl_configure_pins+0x704>)
    3f56:	4892      	ldr	r0, [pc, #584]	; (41a0 <pinctrl_configure_pins+0x700>)
    3f58:	f005 fa17 	bl	938a <assert_print>
    3f5c:	f240 2129 	movw	r1, #553	; 0x229
    3f60:	4650      	mov	r0, sl
    3f62:	f005 fa0b 	bl	937c <assert_post_action>
    3f66:	e7d4      	b.n	3f12 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    3f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3f6c:	e000      	b.n	3f70 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f6e:	4a8e      	ldr	r2, [pc, #568]	; (41a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3f70:	2301      	movs	r3, #1
    3f72:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    3f76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    3f7a:	e7b7      	b.n	3eec <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    3f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3f80:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3f84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3f88:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    3f8c:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    3f90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3f94:	d144      	bne.n	4020 <pinctrl_configure_pins+0x580>
    switch (port)
    3f96:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3f9a:	d01f      	beq.n	3fdc <pinctrl_configure_pins+0x53c>
    3f9c:	b10b      	cbz	r3, 3fa2 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    3f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3fa2:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3fa6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3fa8:	f012 0f01 	tst.w	r2, #1
    3fac:	d019      	beq.n	3fe2 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    3fae:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3fb2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3fb6:	d023      	beq.n	4000 <pinctrl_configure_pins+0x560>
    3fb8:	bb2b      	cbnz	r3, 4006 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    3fba:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4198 <pinctrl_configure_pins+0x6f8>
    3fbe:	f240 232e 	movw	r3, #558	; 0x22e
    3fc2:	464a      	mov	r2, r9
    3fc4:	4975      	ldr	r1, [pc, #468]	; (419c <pinctrl_configure_pins+0x6fc>)
    3fc6:	4876      	ldr	r0, [pc, #472]	; (41a0 <pinctrl_configure_pins+0x700>)
    3fc8:	f005 f9df 	bl	938a <assert_print>
    3fcc:	f240 212e 	movw	r1, #558	; 0x22e
    3fd0:	4648      	mov	r0, r9
    3fd2:	f005 f9d3 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    3fd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3fda:	e015      	b.n	4008 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    3fdc:	f04f 32ff 	mov.w	r2, #4294967295
    3fe0:	e7df      	b.n	3fa2 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3fe2:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4198 <pinctrl_configure_pins+0x6f8>
    3fe6:	f240 2329 	movw	r3, #553	; 0x229
    3fea:	4652      	mov	r2, sl
    3fec:	496d      	ldr	r1, [pc, #436]	; (41a4 <pinctrl_configure_pins+0x704>)
    3fee:	486c      	ldr	r0, [pc, #432]	; (41a0 <pinctrl_configure_pins+0x700>)
    3ff0:	f005 f9cb 	bl	938a <assert_print>
    3ff4:	f240 2129 	movw	r1, #553	; 0x229
    3ff8:	4650      	mov	r0, sl
    3ffa:	f005 f9bf 	bl	937c <assert_post_action>
    3ffe:	e7d6      	b.n	3fae <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    4000:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4004:	e000      	b.n	4008 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4006:	4a68      	ldr	r2, [pc, #416]	; (41a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4008:	2301      	movs	r3, #1
    400a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    400e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4012:	2201      	movs	r2, #1
    4014:	4611      	mov	r1, r2
    4016:	f855 0008 	ldr.w	r0, [r5, r8]
    401a:	f7ff fce1 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    401e:	e593      	b.n	3b48 <pinctrl_configure_pins+0xa8>
    switch (port)
    4020:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4024:	d01f      	beq.n	4066 <pinctrl_configure_pins+0x5c6>
    4026:	b30b      	cbz	r3, 406c <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    4028:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    402c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4030:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4032:	f013 0f01 	tst.w	r3, #1
    4036:	d01b      	beq.n	4070 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    4038:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    403c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4040:	d025      	beq.n	408e <pinctrl_configure_pins+0x5ee>
    4042:	bb3b      	cbnz	r3, 4094 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    4044:	f8df 9150 	ldr.w	r9, [pc, #336]	; 4198 <pinctrl_configure_pins+0x6f8>
    4048:	f240 232e 	movw	r3, #558	; 0x22e
    404c:	464a      	mov	r2, r9
    404e:	4953      	ldr	r1, [pc, #332]	; (419c <pinctrl_configure_pins+0x6fc>)
    4050:	4853      	ldr	r0, [pc, #332]	; (41a0 <pinctrl_configure_pins+0x700>)
    4052:	f005 f99a 	bl	938a <assert_print>
    4056:	f240 212e 	movw	r1, #558	; 0x22e
    405a:	4648      	mov	r0, r9
    405c:	f005 f98e 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4064:	e017      	b.n	4096 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    4066:	f04f 33ff 	mov.w	r3, #4294967295
    406a:	e7df      	b.n	402c <pinctrl_configure_pins+0x58c>
    switch (port)
    406c:	2300      	movs	r3, #0
    406e:	e7dd      	b.n	402c <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4070:	f8df a124 	ldr.w	sl, [pc, #292]	; 4198 <pinctrl_configure_pins+0x6f8>
    4074:	f240 2329 	movw	r3, #553	; 0x229
    4078:	4652      	mov	r2, sl
    407a:	494a      	ldr	r1, [pc, #296]	; (41a4 <pinctrl_configure_pins+0x704>)
    407c:	4848      	ldr	r0, [pc, #288]	; (41a0 <pinctrl_configure_pins+0x700>)
    407e:	f005 f984 	bl	938a <assert_print>
    4082:	f240 2129 	movw	r1, #553	; 0x229
    4086:	4650      	mov	r0, sl
    4088:	f005 f978 	bl	937c <assert_post_action>
    408c:	e7d4      	b.n	4038 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    408e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4092:	e000      	b.n	4096 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4094:	4a44      	ldr	r2, [pc, #272]	; (41a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4096:	2301      	movs	r3, #1
    4098:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    409c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    40a0:	e7b7      	b.n	4012 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    40a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    40a6:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    40aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    40ae:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    40b2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    40b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    40ba:	d144      	bne.n	4146 <pinctrl_configure_pins+0x6a6>
    switch (port)
    40bc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    40c0:	d01f      	beq.n	4102 <pinctrl_configure_pins+0x662>
    40c2:	b10b      	cbz	r3, 40c8 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    40c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    40c8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    40cc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40ce:	f012 0f01 	tst.w	r2, #1
    40d2:	d019      	beq.n	4108 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    40d4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40d8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    40dc:	d023      	beq.n	4126 <pinctrl_configure_pins+0x686>
    40de:	bb2b      	cbnz	r3, 412c <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    40e0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4198 <pinctrl_configure_pins+0x6f8>
    40e4:	f240 232e 	movw	r3, #558	; 0x22e
    40e8:	464a      	mov	r2, r9
    40ea:	492c      	ldr	r1, [pc, #176]	; (419c <pinctrl_configure_pins+0x6fc>)
    40ec:	482c      	ldr	r0, [pc, #176]	; (41a0 <pinctrl_configure_pins+0x700>)
    40ee:	f005 f94c 	bl	938a <assert_print>
    40f2:	f240 212e 	movw	r1, #558	; 0x22e
    40f6:	4648      	mov	r0, r9
    40f8:	f005 f940 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    40fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4100:	e015      	b.n	412e <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    4102:	f04f 32ff 	mov.w	r2, #4294967295
    4106:	e7df      	b.n	40c8 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4108:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4198 <pinctrl_configure_pins+0x6f8>
    410c:	f240 2329 	movw	r3, #553	; 0x229
    4110:	4652      	mov	r2, sl
    4112:	4924      	ldr	r1, [pc, #144]	; (41a4 <pinctrl_configure_pins+0x704>)
    4114:	4822      	ldr	r0, [pc, #136]	; (41a0 <pinctrl_configure_pins+0x700>)
    4116:	f005 f938 	bl	938a <assert_print>
    411a:	f240 2129 	movw	r1, #553	; 0x229
    411e:	4650      	mov	r0, sl
    4120:	f005 f92c 	bl	937c <assert_post_action>
    4124:	e7d6      	b.n	40d4 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    4126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    412a:	e000      	b.n	412e <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    412c:	4a1e      	ldr	r2, [pc, #120]	; (41a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    412e:	2301      	movs	r3, #1
    4130:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    4134:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4138:	2201      	movs	r2, #1
    413a:	4611      	mov	r1, r2
    413c:	f855 0008 	ldr.w	r0, [r5, r8]
    4140:	f7ff fc4e 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4144:	e500      	b.n	3b48 <pinctrl_configure_pins+0xa8>
    switch (port)
    4146:	ea5f 1359 	movs.w	r3, r9, lsr #5
    414a:	d01f      	beq.n	418c <pinctrl_configure_pins+0x6ec>
    414c:	b30b      	cbz	r3, 4192 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    414e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4152:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4156:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4158:	f013 0f01 	tst.w	r3, #1
    415c:	d026      	beq.n	41ac <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    415e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4162:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4166:	d030      	beq.n	41ca <pinctrl_configure_pins+0x72a>
    4168:	bb93      	cbnz	r3, 41d0 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    416a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4198 <pinctrl_configure_pins+0x6f8>
    416e:	f240 232e 	movw	r3, #558	; 0x22e
    4172:	464a      	mov	r2, r9
    4174:	4909      	ldr	r1, [pc, #36]	; (419c <pinctrl_configure_pins+0x6fc>)
    4176:	480a      	ldr	r0, [pc, #40]	; (41a0 <pinctrl_configure_pins+0x700>)
    4178:	f005 f907 	bl	938a <assert_print>
    417c:	f240 212e 	movw	r1, #558	; 0x22e
    4180:	4648      	mov	r0, r9
    4182:	f005 f8fb 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4186:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    418a:	e022      	b.n	41d2 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    418c:	f04f 33ff 	mov.w	r3, #4294967295
    4190:	e7df      	b.n	4152 <pinctrl_configure_pins+0x6b2>
    switch (port)
    4192:	2300      	movs	r3, #0
    4194:	e7dd      	b.n	4152 <pinctrl_configure_pins+0x6b2>
    4196:	bf00      	nop
    4198:	0000b18c 	.word	0x0000b18c
    419c:	0000a690 	.word	0x0000a690
    41a0:	0000a4cc 	.word	0x0000a4cc
    41a4:	0000b1c0 	.word	0x0000b1c0
    41a8:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    41ac:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 439c <pinctrl_configure_pins+0x8fc>
    41b0:	f240 2329 	movw	r3, #553	; 0x229
    41b4:	4652      	mov	r2, sl
    41b6:	497a      	ldr	r1, [pc, #488]	; (43a0 <pinctrl_configure_pins+0x900>)
    41b8:	487a      	ldr	r0, [pc, #488]	; (43a4 <pinctrl_configure_pins+0x904>)
    41ba:	f005 f8e6 	bl	938a <assert_print>
    41be:	f240 2129 	movw	r1, #553	; 0x229
    41c2:	4650      	mov	r0, sl
    41c4:	f005 f8da 	bl	937c <assert_post_action>
    41c8:	e7c9      	b.n	415e <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    41ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    41ce:	e000      	b.n	41d2 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41d0:	4a75      	ldr	r2, [pc, #468]	; (43a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    41d2:	2301      	movs	r3, #1
    41d4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    41d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    41dc:	e7ac      	b.n	4138 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    41de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    41e2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    41e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    41ea:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    41ee:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    41f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    41f6:	d144      	bne.n	4282 <pinctrl_configure_pins+0x7e2>
    switch (port)
    41f8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    41fc:	d01f      	beq.n	423e <pinctrl_configure_pins+0x79e>
    41fe:	b10b      	cbz	r3, 4204 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    4200:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4204:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4208:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    420a:	f012 0f01 	tst.w	r2, #1
    420e:	d019      	beq.n	4244 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    4210:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4214:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4218:	d023      	beq.n	4262 <pinctrl_configure_pins+0x7c2>
    421a:	bb2b      	cbnz	r3, 4268 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    421c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 439c <pinctrl_configure_pins+0x8fc>
    4220:	f240 232e 	movw	r3, #558	; 0x22e
    4224:	464a      	mov	r2, r9
    4226:	4961      	ldr	r1, [pc, #388]	; (43ac <pinctrl_configure_pins+0x90c>)
    4228:	485e      	ldr	r0, [pc, #376]	; (43a4 <pinctrl_configure_pins+0x904>)
    422a:	f005 f8ae 	bl	938a <assert_print>
    422e:	f240 212e 	movw	r1, #558	; 0x22e
    4232:	4648      	mov	r0, r9
    4234:	f005 f8a2 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    423c:	e015      	b.n	426a <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    423e:	f04f 32ff 	mov.w	r2, #4294967295
    4242:	e7df      	b.n	4204 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4244:	f8df a154 	ldr.w	sl, [pc, #340]	; 439c <pinctrl_configure_pins+0x8fc>
    4248:	f240 2329 	movw	r3, #553	; 0x229
    424c:	4652      	mov	r2, sl
    424e:	4954      	ldr	r1, [pc, #336]	; (43a0 <pinctrl_configure_pins+0x900>)
    4250:	4854      	ldr	r0, [pc, #336]	; (43a4 <pinctrl_configure_pins+0x904>)
    4252:	f005 f89a 	bl	938a <assert_print>
    4256:	f240 2129 	movw	r1, #553	; 0x229
    425a:	4650      	mov	r0, sl
    425c:	f005 f88e 	bl	937c <assert_post_action>
    4260:	e7d6      	b.n	4210 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    4262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4266:	e000      	b.n	426a <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4268:	4a4f      	ldr	r2, [pc, #316]	; (43a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    426a:	2301      	movs	r3, #1
    426c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    4270:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4274:	2201      	movs	r2, #1
    4276:	4611      	mov	r1, r2
    4278:	f855 0008 	ldr.w	r0, [r5, r8]
    427c:	f7ff fbb0 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4280:	e462      	b.n	3b48 <pinctrl_configure_pins+0xa8>
    switch (port)
    4282:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4286:	d01f      	beq.n	42c8 <pinctrl_configure_pins+0x828>
    4288:	b30b      	cbz	r3, 42ce <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    428a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    428e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4292:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4294:	f013 0f01 	tst.w	r3, #1
    4298:	d01b      	beq.n	42d2 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    429a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    429e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    42a2:	d025      	beq.n	42f0 <pinctrl_configure_pins+0x850>
    42a4:	bb3b      	cbnz	r3, 42f6 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    42a6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 439c <pinctrl_configure_pins+0x8fc>
    42aa:	f240 232e 	movw	r3, #558	; 0x22e
    42ae:	464a      	mov	r2, r9
    42b0:	493e      	ldr	r1, [pc, #248]	; (43ac <pinctrl_configure_pins+0x90c>)
    42b2:	483c      	ldr	r0, [pc, #240]	; (43a4 <pinctrl_configure_pins+0x904>)
    42b4:	f005 f869 	bl	938a <assert_print>
    42b8:	f240 212e 	movw	r1, #558	; 0x22e
    42bc:	4648      	mov	r0, r9
    42be:	f005 f85d 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    42c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    42c6:	e017      	b.n	42f8 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    42c8:	f04f 33ff 	mov.w	r3, #4294967295
    42cc:	e7df      	b.n	428e <pinctrl_configure_pins+0x7ee>
    switch (port)
    42ce:	2300      	movs	r3, #0
    42d0:	e7dd      	b.n	428e <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    42d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 439c <pinctrl_configure_pins+0x8fc>
    42d6:	f240 2329 	movw	r3, #553	; 0x229
    42da:	4652      	mov	r2, sl
    42dc:	4930      	ldr	r1, [pc, #192]	; (43a0 <pinctrl_configure_pins+0x900>)
    42de:	4831      	ldr	r0, [pc, #196]	; (43a4 <pinctrl_configure_pins+0x904>)
    42e0:	f005 f853 	bl	938a <assert_print>
    42e4:	f240 2129 	movw	r1, #553	; 0x229
    42e8:	4650      	mov	r0, sl
    42ea:	f005 f847 	bl	937c <assert_post_action>
    42ee:	e7d4      	b.n	429a <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    42f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    42f4:	e000      	b.n	42f8 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    42f6:	4a2c      	ldr	r2, [pc, #176]	; (43a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    42f8:	2301      	movs	r3, #1
    42fa:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    42fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    4302:	e7b7      	b.n	4274 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    4304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4308:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    430c:	2201      	movs	r2, #1
    430e:	2100      	movs	r1, #0
    4310:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4314:	f7ff fb64 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4318:	e416      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    431a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    431e:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4322:	2201      	movs	r2, #1
    4324:	2100      	movs	r1, #0
    4326:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    432a:	f7ff fb59 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    432e:	e40b      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    4330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4334:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4338:	2201      	movs	r2, #1
    433a:	2100      	movs	r1, #0
    433c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4340:	f7ff fb4e 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4344:	e400      	b.n	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    4346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    434a:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    434e:	2201      	movs	r2, #1
    4350:	2100      	movs	r1, #0
    4352:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4356:	f7ff fb43 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    435a:	f7ff bbf5 	b.w	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    435e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4362:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4366:	2201      	movs	r2, #1
    4368:	2100      	movs	r1, #0
    436a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    436e:	f7ff fb37 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4372:	f7ff bbe9 	b.w	3b48 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    4376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    437a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    437e:	2201      	movs	r2, #1
    4380:	2100      	movs	r1, #0
    4382:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4386:	f7ff fb2b 	bl	39e0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    438a:	f7ff bbdd 	b.w	3b48 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    438e:	2000      	movs	r0, #0
    4390:	e001      	b.n	4396 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    4392:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    439a:	bf00      	nop
    439c:	0000b18c 	.word	0x0000b18c
    43a0:	0000b1c0 	.word	0x0000b1c0
    43a4:	0000a4cc 	.word	0x0000a4cc
    43a8:	50000300 	.word	0x50000300
    43ac:	0000a690 	.word	0x0000a690

000043b0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    43b0:	4b02      	ldr	r3, [pc, #8]	; (43bc <nvmc_wait+0xc>)
    43b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    43b6:	2b00      	cmp	r3, #0
    43b8:	d0fa      	beq.n	43b0 <nvmc_wait>
}
    43ba:	4770      	bx	lr
    43bc:	4001e000 	.word	0x4001e000

000043c0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    43c0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43c2:	4b03      	ldr	r3, [pc, #12]	; (43d0 <nvmc_config+0x10>)
    43c4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    43c8:	f7ff fff2 	bl	43b0 <nvmc_wait>
}
    43cc:	bd08      	pop	{r3, pc}
    43ce:	bf00      	nop
    43d0:	4001e000 	.word	0x4001e000

000043d4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    43d4:	4b01      	ldr	r3, [pc, #4]	; (43dc <SystemCoreClockUpdate+0x8>)
    43d6:	4a02      	ldr	r2, [pc, #8]	; (43e0 <SystemCoreClockUpdate+0xc>)
    43d8:	601a      	str	r2, [r3, #0]
}
    43da:	4770      	bx	lr
    43dc:	20000054 	.word	0x20000054
    43e0:	03d09000 	.word	0x03d09000

000043e4 <SystemInit>:

void SystemInit(void)
{
    43e4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    43e6:	f005 fcac 	bl	9d42 <nrf52_errata_36>
    43ea:	b140      	cbz	r0, 43fe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    43ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43f0:	2200      	movs	r2, #0
    43f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    43f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    43fa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    43fe:	f005 fcaa 	bl	9d56 <nrf52_errata_66>
    4402:	2800      	cmp	r0, #0
    4404:	d046      	beq.n	4494 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    440a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    440e:	4b59      	ldr	r3, [pc, #356]	; (4574 <SystemInit+0x190>)
    4410:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4414:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4418:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    441c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4420:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4424:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4428:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    442c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4430:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4434:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4438:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    443c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4440:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4444:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4448:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    444c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4450:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4454:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4458:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    445c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4460:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4464:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4468:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    446c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4470:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4474:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4478:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    447c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4480:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4484:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4488:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    448c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4490:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4494:	f005 fc69 	bl	9d6a <nrf52_errata_98>
    4498:	b118      	cbz	r0, 44a2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    449a:	4b37      	ldr	r3, [pc, #220]	; (4578 <SystemInit+0x194>)
    449c:	4a37      	ldr	r2, [pc, #220]	; (457c <SystemInit+0x198>)
    449e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    44a2:	f005 fc75 	bl	9d90 <nrf52_errata_103>
    44a6:	b118      	cbz	r0, 44b0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    44a8:	4b35      	ldr	r3, [pc, #212]	; (4580 <SystemInit+0x19c>)
    44aa:	22fb      	movs	r2, #251	; 0xfb
    44ac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    44b0:	f005 fc81 	bl	9db6 <nrf52_errata_115>
    44b4:	b170      	cbz	r0, 44d4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    44b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    44ba:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    44be:	f023 030f 	bic.w	r3, r3, #15
    44c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    44c6:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    44ca:	f002 020f 	and.w	r2, r2, #15
    44ce:	4313      	orrs	r3, r2
    44d0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    44d4:	f005 fc82 	bl	9ddc <nrf52_errata_120>
    44d8:	b120      	cbz	r0, 44e4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    44da:	4b2a      	ldr	r3, [pc, #168]	; (4584 <SystemInit+0x1a0>)
    44dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    44e0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    44e4:	f005 fc8d 	bl	9e02 <nrf52_errata_136>
    44e8:	b160      	cbz	r0, 4504 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    44ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    44f2:	f013 0f01 	tst.w	r3, #1
    44f6:	d005      	beq.n	4504 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    44f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44fc:	f06f 0201 	mvn.w	r2, #1
    4500:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4504:	f005 fc87 	bl	9e16 <nrf52_configuration_249>
    4508:	b138      	cbz	r0, 451a <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    450a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    450e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4516:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    451a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    451e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4522:	2b00      	cmp	r3, #0
    4524:	db08      	blt.n	4538 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    452a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    452e:	2b00      	cmp	r3, #0
    4530:	db02      	blt.n	4538 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    4532:	f7ff ff4f 	bl	43d4 <SystemCoreClockUpdate>
}
    4536:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    4538:	2001      	movs	r0, #1
    453a:	f7ff ff41 	bl	43c0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    453e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    4542:	2512      	movs	r5, #18
    4544:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    4548:	f7ff ff32 	bl	43b0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    454c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    4550:	f7ff ff2e 	bl	43b0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    4554:	2000      	movs	r0, #0
    4556:	f7ff ff33 	bl	43c0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    455a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    455e:	490a      	ldr	r1, [pc, #40]	; (4588 <SystemInit+0x1a4>)
    4560:	68ca      	ldr	r2, [r1, #12]
    4562:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4566:	4b09      	ldr	r3, [pc, #36]	; (458c <SystemInit+0x1a8>)
    4568:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    456a:	60cb      	str	r3, [r1, #12]
    456c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4570:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4572:	e7fd      	b.n	4570 <SystemInit+0x18c>
    4574:	4000c000 	.word	0x4000c000
    4578:	40005000 	.word	0x40005000
    457c:	00038148 	.word	0x00038148
    4580:	4000f000 	.word	0x4000f000
    4584:	40029000 	.word	0x40029000
    4588:	e000ed00 	.word	0xe000ed00
    458c:	05fa0004 	.word	0x05fa0004

00004590 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4590:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    4592:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4594:	fab4 f384 	clz	r3, r4
    4598:	f1c3 031f 	rsb	r3, r3, #31
    459c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    45a0:	2b00      	cmp	r3, #0
    45a2:	db16      	blt.n	45d2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    45a4:	2201      	movs	r2, #1
    45a6:	fa02 f303 	lsl.w	r3, r2, r3
    45aa:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    45ae:	f3bf 8f5b 	dmb	ish
    45b2:	e850 2f00 	ldrex	r2, [r0]
    45b6:	42a2      	cmp	r2, r4
    45b8:	d104      	bne.n	45c4 <nrfx_flag32_alloc+0x34>
    45ba:	e840 3e00 	strex	lr, r3, [r0]
    45be:	f1be 0f00 	cmp.w	lr, #0
    45c2:	d1f6      	bne.n	45b2 <nrfx_flag32_alloc+0x22>
    45c4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    45c8:	d1e3      	bne.n	4592 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    45ca:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    45ce:	4802      	ldr	r0, [pc, #8]	; (45d8 <nrfx_flag32_alloc+0x48>)
}
    45d0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    45d2:	4802      	ldr	r0, [pc, #8]	; (45dc <nrfx_flag32_alloc+0x4c>)
    45d4:	e7fc      	b.n	45d0 <nrfx_flag32_alloc+0x40>
    45d6:	bf00      	nop
    45d8:	0bad0000 	.word	0x0bad0000
    45dc:	0bad0002 	.word	0x0bad0002

000045e0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    45e0:	6803      	ldr	r3, [r0, #0]
    45e2:	40cb      	lsrs	r3, r1
    45e4:	f013 0f01 	tst.w	r3, #1
    45e8:	d115      	bne.n	4616 <nrfx_flag32_free+0x36>
{
    45ea:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    45ec:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    45ee:	2301      	movs	r3, #1
    45f0:	408b      	lsls	r3, r1
    45f2:	4313      	orrs	r3, r2
    45f4:	f3bf 8f5b 	dmb	ish
    45f8:	e850 cf00 	ldrex	ip, [r0]
    45fc:	4594      	cmp	ip, r2
    45fe:	d104      	bne.n	460a <nrfx_flag32_free+0x2a>
    4600:	e840 3e00 	strex	lr, r3, [r0]
    4604:	f1be 0f00 	cmp.w	lr, #0
    4608:	d1f6      	bne.n	45f8 <nrfx_flag32_free+0x18>
    460a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    460e:	d1ed      	bne.n	45ec <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    4610:	4802      	ldr	r0, [pc, #8]	; (461c <nrfx_flag32_free+0x3c>)
}
    4612:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    4616:	4802      	ldr	r0, [pc, #8]	; (4620 <nrfx_flag32_free+0x40>)
}
    4618:	4770      	bx	lr
    461a:	bf00      	nop
    461c:	0bad0000 	.word	0x0bad0000
    4620:	0bad0004 	.word	0x0bad0004

00004624 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4624:	b5f0      	push	{r4, r5, r6, r7, lr}
    4626:	b083      	sub	sp, #12
    switch (domain)
    4628:	4605      	mov	r5, r0
    462a:	b168      	cbz	r0, 4648 <clock_stop+0x24>
    462c:	2801      	cmp	r0, #1
    462e:	d020      	beq.n	4672 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4630:	4c3d      	ldr	r4, [pc, #244]	; (4728 <clock_stop+0x104>)
    4632:	23d8      	movs	r3, #216	; 0xd8
    4634:	4622      	mov	r2, r4
    4636:	493d      	ldr	r1, [pc, #244]	; (472c <clock_stop+0x108>)
    4638:	483d      	ldr	r0, [pc, #244]	; (4730 <clock_stop+0x10c>)
    463a:	f004 fea6 	bl	938a <assert_print>
    463e:	21d8      	movs	r1, #216	; 0xd8
    4640:	4620      	mov	r0, r4
    4642:	f004 fe9b 	bl	937c <assert_post_action>
            return;
    4646:	e068      	b.n	471a <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    4648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    464c:	2202      	movs	r2, #2
    464e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4652:	2200      	movs	r2, #0
    4654:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4658:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    465c:	2201      	movs	r2, #1
    465e:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4660:	2301      	movs	r3, #1
    4662:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4666:	429d      	cmp	r5, r3
    4668:	d00f      	beq.n	468a <clock_stop+0x66>
    466a:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    466c:	f242 7410 	movw	r4, #10000	; 0x2710
    4670:	e029      	b.n	46c6 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    4672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4676:	2201      	movs	r2, #1
    4678:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    467c:	2100      	movs	r1, #0
    467e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4682:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4686:	605a      	str	r2, [r3, #4]
}
    4688:	e7ea      	b.n	4660 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    468a:	f10d 0607 	add.w	r6, sp, #7
    468e:	e7ed      	b.n	466c <clock_stop+0x48>
            if (p_clk_src != NULL)
    4690:	b136      	cbz	r6, 46a0 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4696:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    469a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    469e:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46a4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    46a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    46ac:	d12f      	bne.n	470e <clock_stop+0xea>
    return false;
    46ae:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    46b0:	b38b      	cbz	r3, 4716 <clock_stop+0xf2>
    46b2:	b11e      	cbz	r6, 46bc <clock_stop+0x98>
    46b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    46b8:	2b01      	cmp	r3, #1
    46ba:	d12c      	bne.n	4716 <clock_stop+0xf2>
    46bc:	2001      	movs	r0, #1
    46be:	f005 fbbd 	bl	9e3c <nrfx_busy_wait>
    46c2:	3c01      	subs	r4, #1
    46c4:	d027      	beq.n	4716 <clock_stop+0xf2>
    switch (domain)
    46c6:	2d00      	cmp	r5, #0
    46c8:	d0e2      	beq.n	4690 <clock_stop+0x6c>
    46ca:	2d01      	cmp	r5, #1
    46cc:	d00e      	beq.n	46ec <clock_stop+0xc8>
            NRFX_ASSERT(0);
    46ce:	4f19      	ldr	r7, [pc, #100]	; (4734 <clock_stop+0x110>)
    46d0:	f44f 734f 	mov.w	r3, #828	; 0x33c
    46d4:	463a      	mov	r2, r7
    46d6:	4915      	ldr	r1, [pc, #84]	; (472c <clock_stop+0x108>)
    46d8:	4815      	ldr	r0, [pc, #84]	; (4730 <clock_stop+0x10c>)
    46da:	f004 fe56 	bl	938a <assert_print>
    46de:	f44f 714f 	mov.w	r1, #828	; 0x33c
    46e2:	4638      	mov	r0, r7
    46e4:	f004 fe4a 	bl	937c <assert_post_action>
            return false;
    46e8:	2300      	movs	r3, #0
    46ea:	e7e1      	b.n	46b0 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    46ec:	b136      	cbz	r6, 46fc <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    46ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    46f6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    46fa:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    46fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4700:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4704:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4708:	d103      	bne.n	4712 <clock_stop+0xee>
    return false;
    470a:	2300      	movs	r3, #0
    470c:	e7d0      	b.n	46b0 <clock_stop+0x8c>
                return true;
    470e:	2301      	movs	r3, #1
    4710:	e7ce      	b.n	46b0 <clock_stop+0x8c>
                return true;
    4712:	2301      	movs	r3, #1
    4714:	e7cc      	b.n	46b0 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4716:	2d01      	cmp	r5, #1
    4718:	d001      	beq.n	471e <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    471a:	b003      	add	sp, #12
    471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    471e:	4b06      	ldr	r3, [pc, #24]	; (4738 <clock_stop+0x114>)
    4720:	2200      	movs	r2, #0
    4722:	715a      	strb	r2, [r3, #5]
    4724:	e7f9      	b.n	471a <clock_stop+0xf6>
    4726:	bf00      	nop
    4728:	0000b2bc 	.word	0x0000b2bc
    472c:	0000a690 	.word	0x0000a690
    4730:	0000a4cc 	.word	0x0000a4cc
    4734:	0000b2fc 	.word	0x0000b2fc
    4738:	20000db8 	.word	0x20000db8

0000473c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    473c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    473e:	4604      	mov	r4, r0
    4740:	b150      	cbz	r0, 4758 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4742:	4b0d      	ldr	r3, [pc, #52]	; (4778 <nrfx_clock_init+0x3c>)
    4744:	791b      	ldrb	r3, [r3, #4]
    4746:	b9ab      	cbnz	r3, 4774 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    4748:	4b0b      	ldr	r3, [pc, #44]	; (4778 <nrfx_clock_init+0x3c>)
    474a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    474c:	2201      	movs	r2, #1
    474e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    4750:	2200      	movs	r2, #0
    4752:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4754:	4809      	ldr	r0, [pc, #36]	; (477c <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4756:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    4758:	4d09      	ldr	r5, [pc, #36]	; (4780 <nrfx_clock_init+0x44>)
    475a:	f240 1315 	movw	r3, #277	; 0x115
    475e:	462a      	mov	r2, r5
    4760:	4908      	ldr	r1, [pc, #32]	; (4784 <nrfx_clock_init+0x48>)
    4762:	4809      	ldr	r0, [pc, #36]	; (4788 <nrfx_clock_init+0x4c>)
    4764:	f004 fe11 	bl	938a <assert_print>
    4768:	f240 1115 	movw	r1, #277	; 0x115
    476c:	4628      	mov	r0, r5
    476e:	f004 fe05 	bl	937c <assert_post_action>
    4772:	e7e6      	b.n	4742 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4774:	4805      	ldr	r0, [pc, #20]	; (478c <nrfx_clock_init+0x50>)
    return err_code;
    4776:	e7ee      	b.n	4756 <nrfx_clock_init+0x1a>
    4778:	20000db8 	.word	0x20000db8
    477c:	0bad0000 	.word	0x0bad0000
    4780:	0000b2bc 	.word	0x0000b2bc
    4784:	0000b330 	.word	0x0000b330
    4788:	0000a4cc 	.word	0x0000a4cc
    478c:	0bad000c 	.word	0x0bad000c

00004790 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4790:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4792:	4b0f      	ldr	r3, [pc, #60]	; (47d0 <nrfx_clock_enable+0x40>)
    4794:	791b      	ldrb	r3, [r3, #4]
    4796:	b153      	cbz	r3, 47ae <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4798:	2000      	movs	r0, #0
    479a:	f7fd fca1 	bl	20e0 <arch_irq_is_enabled>
    479e:	b1a0      	cbz	r0, 47ca <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    47a0:	f005 fb50 	bl	9e44 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    47a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47a8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    47ac:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47ae:	4c09      	ldr	r4, [pc, #36]	; (47d4 <nrfx_clock_enable+0x44>)
    47b0:	f44f 7397 	mov.w	r3, #302	; 0x12e
    47b4:	4622      	mov	r2, r4
    47b6:	4908      	ldr	r1, [pc, #32]	; (47d8 <nrfx_clock_enable+0x48>)
    47b8:	4808      	ldr	r0, [pc, #32]	; (47dc <nrfx_clock_enable+0x4c>)
    47ba:	f004 fde6 	bl	938a <assert_print>
    47be:	f44f 7197 	mov.w	r1, #302	; 0x12e
    47c2:	4620      	mov	r0, r4
    47c4:	f004 fdda 	bl	937c <assert_post_action>
    47c8:	e7e6      	b.n	4798 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    47ca:	f7fd fc7b 	bl	20c4 <arch_irq_enable>
    47ce:	e7e7      	b.n	47a0 <nrfx_clock_enable+0x10>
    47d0:	20000db8 	.word	0x20000db8
    47d4:	0000b2bc 	.word	0x0000b2bc
    47d8:	0000b340 	.word	0x0000b340
    47dc:	0000a4cc 	.word	0x0000a4cc

000047e0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    47e0:	b530      	push	{r4, r5, lr}
    47e2:	b083      	sub	sp, #12
    47e4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47e6:	4b34      	ldr	r3, [pc, #208]	; (48b8 <nrfx_clock_start+0xd8>)
    47e8:	791b      	ldrb	r3, [r3, #4]
    47ea:	b183      	cbz	r3, 480e <nrfx_clock_start+0x2e>
    switch (domain)
    47ec:	b1ec      	cbz	r4, 482a <nrfx_clock_start+0x4a>
    47ee:	2c01      	cmp	r4, #1
    47f0:	d055      	beq.n	489e <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    47f2:	4c32      	ldr	r4, [pc, #200]	; (48bc <nrfx_clock_start+0xdc>)
    47f4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    47f8:	4622      	mov	r2, r4
    47fa:	4931      	ldr	r1, [pc, #196]	; (48c0 <nrfx_clock_start+0xe0>)
    47fc:	4831      	ldr	r0, [pc, #196]	; (48c4 <nrfx_clock_start+0xe4>)
    47fe:	f004 fdc4 	bl	938a <assert_print>
    4802:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    4806:	4620      	mov	r0, r4
    4808:	f004 fdb8 	bl	937c <assert_post_action>
            break;
    }
}
    480c:	e052      	b.n	48b4 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    480e:	4d2b      	ldr	r5, [pc, #172]	; (48bc <nrfx_clock_start+0xdc>)
    4810:	f44f 73b4 	mov.w	r3, #360	; 0x168
    4814:	462a      	mov	r2, r5
    4816:	492c      	ldr	r1, [pc, #176]	; (48c8 <nrfx_clock_start+0xe8>)
    4818:	482a      	ldr	r0, [pc, #168]	; (48c4 <nrfx_clock_start+0xe4>)
    481a:	f004 fdb6 	bl	938a <assert_print>
    481e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    4822:	4628      	mov	r0, r5
    4824:	f004 fdaa 	bl	937c <assert_post_action>
    4828:	e7e0      	b.n	47ec <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    482a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    482e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4832:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4836:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4838:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    483c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4840:	d117      	bne.n	4872 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4842:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4846:	f013 0f01 	tst.w	r3, #1
    484a:	d116      	bne.n	487a <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    484c:	f005 fafa 	bl	9e44 <clock_initial_lfclksrc_get>
    4850:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4856:	9a01      	ldr	r2, [sp, #4]
    4858:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    485c:	2200      	movs	r2, #0
    485e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4862:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    4866:	2202      	movs	r2, #2
    4868:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    486c:	2201      	movs	r2, #1
    486e:	609a      	str	r2, [r3, #8]
}
    4870:	e020      	b.n	48b4 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    4872:	a801      	add	r0, sp, #4
    4874:	f005 fae8 	bl	9e48 <clock_lfclksrc_tweak>
    4878:	e7eb      	b.n	4852 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    487e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4882:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    4886:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    4888:	a801      	add	r0, sp, #4
    488a:	f005 fadd 	bl	9e48 <clock_lfclksrc_tweak>
    488e:	2800      	cmp	r0, #0
    4890:	d0df      	beq.n	4852 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    4892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4896:	2202      	movs	r2, #2
    4898:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    489c:	e00a      	b.n	48b4 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    489e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48a2:	2200      	movs	r2, #0
    48a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    48a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    48ac:	2201      	movs	r2, #1
    48ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48b2:	601a      	str	r2, [r3, #0]
}
    48b4:	b003      	add	sp, #12
    48b6:	bd30      	pop	{r4, r5, pc}
    48b8:	20000db8 	.word	0x20000db8
    48bc:	0000b2bc 	.word	0x0000b2bc
    48c0:	0000a690 	.word	0x0000a690
    48c4:	0000a4cc 	.word	0x0000a4cc
    48c8:	0000b340 	.word	0x0000b340

000048cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    48cc:	b538      	push	{r3, r4, r5, lr}
    48ce:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48d0:	4b0a      	ldr	r3, [pc, #40]	; (48fc <nrfx_clock_stop+0x30>)
    48d2:	791b      	ldrb	r3, [r3, #4]
    48d4:	b11b      	cbz	r3, 48de <nrfx_clock_stop+0x12>
    clock_stop(domain);
    48d6:	4620      	mov	r0, r4
    48d8:	f7ff fea4 	bl	4624 <clock_stop>
}
    48dc:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48de:	4d08      	ldr	r5, [pc, #32]	; (4900 <nrfx_clock_stop+0x34>)
    48e0:	f240 13ad 	movw	r3, #429	; 0x1ad
    48e4:	462a      	mov	r2, r5
    48e6:	4907      	ldr	r1, [pc, #28]	; (4904 <nrfx_clock_stop+0x38>)
    48e8:	4807      	ldr	r0, [pc, #28]	; (4908 <nrfx_clock_stop+0x3c>)
    48ea:	f004 fd4e 	bl	938a <assert_print>
    48ee:	f240 11ad 	movw	r1, #429	; 0x1ad
    48f2:	4628      	mov	r0, r5
    48f4:	f004 fd42 	bl	937c <assert_post_action>
    48f8:	e7ed      	b.n	48d6 <nrfx_clock_stop+0xa>
    48fa:	bf00      	nop
    48fc:	20000db8 	.word	0x20000db8
    4900:	0000b2bc 	.word	0x0000b2bc
    4904:	0000b340 	.word	0x0000b340
    4908:	0000a4cc 	.word	0x0000a4cc

0000490c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    490c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    490e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4912:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4916:	b18b      	cbz	r3, 493c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    491c:	2200      	movs	r2, #0
    491e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4922:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4926:	2201      	movs	r2, #1
    4928:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    492c:	4b15      	ldr	r3, [pc, #84]	; (4984 <nrfx_power_clock_irq_handler+0x78>)
    492e:	795b      	ldrb	r3, [r3, #5]
    4930:	b923      	cbnz	r3, 493c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    4932:	4b14      	ldr	r3, [pc, #80]	; (4984 <nrfx_power_clock_irq_handler+0x78>)
    4934:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	2000      	movs	r0, #0
    493a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    493c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4940:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4944:	b19b      	cbz	r3, 496e <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    494a:	2200      	movs	r2, #0
    494c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4950:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4954:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4958:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    495c:	f012 0f03 	tst.w	r2, #3
    4960:	d106      	bne.n	4970 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4966:	2201      	movs	r2, #1
    4968:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    496c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    496e:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    4970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4974:	2202      	movs	r2, #2
    4976:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    497a:	4b02      	ldr	r3, [pc, #8]	; (4984 <nrfx_power_clock_irq_handler+0x78>)
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	2001      	movs	r0, #1
    4980:	4798      	blx	r3
}
    4982:	e7f4      	b.n	496e <nrfx_power_clock_irq_handler+0x62>
    4984:	20000db8 	.word	0x20000db8

00004988 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4988:	3008      	adds	r0, #8
    498a:	4b03      	ldr	r3, [pc, #12]	; (4998 <pin_in_use+0x10>)
    498c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4990:	f000 0001 	and.w	r0, r0, #1
    4994:	4770      	bx	lr
    4996:	bf00      	nop
    4998:	20000058 	.word	0x20000058

0000499c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    499c:	3008      	adds	r0, #8
    499e:	4b03      	ldr	r3, [pc, #12]	; (49ac <pin_in_use_by_te+0x10>)
    49a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    49a4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop
    49ac:	20000058 	.word	0x20000058

000049b0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    49b0:	3008      	adds	r0, #8
    49b2:	4b04      	ldr	r3, [pc, #16]	; (49c4 <pin_has_trigger+0x14>)
    49b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    49b8:	f010 001c 	ands.w	r0, r0, #28
    49bc:	bf18      	it	ne
    49be:	2001      	movne	r0, #1
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop
    49c4:	20000058 	.word	0x20000058

000049c8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    49c8:	3008      	adds	r0, #8
    49ca:	4b03      	ldr	r3, [pc, #12]	; (49d8 <pin_is_output+0x10>)
    49cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    49d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    49d4:	4770      	bx	lr
    49d6:	bf00      	nop
    49d8:	20000058 	.word	0x20000058

000049dc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    49dc:	3008      	adds	r0, #8
    49de:	4b02      	ldr	r3, [pc, #8]	; (49e8 <pin_te_get+0xc>)
    49e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    49e4:	0b40      	lsrs	r0, r0, #13
    49e6:	4770      	bx	lr
    49e8:	20000058 	.word	0x20000058

000049ec <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    49ec:	2200      	movs	r2, #0
    49ee:	e004      	b.n	49fa <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    49f0:	f04f 33ff 	mov.w	r3, #4294967295
    49f4:	4283      	cmp	r3, r0
    49f6:	d00f      	beq.n	4a18 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    49f8:	3201      	adds	r2, #1
    49fa:	2a2f      	cmp	r2, #47	; 0x2f
    49fc:	d80a      	bhi.n	4a14 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    49fe:	f102 0308 	add.w	r3, r2, #8
    4a02:	4906      	ldr	r1, [pc, #24]	; (4a1c <handler_in_use+0x30>)
    4a04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    4a08:	f413 7f80 	tst.w	r3, #256	; 0x100
    4a0c:	d0f0      	beq.n	49f0 <handler_in_use+0x4>
    4a0e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4a12:	e7ef      	b.n	49f4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    4a14:	2000      	movs	r0, #0
    4a16:	4770      	bx	lr
            return true;
    4a18:	2001      	movs	r0, #1
}
    4a1a:	4770      	bx	lr
    4a1c:	20000058 	.word	0x20000058

00004a20 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4a20:	2300      	movs	r3, #0
    4a22:	b113      	cbz	r3, 4a2a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    4a24:	f04f 30ff 	mov.w	r0, #4294967295
}
    4a28:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4a2a:	4a07      	ldr	r2, [pc, #28]	; (4a48 <find_handler+0x28>)
    4a2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4a30:	4282      	cmp	r2, r0
    4a32:	d001      	beq.n	4a38 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4a34:	3301      	adds	r3, #1
    4a36:	e7f4      	b.n	4a22 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4a38:	4a03      	ldr	r2, [pc, #12]	; (4a48 <find_handler+0x28>)
    4a3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4a3e:	6852      	ldr	r2, [r2, #4]
    4a40:	428a      	cmp	r2, r1
    4a42:	d1f7      	bne.n	4a34 <find_handler+0x14>
            return i;
    4a44:	4618      	mov	r0, r3
    4a46:	4770      	bx	lr
    4a48:	20000058 	.word	0x20000058

00004a4c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a4c:	3008      	adds	r0, #8
    4a4e:	4b06      	ldr	r3, [pc, #24]	; (4a68 <channel_handler_get+0x1c>)
    4a50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4a54:	f410 7f80 	tst.w	r0, #256	; 0x100
    4a58:	d004      	beq.n	4a64 <channel_handler_get+0x18>
    4a5a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    4a5e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4a62:	4770      	bx	lr
        return NULL;
    4a64:	2000      	movs	r0, #0
}
    4a66:	4770      	bx	lr
    4a68:	20000058 	.word	0x20000058

00004a6c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	4604      	mov	r4, r0
    4a70:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    4a72:	f7ff ffeb 	bl	4a4c <channel_handler_get>

    if (handler)
    4a76:	b120      	cbz	r0, 4a82 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    4a78:	6806      	ldr	r6, [r0, #0]
    4a7a:	6842      	ldr	r2, [r0, #4]
    4a7c:	4629      	mov	r1, r5
    4a7e:	4620      	mov	r0, r4
    4a80:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    4a82:	4b04      	ldr	r3, [pc, #16]	; (4a94 <call_handler+0x28>)
    4a84:	689b      	ldr	r3, [r3, #8]
    4a86:	b123      	cbz	r3, 4a92 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a88:	4a02      	ldr	r2, [pc, #8]	; (4a94 <call_handler+0x28>)
    4a8a:	68d2      	ldr	r2, [r2, #12]
    4a8c:	4629      	mov	r1, r5
    4a8e:	4620      	mov	r0, r4
    4a90:	4798      	blx	r3
    }
}
    4a92:	bd70      	pop	{r4, r5, r6, pc}
    4a94:	20000058 	.word	0x20000058

00004a98 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a98:	f100 0208 	add.w	r2, r0, #8
    4a9c:	4b16      	ldr	r3, [pc, #88]	; (4af8 <release_handler+0x60>)
    4a9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4aa2:	f413 7f80 	tst.w	r3, #256	; 0x100
    4aa6:	d026      	beq.n	4af6 <release_handler+0x5e>
{
    4aa8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4aaa:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4aae:	4610      	mov	r0, r2
    4ab0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4ab4:	4a10      	ldr	r2, [pc, #64]	; (4af8 <release_handler+0x60>)
    4ab6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    4aba:	4620      	mov	r0, r4
    4abc:	f7ff ff96 	bl	49ec <handler_in_use>
    4ac0:	b100      	cbz	r0, 4ac4 <release_handler+0x2c>
}
    4ac2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    4ac4:	480c      	ldr	r0, [pc, #48]	; (4af8 <release_handler+0x60>)
    4ac6:	2300      	movs	r3, #0
    4ac8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4acc:	4621      	mov	r1, r4
    4ace:	3074      	adds	r0, #116	; 0x74
    4ad0:	f7ff fd86 	bl	45e0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4ad4:	4b09      	ldr	r3, [pc, #36]	; (4afc <release_handler+0x64>)
    4ad6:	4298      	cmp	r0, r3
    4ad8:	d0f3      	beq.n	4ac2 <release_handler+0x2a>
    4ada:	4c09      	ldr	r4, [pc, #36]	; (4b00 <release_handler+0x68>)
    4adc:	f44f 7399 	mov.w	r3, #306	; 0x132
    4ae0:	4622      	mov	r2, r4
    4ae2:	4908      	ldr	r1, [pc, #32]	; (4b04 <release_handler+0x6c>)
    4ae4:	4808      	ldr	r0, [pc, #32]	; (4b08 <release_handler+0x70>)
    4ae6:	f004 fc50 	bl	938a <assert_print>
    4aea:	f44f 7199 	mov.w	r1, #306	; 0x132
    4aee:	4620      	mov	r0, r4
    4af0:	f004 fc44 	bl	937c <assert_post_action>
    4af4:	e7e5      	b.n	4ac2 <release_handler+0x2a>
    4af6:	4770      	bx	lr
    4af8:	20000058 	.word	0x20000058
    4afc:	0bad0000 	.word	0x0bad0000
    4b00:	0000b360 	.word	0x0000b360
    4b04:	0000b3a0 	.word	0x0000b3a0
    4b08:	0000a4cc 	.word	0x0000a4cc

00004b0c <pin_handler_trigger_uninit>:
{
    4b0c:	b510      	push	{r4, lr}
    4b0e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4b10:	f7ff ff44 	bl	499c <pin_in_use_by_te>
    4b14:	b140      	cbz	r0, 4b28 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b16:	4620      	mov	r0, r4
    4b18:	f7ff ff60 	bl	49dc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b1c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4b20:	4b06      	ldr	r3, [pc, #24]	; (4b3c <pin_handler_trigger_uninit+0x30>)
    4b22:	2200      	movs	r2, #0
    4b24:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    4b28:	4620      	mov	r0, r4
    4b2a:	f7ff ffb5 	bl	4a98 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b2e:	3408      	adds	r4, #8
    4b30:	4b03      	ldr	r3, [pc, #12]	; (4b40 <pin_handler_trigger_uninit+0x34>)
    4b32:	2200      	movs	r2, #0
    4b34:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    4b38:	bd10      	pop	{r4, pc}
    4b3a:	bf00      	nop
    4b3c:	40006000 	.word	0x40006000
    4b40:	20000058 	.word	0x20000058

00004b44 <pin_handler_set>:
{
    4b44:	b570      	push	{r4, r5, r6, lr}
    4b46:	b082      	sub	sp, #8
    4b48:	4606      	mov	r6, r0
    4b4a:	460c      	mov	r4, r1
    4b4c:	4615      	mov	r5, r2
    release_handler(pin);
    4b4e:	f7ff ffa3 	bl	4a98 <release_handler>
    if (!handler)
    4b52:	b324      	cbz	r4, 4b9e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    4b54:	4629      	mov	r1, r5
    4b56:	4620      	mov	r0, r4
    4b58:	f7ff ff62 	bl	4a20 <find_handler>
    if (handler_id < 0)
    4b5c:	1e03      	subs	r3, r0, #0
    4b5e:	db13      	blt.n	4b88 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4b60:	4a10      	ldr	r2, [pc, #64]	; (4ba4 <pin_handler_set+0x60>)
    4b62:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4b66:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    4b6a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b6c:	025b      	lsls	r3, r3, #9
    4b6e:	b29b      	uxth	r3, r3
    4b70:	f106 0008 	add.w	r0, r6, #8
    4b74:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    4b78:	430b      	orrs	r3, r1
    4b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4b7e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    4b82:	4809      	ldr	r0, [pc, #36]	; (4ba8 <pin_handler_set+0x64>)
}
    4b84:	b002      	add	sp, #8
    4b86:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4b88:	f10d 0107 	add.w	r1, sp, #7
    4b8c:	4807      	ldr	r0, [pc, #28]	; (4bac <pin_handler_set+0x68>)
    4b8e:	f7ff fcff 	bl	4590 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4b92:	4b05      	ldr	r3, [pc, #20]	; (4ba8 <pin_handler_set+0x64>)
    4b94:	4298      	cmp	r0, r3
    4b96:	d1f5      	bne.n	4b84 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    4b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4b9c:	e7e0      	b.n	4b60 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    4b9e:	4802      	ldr	r0, [pc, #8]	; (4ba8 <pin_handler_set+0x64>)
    4ba0:	e7f0      	b.n	4b84 <pin_handler_set+0x40>
    4ba2:	bf00      	nop
    4ba4:	20000058 	.word	0x20000058
    4ba8:	0bad0000 	.word	0x0bad0000
    4bac:	200000cc 	.word	0x200000cc

00004bb0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    4bb0:	b538      	push	{r3, r4, r5, lr}
    4bb2:	4604      	mov	r4, r0
    while (mask)
    4bb4:	e018      	b.n	4be8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    4bb6:	fa94 f3a4 	rbit	r3, r4
    4bba:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4bbe:	2201      	movs	r2, #1
    4bc0:	409a      	lsls	r2, r3
    4bc2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4bc6:	4a0a      	ldr	r2, [pc, #40]	; (4bf0 <gpiote_evt_handle+0x40>)
    4bc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4bcc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    4bd0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4bd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4bd8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    4bdc:	f005 f960 	bl	9ea0 <gpiote_polarity_to_trigger>
    4be0:	4601      	mov	r1, r0
    4be2:	4628      	mov	r0, r5
    4be4:	f7ff ff42 	bl	4a6c <call_handler>
    while (mask)
    4be8:	2c00      	cmp	r4, #0
    4bea:	d1e4      	bne.n	4bb6 <gpiote_evt_handle+0x6>
    }
}
    4bec:	bd38      	pop	{r3, r4, r5, pc}
    4bee:	bf00      	nop
    4bf0:	40006000 	.word	0x40006000

00004bf4 <latch_pending_read_and_check>:
{
    4bf4:	b082      	sub	sp, #8
    4bf6:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4bf8:	4b11      	ldr	r3, [pc, #68]	; (4c40 <latch_pending_read_and_check+0x4c>)
    4bfa:	e893 0003 	ldmia.w	r3, {r0, r1}
    4bfe:	ab02      	add	r3, sp, #8
    4c00:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4c04:	4660      	mov	r0, ip
    4c06:	2300      	movs	r3, #0
    4c08:	e00b      	b.n	4c22 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    4c0a:	aa02      	add	r2, sp, #8
    4c0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4c10:	f852 2c08 	ldr.w	r2, [r2, #-8]
    4c14:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4c18:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4c1c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4c20:	3301      	adds	r3, #1
    4c22:	2b01      	cmp	r3, #1
    4c24:	d9f1      	bls.n	4c0a <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    4c26:	2300      	movs	r3, #0
    4c28:	2b01      	cmp	r3, #1
    4c2a:	d804      	bhi.n	4c36 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    4c2c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    4c30:	b922      	cbnz	r2, 4c3c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    4c32:	3301      	adds	r3, #1
    4c34:	e7f8      	b.n	4c28 <latch_pending_read_and_check+0x34>
    return false;
    4c36:	2000      	movs	r0, #0
}
    4c38:	b002      	add	sp, #8
    4c3a:	4770      	bx	lr
            return true;
    4c3c:	2001      	movs	r0, #1
    4c3e:	e7fb      	b.n	4c38 <latch_pending_read_and_check+0x44>
    4c40:	0000a420 	.word	0x0000a420

00004c44 <next_sense_cond_call_handler>:
{
    4c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c48:	4604      	mov	r4, r0
    4c4a:	460d      	mov	r5, r1
    4c4c:	4616      	mov	r6, r2
    if (is_level(trigger))
    4c4e:	4608      	mov	r0, r1
    4c50:	f005 f928 	bl	9ea4 <is_level>
    4c54:	bb60      	cbnz	r0, 4cb0 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4c56:	2e02      	cmp	r6, #2
    4c58:	f000 80f5 	beq.w	4e46 <next_sense_cond_call_handler+0x202>
    4c5c:	f04f 0802 	mov.w	r8, #2
    switch (port)
    4c60:	0963      	lsrs	r3, r4, #5
    4c62:	f000 80f3 	beq.w	4e4c <next_sense_cond_call_handler+0x208>
    4c66:	2b01      	cmp	r3, #1
    4c68:	f040 80f3 	bne.w	4e52 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    4c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4c70:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4c74:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c76:	f013 0f01 	tst.w	r3, #1
    4c7a:	f000 80ec 	beq.w	4e56 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    4c7e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c82:	0963      	lsrs	r3, r4, #5
    4c84:	f000 80f5 	beq.w	4e72 <next_sense_cond_call_handler+0x22e>
    4c88:	2b01      	cmp	r3, #1
    4c8a:	f000 80f5 	beq.w	4e78 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    4c8e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4eb4 <next_sense_cond_call_handler+0x270>
    4c92:	f240 232e 	movw	r3, #558	; 0x22e
    4c96:	464a      	mov	r2, r9
    4c98:	4987      	ldr	r1, [pc, #540]	; (4eb8 <next_sense_cond_call_handler+0x274>)
    4c9a:	4888      	ldr	r0, [pc, #544]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4c9c:	f004 fb75 	bl	938a <assert_print>
    4ca0:	f240 212e 	movw	r1, #558	; 0x22e
    4ca4:	4648      	mov	r0, r9
    4ca6:	f004 fb69 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4caa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4cae:	e0e4      	b.n	4e7a <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    4cb0:	4629      	mov	r1, r5
    4cb2:	4620      	mov	r0, r4
    4cb4:	f7ff feda 	bl	4a6c <call_handler>
    switch (port)
    4cb8:	0963      	lsrs	r3, r4, #5
    4cba:	d01f      	beq.n	4cfc <next_sense_cond_call_handler+0xb8>
    4cbc:	2b01      	cmp	r3, #1
    4cbe:	d120      	bne.n	4d02 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    4cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4cc4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4cc8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cca:	f013 0f01 	tst.w	r3, #1
    4cce:	d01a      	beq.n	4d06 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    4cd0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cd4:	0963      	lsrs	r3, r4, #5
    4cd6:	d024      	beq.n	4d22 <next_sense_cond_call_handler+0xde>
    4cd8:	2b01      	cmp	r3, #1
    4cda:	d025      	beq.n	4d28 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    4cdc:	4f75      	ldr	r7, [pc, #468]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4cde:	f240 232e 	movw	r3, #558	; 0x22e
    4ce2:	463a      	mov	r2, r7
    4ce4:	4974      	ldr	r1, [pc, #464]	; (4eb8 <next_sense_cond_call_handler+0x274>)
    4ce6:	4875      	ldr	r0, [pc, #468]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4ce8:	f004 fb4f 	bl	938a <assert_print>
    4cec:	f240 212e 	movw	r1, #558	; 0x22e
    4cf0:	4638      	mov	r0, r7
    4cf2:	f004 fb43 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4cfa:	e016      	b.n	4d2a <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    4cfc:	f04f 33ff 	mov.w	r3, #4294967295
    4d00:	e7e0      	b.n	4cc4 <next_sense_cond_call_handler+0x80>
    switch (port)
    4d02:	2300      	movs	r3, #0
    4d04:	e7de      	b.n	4cc4 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d06:	4d6b      	ldr	r5, [pc, #428]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4d08:	f240 2329 	movw	r3, #553	; 0x229
    4d0c:	462a      	mov	r2, r5
    4d0e:	496c      	ldr	r1, [pc, #432]	; (4ec0 <next_sense_cond_call_handler+0x27c>)
    4d10:	486a      	ldr	r0, [pc, #424]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4d12:	f004 fb3a 	bl	938a <assert_print>
    4d16:	f240 2129 	movw	r1, #553	; 0x229
    4d1a:	4628      	mov	r0, r5
    4d1c:	f004 fb2e 	bl	937c <assert_post_action>
    4d20:	e7d6      	b.n	4cd0 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    4d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d26:	e000      	b.n	4d2a <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d28:	4b66      	ldr	r3, [pc, #408]	; (4ec4 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4d2a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4d2e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4d32:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4d36:	429e      	cmp	r6, r3
    4d38:	f040 80af 	bne.w	4e9a <next_sense_cond_call_handler+0x256>
    switch (port)
    4d3c:	0963      	lsrs	r3, r4, #5
    4d3e:	d01f      	beq.n	4d80 <next_sense_cond_call_handler+0x13c>
    4d40:	2b01      	cmp	r3, #1
    4d42:	d120      	bne.n	4d86 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    4d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d48:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d4c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d4e:	f013 0f01 	tst.w	r3, #1
    4d52:	d01a      	beq.n	4d8a <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    4d54:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d58:	0963      	lsrs	r3, r4, #5
    4d5a:	d024      	beq.n	4da6 <next_sense_cond_call_handler+0x162>
    4d5c:	2b01      	cmp	r3, #1
    4d5e:	d025      	beq.n	4dac <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    4d60:	4f54      	ldr	r7, [pc, #336]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4d62:	f240 232e 	movw	r3, #558	; 0x22e
    4d66:	463a      	mov	r2, r7
    4d68:	4953      	ldr	r1, [pc, #332]	; (4eb8 <next_sense_cond_call_handler+0x274>)
    4d6a:	4854      	ldr	r0, [pc, #336]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4d6c:	f004 fb0d 	bl	938a <assert_print>
    4d70:	f240 212e 	movw	r1, #558	; 0x22e
    4d74:	4638      	mov	r0, r7
    4d76:	f004 fb01 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4d7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4d7e:	e016      	b.n	4dae <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    4d80:	f04f 33ff 	mov.w	r3, #4294967295
    4d84:	e7e0      	b.n	4d48 <next_sense_cond_call_handler+0x104>
    switch (port)
    4d86:	2300      	movs	r3, #0
    4d88:	e7de      	b.n	4d48 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d8a:	4d4a      	ldr	r5, [pc, #296]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4d8c:	f240 2329 	movw	r3, #553	; 0x229
    4d90:	462a      	mov	r2, r5
    4d92:	494b      	ldr	r1, [pc, #300]	; (4ec0 <next_sense_cond_call_handler+0x27c>)
    4d94:	4849      	ldr	r0, [pc, #292]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4d96:	f004 faf8 	bl	938a <assert_print>
    4d9a:	f240 2129 	movw	r1, #553	; 0x229
    4d9e:	4628      	mov	r0, r5
    4da0:	f004 faec 	bl	937c <assert_post_action>
    4da4:	e7d6      	b.n	4d54 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    4da6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4daa:	e000      	b.n	4dae <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dac:	4945      	ldr	r1, [pc, #276]	; (4ec4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4dae:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4db2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4db6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    4dbe:	0963      	lsrs	r3, r4, #5
    4dc0:	d01f      	beq.n	4e02 <next_sense_cond_call_handler+0x1be>
    4dc2:	2b01      	cmp	r3, #1
    4dc4:	d120      	bne.n	4e08 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    4dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4dca:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4dce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4dd0:	f013 0f01 	tst.w	r3, #1
    4dd4:	d01a      	beq.n	4e0c <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    4dd6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dda:	0964      	lsrs	r4, r4, #5
    4ddc:	d024      	beq.n	4e28 <next_sense_cond_call_handler+0x1e4>
    4dde:	2c01      	cmp	r4, #1
    4de0:	d025      	beq.n	4e2e <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    4de2:	4c34      	ldr	r4, [pc, #208]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4de4:	f240 232e 	movw	r3, #558	; 0x22e
    4de8:	4622      	mov	r2, r4
    4dea:	4933      	ldr	r1, [pc, #204]	; (4eb8 <next_sense_cond_call_handler+0x274>)
    4dec:	4833      	ldr	r0, [pc, #204]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4dee:	f004 facc 	bl	938a <assert_print>
    4df2:	f240 212e 	movw	r1, #558	; 0x22e
    4df6:	4620      	mov	r0, r4
    4df8:	f004 fac0 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4dfc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4e00:	e016      	b.n	4e30 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    4e02:	f04f 33ff 	mov.w	r3, #4294967295
    4e06:	e7e0      	b.n	4dca <next_sense_cond_call_handler+0x186>
    switch (port)
    4e08:	2300      	movs	r3, #0
    4e0a:	e7de      	b.n	4dca <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e0c:	4d29      	ldr	r5, [pc, #164]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4e0e:	f240 2329 	movw	r3, #553	; 0x229
    4e12:	462a      	mov	r2, r5
    4e14:	492a      	ldr	r1, [pc, #168]	; (4ec0 <next_sense_cond_call_handler+0x27c>)
    4e16:	4829      	ldr	r0, [pc, #164]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4e18:	f004 fab7 	bl	938a <assert_print>
    4e1c:	f240 2129 	movw	r1, #553	; 0x229
    4e20:	4628      	mov	r0, r5
    4e22:	f004 faab 	bl	937c <assert_post_action>
    4e26:	e7d6      	b.n	4dd6 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    4e28:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4e2c:	e000      	b.n	4e30 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e2e:	4925      	ldr	r1, [pc, #148]	; (4ec4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4e30:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4e34:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4e38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4e3c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4e40:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    4e44:	e029      	b.n	4e9a <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e46:	f04f 0803 	mov.w	r8, #3
    4e4a:	e709      	b.n	4c60 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    4e4c:	f04f 33ff 	mov.w	r3, #4294967295
    4e50:	e70e      	b.n	4c70 <next_sense_cond_call_handler+0x2c>
    switch (port)
    4e52:	2300      	movs	r3, #0
    4e54:	e70c      	b.n	4c70 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e56:	4f17      	ldr	r7, [pc, #92]	; (4eb4 <next_sense_cond_call_handler+0x270>)
    4e58:	f240 2329 	movw	r3, #553	; 0x229
    4e5c:	463a      	mov	r2, r7
    4e5e:	4918      	ldr	r1, [pc, #96]	; (4ec0 <next_sense_cond_call_handler+0x27c>)
    4e60:	4816      	ldr	r0, [pc, #88]	; (4ebc <next_sense_cond_call_handler+0x278>)
    4e62:	f004 fa92 	bl	938a <assert_print>
    4e66:	f240 2129 	movw	r1, #553	; 0x229
    4e6a:	4638      	mov	r0, r7
    4e6c:	f004 fa86 	bl	937c <assert_post_action>
    4e70:	e705      	b.n	4c7e <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    4e72:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4e76:	e000      	b.n	4e7a <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e78:	4912      	ldr	r1, [pc, #72]	; (4ec4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4e7a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    4e7e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    4e82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4e86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4e8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4e8e:	2d03      	cmp	r5, #3
    4e90:	d007      	beq.n	4ea2 <next_sense_cond_call_handler+0x25e>
    4e92:	2e02      	cmp	r6, #2
    4e94:	d003      	beq.n	4e9e <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4e96:	2e03      	cmp	r6, #3
    4e98:	d008      	beq.n	4eac <next_sense_cond_call_handler+0x268>
}
    4e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4e9e:	2d01      	cmp	r5, #1
    4ea0:	d1f9      	bne.n	4e96 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    4ea2:	4629      	mov	r1, r5
    4ea4:	4620      	mov	r0, r4
    4ea6:	f7ff fde1 	bl	4a6c <call_handler>
}
    4eaa:	e7f6      	b.n	4e9a <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4eac:	2d02      	cmp	r5, #2
    4eae:	d1f4      	bne.n	4e9a <next_sense_cond_call_handler+0x256>
    4eb0:	e7f7      	b.n	4ea2 <next_sense_cond_call_handler+0x25e>
    4eb2:	bf00      	nop
    4eb4:	0000b18c 	.word	0x0000b18c
    4eb8:	0000a690 	.word	0x0000a690
    4ebc:	0000a4cc 	.word	0x0000a4cc
    4ec0:	0000b1c0 	.word	0x0000b1c0
    4ec4:	50000300 	.word	0x50000300

00004ec8 <port_event_handle>:
{
    4ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ecc:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4ece:	4a65      	ldr	r2, [pc, #404]	; (5064 <port_event_handle+0x19c>)
    4ed0:	466b      	mov	r3, sp
    4ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
    4ed6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4eda:	2300      	movs	r3, #0
    4edc:	a802      	add	r0, sp, #8
    4ede:	e00b      	b.n	4ef8 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4ee0:	aa04      	add	r2, sp, #16
    4ee2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4ee6:	f852 2c10 	ldr.w	r2, [r2, #-16]
    4eea:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4eee:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4ef2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4ef6:	3301      	adds	r3, #1
    4ef8:	2b01      	cmp	r3, #1
    4efa:	d9f1      	bls.n	4ee0 <port_event_handle+0x18>
    4efc:	e0ad      	b.n	505a <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    4efe:	f04f 33ff 	mov.w	r3, #4294967295
    4f02:	e07f      	b.n	5004 <port_event_handle+0x13c>
    switch (port)
    4f04:	2300      	movs	r3, #0
    4f06:	e07d      	b.n	5004 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f08:	4f57      	ldr	r7, [pc, #348]	; (5068 <port_event_handle+0x1a0>)
    4f0a:	f240 2329 	movw	r3, #553	; 0x229
    4f0e:	463a      	mov	r2, r7
    4f10:	4956      	ldr	r1, [pc, #344]	; (506c <port_event_handle+0x1a4>)
    4f12:	4857      	ldr	r0, [pc, #348]	; (5070 <port_event_handle+0x1a8>)
    4f14:	f004 fa39 	bl	938a <assert_print>
    4f18:	f240 2129 	movw	r1, #553	; 0x229
    4f1c:	4638      	mov	r0, r7
    4f1e:	f004 fa2d 	bl	937c <assert_post_action>
    4f22:	e076      	b.n	5012 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    4f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f28:	e000      	b.n	4f2c <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f2a:	4b52      	ldr	r3, [pc, #328]	; (5074 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4f2c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4f30:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    4f34:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4f38:	4631      	mov	r1, r6
    4f3a:	4620      	mov	r0, r4
    4f3c:	f7ff fe82 	bl	4c44 <next_sense_cond_call_handler>
    switch (port)
    4f40:	0963      	lsrs	r3, r4, #5
    4f42:	d01f      	beq.n	4f84 <port_event_handle+0xbc>
    4f44:	2b01      	cmp	r3, #1
    4f46:	d120      	bne.n	4f8a <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    4f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f4c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f52:	f013 0f01 	tst.w	r3, #1
    4f56:	d01a      	beq.n	4f8e <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    4f58:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f5c:	0964      	lsrs	r4, r4, #5
    4f5e:	d024      	beq.n	4faa <port_event_handle+0xe2>
    4f60:	2c01      	cmp	r4, #1
    4f62:	d025      	beq.n	4fb0 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    4f64:	4c40      	ldr	r4, [pc, #256]	; (5068 <port_event_handle+0x1a0>)
    4f66:	f240 232e 	movw	r3, #558	; 0x22e
    4f6a:	4622      	mov	r2, r4
    4f6c:	4942      	ldr	r1, [pc, #264]	; (5078 <port_event_handle+0x1b0>)
    4f6e:	4840      	ldr	r0, [pc, #256]	; (5070 <port_event_handle+0x1a8>)
    4f70:	f004 fa0b 	bl	938a <assert_print>
    4f74:	f240 212e 	movw	r1, #558	; 0x22e
    4f78:	4620      	mov	r0, r4
    4f7a:	f004 f9ff 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    4f7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4f82:	e016      	b.n	4fb2 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    4f84:	f04f 33ff 	mov.w	r3, #4294967295
    4f88:	e7e0      	b.n	4f4c <port_event_handle+0x84>
    switch (port)
    4f8a:	2300      	movs	r3, #0
    4f8c:	e7de      	b.n	4f4c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f8e:	4e36      	ldr	r6, [pc, #216]	; (5068 <port_event_handle+0x1a0>)
    4f90:	f240 2329 	movw	r3, #553	; 0x229
    4f94:	4632      	mov	r2, r6
    4f96:	4935      	ldr	r1, [pc, #212]	; (506c <port_event_handle+0x1a4>)
    4f98:	4835      	ldr	r0, [pc, #212]	; (5070 <port_event_handle+0x1a8>)
    4f9a:	f004 f9f6 	bl	938a <assert_print>
    4f9e:	f240 2129 	movw	r1, #553	; 0x229
    4fa2:	4630      	mov	r0, r6
    4fa4:	f004 f9ea 	bl	937c <assert_post_action>
    4fa8:	e7d6      	b.n	4f58 <port_event_handle+0x90>
        case 0: return NRF_P0;
    4faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fae:	e000      	b.n	4fb2 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fb0:	4a30      	ldr	r2, [pc, #192]	; (5074 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    4fb2:	2301      	movs	r3, #1
    4fb4:	40b3      	lsls	r3, r6
    4fb6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    4fba:	ab04      	add	r3, sp, #16
    4fbc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4fc0:	f853 4c08 	ldr.w	r4, [r3, #-8]
    4fc4:	2c00      	cmp	r4, #0
    4fc6:	d03b      	beq.n	5040 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    4fc8:	fa94 f4a4 	rbit	r4, r4
    4fcc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4fd0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fd4:	f104 0208 	add.w	r2, r4, #8
    4fd8:	4b28      	ldr	r3, [pc, #160]	; (507c <port_event_handle+0x1b4>)
    4fda:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    4fde:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4fe2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    4fe4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fe8:	a802      	add	r0, sp, #8
    4fea:	2301      	movs	r3, #1
    4fec:	fa03 f202 	lsl.w	r2, r3, r2
    4ff0:	5c43      	ldrb	r3, [r0, r1]
    4ff2:	ea23 0302 	bic.w	r3, r3, r2
    4ff6:	5443      	strb	r3, [r0, r1]
    switch (port)
    4ff8:	0963      	lsrs	r3, r4, #5
    4ffa:	d080      	beq.n	4efe <port_event_handle+0x36>
    4ffc:	2b01      	cmp	r3, #1
    4ffe:	d181      	bne.n	4f04 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    5000:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5004:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5008:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    500a:	f013 0f01 	tst.w	r3, #1
    500e:	f43f af7b 	beq.w	4f08 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    5012:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5016:	0963      	lsrs	r3, r4, #5
    5018:	d084      	beq.n	4f24 <port_event_handle+0x5c>
    501a:	2b01      	cmp	r3, #1
    501c:	d085      	beq.n	4f2a <port_event_handle+0x62>
            NRFX_ASSERT(0);
    501e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 5068 <port_event_handle+0x1a0>
    5022:	f240 232e 	movw	r3, #558	; 0x22e
    5026:	4642      	mov	r2, r8
    5028:	4913      	ldr	r1, [pc, #76]	; (5078 <port_event_handle+0x1b0>)
    502a:	4811      	ldr	r0, [pc, #68]	; (5070 <port_event_handle+0x1a8>)
    502c:	f004 f9ad 	bl	938a <assert_print>
    5030:	f240 212e 	movw	r1, #558	; 0x22e
    5034:	4640      	mov	r0, r8
    5036:	f004 f9a1 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    503a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    503e:	e775      	b.n	4f2c <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5040:	3501      	adds	r5, #1
    5042:	2d01      	cmp	r5, #1
    5044:	d9b9      	bls.n	4fba <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5046:	4b0e      	ldr	r3, [pc, #56]	; (5080 <port_event_handle+0x1b8>)
    5048:	2200      	movs	r2, #0
    504a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    504e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    5052:	a802      	add	r0, sp, #8
    5054:	f7ff fdce 	bl	4bf4 <latch_pending_read_and_check>
    5058:	b108      	cbz	r0, 505e <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    505a:	2500      	movs	r5, #0
    505c:	e7f1      	b.n	5042 <port_event_handle+0x17a>
}
    505e:	b004      	add	sp, #16
    5060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5064:	0000a420 	.word	0x0000a420
    5068:	0000b18c 	.word	0x0000b18c
    506c:	0000b1c0 	.word	0x0000b1c0
    5070:	0000a4cc 	.word	0x0000a4cc
    5074:	50000300 	.word	0x50000300
    5078:	0000a690 	.word	0x0000a690
    507c:	20000058 	.word	0x20000058
    5080:	40006000 	.word	0x40006000

00005084 <nrfx_gpiote_input_configure>:
{
    5084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5088:	4604      	mov	r4, r0
    508a:	4615      	mov	r5, r2
    508c:	461e      	mov	r6, r3
    if (p_input_config)
    508e:	2900      	cmp	r1, #0
    5090:	d064      	beq.n	515c <nrfx_gpiote_input_configure+0xd8>
    5092:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    5094:	f004 feee 	bl	9e74 <pin_is_task_output>
    5098:	2800      	cmp	r0, #0
    509a:	f040 80cd 	bne.w	5238 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    509e:	0963      	lsrs	r3, r4, #5
    50a0:	d020      	beq.n	50e4 <nrfx_gpiote_input_configure+0x60>
    50a2:	2b01      	cmp	r3, #1
    50a4:	d121      	bne.n	50ea <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    50a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    50aa:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50ae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50b0:	f013 0f01 	tst.w	r3, #1
    50b4:	d01b      	beq.n	50ee <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    50b6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50ba:	0963      	lsrs	r3, r4, #5
    50bc:	d025      	beq.n	510a <nrfx_gpiote_input_configure+0x86>
    50be:	2b01      	cmp	r3, #1
    50c0:	d026      	beq.n	5110 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    50c2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5248 <nrfx_gpiote_input_configure+0x1c4>
    50c6:	f240 232e 	movw	r3, #558	; 0x22e
    50ca:	464a      	mov	r2, r9
    50cc:	495f      	ldr	r1, [pc, #380]	; (524c <nrfx_gpiote_input_configure+0x1c8>)
    50ce:	4860      	ldr	r0, [pc, #384]	; (5250 <nrfx_gpiote_input_configure+0x1cc>)
    50d0:	f004 f95b 	bl	938a <assert_print>
    50d4:	f240 212e 	movw	r1, #558	; 0x22e
    50d8:	4648      	mov	r0, r9
    50da:	f004 f94f 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    50de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    50e2:	e016      	b.n	5112 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    50e4:	f04f 33ff 	mov.w	r3, #4294967295
    50e8:	e7df      	b.n	50aa <nrfx_gpiote_input_configure+0x26>
    switch (port)
    50ea:	2300      	movs	r3, #0
    50ec:	e7dd      	b.n	50aa <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50ee:	4f56      	ldr	r7, [pc, #344]	; (5248 <nrfx_gpiote_input_configure+0x1c4>)
    50f0:	f240 2329 	movw	r3, #553	; 0x229
    50f4:	463a      	mov	r2, r7
    50f6:	4957      	ldr	r1, [pc, #348]	; (5254 <nrfx_gpiote_input_configure+0x1d0>)
    50f8:	4855      	ldr	r0, [pc, #340]	; (5250 <nrfx_gpiote_input_configure+0x1cc>)
    50fa:	f004 f946 	bl	938a <assert_print>
    50fe:	f240 2129 	movw	r1, #553	; 0x229
    5102:	4638      	mov	r0, r7
    5104:	f004 f93a 	bl	937c <assert_post_action>
    5108:	e7d5      	b.n	50b6 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    510a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    510e:	e000      	b.n	5112 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5110:	4951      	ldr	r1, [pc, #324]	; (5258 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5112:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    5116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    511a:	f1b8 0f00 	cmp.w	r8, #0
    511e:	d03f      	beq.n	51a0 <nrfx_gpiote_input_configure+0x11c>
    5120:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5122:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    5126:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    512a:	f1b8 0f00 	cmp.w	r8, #0
    512e:	d039      	beq.n	51a4 <nrfx_gpiote_input_configure+0x120>
    5130:	f898 2000 	ldrb.w	r2, [r8]
    5134:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5136:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    5138:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    513c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5140:	4a46      	ldr	r2, [pc, #280]	; (525c <nrfx_gpiote_input_configure+0x1d8>)
    5142:	f104 0108 	add.w	r1, r4, #8
    5146:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    514a:	f023 0302 	bic.w	r3, r3, #2
    514e:	b29b      	uxth	r3, r3
    5150:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5154:	f043 0301 	orr.w	r3, r3, #1
    5158:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    515c:	b1bd      	cbz	r5, 518e <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    515e:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5160:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    5164:	4620      	mov	r0, r4
    5166:	f7ff fc2f 	bl	49c8 <pin_is_output>
    516a:	b1e8      	cbz	r0, 51a8 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    516c:	f1b8 0f00 	cmp.w	r8, #0
    5170:	d164      	bne.n	523c <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5172:	4a3a      	ldr	r2, [pc, #232]	; (525c <nrfx_gpiote_input_configure+0x1d8>)
    5174:	f104 0108 	add.w	r1, r4, #8
    5178:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    517c:	f023 031c 	bic.w	r3, r3, #28
    5180:	b29b      	uxth	r3, r3
    5182:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5186:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    518a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    518e:	2e00      	cmp	r6, #0
    5190:	d058      	beq.n	5244 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5192:	6872      	ldr	r2, [r6, #4]
    5194:	6831      	ldr	r1, [r6, #0]
    5196:	4620      	mov	r0, r4
    5198:	f7ff fcd4 	bl	4b44 <pin_handler_set>
}
    519c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    51a0:	2200      	movs	r2, #0
    51a2:	e7be      	b.n	5122 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    51a4:	2200      	movs	r2, #0
    51a6:	e7c6      	b.n	5136 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    51a8:	4a2c      	ldr	r2, [pc, #176]	; (525c <nrfx_gpiote_input_configure+0x1d8>)
    51aa:	f104 0108 	add.w	r1, r4, #8
    51ae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    51b2:	f023 0320 	bic.w	r3, r3, #32
    51b6:	04db      	lsls	r3, r3, #19
    51b8:	0cdb      	lsrs	r3, r3, #19
    51ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    51be:	f1b8 0f00 	cmp.w	r8, #0
    51c2:	d0d6      	beq.n	5172 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    51c4:	2f03      	cmp	r7, #3
    51c6:	d83b      	bhi.n	5240 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    51c8:	686b      	ldr	r3, [r5, #4]
    51ca:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    51cc:	b937      	cbnz	r7, 51dc <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    51ce:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    51d2:	4b23      	ldr	r3, [pc, #140]	; (5260 <nrfx_gpiote_input_configure+0x1dc>)
    51d4:	2200      	movs	r2, #0
    51d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    51da:	e7ca      	b.n	5172 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    51dc:	4638      	mov	r0, r7
    51de:	f004 fe60 	bl	9ea2 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    51e2:	4b1f      	ldr	r3, [pc, #124]	; (5260 <nrfx_gpiote_input_configure+0x1dc>)
    51e4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    51e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51ec:	f021 0103 	bic.w	r1, r1, #3
    51f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    51f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51f8:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    51fc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    5200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5204:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    5208:	0221      	lsls	r1, r4, #8
    520a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    520e:	0400      	lsls	r0, r0, #16
    5210:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5214:	4301      	orrs	r1, r0
    5216:	ea4c 0101 	orr.w	r1, ip, r1
    521a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    521e:	036b      	lsls	r3, r5, #13
    5220:	b29b      	uxth	r3, r3
    5222:	4a0e      	ldr	r2, [pc, #56]	; (525c <nrfx_gpiote_input_configure+0x1d8>)
    5224:	f104 0108 	add.w	r1, r4, #8
    5228:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    522c:	4303      	orrs	r3, r0
    522e:	f043 0320 	orr.w	r3, r3, #32
    5232:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    5236:	e79c      	b.n	5172 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    5238:	480a      	ldr	r0, [pc, #40]	; (5264 <nrfx_gpiote_input_configure+0x1e0>)
    523a:	e7af      	b.n	519c <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    523c:	4809      	ldr	r0, [pc, #36]	; (5264 <nrfx_gpiote_input_configure+0x1e0>)
    523e:	e7ad      	b.n	519c <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    5240:	4808      	ldr	r0, [pc, #32]	; (5264 <nrfx_gpiote_input_configure+0x1e0>)
    5242:	e7ab      	b.n	519c <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    5244:	4808      	ldr	r0, [pc, #32]	; (5268 <nrfx_gpiote_input_configure+0x1e4>)
    5246:	e7a9      	b.n	519c <nrfx_gpiote_input_configure+0x118>
    5248:	0000b18c 	.word	0x0000b18c
    524c:	0000a690 	.word	0x0000a690
    5250:	0000a4cc 	.word	0x0000a4cc
    5254:	0000b1c0 	.word	0x0000b1c0
    5258:	50000300 	.word	0x50000300
    525c:	20000058 	.word	0x20000058
    5260:	40006000 	.word	0x40006000
    5264:	0bad0004 	.word	0x0bad0004
    5268:	0bad0000 	.word	0x0bad0000

0000526c <nrfx_gpiote_output_configure>:
{
    526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5270:	4604      	mov	r4, r0
    5272:	4615      	mov	r5, r2
    if (p_config)
    5274:	2900      	cmp	r1, #0
    5276:	f000 8086 	beq.w	5386 <nrfx_gpiote_output_configure+0x11a>
    527a:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    527c:	f004 fe09 	bl	9e92 <pin_is_input>
    5280:	b128      	cbz	r0, 528e <nrfx_gpiote_output_configure+0x22>
    5282:	4620      	mov	r0, r4
    5284:	f7ff fb8a 	bl	499c <pin_in_use_by_te>
    5288:	2800      	cmp	r0, #0
    528a:	f040 80ce 	bne.w	542a <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    528e:	4620      	mov	r0, r4
    5290:	f7ff fb8e 	bl	49b0 <pin_has_trigger>
    5294:	b118      	cbz	r0, 529e <nrfx_gpiote_output_configure+0x32>
    5296:	787b      	ldrb	r3, [r7, #1]
    5298:	2b01      	cmp	r3, #1
    529a:	f000 80c8 	beq.w	542e <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    529e:	f107 0901 	add.w	r9, r7, #1
    52a2:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    52a6:	0963      	lsrs	r3, r4, #5
    52a8:	d020      	beq.n	52ec <nrfx_gpiote_output_configure+0x80>
    52aa:	2b01      	cmp	r3, #1
    52ac:	d121      	bne.n	52f2 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    52ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    52b2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    52b6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52b8:	f013 0f01 	tst.w	r3, #1
    52bc:	d01b      	beq.n	52f6 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    52be:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52c2:	0963      	lsrs	r3, r4, #5
    52c4:	d025      	beq.n	5312 <nrfx_gpiote_output_configure+0xa6>
    52c6:	2b01      	cmp	r3, #1
    52c8:	d026      	beq.n	5318 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    52ca:	f8df a170 	ldr.w	sl, [pc, #368]	; 543c <nrfx_gpiote_output_configure+0x1d0>
    52ce:	f240 232e 	movw	r3, #558	; 0x22e
    52d2:	4652      	mov	r2, sl
    52d4:	495a      	ldr	r1, [pc, #360]	; (5440 <nrfx_gpiote_output_configure+0x1d4>)
    52d6:	485b      	ldr	r0, [pc, #364]	; (5444 <nrfx_gpiote_output_configure+0x1d8>)
    52d8:	f004 f857 	bl	938a <assert_print>
    52dc:	f240 212e 	movw	r1, #558	; 0x22e
    52e0:	4650      	mov	r0, sl
    52e2:	f004 f84b 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    52e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52ea:	e016      	b.n	531a <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    52ec:	f04f 33ff 	mov.w	r3, #4294967295
    52f0:	e7df      	b.n	52b2 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    52f2:	2300      	movs	r3, #0
    52f4:	e7dd      	b.n	52b2 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52f6:	4e51      	ldr	r6, [pc, #324]	; (543c <nrfx_gpiote_output_configure+0x1d0>)
    52f8:	f240 2329 	movw	r3, #553	; 0x229
    52fc:	4632      	mov	r2, r6
    52fe:	4952      	ldr	r1, [pc, #328]	; (5448 <nrfx_gpiote_output_configure+0x1dc>)
    5300:	4850      	ldr	r0, [pc, #320]	; (5444 <nrfx_gpiote_output_configure+0x1d8>)
    5302:	f004 f842 	bl	938a <assert_print>
    5306:	f240 2129 	movw	r1, #553	; 0x229
    530a:	4630      	mov	r0, r6
    530c:	f004 f836 	bl	937c <assert_post_action>
    5310:	e7d5      	b.n	52be <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    5312:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5316:	e000      	b.n	531a <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5318:	4a4c      	ldr	r2, [pc, #304]	; (544c <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    531a:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    531e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5322:	f1b9 0f00 	cmp.w	r9, #0
    5326:	d04b      	beq.n	53c0 <nrfx_gpiote_output_configure+0x154>
    5328:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    532a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    532e:	f1b8 0f00 	cmp.w	r8, #0
    5332:	d047      	beq.n	53c4 <nrfx_gpiote_output_configure+0x158>
    5334:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5336:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5338:	2f00      	cmp	r7, #0
    533a:	d045      	beq.n	53c8 <nrfx_gpiote_output_configure+0x15c>
    533c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5340:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    5342:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5346:	f1b9 0f00 	cmp.w	r9, #0
    534a:	d03f      	beq.n	53cc <nrfx_gpiote_output_configure+0x160>
    534c:	787b      	ldrb	r3, [r7, #1]
    534e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5350:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5354:	f1b8 0f00 	cmp.w	r8, #0
    5358:	d03a      	beq.n	53d0 <nrfx_gpiote_output_configure+0x164>
    535a:	78b8      	ldrb	r0, [r7, #2]
    535c:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    535e:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5360:	2f00      	cmp	r7, #0
    5362:	d037      	beq.n	53d4 <nrfx_gpiote_output_configure+0x168>
    5364:	7838      	ldrb	r0, [r7, #0]
    5366:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5368:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    536a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    536c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5370:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5374:	4a36      	ldr	r2, [pc, #216]	; (5450 <nrfx_gpiote_output_configure+0x1e4>)
    5376:	f104 0108 	add.w	r1, r4, #8
    537a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    537e:	f043 0303 	orr.w	r3, r3, #3
    5382:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5386:	2d00      	cmp	r5, #0
    5388:	d053      	beq.n	5432 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    538a:	4620      	mov	r0, r4
    538c:	f004 fd81 	bl	9e92 <pin_is_input>
    5390:	2800      	cmp	r0, #0
    5392:	d150      	bne.n	5436 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    5394:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5396:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    539a:	4a2e      	ldr	r2, [pc, #184]	; (5454 <nrfx_gpiote_output_configure+0x1e8>)
    539c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    53a0:	492b      	ldr	r1, [pc, #172]	; (5450 <nrfx_gpiote_output_configure+0x1e4>)
    53a2:	f104 0008 	add.w	r0, r4, #8
    53a6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    53aa:	f022 0220 	bic.w	r2, r2, #32
    53ae:	04d2      	lsls	r2, r2, #19
    53b0:	0cd2      	lsrs	r2, r2, #19
    53b2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    53b6:	786a      	ldrb	r2, [r5, #1]
    53b8:	b972      	cbnz	r2, 53d8 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    53ba:	4827      	ldr	r0, [pc, #156]	; (5458 <nrfx_gpiote_output_configure+0x1ec>)
}
    53bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    53c0:	2300      	movs	r3, #0
    53c2:	e7b2      	b.n	532a <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    53c4:	2000      	movs	r0, #0
    53c6:	e7b6      	b.n	5336 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    53c8:	2000      	movs	r0, #0
    53ca:	e7b9      	b.n	5340 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    53cc:	2300      	movs	r3, #0
    53ce:	e7bf      	b.n	5350 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    53d0:	2000      	movs	r0, #0
    53d2:	e7c4      	b.n	535e <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    53d4:	2000      	movs	r0, #0
    53d6:	e7c7      	b.n	5368 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    53d8:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    53da:	481e      	ldr	r0, [pc, #120]	; (5454 <nrfx_gpiote_output_configure+0x1e8>)
    53dc:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    53e0:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    53e4:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    53e8:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    53ec:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    53f0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    53f4:	0221      	lsls	r1, r4, #8
    53f6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    53fa:	0412      	lsls	r2, r2, #16
    53fc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5400:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5402:	0539      	lsls	r1, r7, #20
    5404:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5408:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    540a:	4332      	orrs	r2, r6
    540c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5410:	035b      	lsls	r3, r3, #13
    5412:	b29b      	uxth	r3, r3
    5414:	4a0e      	ldr	r2, [pc, #56]	; (5450 <nrfx_gpiote_output_configure+0x1e4>)
    5416:	3408      	adds	r4, #8
    5418:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    541c:	430b      	orrs	r3, r1
    541e:	f043 0320 	orr.w	r3, r3, #32
    5422:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    5426:	480c      	ldr	r0, [pc, #48]	; (5458 <nrfx_gpiote_output_configure+0x1ec>)
    5428:	e7c8      	b.n	53bc <nrfx_gpiote_output_configure+0x150>
    542a:	480c      	ldr	r0, [pc, #48]	; (545c <nrfx_gpiote_output_configure+0x1f0>)
    542c:	e7c6      	b.n	53bc <nrfx_gpiote_output_configure+0x150>
    542e:	480b      	ldr	r0, [pc, #44]	; (545c <nrfx_gpiote_output_configure+0x1f0>)
    5430:	e7c4      	b.n	53bc <nrfx_gpiote_output_configure+0x150>
    5432:	4809      	ldr	r0, [pc, #36]	; (5458 <nrfx_gpiote_output_configure+0x1ec>)
    5434:	e7c2      	b.n	53bc <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    5436:	4809      	ldr	r0, [pc, #36]	; (545c <nrfx_gpiote_output_configure+0x1f0>)
    5438:	e7c0      	b.n	53bc <nrfx_gpiote_output_configure+0x150>
    543a:	bf00      	nop
    543c:	0000b18c 	.word	0x0000b18c
    5440:	0000a690 	.word	0x0000a690
    5444:	0000a4cc 	.word	0x0000a4cc
    5448:	0000b1c0 	.word	0x0000b1c0
    544c:	50000300 	.word	0x50000300
    5450:	20000058 	.word	0x20000058
    5454:	40006000 	.word	0x40006000
    5458:	0bad0000 	.word	0x0bad0000
    545c:	0bad0004 	.word	0x0bad0004

00005460 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5460:	4b01      	ldr	r3, [pc, #4]	; (5468 <nrfx_gpiote_global_callback_set+0x8>)
    5462:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5464:	60d9      	str	r1, [r3, #12]
}
    5466:	4770      	bx	lr
    5468:	20000058 	.word	0x20000058

0000546c <nrfx_gpiote_channel_get>:
{
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5470:	460d      	mov	r5, r1
    5472:	b159      	cbz	r1, 548c <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    5474:	4620      	mov	r0, r4
    5476:	f7ff fa91 	bl	499c <pin_in_use_by_te>
    547a:	b1a8      	cbz	r0, 54a8 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    547c:	3408      	adds	r4, #8
    547e:	4b0b      	ldr	r3, [pc, #44]	; (54ac <nrfx_gpiote_channel_get+0x40>)
    5480:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5484:	0b5b      	lsrs	r3, r3, #13
    5486:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5488:	4809      	ldr	r0, [pc, #36]	; (54b0 <nrfx_gpiote_channel_get+0x44>)
}
    548a:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    548c:	4e09      	ldr	r6, [pc, #36]	; (54b4 <nrfx_gpiote_channel_get+0x48>)
    548e:	f240 2335 	movw	r3, #565	; 0x235
    5492:	4632      	mov	r2, r6
    5494:	4908      	ldr	r1, [pc, #32]	; (54b8 <nrfx_gpiote_channel_get+0x4c>)
    5496:	4809      	ldr	r0, [pc, #36]	; (54bc <nrfx_gpiote_channel_get+0x50>)
    5498:	f003 ff77 	bl	938a <assert_print>
    549c:	f240 2135 	movw	r1, #565	; 0x235
    54a0:	4630      	mov	r0, r6
    54a2:	f003 ff6b 	bl	937c <assert_post_action>
    54a6:	e7e5      	b.n	5474 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    54a8:	4805      	ldr	r0, [pc, #20]	; (54c0 <nrfx_gpiote_channel_get+0x54>)
    54aa:	e7ee      	b.n	548a <nrfx_gpiote_channel_get+0x1e>
    54ac:	20000058 	.word	0x20000058
    54b0:	0bad0000 	.word	0x0bad0000
    54b4:	0000b360 	.word	0x0000b360
    54b8:	0000b3b4 	.word	0x0000b3b4
    54bc:	0000a4cc 	.word	0x0000a4cc
    54c0:	0bad0004 	.word	0x0bad0004

000054c4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    54c4:	4b10      	ldr	r3, [pc, #64]	; (5508 <nrfx_gpiote_init+0x44>)
    54c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    54ca:	b10b      	cbz	r3, 54d0 <nrfx_gpiote_init+0xc>
        return err_code;
    54cc:	480f      	ldr	r0, [pc, #60]	; (550c <nrfx_gpiote_init+0x48>)
}
    54ce:	4770      	bx	lr
{
    54d0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    54d2:	4c0d      	ldr	r4, [pc, #52]	; (5508 <nrfx_gpiote_init+0x44>)
    54d4:	2260      	movs	r2, #96	; 0x60
    54d6:	2100      	movs	r1, #0
    54d8:	f104 0010 	add.w	r0, r4, #16
    54dc:	f004 f86f 	bl	95be <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    54e0:	2006      	movs	r0, #6
    54e2:	f7fc fdef 	bl	20c4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    54e6:	4b0a      	ldr	r3, [pc, #40]	; (5510 <nrfx_gpiote_init+0x4c>)
    54e8:	2200      	movs	r2, #0
    54ea:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    54ee:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    54f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    54f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    54fa:	2301      	movs	r3, #1
    54fc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5500:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    5502:	4804      	ldr	r0, [pc, #16]	; (5514 <nrfx_gpiote_init+0x50>)
}
    5504:	bd10      	pop	{r4, pc}
    5506:	bf00      	nop
    5508:	20000058 	.word	0x20000058
    550c:	0bad0005 	.word	0x0bad0005
    5510:	40006000 	.word	0x40006000
    5514:	0bad0000 	.word	0x0bad0000

00005518 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5518:	4b03      	ldr	r3, [pc, #12]	; (5528 <nrfx_gpiote_is_init+0x10>)
    551a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    551e:	3800      	subs	r0, #0
    5520:	bf18      	it	ne
    5522:	2001      	movne	r0, #1
    5524:	4770      	bx	lr
    5526:	bf00      	nop
    5528:	20000058 	.word	0x20000058

0000552c <nrfx_gpiote_channel_free>:
{
    552c:	b508      	push	{r3, lr}
    552e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5530:	4801      	ldr	r0, [pc, #4]	; (5538 <nrfx_gpiote_channel_free+0xc>)
    5532:	f7ff f855 	bl	45e0 <nrfx_flag32_free>
}
    5536:	bd08      	pop	{r3, pc}
    5538:	200000c8 	.word	0x200000c8

0000553c <nrfx_gpiote_channel_alloc>:
{
    553c:	b508      	push	{r3, lr}
    553e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5540:	4801      	ldr	r0, [pc, #4]	; (5548 <nrfx_gpiote_channel_alloc+0xc>)
    5542:	f7ff f825 	bl	4590 <nrfx_flag32_alloc>
}
    5546:	bd08      	pop	{r3, pc}
    5548:	200000c8 	.word	0x200000c8

0000554c <nrfx_gpiote_trigger_enable>:
{
    554c:	b570      	push	{r4, r5, r6, lr}
    554e:	4604      	mov	r4, r0
    5550:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5552:	f7ff fa2d 	bl	49b0 <pin_has_trigger>
    5556:	b1b8      	cbz	r0, 5588 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5558:	4620      	mov	r0, r4
    555a:	f7ff fa1f 	bl	499c <pin_in_use_by_te>
    555e:	b118      	cbz	r0, 5568 <nrfx_gpiote_trigger_enable+0x1c>
    5560:	4620      	mov	r0, r4
    5562:	f004 fc96 	bl	9e92 <pin_is_input>
    5566:	b9e8      	cbnz	r0, 55a4 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    5568:	2d00      	cmp	r5, #0
    556a:	d04c      	beq.n	5606 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    556c:	f104 0308 	add.w	r3, r4, #8
    5570:	4a70      	ldr	r2, [pc, #448]	; (5734 <nrfx_gpiote_trigger_enable+0x1e8>)
    5572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5576:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    557a:	2b04      	cmp	r3, #4
    557c:	f000 8092 	beq.w	56a4 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5580:	2b05      	cmp	r3, #5
    5582:	d14e      	bne.n	5622 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5584:	2602      	movs	r6, #2
    5586:	e08e      	b.n	56a6 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    5588:	4e6b      	ldr	r6, [pc, #428]	; (5738 <nrfx_gpiote_trigger_enable+0x1ec>)
    558a:	f240 33df 	movw	r3, #991	; 0x3df
    558e:	4632      	mov	r2, r6
    5590:	496a      	ldr	r1, [pc, #424]	; (573c <nrfx_gpiote_trigger_enable+0x1f0>)
    5592:	486b      	ldr	r0, [pc, #428]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    5594:	f003 fef9 	bl	938a <assert_print>
    5598:	f240 31df 	movw	r1, #991	; 0x3df
    559c:	4630      	mov	r0, r6
    559e:	f003 feed 	bl	937c <assert_post_action>
    55a2:	e7d9      	b.n	5558 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    55a4:	4620      	mov	r0, r4
    55a6:	f7ff fa19 	bl	49dc <pin_te_get>
    55aa:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    55ac:	2807      	cmp	r0, #7
    55ae:	d81c      	bhi.n	55ea <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    55b0:	00a3      	lsls	r3, r4, #2
    55b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    55b6:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    55b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    55bc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    55c0:	2200      	movs	r2, #0
    55c2:	601a      	str	r2, [r3, #0]
    55c4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    55c6:	4a5f      	ldr	r2, [pc, #380]	; (5744 <nrfx_gpiote_trigger_enable+0x1f8>)
    55c8:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    55cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    55d0:	f043 0301 	orr.w	r3, r3, #1
    55d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    55d8:	2d00      	cmp	r5, #0
    55da:	f000 80a9 	beq.w	5730 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    55de:	2001      	movs	r0, #1
    55e0:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    55e4:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    55e8:	e0a2      	b.n	5730 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    55ea:	4e57      	ldr	r6, [pc, #348]	; (5748 <nrfx_gpiote_trigger_enable+0x1fc>)
    55ec:	f44f 7323 	mov.w	r3, #652	; 0x28c
    55f0:	4632      	mov	r2, r6
    55f2:	4956      	ldr	r1, [pc, #344]	; (574c <nrfx_gpiote_trigger_enable+0x200>)
    55f4:	4852      	ldr	r0, [pc, #328]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    55f6:	f003 fec8 	bl	938a <assert_print>
    55fa:	f44f 7123 	mov.w	r1, #652	; 0x28c
    55fe:	4630      	mov	r0, r6
    5600:	f003 febc 	bl	937c <assert_post_action>
    5604:	e7d4      	b.n	55b0 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    5606:	4d4c      	ldr	r5, [pc, #304]	; (5738 <nrfx_gpiote_trigger_enable+0x1ec>)
    5608:	f240 33ee 	movw	r3, #1006	; 0x3ee
    560c:	462a      	mov	r2, r5
    560e:	4950      	ldr	r1, [pc, #320]	; (5750 <nrfx_gpiote_trigger_enable+0x204>)
    5610:	484b      	ldr	r0, [pc, #300]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    5612:	f003 feba 	bl	938a <assert_print>
    5616:	f240 31ee 	movw	r1, #1006	; 0x3ee
    561a:	4628      	mov	r0, r5
    561c:	f003 feae 	bl	937c <assert_post_action>
    5620:	e7a4      	b.n	556c <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    5622:	0963      	lsrs	r3, r4, #5
    5624:	d01f      	beq.n	5666 <nrfx_gpiote_trigger_enable+0x11a>
    5626:	2b01      	cmp	r3, #1
    5628:	d120      	bne.n	566c <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    562a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    562e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5632:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5634:	f013 0f01 	tst.w	r3, #1
    5638:	d01a      	beq.n	5670 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    563a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    563e:	0963      	lsrs	r3, r4, #5
    5640:	d024      	beq.n	568c <nrfx_gpiote_trigger_enable+0x140>
    5642:	2b01      	cmp	r3, #1
    5644:	d025      	beq.n	5692 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    5646:	4e43      	ldr	r6, [pc, #268]	; (5754 <nrfx_gpiote_trigger_enable+0x208>)
    5648:	f240 232e 	movw	r3, #558	; 0x22e
    564c:	4632      	mov	r2, r6
    564e:	4942      	ldr	r1, [pc, #264]	; (5758 <nrfx_gpiote_trigger_enable+0x20c>)
    5650:	483b      	ldr	r0, [pc, #236]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    5652:	f003 fe9a 	bl	938a <assert_print>
    5656:	f240 212e 	movw	r1, #558	; 0x22e
    565a:	4630      	mov	r0, r6
    565c:	f003 fe8e 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    5660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5664:	e016      	b.n	5694 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    5666:	f04f 33ff 	mov.w	r3, #4294967295
    566a:	e7e0      	b.n	562e <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    566c:	2300      	movs	r3, #0
    566e:	e7de      	b.n	562e <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5670:	4d38      	ldr	r5, [pc, #224]	; (5754 <nrfx_gpiote_trigger_enable+0x208>)
    5672:	f240 2329 	movw	r3, #553	; 0x229
    5676:	462a      	mov	r2, r5
    5678:	4938      	ldr	r1, [pc, #224]	; (575c <nrfx_gpiote_trigger_enable+0x210>)
    567a:	4831      	ldr	r0, [pc, #196]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    567c:	f003 fe85 	bl	938a <assert_print>
    5680:	f240 2129 	movw	r1, #553	; 0x229
    5684:	4628      	mov	r0, r5
    5686:	f003 fe79 	bl	937c <assert_post_action>
    568a:	e7d6      	b.n	563a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    568c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5690:	e000      	b.n	5694 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5692:	4b33      	ldr	r3, [pc, #204]	; (5760 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    5694:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5698:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    569a:	f013 0f01 	tst.w	r3, #1
    569e:	d024      	beq.n	56ea <nrfx_gpiote_trigger_enable+0x19e>
    56a0:	2603      	movs	r6, #3
    56a2:	e000      	b.n	56a6 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    56a4:	2603      	movs	r6, #3
    switch (port)
    56a6:	0963      	lsrs	r3, r4, #5
    56a8:	d021      	beq.n	56ee <nrfx_gpiote_trigger_enable+0x1a2>
    56aa:	2b01      	cmp	r3, #1
    56ac:	d122      	bne.n	56f4 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    56ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    56b2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    56b6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56b8:	f013 0f01 	tst.w	r3, #1
    56bc:	d01c      	beq.n	56f8 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    56be:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56c2:	0964      	lsrs	r4, r4, #5
    56c4:	d026      	beq.n	5714 <nrfx_gpiote_trigger_enable+0x1c8>
    56c6:	2c01      	cmp	r4, #1
    56c8:	d027      	beq.n	571a <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    56ca:	4c22      	ldr	r4, [pc, #136]	; (5754 <nrfx_gpiote_trigger_enable+0x208>)
    56cc:	f240 232e 	movw	r3, #558	; 0x22e
    56d0:	4622      	mov	r2, r4
    56d2:	4921      	ldr	r1, [pc, #132]	; (5758 <nrfx_gpiote_trigger_enable+0x20c>)
    56d4:	481a      	ldr	r0, [pc, #104]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    56d6:	f003 fe58 	bl	938a <assert_print>
    56da:	f240 212e 	movw	r1, #558	; 0x22e
    56de:	4620      	mov	r0, r4
    56e0:	f003 fe4c 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    56e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    56e8:	e018      	b.n	571c <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    56ea:	2602      	movs	r6, #2
    56ec:	e7db      	b.n	56a6 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    56ee:	f04f 33ff 	mov.w	r3, #4294967295
    56f2:	e7de      	b.n	56b2 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    56f4:	2300      	movs	r3, #0
    56f6:	e7dc      	b.n	56b2 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56f8:	4d16      	ldr	r5, [pc, #88]	; (5754 <nrfx_gpiote_trigger_enable+0x208>)
    56fa:	f240 2329 	movw	r3, #553	; 0x229
    56fe:	462a      	mov	r2, r5
    5700:	4916      	ldr	r1, [pc, #88]	; (575c <nrfx_gpiote_trigger_enable+0x210>)
    5702:	480f      	ldr	r0, [pc, #60]	; (5740 <nrfx_gpiote_trigger_enable+0x1f4>)
    5704:	f003 fe41 	bl	938a <assert_print>
    5708:	f240 2129 	movw	r1, #553	; 0x229
    570c:	4628      	mov	r0, r5
    570e:	f003 fe35 	bl	937c <assert_post_action>
    5712:	e7d4      	b.n	56be <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    5714:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5718:	e000      	b.n	571c <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    571a:	4911      	ldr	r1, [pc, #68]	; (5760 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    571c:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    5720:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5724:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5728:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    572c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5730:	bd70      	pop	{r4, r5, r6, pc}
    5732:	bf00      	nop
    5734:	20000058 	.word	0x20000058
    5738:	0000b360 	.word	0x0000b360
    573c:	0000b404 	.word	0x0000b404
    5740:	0000a4cc 	.word	0x0000a4cc
    5744:	40006000 	.word	0x40006000
    5748:	0000b3c0 	.word	0x0000b3c0
    574c:	0000b3f8 	.word	0x0000b3f8
    5750:	0000b41c 	.word	0x0000b41c
    5754:	0000b18c 	.word	0x0000b18c
    5758:	0000a690 	.word	0x0000a690
    575c:	0000b1c0 	.word	0x0000b1c0
    5760:	50000300 	.word	0x50000300

00005764 <nrfx_gpiote_trigger_disable>:
{
    5764:	b538      	push	{r3, r4, r5, lr}
    5766:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5768:	f7ff f918 	bl	499c <pin_in_use_by_te>
    576c:	b1a0      	cbz	r0, 5798 <nrfx_gpiote_trigger_disable+0x34>
    576e:	4620      	mov	r0, r4
    5770:	f004 fb8f 	bl	9e92 <pin_is_input>
    5774:	b180      	cbz	r0, 5798 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    5776:	4620      	mov	r0, r4
    5778:	f7ff f930 	bl	49dc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    577c:	2201      	movs	r2, #1
    577e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5780:	4b26      	ldr	r3, [pc, #152]	; (581c <nrfx_gpiote_trigger_disable+0xb8>)
    5782:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5786:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    578a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    578e:	f022 0203 	bic.w	r2, r2, #3
    5792:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    5796:	e040      	b.n	581a <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    5798:	0963      	lsrs	r3, r4, #5
    579a:	d01f      	beq.n	57dc <nrfx_gpiote_trigger_disable+0x78>
    579c:	2b01      	cmp	r3, #1
    579e:	d120      	bne.n	57e2 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    57a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    57a4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    57a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57aa:	f013 0f01 	tst.w	r3, #1
    57ae:	d01a      	beq.n	57e6 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    57b0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57b4:	0964      	lsrs	r4, r4, #5
    57b6:	d024      	beq.n	5802 <nrfx_gpiote_trigger_disable+0x9e>
    57b8:	2c01      	cmp	r4, #1
    57ba:	d025      	beq.n	5808 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    57bc:	4c18      	ldr	r4, [pc, #96]	; (5820 <nrfx_gpiote_trigger_disable+0xbc>)
    57be:	f240 232e 	movw	r3, #558	; 0x22e
    57c2:	4622      	mov	r2, r4
    57c4:	4917      	ldr	r1, [pc, #92]	; (5824 <nrfx_gpiote_trigger_disable+0xc0>)
    57c6:	4818      	ldr	r0, [pc, #96]	; (5828 <nrfx_gpiote_trigger_disable+0xc4>)
    57c8:	f003 fddf 	bl	938a <assert_print>
    57cc:	f240 212e 	movw	r1, #558	; 0x22e
    57d0:	4620      	mov	r0, r4
    57d2:	f003 fdd3 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    57d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    57da:	e016      	b.n	580a <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    57dc:	f04f 33ff 	mov.w	r3, #4294967295
    57e0:	e7e0      	b.n	57a4 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    57e2:	2300      	movs	r3, #0
    57e4:	e7de      	b.n	57a4 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57e6:	4d0e      	ldr	r5, [pc, #56]	; (5820 <nrfx_gpiote_trigger_disable+0xbc>)
    57e8:	f240 2329 	movw	r3, #553	; 0x229
    57ec:	462a      	mov	r2, r5
    57ee:	490f      	ldr	r1, [pc, #60]	; (582c <nrfx_gpiote_trigger_disable+0xc8>)
    57f0:	480d      	ldr	r0, [pc, #52]	; (5828 <nrfx_gpiote_trigger_disable+0xc4>)
    57f2:	f003 fdca 	bl	938a <assert_print>
    57f6:	f240 2129 	movw	r1, #553	; 0x229
    57fa:	4628      	mov	r0, r5
    57fc:	f003 fdbe 	bl	937c <assert_post_action>
    5800:	e7d6      	b.n	57b0 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    5802:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5806:	e000      	b.n	580a <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5808:	4909      	ldr	r1, [pc, #36]	; (5830 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    580a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    580e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5812:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    581a:	bd38      	pop	{r3, r4, r5, pc}
    581c:	40006000 	.word	0x40006000
    5820:	0000b18c 	.word	0x0000b18c
    5824:	0000a690 	.word	0x0000a690
    5828:	0000a4cc 	.word	0x0000a4cc
    582c:	0000b1c0 	.word	0x0000b1c0
    5830:	50000300 	.word	0x50000300

00005834 <nrfx_gpiote_pin_uninit>:
{
    5834:	b538      	push	{r3, r4, r5, lr}
    5836:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5838:	f7ff f8a6 	bl	4988 <pin_in_use>
    583c:	b908      	cbnz	r0, 5842 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    583e:	4824      	ldr	r0, [pc, #144]	; (58d0 <nrfx_gpiote_pin_uninit+0x9c>)
}
    5840:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    5842:	4620      	mov	r0, r4
    5844:	f7ff ff8e 	bl	5764 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5848:	4620      	mov	r0, r4
    584a:	f7ff f95f 	bl	4b0c <pin_handler_trigger_uninit>
    switch (port)
    584e:	0963      	lsrs	r3, r4, #5
    5850:	d01f      	beq.n	5892 <nrfx_gpiote_pin_uninit+0x5e>
    5852:	2b01      	cmp	r3, #1
    5854:	d120      	bne.n	5898 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    5856:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    585a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    585e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5860:	f013 0f01 	tst.w	r3, #1
    5864:	d01a      	beq.n	589c <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    5866:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    586a:	0964      	lsrs	r4, r4, #5
    586c:	d024      	beq.n	58b8 <nrfx_gpiote_pin_uninit+0x84>
    586e:	2c01      	cmp	r4, #1
    5870:	d025      	beq.n	58be <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    5872:	4c18      	ldr	r4, [pc, #96]	; (58d4 <nrfx_gpiote_pin_uninit+0xa0>)
    5874:	f240 232e 	movw	r3, #558	; 0x22e
    5878:	4622      	mov	r2, r4
    587a:	4917      	ldr	r1, [pc, #92]	; (58d8 <nrfx_gpiote_pin_uninit+0xa4>)
    587c:	4817      	ldr	r0, [pc, #92]	; (58dc <nrfx_gpiote_pin_uninit+0xa8>)
    587e:	f003 fd84 	bl	938a <assert_print>
    5882:	f240 212e 	movw	r1, #558	; 0x22e
    5886:	4620      	mov	r0, r4
    5888:	f003 fd78 	bl	937c <assert_post_action>
        case 0: return NRF_P0;
    588c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5890:	e016      	b.n	58c0 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    5892:	f04f 33ff 	mov.w	r3, #4294967295
    5896:	e7e0      	b.n	585a <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    5898:	2300      	movs	r3, #0
    589a:	e7de      	b.n	585a <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    589c:	4d0d      	ldr	r5, [pc, #52]	; (58d4 <nrfx_gpiote_pin_uninit+0xa0>)
    589e:	f240 2329 	movw	r3, #553	; 0x229
    58a2:	462a      	mov	r2, r5
    58a4:	490e      	ldr	r1, [pc, #56]	; (58e0 <nrfx_gpiote_pin_uninit+0xac>)
    58a6:	480d      	ldr	r0, [pc, #52]	; (58dc <nrfx_gpiote_pin_uninit+0xa8>)
    58a8:	f003 fd6f 	bl	938a <assert_print>
    58ac:	f240 2129 	movw	r1, #553	; 0x229
    58b0:	4628      	mov	r0, r5
    58b2:	f003 fd63 	bl	937c <assert_post_action>
    58b6:	e7d6      	b.n	5866 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    58b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    58bc:	e000      	b.n	58c0 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58be:	4b09      	ldr	r3, [pc, #36]	; (58e4 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    58c0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    58c4:	2202      	movs	r2, #2
    58c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    58ca:	4807      	ldr	r0, [pc, #28]	; (58e8 <nrfx_gpiote_pin_uninit+0xb4>)
}
    58cc:	e7b8      	b.n	5840 <nrfx_gpiote_pin_uninit+0xc>
    58ce:	bf00      	nop
    58d0:	0bad0004 	.word	0x0bad0004
    58d4:	0000b18c 	.word	0x0000b18c
    58d8:	0000a690 	.word	0x0000a690
    58dc:	0000a4cc 	.word	0x0000a4cc
    58e0:	0000b1c0 	.word	0x0000b1c0
    58e4:	50000300 	.word	0x50000300
    58e8:	0bad0000 	.word	0x0bad0000

000058ec <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    58ec:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    58ee:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    58f0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    58f4:	2100      	movs	r1, #0
    uint32_t status = 0;
    58f6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    58f8:	e003      	b.n	5902 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    58fa:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    58fc:	3304      	adds	r3, #4
    58fe:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5900:	3101      	adds	r1, #1
    5902:	2907      	cmp	r1, #7
    5904:	d814      	bhi.n	5930 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5906:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    590a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    590e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5910:	2a00      	cmp	r2, #0
    5912:	d0f2      	beq.n	58fa <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5914:	4a0c      	ldr	r2, [pc, #48]	; (5948 <nrfx_gpiote_irq_handler+0x5c>)
    5916:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    591a:	4210      	tst	r0, r2
    591c:	d0ed      	beq.n	58fa <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    591e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5922:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5926:	2500      	movs	r5, #0
    5928:	6015      	str	r5, [r2, #0]
    592a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    592c:	4304      	orrs	r4, r0
    592e:	e7e4      	b.n	58fa <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5930:	4b05      	ldr	r3, [pc, #20]	; (5948 <nrfx_gpiote_irq_handler+0x5c>)
    5932:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5936:	b91b      	cbnz	r3, 5940 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    5938:	4620      	mov	r0, r4
    593a:	f7ff f939 	bl	4bb0 <gpiote_evt_handle>
}
    593e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5940:	f7ff fac2 	bl	4ec8 <port_event_handle>
    5944:	e7f8      	b.n	5938 <nrfx_gpiote_irq_handler+0x4c>
    5946:	bf00      	nop
    5948:	40006000 	.word	0x40006000

0000594c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    594c:	b508      	push	{r3, lr}
    594e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5950:	4801      	ldr	r0, [pc, #4]	; (5958 <nrfx_ppi_channel_alloc+0xc>)
    5952:	f7fe fe1d 	bl	4590 <nrfx_flag32_alloc>
}
    5956:	bd08      	pop	{r3, pc}
    5958:	200000d4 	.word	0x200000d4

0000595c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    595c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    595e:	4c14      	ldr	r4, [pc, #80]	; (59b0 <_DoInit+0x54>)
    5960:	2303      	movs	r3, #3
    5962:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5964:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5966:	4a13      	ldr	r2, [pc, #76]	; (59b4 <_DoInit+0x58>)
    5968:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    596a:	4b13      	ldr	r3, [pc, #76]	; (59b8 <_DoInit+0x5c>)
    596c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    596e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5972:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5974:	2300      	movs	r3, #0
    5976:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5978:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    597a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    597c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    597e:	4a0f      	ldr	r2, [pc, #60]	; (59bc <_DoInit+0x60>)
    5980:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5982:	2210      	movs	r2, #16
    5984:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5986:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5988:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    598a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    598c:	490c      	ldr	r1, [pc, #48]	; (59c0 <_DoInit+0x64>)
    598e:	1de0      	adds	r0, r4, #7
    5990:	f003 fdaf 	bl	94f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5994:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5998:	490a      	ldr	r1, [pc, #40]	; (59c4 <_DoInit+0x68>)
    599a:	4620      	mov	r0, r4
    599c:	f003 fda9 	bl	94f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    59a0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    59a4:	2320      	movs	r3, #32
    59a6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    59a8:	f3bf 8f5f 	dmb	sy
}
    59ac:	bd10      	pop	{r4, pc}
    59ae:	bf00      	nop
    59b0:	20000dc0 	.word	0x20000dc0
    59b4:	0000b428 	.word	0x0000b428
    59b8:	20000e78 	.word	0x20000e78
    59bc:	20000e68 	.word	0x20000e68
    59c0:	0000b434 	.word	0x0000b434
    59c4:	0000b438 	.word	0x0000b438

000059c8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    59c8:	4b03      	ldr	r3, [pc, #12]	; (59d8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    59ca:	e000      	b.n	59ce <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    59cc:	3318      	adds	r3, #24
	while (dev < __device_end) {
    59ce:	4a03      	ldr	r2, [pc, #12]	; (59dc <z_device_state_init+0x14>)
    59d0:	4293      	cmp	r3, r2
    59d2:	d3fb      	bcc.n	59cc <z_device_state_init+0x4>
	}
}
    59d4:	4770      	bx	lr
    59d6:	bf00      	nop
    59d8:	0000a1cc 	.word	0x0000a1cc
    59dc:	0000a244 	.word	0x0000a244

000059e0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    59e0:	b570      	push	{r4, r5, r6, lr}
    59e2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    59e4:	4b11      	ldr	r3, [pc, #68]	; (5a2c <z_sys_init_run_level+0x4c>)
    59e6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    59ea:	e009      	b.n	5a00 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    59ec:	4240      	negs	r0, r0
    59ee:	e017      	b.n	5a20 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    59f0:	68eb      	ldr	r3, [r5, #12]
    59f2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    59f4:	68ea      	ldr	r2, [r5, #12]
    59f6:	7853      	ldrb	r3, [r2, #1]
    59f8:	f043 0301 	orr.w	r3, r3, #1
    59fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    59fe:	3408      	adds	r4, #8
    5a00:	1c73      	adds	r3, r6, #1
    5a02:	4a0a      	ldr	r2, [pc, #40]	; (5a2c <z_sys_init_run_level+0x4c>)
    5a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a08:	42a3      	cmp	r3, r4
    5a0a:	d90d      	bls.n	5a28 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    5a0c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    5a0e:	6823      	ldr	r3, [r4, #0]
    5a10:	4628      	mov	r0, r5
    5a12:	4798      	blx	r3
		if (dev != NULL) {
    5a14:	2d00      	cmp	r5, #0
    5a16:	d0f2      	beq.n	59fe <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    5a18:	2800      	cmp	r0, #0
    5a1a:	d0eb      	beq.n	59f4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    5a1c:	2800      	cmp	r0, #0
    5a1e:	dbe5      	blt.n	59ec <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    5a20:	28ff      	cmp	r0, #255	; 0xff
    5a22:	dde5      	ble.n	59f0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    5a24:	20ff      	movs	r0, #255	; 0xff
    5a26:	e7e3      	b.n	59f0 <z_sys_init_run_level+0x10>
		}
	}
}
    5a28:	bd70      	pop	{r4, r5, r6, pc}
    5a2a:	bf00      	nop
    5a2c:	0000b440 	.word	0x0000b440

00005a30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a32:	4604      	mov	r4, r0
    5a34:	460e      	mov	r6, r1
	__asm__ volatile(
    5a36:	f04f 0320 	mov.w	r3, #32
    5a3a:	f3ef 8711 	mrs	r7, BASEPRI
    5a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a42:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5a46:	f002 fa29 	bl	7e9c <z_impl_z_current_get>
    5a4a:	4605      	mov	r5, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5a4c:	4631      	mov	r1, r6
    5a4e:	4620      	mov	r0, r4
    5a50:	f004 f965 	bl	9d1e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5a54:	2c04      	cmp	r4, #4
    5a56:	d007      	beq.n	5a68 <z_fatal_error+0x38>
	__asm__ volatile(
    5a58:	f387 8811 	msr	BASEPRI, r7
    5a5c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5a60:	4628      	mov	r0, r5
    5a62:	f7fc fe91 	bl	2788 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5a68:	4c07      	ldr	r4, [pc, #28]	; (5a88 <z_fatal_error+0x58>)
    5a6a:	238f      	movs	r3, #143	; 0x8f
    5a6c:	4622      	mov	r2, r4
    5a6e:	4907      	ldr	r1, [pc, #28]	; (5a8c <z_fatal_error+0x5c>)
    5a70:	4807      	ldr	r0, [pc, #28]	; (5a90 <z_fatal_error+0x60>)
    5a72:	f003 fc8a 	bl	938a <assert_print>
    5a76:	4807      	ldr	r0, [pc, #28]	; (5a94 <z_fatal_error+0x64>)
    5a78:	f003 fc87 	bl	938a <assert_print>
    5a7c:	218f      	movs	r1, #143	; 0x8f
    5a7e:	4620      	mov	r0, r4
    5a80:	f003 fc7c 	bl	937c <assert_post_action>
    5a84:	e7e8      	b.n	5a58 <z_fatal_error+0x28>
    5a86:	bf00      	nop
    5a88:	0000b458 	.word	0x0000b458
    5a8c:	0000b47c 	.word	0x0000b47c
    5a90:	0000a4cc 	.word	0x0000a4cc
    5a94:	0000b49c 	.word	0x0000b49c

00005a98 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5a98:	b510      	push	{r4, lr}
    5a9a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    5a9c:	4c11      	ldr	r4, [pc, #68]	; (5ae4 <init_idle_thread+0x4c>)
    5a9e:	23b0      	movs	r3, #176	; 0xb0
    5aa0:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5aa4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5aa8:	4b0f      	ldr	r3, [pc, #60]	; (5ae8 <init_idle_thread+0x50>)
    5aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    5aae:	4a0f      	ldr	r2, [pc, #60]	; (5aec <init_idle_thread+0x54>)
    5ab0:	9205      	str	r2, [sp, #20]
    5ab2:	2201      	movs	r2, #1
    5ab4:	9204      	str	r2, [sp, #16]
    5ab6:	220f      	movs	r2, #15
    5ab8:	9203      	str	r2, [sp, #12]
    5aba:	2200      	movs	r2, #0
    5abc:	9202      	str	r2, [sp, #8]
    5abe:	9201      	str	r2, [sp, #4]
    5ac0:	9300      	str	r3, [sp, #0]
    5ac2:	4b0b      	ldr	r3, [pc, #44]	; (5af0 <init_idle_thread+0x58>)
    5ac4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5ac8:	490a      	ldr	r1, [pc, #40]	; (5af4 <init_idle_thread+0x5c>)
    5aca:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    5ace:	fb0c 1100 	mla	r1, ip, r0, r1
    5ad2:	4620      	mov	r0, r4
    5ad4:	f000 fa74 	bl	5fc0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5ad8:	7b63      	ldrb	r3, [r4, #13]
    5ada:	f023 0304 	bic.w	r3, r3, #4
    5ade:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5ae0:	b006      	add	sp, #24
    5ae2:	bd10      	pop	{r4, pc}
    5ae4:	20000650 	.word	0x20000650
    5ae8:	20001278 	.word	0x20001278
    5aec:	0000b4d4 	.word	0x0000b4d4
    5af0:	00006241 	.word	0x00006241
    5af4:	20002d80 	.word	0x20002d80

00005af8 <bg_thread_main>:
{
    5af8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5afa:	4b0a      	ldr	r3, [pc, #40]	; (5b24 <bg_thread_main+0x2c>)
    5afc:	2201      	movs	r2, #1
    5afe:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5b00:	2002      	movs	r0, #2
    5b02:	f7ff ff6d 	bl	59e0 <z_sys_init_run_level>
	boot_banner();
    5b06:	f002 fe7b 	bl	8800 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5b0a:	2003      	movs	r0, #3
    5b0c:	f7ff ff68 	bl	59e0 <z_sys_init_run_level>
	z_init_static_threads();
    5b10:	f000 fb1c 	bl	614c <z_init_static_threads>
	main();
    5b14:	f004 fb14 	bl	a140 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5b18:	4a03      	ldr	r2, [pc, #12]	; (5b28 <bg_thread_main+0x30>)
    5b1a:	7b13      	ldrb	r3, [r2, #12]
    5b1c:	f023 0301 	bic.w	r3, r3, #1
    5b20:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5b22:	bd08      	pop	{r3, pc}
    5b24:	200014a1 	.word	0x200014a1
    5b28:	20000700 	.word	0x20000700

00005b2c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    5b2c:	b508      	push	{r3, lr}
    5b2e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5b30:	4a01      	ldr	r2, [pc, #4]	; (5b38 <switch_to_main_thread+0xc>)
    5b32:	4802      	ldr	r0, [pc, #8]	; (5b3c <switch_to_main_thread+0x10>)
    5b34:	f7fc fbda 	bl	22ec <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5b38:	00005af9 	.word	0x00005af9
    5b3c:	20000700 	.word	0x20000700

00005b40 <z_bss_zero>:
{
    5b40:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5b42:	4803      	ldr	r0, [pc, #12]	; (5b50 <z_bss_zero+0x10>)
    5b44:	4a03      	ldr	r2, [pc, #12]	; (5b54 <z_bss_zero+0x14>)
    5b46:	1a12      	subs	r2, r2, r0
    5b48:	2100      	movs	r1, #0
    5b4a:	f004 f9c6 	bl	9eda <z_early_memset>
}
    5b4e:	bd08      	pop	{r3, pc}
    5b50:	200002c0 	.word	0x200002c0
    5b54:	200014a4 	.word	0x200014a4

00005b58 <z_init_cpu>:
{
    5b58:	b510      	push	{r4, lr}
    5b5a:	4604      	mov	r4, r0
	init_idle_thread(id);
    5b5c:	f7ff ff9c 	bl	5a98 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5b60:	490b      	ldr	r1, [pc, #44]	; (5b90 <z_init_cpu+0x38>)
    5b62:	23b0      	movs	r3, #176	; 0xb0
    5b64:	fb03 1104 	mla	r1, r3, r4, r1
    5b68:	4a0a      	ldr	r2, [pc, #40]	; (5b94 <z_init_cpu+0x3c>)
    5b6a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5b72:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    5b74:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5b76:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5b7a:	4b07      	ldr	r3, [pc, #28]	; (5b98 <z_init_cpu+0x40>)
    5b7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5b80:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    5b84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5b88:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    5b8c:	6063      	str	r3, [r4, #4]
}
    5b8e:	bd10      	pop	{r4, pc}
    5b90:	20000650 	.word	0x20000650
    5b94:	20001278 	.word	0x20001278
    5b98:	20002ee0 	.word	0x20002ee0

00005b9c <prepare_multithreading>:
{
    5b9c:	b570      	push	{r4, r5, r6, lr}
    5b9e:	b086      	sub	sp, #24
	z_sched_init();
    5ba0:	f001 ffb8 	bl	7b14 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    5ba4:	4d10      	ldr	r5, [pc, #64]	; (5be8 <prepare_multithreading+0x4c>)
    5ba6:	4b11      	ldr	r3, [pc, #68]	; (5bec <prepare_multithreading+0x50>)
    5ba8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5baa:	4b11      	ldr	r3, [pc, #68]	; (5bf0 <prepare_multithreading+0x54>)
    5bac:	9305      	str	r3, [sp, #20]
    5bae:	2301      	movs	r3, #1
    5bb0:	9304      	str	r3, [sp, #16]
    5bb2:	2400      	movs	r4, #0
    5bb4:	9403      	str	r4, [sp, #12]
    5bb6:	9402      	str	r4, [sp, #8]
    5bb8:	9401      	str	r4, [sp, #4]
    5bba:	9400      	str	r4, [sp, #0]
    5bbc:	4b0d      	ldr	r3, [pc, #52]	; (5bf4 <prepare_multithreading+0x58>)
    5bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5bc2:	490d      	ldr	r1, [pc, #52]	; (5bf8 <prepare_multithreading+0x5c>)
    5bc4:	4628      	mov	r0, r5
    5bc6:	f000 f9fb 	bl	5fc0 <z_setup_new_thread>
    5bca:	4606      	mov	r6, r0
    5bcc:	7b6b      	ldrb	r3, [r5, #13]
    5bce:	f023 0304 	bic.w	r3, r3, #4
    5bd2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    5bd4:	4628      	mov	r0, r5
    5bd6:	f001 fb21 	bl	721c <z_ready_thread>
	z_init_cpu(0);
    5bda:	4620      	mov	r0, r4
    5bdc:	f7ff ffbc 	bl	5b58 <z_init_cpu>
}
    5be0:	4630      	mov	r0, r6
    5be2:	b006      	add	sp, #24
    5be4:	bd70      	pop	{r4, r5, r6, pc}
    5be6:	bf00      	nop
    5be8:	20000700 	.word	0x20000700
    5bec:	20001278 	.word	0x20001278
    5bf0:	0000b4dc 	.word	0x0000b4dc
    5bf4:	00005af9 	.word	0x00005af9
    5bf8:	20002960 	.word	0x20002960

00005bfc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5bfc:	b500      	push	{lr}
    5bfe:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5c00:	4b1e      	ldr	r3, [pc, #120]	; (5c7c <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5c02:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5c06:	4c1e      	ldr	r4, [pc, #120]	; (5c80 <z_cstart+0x84>)
    5c08:	6963      	ldr	r3, [r4, #20]
    5c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5c0e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5c10:	23e0      	movs	r3, #224	; 0xe0
    5c12:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5c16:	2500      	movs	r5, #0
    5c18:	77e5      	strb	r5, [r4, #31]
    5c1a:	7625      	strb	r5, [r4, #24]
    5c1c:	7665      	strb	r5, [r4, #25]
    5c1e:	76a5      	strb	r5, [r4, #26]
    5c20:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5c26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5c2a:	6263      	str	r3, [r4, #36]	; 0x24
    5c2c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5c30:	f7fc fd16 	bl	2660 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5c34:	f7fc fa28 	bl	2088 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5c38:	f04f 33ff 	mov.w	r3, #4294967295
    5c3c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5c40:	f7fc fe6e 	bl	2920 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5c44:	f7fc fdba 	bl	27bc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5c48:	2401      	movs	r4, #1
    5c4a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    5c4e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    5c52:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5c54:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    5c56:	4668      	mov	r0, sp
    5c58:	f002 fdb6 	bl	87c8 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5c5c:	4b09      	ldr	r3, [pc, #36]	; (5c84 <z_cstart+0x88>)
    5c5e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5c62:	f7ff feb1 	bl	59c8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5c66:	4628      	mov	r0, r5
    5c68:	f7ff feba 	bl	59e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5c6c:	4620      	mov	r0, r4
    5c6e:	f7ff feb7 	bl	59e0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5c72:	f7ff ff93 	bl	5b9c <prepare_multithreading>
    5c76:	f7ff ff59 	bl	5b2c <switch_to_main_thread>
    5c7a:	bf00      	nop
    5c7c:	20003700 	.word	0x20003700
    5c80:	e000ed00 	.word	0xe000ed00
    5c84:	20001278 	.word	0x20001278

00005c88 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5c88:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5c8a:	4c10      	ldr	r4, [pc, #64]	; (5ccc <init_mem_slab_module+0x44>)
	int rc = 0;
    5c8c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5c8e:	e008      	b.n	5ca2 <init_mem_slab_module+0x1a>
    5c90:	4b0f      	ldr	r3, [pc, #60]	; (5cd0 <init_mem_slab_module+0x48>)
    5c92:	429c      	cmp	r4, r3
    5c94:	d217      	bcs.n	5cc6 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    5c96:	4620      	mov	r0, r4
    5c98:	f004 f927 	bl	9eea <create_free_list>
		if (rc < 0) {
    5c9c:	1e05      	subs	r5, r0, #0
    5c9e:	db12      	blt.n	5cc6 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5ca0:	3420      	adds	r4, #32
    5ca2:	4b0b      	ldr	r3, [pc, #44]	; (5cd0 <init_mem_slab_module+0x48>)
    5ca4:	429c      	cmp	r4, r3
    5ca6:	d9f3      	bls.n	5c90 <init_mem_slab_module+0x8>
    5ca8:	4e0a      	ldr	r6, [pc, #40]	; (5cd4 <init_mem_slab_module+0x4c>)
    5caa:	233d      	movs	r3, #61	; 0x3d
    5cac:	4632      	mov	r2, r6
    5cae:	490a      	ldr	r1, [pc, #40]	; (5cd8 <init_mem_slab_module+0x50>)
    5cb0:	480a      	ldr	r0, [pc, #40]	; (5cdc <init_mem_slab_module+0x54>)
    5cb2:	f003 fb6a 	bl	938a <assert_print>
    5cb6:	480a      	ldr	r0, [pc, #40]	; (5ce0 <init_mem_slab_module+0x58>)
    5cb8:	f003 fb67 	bl	938a <assert_print>
    5cbc:	213d      	movs	r1, #61	; 0x3d
    5cbe:	4630      	mov	r0, r6
    5cc0:	f003 fb5c 	bl	937c <assert_post_action>
    5cc4:	e7e4      	b.n	5c90 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    5cc6:	4628      	mov	r0, r5
    5cc8:	bd70      	pop	{r4, r5, r6, pc}
    5cca:	bf00      	nop
    5ccc:	20000244 	.word	0x20000244
    5cd0:	20000244 	.word	0x20000244
    5cd4:	0000b4e4 	.word	0x0000b4e4
    5cd8:	0000b50c 	.word	0x0000b50c
    5cdc:	0000a4cc 	.word	0x0000a4cc
    5ce0:	0000b52c 	.word	0x0000b52c

00005ce4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ce8:	b082      	sub	sp, #8
    5cea:	4604      	mov	r4, r0
    5cec:	460e      	mov	r6, r1
    5cee:	4690      	mov	r8, r2
    5cf0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5cf2:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5cf6:	f04f 0320 	mov.w	r3, #32
    5cfa:	f3ef 8711 	mrs	r7, BASEPRI
    5cfe:	f383 8812 	msr	BASEPRI_MAX, r3
    5d02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d06:	4628      	mov	r0, r5
    5d08:	f000 f8d8 	bl	5ebc <z_spin_lock_valid>
    5d0c:	b1c0      	cbz	r0, 5d40 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    5d0e:	4628      	mov	r0, r5
    5d10:	f000 f8f4 	bl	5efc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5d14:	69a1      	ldr	r1, [r4, #24]
    5d16:	b321      	cbz	r1, 5d62 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    5d18:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5d1a:	69a3      	ldr	r3, [r4, #24]
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5d20:	69e3      	ldr	r3, [r4, #28]
    5d22:	3301      	adds	r3, #1
    5d24:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5d26:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d28:	4628      	mov	r0, r5
    5d2a:	f000 f8d7 	bl	5edc <z_spin_unlock_valid>
    5d2e:	b388      	cbz	r0, 5d94 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    5d30:	f387 8811 	msr	BASEPRI, r7
    5d34:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    5d38:	4620      	mov	r0, r4
    5d3a:	b002      	add	sp, #8
    5d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d40:	f8df a070 	ldr.w	sl, [pc, #112]	; 5db4 <k_mem_slab_alloc+0xd0>
    5d44:	238e      	movs	r3, #142	; 0x8e
    5d46:	4652      	mov	r2, sl
    5d48:	491b      	ldr	r1, [pc, #108]	; (5db8 <k_mem_slab_alloc+0xd4>)
    5d4a:	481c      	ldr	r0, [pc, #112]	; (5dbc <k_mem_slab_alloc+0xd8>)
    5d4c:	f003 fb1d 	bl	938a <assert_print>
    5d50:	4629      	mov	r1, r5
    5d52:	481b      	ldr	r0, [pc, #108]	; (5dc0 <k_mem_slab_alloc+0xdc>)
    5d54:	f003 fb19 	bl	938a <assert_print>
    5d58:	218e      	movs	r1, #142	; 0x8e
    5d5a:	4650      	mov	r0, sl
    5d5c:	f003 fb0e 	bl	937c <assert_post_action>
    5d60:	e7d5      	b.n	5d0e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5d62:	ea59 0308 	orrs.w	r3, r9, r8
    5d66:	d104      	bne.n	5d72 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    5d68:	2300      	movs	r3, #0
    5d6a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5d6c:	f06f 040b 	mvn.w	r4, #11
    5d70:	e7da      	b.n	5d28 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5d72:	f8cd 8000 	str.w	r8, [sp]
    5d76:	f8cd 9004 	str.w	r9, [sp, #4]
    5d7a:	4622      	mov	r2, r4
    5d7c:	4639      	mov	r1, r7
    5d7e:	4628      	mov	r0, r5
    5d80:	f001 fc28 	bl	75d4 <z_pend_curr>
		if (result == 0) {
    5d84:	4604      	mov	r4, r0
    5d86:	2800      	cmp	r0, #0
    5d88:	d1d6      	bne.n	5d38 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5d8a:	4b0e      	ldr	r3, [pc, #56]	; (5dc4 <k_mem_slab_alloc+0xe0>)
    5d8c:	689b      	ldr	r3, [r3, #8]
    5d8e:	695b      	ldr	r3, [r3, #20]
    5d90:	6033      	str	r3, [r6, #0]
		return result;
    5d92:	e7d1      	b.n	5d38 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d94:	4e07      	ldr	r6, [pc, #28]	; (5db4 <k_mem_slab_alloc+0xd0>)
    5d96:	23b9      	movs	r3, #185	; 0xb9
    5d98:	4632      	mov	r2, r6
    5d9a:	490b      	ldr	r1, [pc, #44]	; (5dc8 <k_mem_slab_alloc+0xe4>)
    5d9c:	4807      	ldr	r0, [pc, #28]	; (5dbc <k_mem_slab_alloc+0xd8>)
    5d9e:	f003 faf4 	bl	938a <assert_print>
    5da2:	4629      	mov	r1, r5
    5da4:	4809      	ldr	r0, [pc, #36]	; (5dcc <k_mem_slab_alloc+0xe8>)
    5da6:	f003 faf0 	bl	938a <assert_print>
    5daa:	21b9      	movs	r1, #185	; 0xb9
    5dac:	4630      	mov	r0, r6
    5dae:	f003 fae5 	bl	937c <assert_post_action>
    5db2:	e7bd      	b.n	5d30 <k_mem_slab_alloc+0x4c>
    5db4:	0000a9dc 	.word	0x0000a9dc
    5db8:	0000aa3c 	.word	0x0000aa3c
    5dbc:	0000a4cc 	.word	0x0000a4cc
    5dc0:	0000aa54 	.word	0x0000aa54
    5dc4:	20001278 	.word	0x20001278
    5dc8:	0000aa0c 	.word	0x0000aa0c
    5dcc:	0000aa24 	.word	0x0000aa24

00005dd0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dd4:	4604      	mov	r4, r0
    5dd6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5dd8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    5ddc:	f04f 0320 	mov.w	r3, #32
    5de0:	f3ef 8711 	mrs	r7, BASEPRI
    5de4:	f383 8812 	msr	BASEPRI_MAX, r3
    5de8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dec:	4630      	mov	r0, r6
    5dee:	f000 f865 	bl	5ebc <z_spin_lock_valid>
    5df2:	b1b0      	cbz	r0, 5e22 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    5df4:	4630      	mov	r0, r6
    5df6:	f000 f881 	bl	5efc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5dfa:	69a3      	ldr	r3, [r4, #24]
    5dfc:	b313      	cbz	r3, 5e44 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    5dfe:	682b      	ldr	r3, [r5, #0]
    5e00:	69a2      	ldr	r2, [r4, #24]
    5e02:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5e04:	682b      	ldr	r3, [r5, #0]
    5e06:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5e08:	69e3      	ldr	r3, [r4, #28]
    5e0a:	3b01      	subs	r3, #1
    5e0c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e0e:	4630      	mov	r0, r6
    5e10:	f000 f864 	bl	5edc <z_spin_unlock_valid>
    5e14:	b338      	cbz	r0, 5e66 <k_mem_slab_free+0x96>
	__asm__ volatile(
    5e16:	f387 8811 	msr	BASEPRI, r7
    5e1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e22:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5e88 <k_mem_slab_free+0xb8>
    5e26:	238e      	movs	r3, #142	; 0x8e
    5e28:	4642      	mov	r2, r8
    5e2a:	4918      	ldr	r1, [pc, #96]	; (5e8c <k_mem_slab_free+0xbc>)
    5e2c:	4818      	ldr	r0, [pc, #96]	; (5e90 <k_mem_slab_free+0xc0>)
    5e2e:	f003 faac 	bl	938a <assert_print>
    5e32:	4631      	mov	r1, r6
    5e34:	4817      	ldr	r0, [pc, #92]	; (5e94 <k_mem_slab_free+0xc4>)
    5e36:	f003 faa8 	bl	938a <assert_print>
    5e3a:	218e      	movs	r1, #142	; 0x8e
    5e3c:	4640      	mov	r0, r8
    5e3e:	f003 fa9d 	bl	937c <assert_post_action>
    5e42:	e7d7      	b.n	5df4 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5e44:	4620      	mov	r0, r4
    5e46:	f001 fe01 	bl	7a4c <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5e4a:	2800      	cmp	r0, #0
    5e4c:	d0d7      	beq.n	5dfe <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5e4e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5e50:	2100      	movs	r1, #0
    5e52:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5e56:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5e58:	f001 f9e0 	bl	721c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5e5c:	4639      	mov	r1, r7
    5e5e:	4630      	mov	r0, r6
    5e60:	f000 feda 	bl	6c18 <z_reschedule>
			return;
    5e64:	e7db      	b.n	5e1e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e66:	4c08      	ldr	r4, [pc, #32]	; (5e88 <k_mem_slab_free+0xb8>)
    5e68:	23b9      	movs	r3, #185	; 0xb9
    5e6a:	4622      	mov	r2, r4
    5e6c:	490a      	ldr	r1, [pc, #40]	; (5e98 <k_mem_slab_free+0xc8>)
    5e6e:	4808      	ldr	r0, [pc, #32]	; (5e90 <k_mem_slab_free+0xc0>)
    5e70:	f003 fa8b 	bl	938a <assert_print>
    5e74:	4631      	mov	r1, r6
    5e76:	4809      	ldr	r0, [pc, #36]	; (5e9c <k_mem_slab_free+0xcc>)
    5e78:	f003 fa87 	bl	938a <assert_print>
    5e7c:	21b9      	movs	r1, #185	; 0xb9
    5e7e:	4620      	mov	r0, r4
    5e80:	f003 fa7c 	bl	937c <assert_post_action>
    5e84:	e7c7      	b.n	5e16 <k_mem_slab_free+0x46>
    5e86:	bf00      	nop
    5e88:	0000a9dc 	.word	0x0000a9dc
    5e8c:	0000aa3c 	.word	0x0000aa3c
    5e90:	0000a4cc 	.word	0x0000a4cc
    5e94:	0000aa54 	.word	0x0000aa54
    5e98:	0000aa0c 	.word	0x0000aa0c
    5e9c:	0000aa24 	.word	0x0000aa24

00005ea0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    5ea0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5ea2:	ea53 0102 	orrs.w	r1, r3, r2
    5ea6:	d102      	bne.n	5eae <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    5ea8:	f004 f85d 	bl	9f66 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    5eac:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5eae:	4902      	ldr	r1, [pc, #8]	; (5eb8 <schedule_new_thread+0x18>)
    5eb0:	3018      	adds	r0, #24
    5eb2:	f002 f8fd 	bl	80b0 <z_add_timeout>
    5eb6:	e7f9      	b.n	5eac <schedule_new_thread+0xc>
    5eb8:	00007379 	.word	0x00007379

00005ebc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5ebc:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    5ebe:	b13b      	cbz	r3, 5ed0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5ec0:	f003 0303 	and.w	r3, r3, #3
    5ec4:	4a04      	ldr	r2, [pc, #16]	; (5ed8 <z_spin_lock_valid+0x1c>)
    5ec6:	7d12      	ldrb	r2, [r2, #20]
    5ec8:	4293      	cmp	r3, r2
    5eca:	d003      	beq.n	5ed4 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    5ecc:	2001      	movs	r0, #1
    5ece:	4770      	bx	lr
    5ed0:	2001      	movs	r0, #1
    5ed2:	4770      	bx	lr
			return false;
    5ed4:	2000      	movs	r0, #0
}
    5ed6:	4770      	bx	lr
    5ed8:	20001278 	.word	0x20001278

00005edc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5edc:	6801      	ldr	r1, [r0, #0]
    5ede:	4a06      	ldr	r2, [pc, #24]	; (5ef8 <z_spin_unlock_valid+0x1c>)
    5ee0:	7d13      	ldrb	r3, [r2, #20]
    5ee2:	6892      	ldr	r2, [r2, #8]
    5ee4:	4313      	orrs	r3, r2
    5ee6:	4299      	cmp	r1, r3
    5ee8:	d103      	bne.n	5ef2 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    5eea:	2300      	movs	r3, #0
    5eec:	6003      	str	r3, [r0, #0]
	return true;
    5eee:	2001      	movs	r0, #1
    5ef0:	4770      	bx	lr
		return false;
    5ef2:	2000      	movs	r0, #0
}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	20001278 	.word	0x20001278

00005efc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5efc:	4a02      	ldr	r2, [pc, #8]	; (5f08 <z_spin_lock_set_owner+0xc>)
    5efe:	7d13      	ldrb	r3, [r2, #20]
    5f00:	6892      	ldr	r2, [r2, #8]
    5f02:	4313      	orrs	r3, r2
    5f04:	6003      	str	r3, [r0, #0]
}
    5f06:	4770      	bx	lr
    5f08:	20001278 	.word	0x20001278

00005f0c <z_thread_monitor_exit>:
{
    5f0c:	b570      	push	{r4, r5, r6, lr}
    5f0e:	4604      	mov	r4, r0
	__asm__ volatile(
    5f10:	f04f 0320 	mov.w	r3, #32
    5f14:	f3ef 8511 	mrs	r5, BASEPRI
    5f18:	f383 8812 	msr	BASEPRI_MAX, r3
    5f1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f20:	481f      	ldr	r0, [pc, #124]	; (5fa0 <z_thread_monitor_exit+0x94>)
    5f22:	f7ff ffcb 	bl	5ebc <z_spin_lock_valid>
    5f26:	b150      	cbz	r0, 5f3e <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    5f28:	481d      	ldr	r0, [pc, #116]	; (5fa0 <z_thread_monitor_exit+0x94>)
    5f2a:	f7ff ffe7 	bl	5efc <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    5f2e:	4b1d      	ldr	r3, [pc, #116]	; (5fa4 <z_thread_monitor_exit+0x98>)
    5f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f32:	42a3      	cmp	r3, r4
    5f34:	d114      	bne.n	5f60 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    5f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5f38:	4b1a      	ldr	r3, [pc, #104]	; (5fa4 <z_thread_monitor_exit+0x98>)
    5f3a:	629a      	str	r2, [r3, #40]	; 0x28
    5f3c:	e017      	b.n	5f6e <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f3e:	4e1a      	ldr	r6, [pc, #104]	; (5fa8 <z_thread_monitor_exit+0x9c>)
    5f40:	238e      	movs	r3, #142	; 0x8e
    5f42:	4632      	mov	r2, r6
    5f44:	4919      	ldr	r1, [pc, #100]	; (5fac <z_thread_monitor_exit+0xa0>)
    5f46:	481a      	ldr	r0, [pc, #104]	; (5fb0 <z_thread_monitor_exit+0xa4>)
    5f48:	f003 fa1f 	bl	938a <assert_print>
    5f4c:	4914      	ldr	r1, [pc, #80]	; (5fa0 <z_thread_monitor_exit+0x94>)
    5f4e:	4819      	ldr	r0, [pc, #100]	; (5fb4 <z_thread_monitor_exit+0xa8>)
    5f50:	f003 fa1b 	bl	938a <assert_print>
    5f54:	218e      	movs	r1, #142	; 0x8e
    5f56:	4630      	mov	r0, r6
    5f58:	f003 fa10 	bl	937c <assert_post_action>
    5f5c:	e7e4      	b.n	5f28 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    5f5e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    5f60:	b113      	cbz	r3, 5f68 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    5f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5f64:	42a2      	cmp	r2, r4
    5f66:	d1fa      	bne.n	5f5e <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    5f68:	b10b      	cbz	r3, 5f6e <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    5f6a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5f6c:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f6e:	480c      	ldr	r0, [pc, #48]	; (5fa0 <z_thread_monitor_exit+0x94>)
    5f70:	f7ff ffb4 	bl	5edc <z_spin_unlock_valid>
    5f74:	b120      	cbz	r0, 5f80 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    5f76:	f385 8811 	msr	BASEPRI, r5
    5f7a:	f3bf 8f6f 	isb	sy
}
    5f7e:	bd70      	pop	{r4, r5, r6, pc}
    5f80:	4c09      	ldr	r4, [pc, #36]	; (5fa8 <z_thread_monitor_exit+0x9c>)
    5f82:	23b9      	movs	r3, #185	; 0xb9
    5f84:	4622      	mov	r2, r4
    5f86:	490c      	ldr	r1, [pc, #48]	; (5fb8 <z_thread_monitor_exit+0xac>)
    5f88:	4809      	ldr	r0, [pc, #36]	; (5fb0 <z_thread_monitor_exit+0xa4>)
    5f8a:	f003 f9fe 	bl	938a <assert_print>
    5f8e:	4904      	ldr	r1, [pc, #16]	; (5fa0 <z_thread_monitor_exit+0x94>)
    5f90:	480a      	ldr	r0, [pc, #40]	; (5fbc <z_thread_monitor_exit+0xb0>)
    5f92:	f003 f9fa 	bl	938a <assert_print>
    5f96:	21b9      	movs	r1, #185	; 0xb9
    5f98:	4620      	mov	r0, r4
    5f9a:	f003 f9ef 	bl	937c <assert_post_action>
    5f9e:	e7ea      	b.n	5f76 <z_thread_monitor_exit+0x6a>
    5fa0:	200012a4 	.word	0x200012a4
    5fa4:	20001278 	.word	0x20001278
    5fa8:	0000a9dc 	.word	0x0000a9dc
    5fac:	0000aa3c 	.word	0x0000aa3c
    5fb0:	0000a4cc 	.word	0x0000a4cc
    5fb4:	0000aa54 	.word	0x0000aa54
    5fb8:	0000aa0c 	.word	0x0000aa0c
    5fbc:	0000aa24 	.word	0x0000aa24

00005fc0 <z_setup_new_thread>:
{
    5fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fc4:	b085      	sub	sp, #20
    5fc6:	4604      	mov	r4, r0
    5fc8:	460e      	mov	r6, r1
    5fca:	4690      	mov	r8, r2
    5fcc:	461d      	mov	r5, r3
    5fce:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    5fd2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    5fd6:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    5fd8:	2f0f      	cmp	r7, #15
    5fda:	d05e      	beq.n	609a <z_setup_new_thread+0xda>
    5fdc:	f107 0310 	add.w	r3, r7, #16
    5fe0:	2b1e      	cmp	r3, #30
    5fe2:	d85e      	bhi.n	60a2 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5fe4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    5fe8:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    5fea:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    5fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5fee:	2204      	movs	r2, #4
    5ff0:	4639      	mov	r1, r7
    5ff2:	4620      	mov	r0, r4
    5ff4:	f003 ffbb 	bl	9f6e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    5ff8:	4642      	mov	r2, r8
    5ffa:	4631      	mov	r1, r6
    5ffc:	4620      	mov	r0, r4
    5ffe:	f003 ff9a 	bl	9f36 <setup_thread_stack>
    6002:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6004:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6006:	9302      	str	r3, [sp, #8]
    6008:	f8cd a004 	str.w	sl, [sp, #4]
    600c:	f8cd b000 	str.w	fp, [sp]
    6010:	462b      	mov	r3, r5
    6012:	4602      	mov	r2, r0
    6014:	4631      	mov	r1, r6
    6016:	4620      	mov	r0, r4
    6018:	f7fc f91e 	bl	2258 <arch_new_thread>
	new_thread->init_data = NULL;
    601c:	2300      	movs	r3, #0
    601e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    6020:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    6022:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    6026:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    602a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    602c:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    602e:	f04f 0320 	mov.w	r3, #32
    6032:	f3ef 8611 	mrs	r6, BASEPRI
    6036:	f383 8812 	msr	BASEPRI_MAX, r3
    603a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    603e:	4837      	ldr	r0, [pc, #220]	; (611c <z_setup_new_thread+0x15c>)
    6040:	f7ff ff3c 	bl	5ebc <z_spin_lock_valid>
    6044:	2800      	cmp	r0, #0
    6046:	d042      	beq.n	60ce <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    6048:	4d34      	ldr	r5, [pc, #208]	; (611c <z_setup_new_thread+0x15c>)
    604a:	4628      	mov	r0, r5
    604c:	f7ff ff56 	bl	5efc <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    6050:	4b33      	ldr	r3, [pc, #204]	; (6120 <z_setup_new_thread+0x160>)
    6052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6054:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    6056:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6058:	4628      	mov	r0, r5
    605a:	f7ff ff3f 	bl	5edc <z_spin_unlock_valid>
    605e:	2800      	cmp	r0, #0
    6060:	d045      	beq.n	60ee <z_setup_new_thread+0x12e>
	__asm__ volatile(
    6062:	f386 8811 	msr	BASEPRI, r6
    6066:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    606a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    606c:	2b00      	cmp	r3, #0
    606e:	d04e      	beq.n	610e <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    6070:	221f      	movs	r2, #31
    6072:	4619      	mov	r1, r3
    6074:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6078:	f003 fa45 	bl	9506 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    607c:	2300      	movs	r3, #0
    607e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    6082:	4b27      	ldr	r3, [pc, #156]	; (6120 <z_setup_new_thread+0x160>)
    6084:	689b      	ldr	r3, [r3, #8]
    6086:	2b00      	cmp	r3, #0
    6088:	d045      	beq.n	6116 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    608a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    608e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    6092:	4638      	mov	r0, r7
    6094:	b005      	add	sp, #20
    6096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    609a:	4b22      	ldr	r3, [pc, #136]	; (6124 <z_setup_new_thread+0x164>)
    609c:	429d      	cmp	r5, r3
    609e:	d19d      	bne.n	5fdc <z_setup_new_thread+0x1c>
    60a0:	e7a0      	b.n	5fe4 <z_setup_new_thread+0x24>
    60a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 6128 <z_setup_new_thread+0x168>
    60a6:	f240 13ff 	movw	r3, #511	; 0x1ff
    60aa:	464a      	mov	r2, r9
    60ac:	491f      	ldr	r1, [pc, #124]	; (612c <z_setup_new_thread+0x16c>)
    60ae:	4820      	ldr	r0, [pc, #128]	; (6130 <z_setup_new_thread+0x170>)
    60b0:	f003 f96b 	bl	938a <assert_print>
    60b4:	f06f 030f 	mvn.w	r3, #15
    60b8:	220e      	movs	r2, #14
    60ba:	4639      	mov	r1, r7
    60bc:	481d      	ldr	r0, [pc, #116]	; (6134 <z_setup_new_thread+0x174>)
    60be:	f003 f964 	bl	938a <assert_print>
    60c2:	f240 11ff 	movw	r1, #511	; 0x1ff
    60c6:	4648      	mov	r0, r9
    60c8:	f003 f958 	bl	937c <assert_post_action>
    60cc:	e78a      	b.n	5fe4 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60ce:	4d1a      	ldr	r5, [pc, #104]	; (6138 <z_setup_new_thread+0x178>)
    60d0:	238e      	movs	r3, #142	; 0x8e
    60d2:	462a      	mov	r2, r5
    60d4:	4919      	ldr	r1, [pc, #100]	; (613c <z_setup_new_thread+0x17c>)
    60d6:	4816      	ldr	r0, [pc, #88]	; (6130 <z_setup_new_thread+0x170>)
    60d8:	f003 f957 	bl	938a <assert_print>
    60dc:	490f      	ldr	r1, [pc, #60]	; (611c <z_setup_new_thread+0x15c>)
    60de:	4818      	ldr	r0, [pc, #96]	; (6140 <z_setup_new_thread+0x180>)
    60e0:	f003 f953 	bl	938a <assert_print>
    60e4:	218e      	movs	r1, #142	; 0x8e
    60e6:	4628      	mov	r0, r5
    60e8:	f003 f948 	bl	937c <assert_post_action>
    60ec:	e7ac      	b.n	6048 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60ee:	4d12      	ldr	r5, [pc, #72]	; (6138 <z_setup_new_thread+0x178>)
    60f0:	23b9      	movs	r3, #185	; 0xb9
    60f2:	462a      	mov	r2, r5
    60f4:	4913      	ldr	r1, [pc, #76]	; (6144 <z_setup_new_thread+0x184>)
    60f6:	480e      	ldr	r0, [pc, #56]	; (6130 <z_setup_new_thread+0x170>)
    60f8:	f003 f947 	bl	938a <assert_print>
    60fc:	4907      	ldr	r1, [pc, #28]	; (611c <z_setup_new_thread+0x15c>)
    60fe:	4812      	ldr	r0, [pc, #72]	; (6148 <z_setup_new_thread+0x188>)
    6100:	f003 f943 	bl	938a <assert_print>
    6104:	21b9      	movs	r1, #185	; 0xb9
    6106:	4628      	mov	r0, r5
    6108:	f003 f938 	bl	937c <assert_post_action>
    610c:	e7a9      	b.n	6062 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    610e:	2300      	movs	r3, #0
    6110:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    6114:	e7b5      	b.n	6082 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    6116:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    611a:	e7ba      	b.n	6092 <z_setup_new_thread+0xd2>
    611c:	200012a4 	.word	0x200012a4
    6120:	20001278 	.word	0x20001278
    6124:	00006241 	.word	0x00006241
    6128:	0000b54c 	.word	0x0000b54c
    612c:	0000b5a4 	.word	0x0000b5a4
    6130:	0000a4cc 	.word	0x0000a4cc
    6134:	0000b624 	.word	0x0000b624
    6138:	0000a9dc 	.word	0x0000a9dc
    613c:	0000aa3c 	.word	0x0000aa3c
    6140:	0000aa54 	.word	0x0000aa54
    6144:	0000aa0c 	.word	0x0000aa0c
    6148:	0000aa24 	.word	0x0000aa24

0000614c <z_init_static_threads>:
{
    614c:	b530      	push	{r4, r5, lr}
    614e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6150:	4c35      	ldr	r4, [pc, #212]	; (6228 <z_init_static_threads+0xdc>)
    6152:	e017      	b.n	6184 <z_init_static_threads+0x38>
    6154:	4b35      	ldr	r3, [pc, #212]	; (622c <z_init_static_threads+0xe0>)
    6156:	429c      	cmp	r4, r3
    6158:	d228      	bcs.n	61ac <z_init_static_threads+0x60>
		z_setup_new_thread(
    615a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    615c:	9305      	str	r3, [sp, #20]
    615e:	6a23      	ldr	r3, [r4, #32]
    6160:	9304      	str	r3, [sp, #16]
    6162:	69e3      	ldr	r3, [r4, #28]
    6164:	9303      	str	r3, [sp, #12]
    6166:	69a3      	ldr	r3, [r4, #24]
    6168:	9302      	str	r3, [sp, #8]
    616a:	6963      	ldr	r3, [r4, #20]
    616c:	9301      	str	r3, [sp, #4]
    616e:	6923      	ldr	r3, [r4, #16]
    6170:	9300      	str	r3, [sp, #0]
    6172:	68e3      	ldr	r3, [r4, #12]
    6174:	68a2      	ldr	r2, [r4, #8]
    6176:	6861      	ldr	r1, [r4, #4]
    6178:	6820      	ldr	r0, [r4, #0]
    617a:	f7ff ff21 	bl	5fc0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    617e:	6823      	ldr	r3, [r4, #0]
    6180:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6182:	3430      	adds	r4, #48	; 0x30
    6184:	4b29      	ldr	r3, [pc, #164]	; (622c <z_init_static_threads+0xe0>)
    6186:	429c      	cmp	r4, r3
    6188:	d9e4      	bls.n	6154 <z_init_static_threads+0x8>
    618a:	4d29      	ldr	r5, [pc, #164]	; (6230 <z_init_static_threads+0xe4>)
    618c:	f240 23d5 	movw	r3, #725	; 0x2d5
    6190:	462a      	mov	r2, r5
    6192:	4928      	ldr	r1, [pc, #160]	; (6234 <z_init_static_threads+0xe8>)
    6194:	4828      	ldr	r0, [pc, #160]	; (6238 <z_init_static_threads+0xec>)
    6196:	f003 f8f8 	bl	938a <assert_print>
    619a:	4828      	ldr	r0, [pc, #160]	; (623c <z_init_static_threads+0xf0>)
    619c:	f003 f8f5 	bl	938a <assert_print>
    61a0:	f240 21d5 	movw	r1, #725	; 0x2d5
    61a4:	4628      	mov	r0, r5
    61a6:	f003 f8e9 	bl	937c <assert_post_action>
    61aa:	e7d3      	b.n	6154 <z_init_static_threads+0x8>
	k_sched_lock();
    61ac:	f000 fd82 	bl	6cb4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    61b0:	4c1d      	ldr	r4, [pc, #116]	; (6228 <z_init_static_threads+0xdc>)
    61b2:	e000      	b.n	61b6 <z_init_static_threads+0x6a>
    61b4:	3430      	adds	r4, #48	; 0x30
    61b6:	4b1d      	ldr	r3, [pc, #116]	; (622c <z_init_static_threads+0xe0>)
    61b8:	429c      	cmp	r4, r3
    61ba:	d81f      	bhi.n	61fc <z_init_static_threads+0xb0>
    61bc:	4b1b      	ldr	r3, [pc, #108]	; (622c <z_init_static_threads+0xe0>)
    61be:	429c      	cmp	r4, r3
    61c0:	d22d      	bcs.n	621e <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    61c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    61c4:	f1b0 3fff 	cmp.w	r0, #4294967295
    61c8:	d0f4      	beq.n	61b4 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    61ca:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    61cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    61d0:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    61d2:	03c9      	lsls	r1, r1, #15
    61d4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    61d8:	03c0      	lsls	r0, r0, #15
    61da:	f240 33e7 	movw	r3, #999	; 0x3e7
    61de:	18c0      	adds	r0, r0, r3
    61e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    61e4:	f04f 0300 	mov.w	r3, #0
    61e8:	f141 0100 	adc.w	r1, r1, #0
    61ec:	f7f9 ff88 	bl	100 <__aeabi_uldivmod>
    61f0:	4602      	mov	r2, r0
    61f2:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    61f4:	4628      	mov	r0, r5
    61f6:	f7ff fe53 	bl	5ea0 <schedule_new_thread>
    61fa:	e7db      	b.n	61b4 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    61fc:	4d0c      	ldr	r5, [pc, #48]	; (6230 <z_init_static_threads+0xe4>)
    61fe:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    6202:	462a      	mov	r2, r5
    6204:	490b      	ldr	r1, [pc, #44]	; (6234 <z_init_static_threads+0xe8>)
    6206:	480c      	ldr	r0, [pc, #48]	; (6238 <z_init_static_threads+0xec>)
    6208:	f003 f8bf 	bl	938a <assert_print>
    620c:	480b      	ldr	r0, [pc, #44]	; (623c <z_init_static_threads+0xf0>)
    620e:	f003 f8bc 	bl	938a <assert_print>
    6212:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    6216:	4628      	mov	r0, r5
    6218:	f003 f8b0 	bl	937c <assert_post_action>
    621c:	e7ce      	b.n	61bc <z_init_static_threads+0x70>
	k_sched_unlock();
    621e:	f001 fb33 	bl	7888 <k_sched_unlock>
}
    6222:	b007      	add	sp, #28
    6224:	bd30      	pop	{r4, r5, pc}
    6226:	bf00      	nop
    6228:	20000154 	.word	0x20000154
    622c:	20000244 	.word	0x20000244
    6230:	0000b54c 	.word	0x0000b54c
    6234:	0000b658 	.word	0x0000b658
    6238:	0000a4cc 	.word	0x0000a4cc
    623c:	0000b52c 	.word	0x0000b52c

00006240 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6240:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6242:	4b14      	ldr	r3, [pc, #80]	; (6294 <idle+0x54>)
    6244:	689b      	ldr	r3, [r3, #8]
    6246:	f993 300e 	ldrsb.w	r3, [r3, #14]
    624a:	2b00      	cmp	r3, #0
    624c:	da0d      	bge.n	626a <idle+0x2a>
    624e:	4c12      	ldr	r4, [pc, #72]	; (6298 <idle+0x58>)
    6250:	2327      	movs	r3, #39	; 0x27
    6252:	4622      	mov	r2, r4
    6254:	4911      	ldr	r1, [pc, #68]	; (629c <idle+0x5c>)
    6256:	4812      	ldr	r0, [pc, #72]	; (62a0 <idle+0x60>)
    6258:	f003 f897 	bl	938a <assert_print>
    625c:	2127      	movs	r1, #39	; 0x27
    625e:	4620      	mov	r0, r4
    6260:	f003 f88c 	bl	937c <assert_post_action>
    6264:	e001      	b.n	626a <idle+0x2a>
	arch_cpu_idle();
    6266:	f7fb ff15 	bl	2094 <arch_cpu_idle>
	__asm__ volatile(
    626a:	f04f 0220 	mov.w	r2, #32
    626e:	f3ef 8311 	mrs	r3, BASEPRI
    6272:	f382 8812 	msr	BASEPRI_MAX, r2
    6276:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    627a:	f002 f857 	bl	832c <z_get_next_timeout_expiry>
    627e:	4b05      	ldr	r3, [pc, #20]	; (6294 <idle+0x54>)
    6280:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    6282:	4b08      	ldr	r3, [pc, #32]	; (62a4 <idle+0x64>)
    6284:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6286:	2b00      	cmp	r3, #0
    6288:	d0ed      	beq.n	6266 <idle+0x26>
    628a:	f7fb fccf 	bl	1c2c <pm_system_suspend>
    628e:	2800      	cmp	r0, #0
    6290:	d1eb      	bne.n	626a <idle+0x2a>
    6292:	e7e8      	b.n	6266 <idle+0x26>
    6294:	20001278 	.word	0x20001278
    6298:	0000b688 	.word	0x0000b688
    629c:	0000b6ac 	.word	0x0000b6ac
    62a0:	0000a4cc 	.word	0x0000a4cc
    62a4:	200014a1 	.word	0x200014a1

000062a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    62a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62ac:	b083      	sub	sp, #12
    62ae:	4604      	mov	r4, r0
    62b0:	4616      	mov	r6, r2
    62b2:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    62b4:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    62b8:	2900      	cmp	r1, #0
    62ba:	d12b      	bne.n	6314 <z_impl_k_mutex_lock+0x6c>
    62bc:	f04f 0320 	mov.w	r3, #32
    62c0:	f3ef 8711 	mrs	r7, BASEPRI
    62c4:	f383 8812 	msr	BASEPRI_MAX, r3
    62c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62cc:	487b      	ldr	r0, [pc, #492]	; (64bc <z_impl_k_mutex_lock+0x214>)
    62ce:	f7ff fdf5 	bl	5ebc <z_spin_lock_valid>
    62d2:	2800      	cmp	r0, #0
    62d4:	d02d      	beq.n	6332 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    62d6:	4879      	ldr	r0, [pc, #484]	; (64bc <z_impl_k_mutex_lock+0x214>)
    62d8:	f7ff fe10 	bl	5efc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    62dc:	68e1      	ldr	r1, [r4, #12]
    62de:	2900      	cmp	r1, #0
    62e0:	d138      	bne.n	6354 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    62e2:	2900      	cmp	r1, #0
    62e4:	d17d      	bne.n	63e2 <z_impl_k_mutex_lock+0x13a>
    62e6:	4b76      	ldr	r3, [pc, #472]	; (64c0 <z_impl_k_mutex_lock+0x218>)
    62e8:	689b      	ldr	r3, [r3, #8]
    62ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    62ee:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    62f0:	3101      	adds	r1, #1
    62f2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    62f4:	4b72      	ldr	r3, [pc, #456]	; (64c0 <z_impl_k_mutex_lock+0x218>)
    62f6:	689b      	ldr	r3, [r3, #8]
    62f8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62fa:	4870      	ldr	r0, [pc, #448]	; (64bc <z_impl_k_mutex_lock+0x214>)
    62fc:	f7ff fdee 	bl	5edc <z_spin_unlock_valid>
    6300:	2800      	cmp	r0, #0
    6302:	d070      	beq.n	63e6 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    6304:	f387 8811 	msr	BASEPRI, r7
    6308:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    630c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    630e:	b003      	add	sp, #12
    6310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6314:	4f6b      	ldr	r7, [pc, #428]	; (64c4 <z_impl_k_mutex_lock+0x21c>)
    6316:	2365      	movs	r3, #101	; 0x65
    6318:	463a      	mov	r2, r7
    631a:	496b      	ldr	r1, [pc, #428]	; (64c8 <z_impl_k_mutex_lock+0x220>)
    631c:	486b      	ldr	r0, [pc, #428]	; (64cc <z_impl_k_mutex_lock+0x224>)
    631e:	f003 f834 	bl	938a <assert_print>
    6322:	486b      	ldr	r0, [pc, #428]	; (64d0 <z_impl_k_mutex_lock+0x228>)
    6324:	f003 f831 	bl	938a <assert_print>
    6328:	2165      	movs	r1, #101	; 0x65
    632a:	4638      	mov	r0, r7
    632c:	f003 f826 	bl	937c <assert_post_action>
    6330:	e7c4      	b.n	62bc <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6332:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 64d4 <z_impl_k_mutex_lock+0x22c>
    6336:	238e      	movs	r3, #142	; 0x8e
    6338:	4642      	mov	r2, r8
    633a:	4967      	ldr	r1, [pc, #412]	; (64d8 <z_impl_k_mutex_lock+0x230>)
    633c:	4863      	ldr	r0, [pc, #396]	; (64cc <z_impl_k_mutex_lock+0x224>)
    633e:	f003 f824 	bl	938a <assert_print>
    6342:	495e      	ldr	r1, [pc, #376]	; (64bc <z_impl_k_mutex_lock+0x214>)
    6344:	4865      	ldr	r0, [pc, #404]	; (64dc <z_impl_k_mutex_lock+0x234>)
    6346:	f003 f820 	bl	938a <assert_print>
    634a:	218e      	movs	r1, #142	; 0x8e
    634c:	4640      	mov	r0, r8
    634e:	f003 f815 	bl	937c <assert_post_action>
    6352:	e7c0      	b.n	62d6 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6354:	68a2      	ldr	r2, [r4, #8]
    6356:	4b5a      	ldr	r3, [pc, #360]	; (64c0 <z_impl_k_mutex_lock+0x218>)
    6358:	689b      	ldr	r3, [r3, #8]
    635a:	429a      	cmp	r2, r3
    635c:	d0c1      	beq.n	62e2 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    635e:	ea55 0106 	orrs.w	r1, r5, r6
    6362:	bf0c      	ite	eq
    6364:	f04f 0801 	moveq.w	r8, #1
    6368:	f04f 0800 	movne.w	r8, #0
    636c:	d04b      	beq.n	6406 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    636e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6372:	4649      	mov	r1, r9
    6374:	f993 000e 	ldrsb.w	r0, [r3, #14]
    6378:	f003 fe0a 	bl	9f90 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    637c:	4581      	cmp	r9, r0
    637e:	dc5d      	bgt.n	643c <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    6380:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6384:	9600      	str	r6, [sp, #0]
    6386:	9501      	str	r5, [sp, #4]
    6388:	4622      	mov	r2, r4
    638a:	4639      	mov	r1, r7
    638c:	484b      	ldr	r0, [pc, #300]	; (64bc <z_impl_k_mutex_lock+0x214>)
    638e:	f001 f921 	bl	75d4 <z_pend_curr>
	if (got_mutex == 0) {
    6392:	2800      	cmp	r0, #0
    6394:	d0bb      	beq.n	630e <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    6396:	f04f 0320 	mov.w	r3, #32
    639a:	f3ef 8511 	mrs	r5, BASEPRI
    639e:	f383 8812 	msr	BASEPRI_MAX, r3
    63a2:	f3bf 8f6f 	isb	sy
    63a6:	4845      	ldr	r0, [pc, #276]	; (64bc <z_impl_k_mutex_lock+0x214>)
    63a8:	f7ff fd88 	bl	5ebc <z_spin_lock_valid>
    63ac:	2800      	cmp	r0, #0
    63ae:	d04b      	beq.n	6448 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    63b0:	4842      	ldr	r0, [pc, #264]	; (64bc <z_impl_k_mutex_lock+0x214>)
    63b2:	f7ff fda3 	bl	5efc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    63b6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63b8:	429c      	cmp	r4, r3
    63ba:	d055      	beq.n	6468 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    63bc:	2b00      	cmp	r3, #0
    63be:	d053      	beq.n	6468 <z_impl_k_mutex_lock+0x1c0>
    63c0:	6921      	ldr	r1, [r4, #16]
    63c2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    63c6:	f003 fde3 	bl	9f90 <new_prio_for_inheritance>
    63ca:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    63cc:	4620      	mov	r0, r4
    63ce:	f003 fdea 	bl	9fa6 <adjust_owner_prio>
    63d2:	2800      	cmp	r0, #0
    63d4:	d14a      	bne.n	646c <z_impl_k_mutex_lock+0x1c4>
    63d6:	f1b9 0f00 	cmp.w	r9, #0
    63da:	d049      	beq.n	6470 <z_impl_k_mutex_lock+0x1c8>
    63dc:	f04f 0801 	mov.w	r8, #1
    63e0:	e046      	b.n	6470 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    63e2:	6923      	ldr	r3, [r4, #16]
    63e4:	e783      	b.n	62ee <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63e6:	4c3b      	ldr	r4, [pc, #236]	; (64d4 <z_impl_k_mutex_lock+0x22c>)
    63e8:	23b9      	movs	r3, #185	; 0xb9
    63ea:	4622      	mov	r2, r4
    63ec:	493c      	ldr	r1, [pc, #240]	; (64e0 <z_impl_k_mutex_lock+0x238>)
    63ee:	4837      	ldr	r0, [pc, #220]	; (64cc <z_impl_k_mutex_lock+0x224>)
    63f0:	f002 ffcb 	bl	938a <assert_print>
    63f4:	4931      	ldr	r1, [pc, #196]	; (64bc <z_impl_k_mutex_lock+0x214>)
    63f6:	483b      	ldr	r0, [pc, #236]	; (64e4 <z_impl_k_mutex_lock+0x23c>)
    63f8:	f002 ffc7 	bl	938a <assert_print>
    63fc:	21b9      	movs	r1, #185	; 0xb9
    63fe:	4620      	mov	r0, r4
    6400:	f002 ffbc 	bl	937c <assert_post_action>
    6404:	e77e      	b.n	6304 <z_impl_k_mutex_lock+0x5c>
    6406:	482d      	ldr	r0, [pc, #180]	; (64bc <z_impl_k_mutex_lock+0x214>)
    6408:	f7ff fd68 	bl	5edc <z_spin_unlock_valid>
    640c:	b130      	cbz	r0, 641c <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    640e:	f387 8811 	msr	BASEPRI, r7
    6412:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    6416:	f06f 000f 	mvn.w	r0, #15
    641a:	e778      	b.n	630e <z_impl_k_mutex_lock+0x66>
    641c:	4c2d      	ldr	r4, [pc, #180]	; (64d4 <z_impl_k_mutex_lock+0x22c>)
    641e:	23b9      	movs	r3, #185	; 0xb9
    6420:	4622      	mov	r2, r4
    6422:	492f      	ldr	r1, [pc, #188]	; (64e0 <z_impl_k_mutex_lock+0x238>)
    6424:	4829      	ldr	r0, [pc, #164]	; (64cc <z_impl_k_mutex_lock+0x224>)
    6426:	f002 ffb0 	bl	938a <assert_print>
    642a:	4924      	ldr	r1, [pc, #144]	; (64bc <z_impl_k_mutex_lock+0x214>)
    642c:	482d      	ldr	r0, [pc, #180]	; (64e4 <z_impl_k_mutex_lock+0x23c>)
    642e:	f002 ffac 	bl	938a <assert_print>
    6432:	21b9      	movs	r1, #185	; 0xb9
    6434:	4620      	mov	r0, r4
    6436:	f002 ffa1 	bl	937c <assert_post_action>
    643a:	e7e8      	b.n	640e <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    643c:	4601      	mov	r1, r0
    643e:	4620      	mov	r0, r4
    6440:	f003 fdb1 	bl	9fa6 <adjust_owner_prio>
    6444:	4681      	mov	r9, r0
    6446:	e79d      	b.n	6384 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6448:	4e22      	ldr	r6, [pc, #136]	; (64d4 <z_impl_k_mutex_lock+0x22c>)
    644a:	238e      	movs	r3, #142	; 0x8e
    644c:	4632      	mov	r2, r6
    644e:	4922      	ldr	r1, [pc, #136]	; (64d8 <z_impl_k_mutex_lock+0x230>)
    6450:	481e      	ldr	r0, [pc, #120]	; (64cc <z_impl_k_mutex_lock+0x224>)
    6452:	f002 ff9a 	bl	938a <assert_print>
    6456:	4919      	ldr	r1, [pc, #100]	; (64bc <z_impl_k_mutex_lock+0x214>)
    6458:	4820      	ldr	r0, [pc, #128]	; (64dc <z_impl_k_mutex_lock+0x234>)
    645a:	f002 ff96 	bl	938a <assert_print>
    645e:	218e      	movs	r1, #142	; 0x8e
    6460:	4630      	mov	r0, r6
    6462:	f002 ff8b 	bl	937c <assert_post_action>
    6466:	e7a3      	b.n	63b0 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6468:	6921      	ldr	r1, [r4, #16]
    646a:	e7af      	b.n	63cc <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    646c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    6470:	f1b8 0f00 	cmp.w	r8, #0
    6474:	d006      	beq.n	6484 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    6476:	4629      	mov	r1, r5
    6478:	4810      	ldr	r0, [pc, #64]	; (64bc <z_impl_k_mutex_lock+0x214>)
    647a:	f000 fbcd 	bl	6c18 <z_reschedule>
	return -EAGAIN;
    647e:	f06f 000a 	mvn.w	r0, #10
    6482:	e744      	b.n	630e <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6484:	480d      	ldr	r0, [pc, #52]	; (64bc <z_impl_k_mutex_lock+0x214>)
    6486:	f7ff fd29 	bl	5edc <z_spin_unlock_valid>
    648a:	b130      	cbz	r0, 649a <z_impl_k_mutex_lock+0x1f2>
    648c:	f385 8811 	msr	BASEPRI, r5
    6490:	f3bf 8f6f 	isb	sy
    6494:	f06f 000a 	mvn.w	r0, #10
    6498:	e739      	b.n	630e <z_impl_k_mutex_lock+0x66>
    649a:	4c0e      	ldr	r4, [pc, #56]	; (64d4 <z_impl_k_mutex_lock+0x22c>)
    649c:	23b9      	movs	r3, #185	; 0xb9
    649e:	4622      	mov	r2, r4
    64a0:	490f      	ldr	r1, [pc, #60]	; (64e0 <z_impl_k_mutex_lock+0x238>)
    64a2:	480a      	ldr	r0, [pc, #40]	; (64cc <z_impl_k_mutex_lock+0x224>)
    64a4:	f002 ff71 	bl	938a <assert_print>
    64a8:	4904      	ldr	r1, [pc, #16]	; (64bc <z_impl_k_mutex_lock+0x214>)
    64aa:	480e      	ldr	r0, [pc, #56]	; (64e4 <z_impl_k_mutex_lock+0x23c>)
    64ac:	f002 ff6d 	bl	938a <assert_print>
    64b0:	21b9      	movs	r1, #185	; 0xb9
    64b2:	4620      	mov	r0, r4
    64b4:	f002 ff62 	bl	937c <assert_post_action>
    64b8:	e7e8      	b.n	648c <z_impl_k_mutex_lock+0x1e4>
    64ba:	bf00      	nop
    64bc:	200012a8 	.word	0x200012a8
    64c0:	20001278 	.word	0x20001278
    64c4:	0000b6d4 	.word	0x0000b6d4
    64c8:	0000b6f8 	.word	0x0000b6f8
    64cc:	0000a4cc 	.word	0x0000a4cc
    64d0:	0000b70c 	.word	0x0000b70c
    64d4:	0000a9dc 	.word	0x0000a9dc
    64d8:	0000aa3c 	.word	0x0000aa3c
    64dc:	0000aa54 	.word	0x0000aa54
    64e0:	0000aa0c 	.word	0x0000aa0c
    64e4:	0000aa24 	.word	0x0000aa24

000064e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    64e8:	b570      	push	{r4, r5, r6, lr}
    64ea:	4604      	mov	r4, r0
    64ec:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    64f0:	bb03      	cbnz	r3, 6534 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    64f2:	68a3      	ldr	r3, [r4, #8]
    64f4:	2b00      	cmp	r3, #0
    64f6:	f000 80a6 	beq.w	6646 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    64fa:	4a56      	ldr	r2, [pc, #344]	; (6654 <z_impl_k_mutex_unlock+0x16c>)
    64fc:	6892      	ldr	r2, [r2, #8]
    64fe:	4293      	cmp	r3, r2
    6500:	f040 80a4 	bne.w	664c <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6504:	68e3      	ldr	r3, [r4, #12]
    6506:	b323      	cbz	r3, 6552 <z_impl_k_mutex_unlock+0x6a>
    6508:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    650c:	bb6b      	cbnz	r3, 656a <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    650e:	4b51      	ldr	r3, [pc, #324]	; (6654 <z_impl_k_mutex_unlock+0x16c>)
    6510:	689b      	ldr	r3, [r3, #8]
    6512:	7bdb      	ldrb	r3, [r3, #15]
    6514:	2b01      	cmp	r3, #1
    6516:	d037      	beq.n	6588 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    6518:	4b4e      	ldr	r3, [pc, #312]	; (6654 <z_impl_k_mutex_unlock+0x16c>)
    651a:	689a      	ldr	r2, [r3, #8]
    651c:	7bd3      	ldrb	r3, [r2, #15]
    651e:	3b01      	subs	r3, #1
    6520:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6522:	68e3      	ldr	r3, [r4, #12]
    6524:	2b01      	cmp	r3, #1
    6526:	d93e      	bls.n	65a6 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    6528:	3b01      	subs	r3, #1
    652a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    652c:	f001 f9ac 	bl	7888 <k_sched_unlock>

	return 0;
    6530:	2000      	movs	r0, #0
}
    6532:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6534:	4d48      	ldr	r5, [pc, #288]	; (6658 <z_impl_k_mutex_unlock+0x170>)
    6536:	23c7      	movs	r3, #199	; 0xc7
    6538:	462a      	mov	r2, r5
    653a:	4948      	ldr	r1, [pc, #288]	; (665c <z_impl_k_mutex_unlock+0x174>)
    653c:	4848      	ldr	r0, [pc, #288]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    653e:	f002 ff24 	bl	938a <assert_print>
    6542:	4848      	ldr	r0, [pc, #288]	; (6664 <z_impl_k_mutex_unlock+0x17c>)
    6544:	f002 ff21 	bl	938a <assert_print>
    6548:	21c7      	movs	r1, #199	; 0xc7
    654a:	4628      	mov	r0, r5
    654c:	f002 ff16 	bl	937c <assert_post_action>
    6550:	e7cf      	b.n	64f2 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6552:	4d41      	ldr	r5, [pc, #260]	; (6658 <z_impl_k_mutex_unlock+0x170>)
    6554:	23df      	movs	r3, #223	; 0xdf
    6556:	462a      	mov	r2, r5
    6558:	4943      	ldr	r1, [pc, #268]	; (6668 <z_impl_k_mutex_unlock+0x180>)
    655a:	4841      	ldr	r0, [pc, #260]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    655c:	f002 ff15 	bl	938a <assert_print>
    6560:	21df      	movs	r1, #223	; 0xdf
    6562:	4628      	mov	r0, r5
    6564:	f002 ff0a 	bl	937c <assert_post_action>
    6568:	e7ce      	b.n	6508 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    656a:	4d40      	ldr	r5, [pc, #256]	; (666c <z_impl_k_mutex_unlock+0x184>)
    656c:	23fd      	movs	r3, #253	; 0xfd
    656e:	462a      	mov	r2, r5
    6570:	493a      	ldr	r1, [pc, #232]	; (665c <z_impl_k_mutex_unlock+0x174>)
    6572:	483b      	ldr	r0, [pc, #236]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    6574:	f002 ff09 	bl	938a <assert_print>
    6578:	483d      	ldr	r0, [pc, #244]	; (6670 <z_impl_k_mutex_unlock+0x188>)
    657a:	f002 ff06 	bl	938a <assert_print>
    657e:	21fd      	movs	r1, #253	; 0xfd
    6580:	4628      	mov	r0, r5
    6582:	f002 fefb 	bl	937c <assert_post_action>
    6586:	e7c2      	b.n	650e <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6588:	4d38      	ldr	r5, [pc, #224]	; (666c <z_impl_k_mutex_unlock+0x184>)
    658a:	23fe      	movs	r3, #254	; 0xfe
    658c:	462a      	mov	r2, r5
    658e:	4939      	ldr	r1, [pc, #228]	; (6674 <z_impl_k_mutex_unlock+0x18c>)
    6590:	4833      	ldr	r0, [pc, #204]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    6592:	f002 fefa 	bl	938a <assert_print>
    6596:	4836      	ldr	r0, [pc, #216]	; (6670 <z_impl_k_mutex_unlock+0x188>)
    6598:	f002 fef7 	bl	938a <assert_print>
    659c:	21fe      	movs	r1, #254	; 0xfe
    659e:	4628      	mov	r0, r5
    65a0:	f002 feec 	bl	937c <assert_post_action>
    65a4:	e7b8      	b.n	6518 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    65a6:	f04f 0320 	mov.w	r3, #32
    65aa:	f3ef 8511 	mrs	r5, BASEPRI
    65ae:	f383 8812 	msr	BASEPRI_MAX, r3
    65b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65b6:	4830      	ldr	r0, [pc, #192]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    65b8:	f7ff fc80 	bl	5ebc <z_spin_lock_valid>
    65bc:	b1c0      	cbz	r0, 65f0 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    65be:	482e      	ldr	r0, [pc, #184]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    65c0:	f7ff fc9c 	bl	5efc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    65c4:	6921      	ldr	r1, [r4, #16]
    65c6:	4620      	mov	r0, r4
    65c8:	f003 fced 	bl	9fa6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    65cc:	4620      	mov	r0, r4
    65ce:	f001 fa3d 	bl	7a4c <z_unpend_first_thread>
	mutex->owner = new_owner;
    65d2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    65d4:	b1e0      	cbz	r0, 6610 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    65d6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    65da:	6123      	str	r3, [r4, #16]
    65dc:	2300      	movs	r3, #0
    65de:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    65e2:	f000 fe1b 	bl	721c <z_ready_thread>
		z_reschedule(&lock, key);
    65e6:	4629      	mov	r1, r5
    65e8:	4823      	ldr	r0, [pc, #140]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    65ea:	f000 fb15 	bl	6c18 <z_reschedule>
    65ee:	e79d      	b.n	652c <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65f0:	4e22      	ldr	r6, [pc, #136]	; (667c <z_impl_k_mutex_unlock+0x194>)
    65f2:	238e      	movs	r3, #142	; 0x8e
    65f4:	4632      	mov	r2, r6
    65f6:	4922      	ldr	r1, [pc, #136]	; (6680 <z_impl_k_mutex_unlock+0x198>)
    65f8:	4819      	ldr	r0, [pc, #100]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    65fa:	f002 fec6 	bl	938a <assert_print>
    65fe:	491e      	ldr	r1, [pc, #120]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    6600:	4820      	ldr	r0, [pc, #128]	; (6684 <z_impl_k_mutex_unlock+0x19c>)
    6602:	f002 fec2 	bl	938a <assert_print>
    6606:	218e      	movs	r1, #142	; 0x8e
    6608:	4630      	mov	r0, r6
    660a:	f002 feb7 	bl	937c <assert_post_action>
    660e:	e7d6      	b.n	65be <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    6610:	2300      	movs	r3, #0
    6612:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6614:	4818      	ldr	r0, [pc, #96]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    6616:	f7ff fc61 	bl	5edc <z_spin_unlock_valid>
    661a:	b120      	cbz	r0, 6626 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    661c:	f385 8811 	msr	BASEPRI, r5
    6620:	f3bf 8f6f 	isb	sy
    6624:	e782      	b.n	652c <z_impl_k_mutex_unlock+0x44>
    6626:	4c15      	ldr	r4, [pc, #84]	; (667c <z_impl_k_mutex_unlock+0x194>)
    6628:	23b9      	movs	r3, #185	; 0xb9
    662a:	4622      	mov	r2, r4
    662c:	4916      	ldr	r1, [pc, #88]	; (6688 <z_impl_k_mutex_unlock+0x1a0>)
    662e:	480c      	ldr	r0, [pc, #48]	; (6660 <z_impl_k_mutex_unlock+0x178>)
    6630:	f002 feab 	bl	938a <assert_print>
    6634:	4910      	ldr	r1, [pc, #64]	; (6678 <z_impl_k_mutex_unlock+0x190>)
    6636:	4815      	ldr	r0, [pc, #84]	; (668c <z_impl_k_mutex_unlock+0x1a4>)
    6638:	f002 fea7 	bl	938a <assert_print>
    663c:	21b9      	movs	r1, #185	; 0xb9
    663e:	4620      	mov	r0, r4
    6640:	f002 fe9c 	bl	937c <assert_post_action>
    6644:	e7ea      	b.n	661c <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    6646:	f06f 0015 	mvn.w	r0, #21
    664a:	e772      	b.n	6532 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    664c:	f04f 30ff 	mov.w	r0, #4294967295
    6650:	e76f      	b.n	6532 <z_impl_k_mutex_unlock+0x4a>
    6652:	bf00      	nop
    6654:	20001278 	.word	0x20001278
    6658:	0000b6d4 	.word	0x0000b6d4
    665c:	0000b6f8 	.word	0x0000b6f8
    6660:	0000a4cc 	.word	0x0000a4cc
    6664:	0000b70c 	.word	0x0000b70c
    6668:	0000b734 	.word	0x0000b734
    666c:	0000b74c 	.word	0x0000b74c
    6670:	0000b778 	.word	0x0000b778
    6674:	0000b77c 	.word	0x0000b77c
    6678:	200012a8 	.word	0x200012a8
    667c:	0000a9dc 	.word	0x0000a9dc
    6680:	0000aa3c 	.word	0x0000aa3c
    6684:	0000aa54 	.word	0x0000aa54
    6688:	0000aa0c 	.word	0x0000aa0c
    668c:	0000aa24 	.word	0x0000aa24

00006690 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
    6690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6694:	4604      	mov	r4, r0
    6696:	460e      	mov	r6, r1
    6698:	4615      	mov	r5, r2
    669a:	4698      	mov	r8, r3
    669c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    66a0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    66a4:	f04f 0320 	mov.w	r3, #32
    66a8:	f3ef 8911 	mrs	r9, BASEPRI
    66ac:	f383 8812 	msr	BASEPRI_MAX, r3
    66b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66b4:	4638      	mov	r0, r7
    66b6:	f7ff fc01 	bl	5ebc <z_spin_lock_valid>
    66ba:	b338      	cbz	r0, 670c <queue_insert+0x7c>
	z_spin_lock_set_owner(l);
    66bc:	4638      	mov	r0, r7
    66be:	f7ff fc1d 	bl	5efc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
    66c2:	f1ba 0f00 	cmp.w	sl, #0
    66c6:	d000      	beq.n	66ca <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    66c8:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    66ca:	f104 000c 	add.w	r0, r4, #12
    66ce:	f001 f9bd 	bl	7a4c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    66d2:	bb60      	cbnz	r0, 672e <queue_insert+0x9e>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    66d4:	f1b8 0f00 	cmp.w	r8, #0
    66d8:	d132      	bne.n	6740 <queue_insert+0xb0>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    66da:	2300      	movs	r3, #0
    66dc:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    66de:	2e00      	cmp	r6, #0
    66e0:	d053      	beq.n	678a <queue_insert+0xfa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    66e2:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    66e4:	f033 0303 	bics.w	r3, r3, #3
    66e8:	d05b      	beq.n	67a2 <queue_insert+0x112>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    66ea:	682a      	ldr	r2, [r5, #0]
    66ec:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    66f0:	4313      	orrs	r3, r2
    66f2:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    66f4:	6833      	ldr	r3, [r6, #0]
    66f6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    66fa:	431d      	orrs	r5, r3
    66fc:	6035      	str	r5, [r6, #0]

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    66fe:	4649      	mov	r1, r9
    6700:	4638      	mov	r0, r7
    6702:	f000 fa89 	bl	6c18 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
    6706:	2000      	movs	r0, #0
}
    6708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    670c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 67c4 <queue_insert+0x134>
    6710:	238e      	movs	r3, #142	; 0x8e
    6712:	465a      	mov	r2, fp
    6714:	492c      	ldr	r1, [pc, #176]	; (67c8 <queue_insert+0x138>)
    6716:	482d      	ldr	r0, [pc, #180]	; (67cc <queue_insert+0x13c>)
    6718:	f002 fe37 	bl	938a <assert_print>
    671c:	4639      	mov	r1, r7
    671e:	482c      	ldr	r0, [pc, #176]	; (67d0 <queue_insert+0x140>)
    6720:	f002 fe33 	bl	938a <assert_print>
    6724:	218e      	movs	r1, #142	; 0x8e
    6726:	4658      	mov	r0, fp
    6728:	f002 fe28 	bl	937c <assert_post_action>
    672c:	e7c6      	b.n	66bc <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
    672e:	4629      	mov	r1, r5
    6730:	f003 fc4b 	bl	9fca <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    6734:	4649      	mov	r1, r9
    6736:	4638      	mov	r0, r7
    6738:	f000 fa6e 	bl	6c18 <z_reschedule>
		return 0;
    673c:	2000      	movs	r0, #0
    673e:	e7e3      	b.n	6708 <queue_insert+0x78>
	return z_thread_aligned_alloc(0, size);
    6740:	2108      	movs	r1, #8
    6742:	2000      	movs	r0, #0
    6744:	f002 f846 	bl	87d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
    6748:	b120      	cbz	r0, 6754 <queue_insert+0xc4>
		anode->data = data;
    674a:	6045      	str	r5, [r0, #4]
	node->next_and_flags = flags;
    674c:	2201      	movs	r2, #1
    674e:	6002      	str	r2, [r0, #0]
		data = anode;
    6750:	4605      	mov	r5, r0
    6752:	e7c4      	b.n	66de <queue_insert+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6754:	4638      	mov	r0, r7
    6756:	f7ff fbc1 	bl	5edc <z_spin_unlock_valid>
    675a:	b130      	cbz	r0, 676a <queue_insert+0xda>
	__asm__ volatile(
    675c:	f389 8811 	msr	BASEPRI, r9
    6760:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    6764:	f06f 000b 	mvn.w	r0, #11
    6768:	e7ce      	b.n	6708 <queue_insert+0x78>
    676a:	4c16      	ldr	r4, [pc, #88]	; (67c4 <queue_insert+0x134>)
    676c:	23b9      	movs	r3, #185	; 0xb9
    676e:	4622      	mov	r2, r4
    6770:	4918      	ldr	r1, [pc, #96]	; (67d4 <queue_insert+0x144>)
    6772:	4816      	ldr	r0, [pc, #88]	; (67cc <queue_insert+0x13c>)
    6774:	f002 fe09 	bl	938a <assert_print>
    6778:	4639      	mov	r1, r7
    677a:	4817      	ldr	r0, [pc, #92]	; (67d8 <queue_insert+0x148>)
    677c:	f002 fe05 	bl	938a <assert_print>
    6780:	21b9      	movs	r1, #185	; 0xb9
    6782:	4620      	mov	r0, r4
    6784:	f002 fdfa 	bl	937c <assert_post_action>
    6788:	e7e8      	b.n	675c <queue_insert+0xcc>
	return list->head;
    678a:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    678c:	682b      	ldr	r3, [r5, #0]
    678e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    6792:	4313      	orrs	r3, r2
    6794:	602b      	str	r3, [r5, #0]
	list->head = node;
    6796:	6025      	str	r5, [r4, #0]
	return list->tail;
    6798:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    679a:	2b00      	cmp	r3, #0
    679c:	d1af      	bne.n	66fe <queue_insert+0x6e>
	list->tail = node;
    679e:	6065      	str	r5, [r4, #4]
}
    67a0:	e7ad      	b.n	66fe <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    67a2:	682b      	ldr	r3, [r5, #0]
    67a4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    67a8:	602b      	str	r3, [r5, #0]
	return list->tail;
    67aa:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    67ac:	b132      	cbz	r2, 67bc <queue_insert+0x12c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    67ae:	6813      	ldr	r3, [r2, #0]
    67b0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    67b4:	432b      	orrs	r3, r5
    67b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    67b8:	6065      	str	r5, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    67ba:	e7a0      	b.n	66fe <queue_insert+0x6e>
	list->tail = node;
    67bc:	6065      	str	r5, [r4, #4]
	list->head = node;
    67be:	6025      	str	r5, [r4, #0]
}
    67c0:	e79d      	b.n	66fe <queue_insert+0x6e>
    67c2:	bf00      	nop
    67c4:	0000a9dc 	.word	0x0000a9dc
    67c8:	0000aa3c 	.word	0x0000aa3c
    67cc:	0000a4cc 	.word	0x0000a4cc
    67d0:	0000aa54 	.word	0x0000aa54
    67d4:	0000aa0c 	.word	0x0000aa0c
    67d8:	0000aa24 	.word	0x0000aa24

000067dc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    67dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67e0:	b083      	sub	sp, #12
    67e2:	4604      	mov	r4, r0
    67e4:	4690      	mov	r8, r2
    67e6:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    67e8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    67ec:	f04f 0320 	mov.w	r3, #32
    67f0:	f3ef 8611 	mrs	r6, BASEPRI
    67f4:	f383 8812 	msr	BASEPRI_MAX, r3
    67f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67fc:	4628      	mov	r0, r5
    67fe:	f7ff fb5d 	bl	5ebc <z_spin_lock_valid>
    6802:	b1e0      	cbz	r0, 683e <z_impl_k_queue_get+0x62>
	z_spin_lock_set_owner(l);
    6804:	4628      	mov	r0, r5
    6806:	f7ff fb79 	bl	5efc <z_spin_lock_set_owner>
	return list->head;
    680a:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    680c:	2800      	cmp	r0, #0
    680e:	d039      	beq.n	6884 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    6810:	6803      	ldr	r3, [r0, #0]
    6812:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    6816:	6023      	str	r3, [r4, #0]
	return list->tail;
    6818:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    681a:	4290      	cmp	r0, r2
    681c:	d020      	beq.n	6860 <z_impl_k_queue_get+0x84>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    681e:	2101      	movs	r1, #1
    6820:	f003 fbdb 	bl	9fda <z_queue_node_peek>
    6824:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6826:	4628      	mov	r0, r5
    6828:	f7ff fb58 	bl	5edc <z_spin_unlock_valid>
    682c:	b1d0      	cbz	r0, 6864 <z_impl_k_queue_get+0x88>
	__asm__ volatile(
    682e:	f386 8811 	msr	BASEPRI, r6
    6832:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    6836:	4620      	mov	r0, r4
    6838:	b003      	add	sp, #12
    683a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    683e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 68e0 <z_impl_k_queue_get+0x104>
    6842:	238e      	movs	r3, #142	; 0x8e
    6844:	464a      	mov	r2, r9
    6846:	4927      	ldr	r1, [pc, #156]	; (68e4 <z_impl_k_queue_get+0x108>)
    6848:	4827      	ldr	r0, [pc, #156]	; (68e8 <z_impl_k_queue_get+0x10c>)
    684a:	f002 fd9e 	bl	938a <assert_print>
    684e:	4629      	mov	r1, r5
    6850:	4826      	ldr	r0, [pc, #152]	; (68ec <z_impl_k_queue_get+0x110>)
    6852:	f002 fd9a 	bl	938a <assert_print>
    6856:	218e      	movs	r1, #142	; 0x8e
    6858:	4648      	mov	r0, r9
    685a:	f002 fd8f 	bl	937c <assert_post_action>
    685e:	e7d1      	b.n	6804 <z_impl_k_queue_get+0x28>
	list->tail = node;
    6860:	6063      	str	r3, [r4, #4]
}
    6862:	e7dc      	b.n	681e <z_impl_k_queue_get+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6864:	4f1e      	ldr	r7, [pc, #120]	; (68e0 <z_impl_k_queue_get+0x104>)
    6866:	23b9      	movs	r3, #185	; 0xb9
    6868:	463a      	mov	r2, r7
    686a:	4921      	ldr	r1, [pc, #132]	; (68f0 <z_impl_k_queue_get+0x114>)
    686c:	481e      	ldr	r0, [pc, #120]	; (68e8 <z_impl_k_queue_get+0x10c>)
    686e:	f002 fd8c 	bl	938a <assert_print>
    6872:	4629      	mov	r1, r5
    6874:	481f      	ldr	r0, [pc, #124]	; (68f4 <z_impl_k_queue_get+0x118>)
    6876:	f002 fd88 	bl	938a <assert_print>
    687a:	21b9      	movs	r1, #185	; 0xb9
    687c:	4638      	mov	r0, r7
    687e:	f002 fd7d 	bl	937c <assert_post_action>
    6882:	e7d4      	b.n	682e <z_impl_k_queue_get+0x52>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6884:	ea57 0308 	orrs.w	r3, r7, r8
    6888:	d00d      	beq.n	68a6 <z_impl_k_queue_get+0xca>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    688a:	f8cd 8000 	str.w	r8, [sp]
    688e:	9701      	str	r7, [sp, #4]
    6890:	f104 020c 	add.w	r2, r4, #12
    6894:	4631      	mov	r1, r6
    6896:	4628      	mov	r0, r5
    6898:	f000 fe9c 	bl	75d4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    689c:	b9e8      	cbnz	r0, 68da <z_impl_k_queue_get+0xfe>
    689e:	4b16      	ldr	r3, [pc, #88]	; (68f8 <z_impl_k_queue_get+0x11c>)
    68a0:	689b      	ldr	r3, [r3, #8]
    68a2:	695c      	ldr	r4, [r3, #20]
    68a4:	e7c7      	b.n	6836 <z_impl_k_queue_get+0x5a>
    68a6:	4628      	mov	r0, r5
    68a8:	f7ff fb18 	bl	5edc <z_spin_unlock_valid>
    68ac:	b128      	cbz	r0, 68ba <z_impl_k_queue_get+0xde>
    68ae:	f386 8811 	msr	BASEPRI, r6
    68b2:	f3bf 8f6f 	isb	sy
		return NULL;
    68b6:	2400      	movs	r4, #0
    68b8:	e7bd      	b.n	6836 <z_impl_k_queue_get+0x5a>
    68ba:	4c09      	ldr	r4, [pc, #36]	; (68e0 <z_impl_k_queue_get+0x104>)
    68bc:	23b9      	movs	r3, #185	; 0xb9
    68be:	4622      	mov	r2, r4
    68c0:	490b      	ldr	r1, [pc, #44]	; (68f0 <z_impl_k_queue_get+0x114>)
    68c2:	4809      	ldr	r0, [pc, #36]	; (68e8 <z_impl_k_queue_get+0x10c>)
    68c4:	f002 fd61 	bl	938a <assert_print>
    68c8:	4629      	mov	r1, r5
    68ca:	480a      	ldr	r0, [pc, #40]	; (68f4 <z_impl_k_queue_get+0x118>)
    68cc:	f002 fd5d 	bl	938a <assert_print>
    68d0:	21b9      	movs	r1, #185	; 0xb9
    68d2:	4620      	mov	r0, r4
    68d4:	f002 fd52 	bl	937c <assert_post_action>
    68d8:	e7e9      	b.n	68ae <z_impl_k_queue_get+0xd2>
	return (ret != 0) ? NULL : _current->base.swap_data;
    68da:	2400      	movs	r4, #0
    68dc:	e7ab      	b.n	6836 <z_impl_k_queue_get+0x5a>
    68de:	bf00      	nop
    68e0:	0000a9dc 	.word	0x0000a9dc
    68e4:	0000aa3c 	.word	0x0000aa3c
    68e8:	0000a4cc 	.word	0x0000a4cc
    68ec:	0000aa54 	.word	0x0000aa54
    68f0:	0000aa0c 	.word	0x0000aa0c
    68f4:	0000aa24 	.word	0x0000aa24
    68f8:	20001278 	.word	0x20001278

000068fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    68fc:	b570      	push	{r4, r5, r6, lr}
    68fe:	4604      	mov	r4, r0
	__asm__ volatile(
    6900:	f04f 0320 	mov.w	r3, #32
    6904:	f3ef 8511 	mrs	r5, BASEPRI
    6908:	f383 8812 	msr	BASEPRI_MAX, r3
    690c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6910:	4817      	ldr	r0, [pc, #92]	; (6970 <z_impl_k_sem_give+0x74>)
    6912:	f7ff fad3 	bl	5ebc <z_spin_lock_valid>
    6916:	b180      	cbz	r0, 693a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    6918:	4815      	ldr	r0, [pc, #84]	; (6970 <z_impl_k_sem_give+0x74>)
    691a:	f7ff faef 	bl	5efc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    691e:	4620      	mov	r0, r4
    6920:	f001 f894 	bl	7a4c <z_unpend_first_thread>

	if (thread != NULL) {
    6924:	b1c8      	cbz	r0, 695a <z_impl_k_sem_give+0x5e>
    6926:	2200      	movs	r2, #0
    6928:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    692c:	f000 fc76 	bl	721c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6930:	4629      	mov	r1, r5
    6932:	480f      	ldr	r0, [pc, #60]	; (6970 <z_impl_k_sem_give+0x74>)
    6934:	f000 f970 	bl	6c18 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6938:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    693a:	4e0e      	ldr	r6, [pc, #56]	; (6974 <z_impl_k_sem_give+0x78>)
    693c:	238e      	movs	r3, #142	; 0x8e
    693e:	4632      	mov	r2, r6
    6940:	490d      	ldr	r1, [pc, #52]	; (6978 <z_impl_k_sem_give+0x7c>)
    6942:	480e      	ldr	r0, [pc, #56]	; (697c <z_impl_k_sem_give+0x80>)
    6944:	f002 fd21 	bl	938a <assert_print>
    6948:	4909      	ldr	r1, [pc, #36]	; (6970 <z_impl_k_sem_give+0x74>)
    694a:	480d      	ldr	r0, [pc, #52]	; (6980 <z_impl_k_sem_give+0x84>)
    694c:	f002 fd1d 	bl	938a <assert_print>
    6950:	218e      	movs	r1, #142	; 0x8e
    6952:	4630      	mov	r0, r6
    6954:	f002 fd12 	bl	937c <assert_post_action>
    6958:	e7de      	b.n	6918 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    695a:	68a3      	ldr	r3, [r4, #8]
    695c:	68e2      	ldr	r2, [r4, #12]
    695e:	4293      	cmp	r3, r2
    6960:	d003      	beq.n	696a <z_impl_k_sem_give+0x6e>
    6962:	2201      	movs	r2, #1
    6964:	4413      	add	r3, r2
    6966:	60a3      	str	r3, [r4, #8]
}
    6968:	e7e2      	b.n	6930 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    696a:	2200      	movs	r2, #0
    696c:	e7fa      	b.n	6964 <z_impl_k_sem_give+0x68>
    696e:	bf00      	nop
    6970:	200012ac 	.word	0x200012ac
    6974:	0000a9dc 	.word	0x0000a9dc
    6978:	0000aa3c 	.word	0x0000aa3c
    697c:	0000a4cc 	.word	0x0000a4cc
    6980:	0000aa54 	.word	0x0000aa54

00006984 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6988:	b082      	sub	sp, #8
    698a:	4604      	mov	r4, r0
    698c:	4617      	mov	r7, r2
    698e:	461d      	mov	r5, r3
    6990:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6994:	b111      	cbz	r1, 699c <z_impl_k_sem_take+0x18>
    6996:	ea55 0302 	orrs.w	r3, r5, r2
    699a:	d11f      	bne.n	69dc <z_impl_k_sem_take+0x58>
    699c:	f04f 0320 	mov.w	r3, #32
    69a0:	f3ef 8611 	mrs	r6, BASEPRI
    69a4:	f383 8812 	msr	BASEPRI_MAX, r3
    69a8:	f3bf 8f6f 	isb	sy
    69ac:	4836      	ldr	r0, [pc, #216]	; (6a88 <z_impl_k_sem_take+0x104>)
    69ae:	f7ff fa85 	bl	5ebc <z_spin_lock_valid>
    69b2:	b310      	cbz	r0, 69fa <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    69b4:	4834      	ldr	r0, [pc, #208]	; (6a88 <z_impl_k_sem_take+0x104>)
    69b6:	f7ff faa1 	bl	5efc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    69ba:	68a1      	ldr	r1, [r4, #8]
    69bc:	2900      	cmp	r1, #0
    69be:	d03d      	beq.n	6a3c <z_impl_k_sem_take+0xb8>
		sem->count--;
    69c0:	3901      	subs	r1, #1
    69c2:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69c4:	4830      	ldr	r0, [pc, #192]	; (6a88 <z_impl_k_sem_take+0x104>)
    69c6:	f7ff fa89 	bl	5edc <z_spin_unlock_valid>
    69ca:	b338      	cbz	r0, 6a1c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    69cc:	f386 8811 	msr	BASEPRI, r6
    69d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    69d4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    69d6:	b002      	add	sp, #8
    69d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    69dc:	4e2b      	ldr	r6, [pc, #172]	; (6a8c <z_impl_k_sem_take+0x108>)
    69de:	2379      	movs	r3, #121	; 0x79
    69e0:	4632      	mov	r2, r6
    69e2:	492b      	ldr	r1, [pc, #172]	; (6a90 <z_impl_k_sem_take+0x10c>)
    69e4:	482b      	ldr	r0, [pc, #172]	; (6a94 <z_impl_k_sem_take+0x110>)
    69e6:	f002 fcd0 	bl	938a <assert_print>
    69ea:	482b      	ldr	r0, [pc, #172]	; (6a98 <z_impl_k_sem_take+0x114>)
    69ec:	f002 fccd 	bl	938a <assert_print>
    69f0:	2179      	movs	r1, #121	; 0x79
    69f2:	4630      	mov	r0, r6
    69f4:	f002 fcc2 	bl	937c <assert_post_action>
    69f8:	e7d0      	b.n	699c <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6a9c <z_impl_k_sem_take+0x118>
    69fe:	238e      	movs	r3, #142	; 0x8e
    6a00:	4642      	mov	r2, r8
    6a02:	4927      	ldr	r1, [pc, #156]	; (6aa0 <z_impl_k_sem_take+0x11c>)
    6a04:	4823      	ldr	r0, [pc, #140]	; (6a94 <z_impl_k_sem_take+0x110>)
    6a06:	f002 fcc0 	bl	938a <assert_print>
    6a0a:	491f      	ldr	r1, [pc, #124]	; (6a88 <z_impl_k_sem_take+0x104>)
    6a0c:	4825      	ldr	r0, [pc, #148]	; (6aa4 <z_impl_k_sem_take+0x120>)
    6a0e:	f002 fcbc 	bl	938a <assert_print>
    6a12:	218e      	movs	r1, #142	; 0x8e
    6a14:	4640      	mov	r0, r8
    6a16:	f002 fcb1 	bl	937c <assert_post_action>
    6a1a:	e7cb      	b.n	69b4 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a1c:	4c1f      	ldr	r4, [pc, #124]	; (6a9c <z_impl_k_sem_take+0x118>)
    6a1e:	23b9      	movs	r3, #185	; 0xb9
    6a20:	4622      	mov	r2, r4
    6a22:	4921      	ldr	r1, [pc, #132]	; (6aa8 <z_impl_k_sem_take+0x124>)
    6a24:	481b      	ldr	r0, [pc, #108]	; (6a94 <z_impl_k_sem_take+0x110>)
    6a26:	f002 fcb0 	bl	938a <assert_print>
    6a2a:	4917      	ldr	r1, [pc, #92]	; (6a88 <z_impl_k_sem_take+0x104>)
    6a2c:	481f      	ldr	r0, [pc, #124]	; (6aac <z_impl_k_sem_take+0x128>)
    6a2e:	f002 fcac 	bl	938a <assert_print>
    6a32:	21b9      	movs	r1, #185	; 0xb9
    6a34:	4620      	mov	r0, r4
    6a36:	f002 fca1 	bl	937c <assert_post_action>
    6a3a:	e7c7      	b.n	69cc <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6a3c:	ea55 0307 	orrs.w	r3, r5, r7
    6a40:	d007      	beq.n	6a52 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6a42:	9700      	str	r7, [sp, #0]
    6a44:	9501      	str	r5, [sp, #4]
    6a46:	4622      	mov	r2, r4
    6a48:	4631      	mov	r1, r6
    6a4a:	480f      	ldr	r0, [pc, #60]	; (6a88 <z_impl_k_sem_take+0x104>)
    6a4c:	f000 fdc2 	bl	75d4 <z_pend_curr>
	return ret;
    6a50:	e7c1      	b.n	69d6 <z_impl_k_sem_take+0x52>
    6a52:	480d      	ldr	r0, [pc, #52]	; (6a88 <z_impl_k_sem_take+0x104>)
    6a54:	f7ff fa42 	bl	5edc <z_spin_unlock_valid>
    6a58:	b130      	cbz	r0, 6a68 <z_impl_k_sem_take+0xe4>
    6a5a:	f386 8811 	msr	BASEPRI, r6
    6a5e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6a62:	f06f 000f 	mvn.w	r0, #15
    6a66:	e7b6      	b.n	69d6 <z_impl_k_sem_take+0x52>
    6a68:	4c0c      	ldr	r4, [pc, #48]	; (6a9c <z_impl_k_sem_take+0x118>)
    6a6a:	23b9      	movs	r3, #185	; 0xb9
    6a6c:	4622      	mov	r2, r4
    6a6e:	490e      	ldr	r1, [pc, #56]	; (6aa8 <z_impl_k_sem_take+0x124>)
    6a70:	4808      	ldr	r0, [pc, #32]	; (6a94 <z_impl_k_sem_take+0x110>)
    6a72:	f002 fc8a 	bl	938a <assert_print>
    6a76:	4904      	ldr	r1, [pc, #16]	; (6a88 <z_impl_k_sem_take+0x104>)
    6a78:	480c      	ldr	r0, [pc, #48]	; (6aac <z_impl_k_sem_take+0x128>)
    6a7a:	f002 fc86 	bl	938a <assert_print>
    6a7e:	21b9      	movs	r1, #185	; 0xb9
    6a80:	4620      	mov	r0, r4
    6a82:	f002 fc7b 	bl	937c <assert_post_action>
    6a86:	e7e8      	b.n	6a5a <z_impl_k_sem_take+0xd6>
    6a88:	200012ac 	.word	0x200012ac
    6a8c:	0000b7b0 	.word	0x0000b7b0
    6a90:	0000b7d0 	.word	0x0000b7d0
    6a94:	0000a4cc 	.word	0x0000a4cc
    6a98:	0000b778 	.word	0x0000b778
    6a9c:	0000a9dc 	.word	0x0000a9dc
    6aa0:	0000aa3c 	.word	0x0000aa3c
    6aa4:	0000aa54 	.word	0x0000aa54
    6aa8:	0000aa0c 	.word	0x0000aa0c
    6aac:	0000aa24 	.word	0x0000aa24

00006ab0 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    6ab0:	b538      	push	{r3, r4, r5, lr}
    6ab2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6ab4:	6883      	ldr	r3, [r0, #8]
    6ab6:	b10b      	cbz	r3, 6abc <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    6ab8:	68a0      	ldr	r0, [r4, #8]
    6aba:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    6abc:	4d06      	ldr	r5, [pc, #24]	; (6ad8 <pended_on_thread+0x28>)
    6abe:	f240 23b9 	movw	r3, #697	; 0x2b9
    6ac2:	462a      	mov	r2, r5
    6ac4:	4905      	ldr	r1, [pc, #20]	; (6adc <pended_on_thread+0x2c>)
    6ac6:	4806      	ldr	r0, [pc, #24]	; (6ae0 <pended_on_thread+0x30>)
    6ac8:	f002 fc5f 	bl	938a <assert_print>
    6acc:	f240 21b9 	movw	r1, #697	; 0x2b9
    6ad0:	4628      	mov	r0, r5
    6ad2:	f002 fc53 	bl	937c <assert_post_action>
    6ad6:	e7ef      	b.n	6ab8 <pended_on_thread+0x8>
    6ad8:	0000b820 	.word	0x0000b820
    6adc:	0000b844 	.word	0x0000b844
    6ae0:	0000a4cc 	.word	0x0000a4cc

00006ae4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
    6ae8:	bf08      	it	eq
    6aea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6aee:	d100      	bne.n	6af2 <add_thread_timeout+0xe>
    6af0:	4770      	bx	lr
{
    6af2:	b508      	push	{r3, lr}
    6af4:	4902      	ldr	r1, [pc, #8]	; (6b00 <add_thread_timeout+0x1c>)
    6af6:	3018      	adds	r0, #24
    6af8:	f001 fada 	bl	80b0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    6afc:	bd08      	pop	{r3, pc}
    6afe:	bf00      	nop
    6b00:	00007379 	.word	0x00007379

00006b04 <z_reset_time_slice>:
{
    6b04:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    6b06:	4b07      	ldr	r3, [pc, #28]	; (6b24 <z_reset_time_slice+0x20>)
    6b08:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    6b0a:	b904      	cbnz	r4, 6b0e <z_reset_time_slice+0xa>
}
    6b0c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6b0e:	f7fc ff5d 	bl	39cc <sys_clock_elapsed>
    6b12:	4404      	add	r4, r0
    6b14:	4b04      	ldr	r3, [pc, #16]	; (6b28 <z_reset_time_slice+0x24>)
    6b16:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6b18:	2100      	movs	r1, #0
    6b1a:	4b02      	ldr	r3, [pc, #8]	; (6b24 <z_reset_time_slice+0x20>)
    6b1c:	6818      	ldr	r0, [r3, #0]
    6b1e:	f001 fc57 	bl	83d0 <z_set_timeout_expiry>
}
    6b22:	e7f3      	b.n	6b0c <z_reset_time_slice+0x8>
    6b24:	200012bc 	.word	0x200012bc
    6b28:	20001278 	.word	0x20001278

00006b2c <k_sched_time_slice_set>:
{
    6b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b30:	4604      	mov	r4, r0
    6b32:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    6b34:	2700      	movs	r7, #0
	__asm__ volatile(
    6b36:	f04f 0320 	mov.w	r3, #32
    6b3a:	f3ef 8611 	mrs	r6, BASEPRI
    6b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b46:	482a      	ldr	r0, [pc, #168]	; (6bf0 <k_sched_time_slice_set+0xc4>)
    6b48:	f7ff f9b8 	bl	5ebc <z_spin_lock_valid>
    6b4c:	b118      	cbz	r0, 6b56 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    6b4e:	4828      	ldr	r0, [pc, #160]	; (6bf0 <k_sched_time_slice_set+0xc4>)
    6b50:	f7ff f9d4 	bl	5efc <z_spin_lock_set_owner>
	return k;
    6b54:	e023      	b.n	6b9e <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b56:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6bf4 <k_sched_time_slice_set+0xc8>
    6b5a:	238e      	movs	r3, #142	; 0x8e
    6b5c:	4642      	mov	r2, r8
    6b5e:	4926      	ldr	r1, [pc, #152]	; (6bf8 <k_sched_time_slice_set+0xcc>)
    6b60:	4826      	ldr	r0, [pc, #152]	; (6bfc <k_sched_time_slice_set+0xd0>)
    6b62:	f002 fc12 	bl	938a <assert_print>
    6b66:	4922      	ldr	r1, [pc, #136]	; (6bf0 <k_sched_time_slice_set+0xc4>)
    6b68:	4825      	ldr	r0, [pc, #148]	; (6c00 <k_sched_time_slice_set+0xd4>)
    6b6a:	f002 fc0e 	bl	938a <assert_print>
    6b6e:	218e      	movs	r1, #142	; 0x8e
    6b70:	4640      	mov	r0, r8
    6b72:	f002 fc03 	bl	937c <assert_post_action>
    6b76:	e7ea      	b.n	6b4e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    6b78:	2802      	cmp	r0, #2
    6b7a:	bfb8      	it	lt
    6b7c:	2002      	movlt	r0, #2
    6b7e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    6b80:	4b20      	ldr	r3, [pc, #128]	; (6c04 <k_sched_time_slice_set+0xd8>)
    6b82:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    6b84:	4b20      	ldr	r3, [pc, #128]	; (6c08 <k_sched_time_slice_set+0xdc>)
    6b86:	6898      	ldr	r0, [r3, #8]
    6b88:	f7ff ffbc 	bl	6b04 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b8c:	4818      	ldr	r0, [pc, #96]	; (6bf0 <k_sched_time_slice_set+0xc4>)
    6b8e:	f7ff f9a5 	bl	5edc <z_spin_unlock_valid>
    6b92:	b1d0      	cbz	r0, 6bca <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    6b94:	f386 8811 	msr	BASEPRI, r6
    6b98:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6b9c:	2701      	movs	r7, #1
    6b9e:	bb27      	cbnz	r7, 6bea <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    6ba0:	4b19      	ldr	r3, [pc, #100]	; (6c08 <k_sched_time_slice_set+0xdc>)
    6ba2:	2200      	movs	r2, #0
    6ba4:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    6ba6:	0c61      	lsrs	r1, r4, #17
    6ba8:	03e3      	lsls	r3, r4, #15
    6baa:	f240 30e7 	movw	r0, #999	; 0x3e7
    6bae:	1818      	adds	r0, r3, r0
    6bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6bb4:	f04f 0300 	mov.w	r3, #0
    6bb8:	f141 0100 	adc.w	r1, r1, #0
    6bbc:	f7f9 faa0 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6bc0:	4b12      	ldr	r3, [pc, #72]	; (6c0c <k_sched_time_slice_set+0xe0>)
    6bc2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6bc4:	2c00      	cmp	r4, #0
    6bc6:	dcd7      	bgt.n	6b78 <k_sched_time_slice_set+0x4c>
    6bc8:	e7da      	b.n	6b80 <k_sched_time_slice_set+0x54>
    6bca:	4f0a      	ldr	r7, [pc, #40]	; (6bf4 <k_sched_time_slice_set+0xc8>)
    6bcc:	23b9      	movs	r3, #185	; 0xb9
    6bce:	463a      	mov	r2, r7
    6bd0:	490f      	ldr	r1, [pc, #60]	; (6c10 <k_sched_time_slice_set+0xe4>)
    6bd2:	480a      	ldr	r0, [pc, #40]	; (6bfc <k_sched_time_slice_set+0xd0>)
    6bd4:	f002 fbd9 	bl	938a <assert_print>
    6bd8:	4905      	ldr	r1, [pc, #20]	; (6bf0 <k_sched_time_slice_set+0xc4>)
    6bda:	480e      	ldr	r0, [pc, #56]	; (6c14 <k_sched_time_slice_set+0xe8>)
    6bdc:	f002 fbd5 	bl	938a <assert_print>
    6be0:	21b9      	movs	r1, #185	; 0xb9
    6be2:	4638      	mov	r0, r7
    6be4:	f002 fbca 	bl	937c <assert_post_action>
    6be8:	e7d4      	b.n	6b94 <k_sched_time_slice_set+0x68>
}
    6bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bee:	bf00      	nop
    6bf0:	200012b4 	.word	0x200012b4
    6bf4:	0000a9dc 	.word	0x0000a9dc
    6bf8:	0000aa3c 	.word	0x0000aa3c
    6bfc:	0000a4cc 	.word	0x0000a4cc
    6c00:	0000aa54 	.word	0x0000aa54
    6c04:	200012b8 	.word	0x200012b8
    6c08:	20001278 	.word	0x20001278
    6c0c:	200012bc 	.word	0x200012bc
    6c10:	0000aa0c 	.word	0x0000aa0c
    6c14:	0000aa24 	.word	0x0000aa24

00006c18 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    6c1c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6c1e:	b921      	cbnz	r1, 6c2a <z_reschedule+0x12>
    6c20:	f3ef 8305 	mrs	r3, IPSR
    6c24:	b913      	cbnz	r3, 6c2c <z_reschedule+0x14>
    6c26:	2101      	movs	r1, #1
    6c28:	e000      	b.n	6c2c <z_reschedule+0x14>
    6c2a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    6c2c:	f011 0f01 	tst.w	r1, #1
    6c30:	d01c      	beq.n	6c6c <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    6c32:	4b1b      	ldr	r3, [pc, #108]	; (6ca0 <z_reschedule+0x88>)
    6c34:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    6c36:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    6c38:	429a      	cmp	r2, r3
    6c3a:	d017      	beq.n	6c6c <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c3c:	4620      	mov	r0, r4
    6c3e:	f7ff f94d 	bl	5edc <z_spin_unlock_valid>
    6c42:	b118      	cbz	r0, 6c4c <z_reschedule+0x34>
	ret = arch_swap(key);
    6c44:	4628      	mov	r0, r5
    6c46:	f7fb faaf 	bl	21a8 <arch_swap>
		z_swap(lock, key);
    6c4a:	e017      	b.n	6c7c <z_reschedule+0x64>
    6c4c:	4e15      	ldr	r6, [pc, #84]	; (6ca4 <z_reschedule+0x8c>)
    6c4e:	23d0      	movs	r3, #208	; 0xd0
    6c50:	4632      	mov	r2, r6
    6c52:	4915      	ldr	r1, [pc, #84]	; (6ca8 <z_reschedule+0x90>)
    6c54:	4815      	ldr	r0, [pc, #84]	; (6cac <z_reschedule+0x94>)
    6c56:	f002 fb98 	bl	938a <assert_print>
    6c5a:	4621      	mov	r1, r4
    6c5c:	4814      	ldr	r0, [pc, #80]	; (6cb0 <z_reschedule+0x98>)
    6c5e:	f002 fb94 	bl	938a <assert_print>
    6c62:	21d0      	movs	r1, #208	; 0xd0
    6c64:	4630      	mov	r0, r6
    6c66:	f002 fb89 	bl	937c <assert_post_action>
    6c6a:	e7eb      	b.n	6c44 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c6c:	4620      	mov	r0, r4
    6c6e:	f7ff f935 	bl	5edc <z_spin_unlock_valid>
    6c72:	b120      	cbz	r0, 6c7e <z_reschedule+0x66>
    6c74:	f385 8811 	msr	BASEPRI, r5
    6c78:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    6c7c:	bd70      	pop	{r4, r5, r6, pc}
    6c7e:	4e09      	ldr	r6, [pc, #36]	; (6ca4 <z_reschedule+0x8c>)
    6c80:	23b9      	movs	r3, #185	; 0xb9
    6c82:	4632      	mov	r2, r6
    6c84:	4908      	ldr	r1, [pc, #32]	; (6ca8 <z_reschedule+0x90>)
    6c86:	4809      	ldr	r0, [pc, #36]	; (6cac <z_reschedule+0x94>)
    6c88:	f002 fb7f 	bl	938a <assert_print>
    6c8c:	4621      	mov	r1, r4
    6c8e:	4808      	ldr	r0, [pc, #32]	; (6cb0 <z_reschedule+0x98>)
    6c90:	f002 fb7b 	bl	938a <assert_print>
    6c94:	21b9      	movs	r1, #185	; 0xb9
    6c96:	4630      	mov	r0, r6
    6c98:	f002 fb70 	bl	937c <assert_post_action>
    6c9c:	e7ea      	b.n	6c74 <z_reschedule+0x5c>
    6c9e:	bf00      	nop
    6ca0:	20001278 	.word	0x20001278
    6ca4:	0000a9dc 	.word	0x0000a9dc
    6ca8:	0000aa0c 	.word	0x0000aa0c
    6cac:	0000a4cc 	.word	0x0000a4cc
    6cb0:	0000aa24 	.word	0x0000aa24

00006cb4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6cb4:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    6cb6:	2400      	movs	r4, #0
	__asm__ volatile(
    6cb8:	f04f 0320 	mov.w	r3, #32
    6cbc:	f3ef 8511 	mrs	r5, BASEPRI
    6cc0:	f383 8812 	msr	BASEPRI_MAX, r3
    6cc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cc8:	482f      	ldr	r0, [pc, #188]	; (6d88 <k_sched_lock+0xd4>)
    6cca:	f7ff f8f7 	bl	5ebc <z_spin_lock_valid>
    6cce:	b118      	cbz	r0, 6cd8 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    6cd0:	482d      	ldr	r0, [pc, #180]	; (6d88 <k_sched_lock+0xd4>)
    6cd2:	f7ff f913 	bl	5efc <z_spin_lock_set_owner>
	return k;
    6cd6:	e022      	b.n	6d1e <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cd8:	4e2c      	ldr	r6, [pc, #176]	; (6d8c <k_sched_lock+0xd8>)
    6cda:	238e      	movs	r3, #142	; 0x8e
    6cdc:	4632      	mov	r2, r6
    6cde:	492c      	ldr	r1, [pc, #176]	; (6d90 <k_sched_lock+0xdc>)
    6ce0:	482c      	ldr	r0, [pc, #176]	; (6d94 <k_sched_lock+0xe0>)
    6ce2:	f002 fb52 	bl	938a <assert_print>
    6ce6:	4928      	ldr	r1, [pc, #160]	; (6d88 <k_sched_lock+0xd4>)
    6ce8:	482b      	ldr	r0, [pc, #172]	; (6d98 <k_sched_lock+0xe4>)
    6cea:	f002 fb4e 	bl	938a <assert_print>
    6cee:	218e      	movs	r1, #142	; 0x8e
    6cf0:	4630      	mov	r0, r6
    6cf2:	f002 fb43 	bl	937c <assert_post_action>
    6cf6:	e7eb      	b.n	6cd0 <k_sched_lock+0x1c>
    6cf8:	4b28      	ldr	r3, [pc, #160]	; (6d9c <k_sched_lock+0xe8>)
    6cfa:	689b      	ldr	r3, [r3, #8]
    6cfc:	7bdb      	ldrb	r3, [r3, #15]
    6cfe:	2b01      	cmp	r3, #1
    6d00:	d022      	beq.n	6d48 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    6d02:	4b26      	ldr	r3, [pc, #152]	; (6d9c <k_sched_lock+0xe8>)
    6d04:	689a      	ldr	r2, [r3, #8]
    6d06:	7bd3      	ldrb	r3, [r2, #15]
    6d08:	3b01      	subs	r3, #1
    6d0a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d0c:	481e      	ldr	r0, [pc, #120]	; (6d88 <k_sched_lock+0xd4>)
    6d0e:	f7ff f8e5 	bl	5edc <z_spin_unlock_valid>
    6d12:	b340      	cbz	r0, 6d66 <k_sched_lock+0xb2>
	__asm__ volatile(
    6d14:	f385 8811 	msr	BASEPRI, r5
    6d18:	f3bf 8f6f 	isb	sy
    6d1c:	2401      	movs	r4, #1
    6d1e:	2c00      	cmp	r4, #0
    6d20:	d131      	bne.n	6d86 <k_sched_lock+0xd2>
    6d22:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6d26:	2b00      	cmp	r3, #0
    6d28:	d0e6      	beq.n	6cf8 <k_sched_lock+0x44>
    6d2a:	4c1d      	ldr	r4, [pc, #116]	; (6da0 <k_sched_lock+0xec>)
    6d2c:	23fd      	movs	r3, #253	; 0xfd
    6d2e:	4622      	mov	r2, r4
    6d30:	491c      	ldr	r1, [pc, #112]	; (6da4 <k_sched_lock+0xf0>)
    6d32:	4818      	ldr	r0, [pc, #96]	; (6d94 <k_sched_lock+0xe0>)
    6d34:	f002 fb29 	bl	938a <assert_print>
    6d38:	481b      	ldr	r0, [pc, #108]	; (6da8 <k_sched_lock+0xf4>)
    6d3a:	f002 fb26 	bl	938a <assert_print>
    6d3e:	21fd      	movs	r1, #253	; 0xfd
    6d40:	4620      	mov	r0, r4
    6d42:	f002 fb1b 	bl	937c <assert_post_action>
    6d46:	e7d7      	b.n	6cf8 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6d48:	4c15      	ldr	r4, [pc, #84]	; (6da0 <k_sched_lock+0xec>)
    6d4a:	23fe      	movs	r3, #254	; 0xfe
    6d4c:	4622      	mov	r2, r4
    6d4e:	4917      	ldr	r1, [pc, #92]	; (6dac <k_sched_lock+0xf8>)
    6d50:	4810      	ldr	r0, [pc, #64]	; (6d94 <k_sched_lock+0xe0>)
    6d52:	f002 fb1a 	bl	938a <assert_print>
    6d56:	4814      	ldr	r0, [pc, #80]	; (6da8 <k_sched_lock+0xf4>)
    6d58:	f002 fb17 	bl	938a <assert_print>
    6d5c:	21fe      	movs	r1, #254	; 0xfe
    6d5e:	4620      	mov	r0, r4
    6d60:	f002 fb0c 	bl	937c <assert_post_action>
    6d64:	e7cd      	b.n	6d02 <k_sched_lock+0x4e>
    6d66:	4c09      	ldr	r4, [pc, #36]	; (6d8c <k_sched_lock+0xd8>)
    6d68:	23b9      	movs	r3, #185	; 0xb9
    6d6a:	4622      	mov	r2, r4
    6d6c:	4910      	ldr	r1, [pc, #64]	; (6db0 <k_sched_lock+0xfc>)
    6d6e:	4809      	ldr	r0, [pc, #36]	; (6d94 <k_sched_lock+0xe0>)
    6d70:	f002 fb0b 	bl	938a <assert_print>
    6d74:	4904      	ldr	r1, [pc, #16]	; (6d88 <k_sched_lock+0xd4>)
    6d76:	480f      	ldr	r0, [pc, #60]	; (6db4 <k_sched_lock+0x100>)
    6d78:	f002 fb07 	bl	938a <assert_print>
    6d7c:	21b9      	movs	r1, #185	; 0xb9
    6d7e:	4620      	mov	r0, r4
    6d80:	f002 fafc 	bl	937c <assert_post_action>
    6d84:	e7c6      	b.n	6d14 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6d86:	bd70      	pop	{r4, r5, r6, pc}
    6d88:	200012b4 	.word	0x200012b4
    6d8c:	0000a9dc 	.word	0x0000a9dc
    6d90:	0000aa3c 	.word	0x0000aa3c
    6d94:	0000a4cc 	.word	0x0000a4cc
    6d98:	0000aa54 	.word	0x0000aa54
    6d9c:	20001278 	.word	0x20001278
    6da0:	0000b74c 	.word	0x0000b74c
    6da4:	0000b6f8 	.word	0x0000b6f8
    6da8:	0000b778 	.word	0x0000b778
    6dac:	0000b77c 	.word	0x0000b77c
    6db0:	0000aa0c 	.word	0x0000aa0c
    6db4:	0000aa24 	.word	0x0000aa24

00006db8 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6dbc:	4b0c      	ldr	r3, [pc, #48]	; (6df0 <z_priq_dumb_remove+0x38>)
    6dbe:	4299      	cmp	r1, r3
    6dc0:	d007      	beq.n	6dd2 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6dc2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6dc4:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    6dc6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6dc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6dca:	2300      	movs	r3, #0
    6dcc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6dce:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6dd0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6dd2:	4d08      	ldr	r5, [pc, #32]	; (6df4 <z_priq_dumb_remove+0x3c>)
    6dd4:	f240 433d 	movw	r3, #1085	; 0x43d
    6dd8:	462a      	mov	r2, r5
    6dda:	4907      	ldr	r1, [pc, #28]	; (6df8 <z_priq_dumb_remove+0x40>)
    6ddc:	4807      	ldr	r0, [pc, #28]	; (6dfc <z_priq_dumb_remove+0x44>)
    6dde:	f002 fad4 	bl	938a <assert_print>
    6de2:	f240 413d 	movw	r1, #1085	; 0x43d
    6de6:	4628      	mov	r0, r5
    6de8:	f002 fac8 	bl	937c <assert_post_action>
    6dec:	e7e9      	b.n	6dc2 <z_priq_dumb_remove+0xa>
    6dee:	bf00      	nop
    6df0:	20000650 	.word	0x20000650
    6df4:	0000b820 	.word	0x0000b820
    6df8:	0000b85c 	.word	0x0000b85c
    6dfc:	0000a4cc 	.word	0x0000a4cc

00006e00 <z_unpend_thread>:
{
    6e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e02:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6e04:	2500      	movs	r5, #0
	__asm__ volatile(
    6e06:	f04f 0320 	mov.w	r3, #32
    6e0a:	f3ef 8611 	mrs	r6, BASEPRI
    6e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e16:	4822      	ldr	r0, [pc, #136]	; (6ea0 <z_unpend_thread+0xa0>)
    6e18:	f7ff f850 	bl	5ebc <z_spin_lock_valid>
    6e1c:	b118      	cbz	r0, 6e26 <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
    6e1e:	4820      	ldr	r0, [pc, #128]	; (6ea0 <z_unpend_thread+0xa0>)
    6e20:	f7ff f86c 	bl	5efc <z_spin_lock_set_owner>
	return k;
    6e24:	e014      	b.n	6e50 <z_unpend_thread+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e26:	4f1f      	ldr	r7, [pc, #124]	; (6ea4 <z_unpend_thread+0xa4>)
    6e28:	238e      	movs	r3, #142	; 0x8e
    6e2a:	463a      	mov	r2, r7
    6e2c:	491e      	ldr	r1, [pc, #120]	; (6ea8 <z_unpend_thread+0xa8>)
    6e2e:	481f      	ldr	r0, [pc, #124]	; (6eac <z_unpend_thread+0xac>)
    6e30:	f002 faab 	bl	938a <assert_print>
    6e34:	491a      	ldr	r1, [pc, #104]	; (6ea0 <z_unpend_thread+0xa0>)
    6e36:	481e      	ldr	r0, [pc, #120]	; (6eb0 <z_unpend_thread+0xb0>)
    6e38:	f002 faa7 	bl	938a <assert_print>
    6e3c:	218e      	movs	r1, #142	; 0x8e
    6e3e:	4638      	mov	r0, r7
    6e40:	f002 fa9c 	bl	937c <assert_post_action>
    6e44:	e7eb      	b.n	6e1e <z_unpend_thread+0x1e>
	__asm__ volatile(
    6e46:	f386 8811 	msr	BASEPRI, r6
    6e4a:	f3bf 8f6f 	isb	sy
    6e4e:	2501      	movs	r5, #1
    6e50:	bb05      	cbnz	r5, 6e94 <z_unpend_thread+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6e52:	4620      	mov	r0, r4
    6e54:	f7ff fe2c 	bl	6ab0 <pended_on_thread>
    6e58:	4621      	mov	r1, r4
    6e5a:	f7ff ffad 	bl	6db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6e5e:	7b63      	ldrb	r3, [r4, #13]
    6e60:	f023 0302 	bic.w	r3, r3, #2
    6e64:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6e66:	2300      	movs	r3, #0
    6e68:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e6a:	480d      	ldr	r0, [pc, #52]	; (6ea0 <z_unpend_thread+0xa0>)
    6e6c:	f7ff f836 	bl	5edc <z_spin_unlock_valid>
    6e70:	2800      	cmp	r0, #0
    6e72:	d1e8      	bne.n	6e46 <z_unpend_thread+0x46>
    6e74:	4d0b      	ldr	r5, [pc, #44]	; (6ea4 <z_unpend_thread+0xa4>)
    6e76:	23b9      	movs	r3, #185	; 0xb9
    6e78:	462a      	mov	r2, r5
    6e7a:	490e      	ldr	r1, [pc, #56]	; (6eb4 <z_unpend_thread+0xb4>)
    6e7c:	480b      	ldr	r0, [pc, #44]	; (6eac <z_unpend_thread+0xac>)
    6e7e:	f002 fa84 	bl	938a <assert_print>
    6e82:	4907      	ldr	r1, [pc, #28]	; (6ea0 <z_unpend_thread+0xa0>)
    6e84:	480c      	ldr	r0, [pc, #48]	; (6eb8 <z_unpend_thread+0xb8>)
    6e86:	f002 fa80 	bl	938a <assert_print>
    6e8a:	21b9      	movs	r1, #185	; 0xb9
    6e8c:	4628      	mov	r0, r5
    6e8e:	f002 fa75 	bl	937c <assert_post_action>
    6e92:	e7d8      	b.n	6e46 <z_unpend_thread+0x46>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6e94:	f104 0018 	add.w	r0, r4, #24
    6e98:	f001 f9ee 	bl	8278 <z_abort_timeout>
}
    6e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e9e:	bf00      	nop
    6ea0:	200012b4 	.word	0x200012b4
    6ea4:	0000a9dc 	.word	0x0000a9dc
    6ea8:	0000aa3c 	.word	0x0000aa3c
    6eac:	0000a4cc 	.word	0x0000a4cc
    6eb0:	0000aa54 	.word	0x0000aa54
    6eb4:	0000aa0c 	.word	0x0000aa0c
    6eb8:	0000aa24 	.word	0x0000aa24

00006ebc <update_cache>:
{
    6ebc:	b538      	push	{r3, r4, r5, lr}
    6ebe:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6ec0:	4819      	ldr	r0, [pc, #100]	; (6f28 <update_cache+0x6c>)
    6ec2:	f003 f8c6 	bl	a052 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6ec6:	4605      	mov	r5, r0
    6ec8:	b188      	cbz	r0, 6eee <update_cache+0x32>
	if (preempt_ok != 0) {
    6eca:	bb14      	cbnz	r4, 6f12 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    6ecc:	4b17      	ldr	r3, [pc, #92]	; (6f2c <update_cache+0x70>)
    6ece:	689b      	ldr	r3, [r3, #8]
    6ed0:	b183      	cbz	r3, 6ef4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    6ed2:	4b16      	ldr	r3, [pc, #88]	; (6f2c <update_cache+0x70>)
    6ed4:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6ed6:	7b5a      	ldrb	r2, [r3, #13]
    6ed8:	f012 0f1f 	tst.w	r2, #31
    6edc:	d119      	bne.n	6f12 <update_cache+0x56>
	return node->next != NULL;
    6ede:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6ee0:	b9ba      	cbnz	r2, 6f12 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6ee2:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    6ee4:	2a7f      	cmp	r2, #127	; 0x7f
    6ee6:	d914      	bls.n	6f12 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    6ee8:	4a10      	ldr	r2, [pc, #64]	; (6f2c <update_cache+0x70>)
    6eea:	61d3      	str	r3, [r2, #28]
    6eec:	e01a      	b.n	6f24 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6eee:	4b0f      	ldr	r3, [pc, #60]	; (6f2c <update_cache+0x70>)
    6ef0:	68dd      	ldr	r5, [r3, #12]
    6ef2:	e7ea      	b.n	6eca <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    6ef4:	4c0e      	ldr	r4, [pc, #56]	; (6f30 <update_cache+0x74>)
    6ef6:	2389      	movs	r3, #137	; 0x89
    6ef8:	4622      	mov	r2, r4
    6efa:	490e      	ldr	r1, [pc, #56]	; (6f34 <update_cache+0x78>)
    6efc:	480e      	ldr	r0, [pc, #56]	; (6f38 <update_cache+0x7c>)
    6efe:	f002 fa44 	bl	938a <assert_print>
    6f02:	480e      	ldr	r0, [pc, #56]	; (6f3c <update_cache+0x80>)
    6f04:	f002 fa41 	bl	938a <assert_print>
    6f08:	2189      	movs	r1, #137	; 0x89
    6f0a:	4620      	mov	r0, r4
    6f0c:	f002 fa36 	bl	937c <assert_post_action>
    6f10:	e7df      	b.n	6ed2 <update_cache+0x16>
		if (thread != _current) {
    6f12:	4b06      	ldr	r3, [pc, #24]	; (6f2c <update_cache+0x70>)
    6f14:	689b      	ldr	r3, [r3, #8]
    6f16:	42ab      	cmp	r3, r5
    6f18:	d002      	beq.n	6f20 <update_cache+0x64>
			z_reset_time_slice(thread);
    6f1a:	4628      	mov	r0, r5
    6f1c:	f7ff fdf2 	bl	6b04 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6f20:	4b02      	ldr	r3, [pc, #8]	; (6f2c <update_cache+0x70>)
    6f22:	61dd      	str	r5, [r3, #28]
}
    6f24:	bd38      	pop	{r3, r4, r5, pc}
    6f26:	bf00      	nop
    6f28:	20001298 	.word	0x20001298
    6f2c:	20001278 	.word	0x20001278
    6f30:	0000b820 	.word	0x0000b820
    6f34:	0000b880 	.word	0x0000b880
    6f38:	0000a4cc 	.word	0x0000a4cc
    6f3c:	0000b778 	.word	0x0000b778

00006f40 <move_thread_to_end_of_prio_q>:
{
    6f40:	b538      	push	{r3, r4, r5, lr}
    6f42:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    6f44:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6f46:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	db2b      	blt.n	6fa6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    6f4e:	7b6b      	ldrb	r3, [r5, #13]
    6f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6f54:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6f56:	4b22      	ldr	r3, [pc, #136]	; (6fe0 <move_thread_to_end_of_prio_q+0xa0>)
    6f58:	429d      	cmp	r5, r3
    6f5a:	d02c      	beq.n	6fb6 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    6f5c:	4b21      	ldr	r3, [pc, #132]	; (6fe4 <move_thread_to_end_of_prio_q+0xa4>)
    6f5e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f62:	429c      	cmp	r4, r3
    6f64:	d039      	beq.n	6fda <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f66:	b16c      	cbz	r4, 6f84 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6f68:	4621      	mov	r1, r4
    6f6a:	4628      	mov	r0, r5
    6f6c:	f003 f852 	bl	a014 <z_sched_prio_cmp>
    6f70:	2800      	cmp	r0, #0
    6f72:	dc2c      	bgt.n	6fce <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6f74:	b134      	cbz	r4, 6f84 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    6f76:	4b1b      	ldr	r3, [pc, #108]	; (6fe4 <move_thread_to_end_of_prio_q+0xa4>)
    6f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f7a:	429c      	cmp	r4, r3
    6f7c:	d002      	beq.n	6f84 <move_thread_to_end_of_prio_q+0x44>
    6f7e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f80:	2c00      	cmp	r4, #0
    6f82:	d1f0      	bne.n	6f66 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    6f84:	4b17      	ldr	r3, [pc, #92]	; (6fe4 <move_thread_to_end_of_prio_q+0xa4>)
    6f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6f88:	f103 0120 	add.w	r1, r3, #32
    6f8c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6f8e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6f90:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6f92:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    6f94:	4b13      	ldr	r3, [pc, #76]	; (6fe4 <move_thread_to_end_of_prio_q+0xa4>)
    6f96:	6898      	ldr	r0, [r3, #8]
    6f98:	42a8      	cmp	r0, r5
    6f9a:	bf14      	ite	ne
    6f9c:	2000      	movne	r0, #0
    6f9e:	2001      	moveq	r0, #1
    6fa0:	f7ff ff8c 	bl	6ebc <update_cache>
}
    6fa4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6faa:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6fac:	4601      	mov	r1, r0
    6fae:	480e      	ldr	r0, [pc, #56]	; (6fe8 <move_thread_to_end_of_prio_q+0xa8>)
    6fb0:	f7ff ff02 	bl	6db8 <z_priq_dumb_remove>
}
    6fb4:	e7cb      	b.n	6f4e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6fb6:	4c0d      	ldr	r4, [pc, #52]	; (6fec <move_thread_to_end_of_prio_q+0xac>)
    6fb8:	23ba      	movs	r3, #186	; 0xba
    6fba:	4622      	mov	r2, r4
    6fbc:	490c      	ldr	r1, [pc, #48]	; (6ff0 <move_thread_to_end_of_prio_q+0xb0>)
    6fbe:	480d      	ldr	r0, [pc, #52]	; (6ff4 <move_thread_to_end_of_prio_q+0xb4>)
    6fc0:	f002 f9e3 	bl	938a <assert_print>
    6fc4:	21ba      	movs	r1, #186	; 0xba
    6fc6:	4620      	mov	r0, r4
    6fc8:	f002 f9d8 	bl	937c <assert_post_action>
    6fcc:	e7c6      	b.n	6f5c <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    6fce:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6fd0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6fd2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6fd4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6fd6:	6065      	str	r5, [r4, #4]
}
    6fd8:	e7dc      	b.n	6f94 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fda:	2400      	movs	r4, #0
    6fdc:	e7c3      	b.n	6f66 <move_thread_to_end_of_prio_q+0x26>
    6fde:	bf00      	nop
    6fe0:	20000650 	.word	0x20000650
    6fe4:	20001278 	.word	0x20001278
    6fe8:	20001298 	.word	0x20001298
    6fec:	0000b820 	.word	0x0000b820
    6ff0:	0000b85c 	.word	0x0000b85c
    6ff4:	0000a4cc 	.word	0x0000a4cc

00006ff8 <slice_expired_locked>:
{
    6ff8:	b538      	push	{r3, r4, r5, lr}
    6ffa:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    6ffc:	4b07      	ldr	r3, [pc, #28]	; (701c <slice_expired_locked+0x24>)
    6ffe:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7000:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    7002:	f013 0f1f 	tst.w	r3, #31
    7006:	d004      	beq.n	7012 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    7008:	4628      	mov	r0, r5
    700a:	f7ff fd7b 	bl	6b04 <z_reset_time_slice>
}
    700e:	4620      	mov	r0, r4
    7010:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    7012:	4628      	mov	r0, r5
    7014:	f7ff ff94 	bl	6f40 <move_thread_to_end_of_prio_q>
    7018:	e7f6      	b.n	7008 <slice_expired_locked+0x10>
    701a:	bf00      	nop
    701c:	20001278 	.word	0x20001278

00007020 <z_time_slice>:
{
    7020:	b570      	push	{r4, r5, r6, lr}
    7022:	4604      	mov	r4, r0
	__asm__ volatile(
    7024:	f04f 0320 	mov.w	r3, #32
    7028:	f3ef 8511 	mrs	r5, BASEPRI
    702c:	f383 8812 	msr	BASEPRI_MAX, r3
    7030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7034:	4842      	ldr	r0, [pc, #264]	; (7140 <z_time_slice+0x120>)
    7036:	f7fe ff41 	bl	5ebc <z_spin_lock_valid>
    703a:	b310      	cbz	r0, 7082 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    703c:	4840      	ldr	r0, [pc, #256]	; (7140 <z_time_slice+0x120>)
    703e:	f7fe ff5d 	bl	5efc <z_spin_lock_set_owner>
	return k;
    7042:	462b      	mov	r3, r5
	if (pending_current == _current) {
    7044:	4a3f      	ldr	r2, [pc, #252]	; (7144 <z_time_slice+0x124>)
    7046:	6892      	ldr	r2, [r2, #8]
    7048:	493f      	ldr	r1, [pc, #252]	; (7148 <z_time_slice+0x128>)
    704a:	6809      	ldr	r1, [r1, #0]
    704c:	428a      	cmp	r2, r1
    704e:	d028      	beq.n	70a2 <z_time_slice+0x82>
	pending_current = NULL;
    7050:	493d      	ldr	r1, [pc, #244]	; (7148 <z_time_slice+0x128>)
    7052:	2000      	movs	r0, #0
    7054:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    7056:	493d      	ldr	r1, [pc, #244]	; (714c <z_time_slice+0x12c>)
    7058:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    705a:	2900      	cmp	r1, #0
    705c:	d052      	beq.n	7104 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    705e:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    7060:	297f      	cmp	r1, #127	; 0x7f
    7062:	d83a      	bhi.n	70da <z_time_slice+0xba>
    7064:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    7066:	f011 0f1f 	tst.w	r1, #31
    706a:	d140      	bne.n	70ee <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    706c:	f992 000e 	ldrsb.w	r0, [r2, #14]
    7070:	4937      	ldr	r1, [pc, #220]	; (7150 <z_time_slice+0x130>)
    7072:	6809      	ldr	r1, [r1, #0]
    7074:	4288      	cmp	r0, r1
    7076:	db3c      	blt.n	70f2 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    7078:	4936      	ldr	r1, [pc, #216]	; (7154 <z_time_slice+0x134>)
    707a:	428a      	cmp	r2, r1
    707c:	d03b      	beq.n	70f6 <z_time_slice+0xd6>
    707e:	2201      	movs	r2, #1
    7080:	e02c      	b.n	70dc <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7082:	4e35      	ldr	r6, [pc, #212]	; (7158 <z_time_slice+0x138>)
    7084:	238e      	movs	r3, #142	; 0x8e
    7086:	4632      	mov	r2, r6
    7088:	4934      	ldr	r1, [pc, #208]	; (715c <z_time_slice+0x13c>)
    708a:	4835      	ldr	r0, [pc, #212]	; (7160 <z_time_slice+0x140>)
    708c:	f002 f97d 	bl	938a <assert_print>
    7090:	492b      	ldr	r1, [pc, #172]	; (7140 <z_time_slice+0x120>)
    7092:	4834      	ldr	r0, [pc, #208]	; (7164 <z_time_slice+0x144>)
    7094:	f002 f979 	bl	938a <assert_print>
    7098:	218e      	movs	r1, #142	; 0x8e
    709a:	4630      	mov	r0, r6
    709c:	f002 f96e 	bl	937c <assert_post_action>
    70a0:	e7cc      	b.n	703c <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    70a2:	4610      	mov	r0, r2
    70a4:	f7ff fd2e 	bl	6b04 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70a8:	4825      	ldr	r0, [pc, #148]	; (7140 <z_time_slice+0x120>)
    70aa:	f7fe ff17 	bl	5edc <z_spin_unlock_valid>
    70ae:	b120      	cbz	r0, 70ba <z_time_slice+0x9a>
	__asm__ volatile(
    70b0:	f385 8811 	msr	BASEPRI, r5
    70b4:	f3bf 8f6f 	isb	sy
		return;
    70b8:	e030      	b.n	711c <z_time_slice+0xfc>
    70ba:	4c27      	ldr	r4, [pc, #156]	; (7158 <z_time_slice+0x138>)
    70bc:	23b9      	movs	r3, #185	; 0xb9
    70be:	4622      	mov	r2, r4
    70c0:	4929      	ldr	r1, [pc, #164]	; (7168 <z_time_slice+0x148>)
    70c2:	4827      	ldr	r0, [pc, #156]	; (7160 <z_time_slice+0x140>)
    70c4:	f002 f961 	bl	938a <assert_print>
    70c8:	491d      	ldr	r1, [pc, #116]	; (7140 <z_time_slice+0x120>)
    70ca:	4828      	ldr	r0, [pc, #160]	; (716c <z_time_slice+0x14c>)
    70cc:	f002 f95d 	bl	938a <assert_print>
    70d0:	21b9      	movs	r1, #185	; 0xb9
    70d2:	4620      	mov	r0, r4
    70d4:	f002 f952 	bl	937c <assert_post_action>
    70d8:	e7ea      	b.n	70b0 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    70da:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    70dc:	b192      	cbz	r2, 7104 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    70de:	4a19      	ldr	r2, [pc, #100]	; (7144 <z_time_slice+0x124>)
    70e0:	6910      	ldr	r0, [r2, #16]
    70e2:	42a0      	cmp	r0, r4
    70e4:	dd09      	ble.n	70fa <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    70e6:	1b00      	subs	r0, r0, r4
    70e8:	4a16      	ldr	r2, [pc, #88]	; (7144 <z_time_slice+0x124>)
    70ea:	6110      	str	r0, [r2, #16]
    70ec:	e00d      	b.n	710a <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    70ee:	2200      	movs	r2, #0
    70f0:	e7f4      	b.n	70dc <z_time_slice+0xbc>
    70f2:	2200      	movs	r2, #0
    70f4:	e7f2      	b.n	70dc <z_time_slice+0xbc>
    70f6:	2200      	movs	r2, #0
    70f8:	e7f0      	b.n	70dc <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    70fa:	4628      	mov	r0, r5
    70fc:	f7ff ff7c 	bl	6ff8 <slice_expired_locked>
    7100:	4603      	mov	r3, r0
    7102:	e002      	b.n	710a <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    7104:	4a0f      	ldr	r2, [pc, #60]	; (7144 <z_time_slice+0x124>)
    7106:	2100      	movs	r1, #0
    7108:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    710a:	461c      	mov	r4, r3
    710c:	480c      	ldr	r0, [pc, #48]	; (7140 <z_time_slice+0x120>)
    710e:	f7fe fee5 	bl	5edc <z_spin_unlock_valid>
    7112:	b120      	cbz	r0, 711e <z_time_slice+0xfe>
    7114:	f384 8811 	msr	BASEPRI, r4
    7118:	f3bf 8f6f 	isb	sy
}
    711c:	bd70      	pop	{r4, r5, r6, pc}
    711e:	4d0e      	ldr	r5, [pc, #56]	; (7158 <z_time_slice+0x138>)
    7120:	23b9      	movs	r3, #185	; 0xb9
    7122:	462a      	mov	r2, r5
    7124:	4910      	ldr	r1, [pc, #64]	; (7168 <z_time_slice+0x148>)
    7126:	480e      	ldr	r0, [pc, #56]	; (7160 <z_time_slice+0x140>)
    7128:	f002 f92f 	bl	938a <assert_print>
    712c:	4904      	ldr	r1, [pc, #16]	; (7140 <z_time_slice+0x120>)
    712e:	480f      	ldr	r0, [pc, #60]	; (716c <z_time_slice+0x14c>)
    7130:	f002 f92b 	bl	938a <assert_print>
    7134:	21b9      	movs	r1, #185	; 0xb9
    7136:	4628      	mov	r0, r5
    7138:	f002 f920 	bl	937c <assert_post_action>
    713c:	e7ea      	b.n	7114 <z_time_slice+0xf4>
    713e:	bf00      	nop
    7140:	200012b4 	.word	0x200012b4
    7144:	20001278 	.word	0x20001278
    7148:	200012b0 	.word	0x200012b0
    714c:	200012bc 	.word	0x200012bc
    7150:	200012b8 	.word	0x200012b8
    7154:	20000650 	.word	0x20000650
    7158:	0000a9dc 	.word	0x0000a9dc
    715c:	0000aa3c 	.word	0x0000aa3c
    7160:	0000a4cc 	.word	0x0000a4cc
    7164:	0000aa54 	.word	0x0000aa54
    7168:	0000aa0c 	.word	0x0000aa0c
    716c:	0000aa24 	.word	0x0000aa24

00007170 <ready_thread>:
{
    7170:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    7172:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7174:	f990 200d 	ldrsb.w	r2, [r0, #13]
    7178:	2a00      	cmp	r2, #0
    717a:	db30      	blt.n	71de <ready_thread+0x6e>
    717c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    717e:	f013 0f1f 	tst.w	r3, #31
    7182:	d105      	bne.n	7190 <ready_thread+0x20>
	return node->next != NULL;
    7184:	6982      	ldr	r2, [r0, #24]
    7186:	b10a      	cbz	r2, 718c <ready_thread+0x1c>
    7188:	2200      	movs	r2, #0
    718a:	e002      	b.n	7192 <ready_thread+0x22>
    718c:	2201      	movs	r2, #1
    718e:	e000      	b.n	7192 <ready_thread+0x22>
    7190:	2200      	movs	r2, #0
    7192:	b322      	cbz	r2, 71de <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    7194:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7198:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    719a:	4b1b      	ldr	r3, [pc, #108]	; (7208 <ready_thread+0x98>)
    719c:	429c      	cmp	r4, r3
    719e:	d01f      	beq.n	71e0 <ready_thread+0x70>
	return list->head == list;
    71a0:	4b1a      	ldr	r3, [pc, #104]	; (720c <ready_thread+0x9c>)
    71a2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    71a6:	429d      	cmp	r5, r3
    71a8:	d02c      	beq.n	7204 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    71aa:	b16d      	cbz	r5, 71c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    71ac:	4629      	mov	r1, r5
    71ae:	4620      	mov	r0, r4
    71b0:	f002 ff30 	bl	a014 <z_sched_prio_cmp>
    71b4:	2800      	cmp	r0, #0
    71b6:	dc1f      	bgt.n	71f8 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    71b8:	b135      	cbz	r5, 71c8 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    71ba:	4b14      	ldr	r3, [pc, #80]	; (720c <ready_thread+0x9c>)
    71bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71be:	429d      	cmp	r5, r3
    71c0:	d002      	beq.n	71c8 <ready_thread+0x58>
    71c2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    71c4:	2d00      	cmp	r5, #0
    71c6:	d1f0      	bne.n	71aa <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    71c8:	4b10      	ldr	r3, [pc, #64]	; (720c <ready_thread+0x9c>)
    71ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    71cc:	f103 0120 	add.w	r1, r3, #32
    71d0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    71d2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    71d4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    71d6:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    71d8:	2000      	movs	r0, #0
    71da:	f7ff fe6f 	bl	6ebc <update_cache>
}
    71de:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    71e0:	4d0b      	ldr	r5, [pc, #44]	; (7210 <ready_thread+0xa0>)
    71e2:	23ba      	movs	r3, #186	; 0xba
    71e4:	462a      	mov	r2, r5
    71e6:	490b      	ldr	r1, [pc, #44]	; (7214 <ready_thread+0xa4>)
    71e8:	480b      	ldr	r0, [pc, #44]	; (7218 <ready_thread+0xa8>)
    71ea:	f002 f8ce 	bl	938a <assert_print>
    71ee:	21ba      	movs	r1, #186	; 0xba
    71f0:	4628      	mov	r0, r5
    71f2:	f002 f8c3 	bl	937c <assert_post_action>
    71f6:	e7d3      	b.n	71a0 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    71f8:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    71fa:	6063      	str	r3, [r4, #4]
	node->next = successor;
    71fc:	6025      	str	r5, [r4, #0]
	prev->next = node;
    71fe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7200:	606c      	str	r4, [r5, #4]
}
    7202:	e7e9      	b.n	71d8 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7204:	2500      	movs	r5, #0
    7206:	e7d0      	b.n	71aa <ready_thread+0x3a>
    7208:	20000650 	.word	0x20000650
    720c:	20001278 	.word	0x20001278
    7210:	0000b820 	.word	0x0000b820
    7214:	0000b85c 	.word	0x0000b85c
    7218:	0000a4cc 	.word	0x0000a4cc

0000721c <z_ready_thread>:
{
    721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    721e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7220:	2400      	movs	r4, #0
	__asm__ volatile(
    7222:	f04f 0320 	mov.w	r3, #32
    7226:	f3ef 8611 	mrs	r6, BASEPRI
    722a:	f383 8812 	msr	BASEPRI_MAX, r3
    722e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7232:	481e      	ldr	r0, [pc, #120]	; (72ac <z_ready_thread+0x90>)
    7234:	f7fe fe42 	bl	5ebc <z_spin_lock_valid>
    7238:	b118      	cbz	r0, 7242 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    723a:	481c      	ldr	r0, [pc, #112]	; (72ac <z_ready_thread+0x90>)
    723c:	f7fe fe5e 	bl	5efc <z_spin_lock_set_owner>
	return k;
    7240:	e018      	b.n	7274 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7242:	4f1b      	ldr	r7, [pc, #108]	; (72b0 <z_ready_thread+0x94>)
    7244:	238e      	movs	r3, #142	; 0x8e
    7246:	463a      	mov	r2, r7
    7248:	491a      	ldr	r1, [pc, #104]	; (72b4 <z_ready_thread+0x98>)
    724a:	481b      	ldr	r0, [pc, #108]	; (72b8 <z_ready_thread+0x9c>)
    724c:	f002 f89d 	bl	938a <assert_print>
    7250:	4916      	ldr	r1, [pc, #88]	; (72ac <z_ready_thread+0x90>)
    7252:	481a      	ldr	r0, [pc, #104]	; (72bc <z_ready_thread+0xa0>)
    7254:	f002 f899 	bl	938a <assert_print>
    7258:	218e      	movs	r1, #142	; 0x8e
    725a:	4638      	mov	r0, r7
    725c:	f002 f88e 	bl	937c <assert_post_action>
    7260:	e7eb      	b.n	723a <z_ready_thread+0x1e>
			ready_thread(thread);
    7262:	4628      	mov	r0, r5
    7264:	f7ff ff84 	bl	7170 <ready_thread>
    7268:	e00a      	b.n	7280 <z_ready_thread+0x64>
	__asm__ volatile(
    726a:	f386 8811 	msr	BASEPRI, r6
    726e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7272:	2401      	movs	r4, #1
    7274:	b9cc      	cbnz	r4, 72aa <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    7276:	4628      	mov	r0, r5
    7278:	f002 feca 	bl	a010 <thread_active_elsewhere>
    727c:	2800      	cmp	r0, #0
    727e:	d0f0      	beq.n	7262 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7280:	480a      	ldr	r0, [pc, #40]	; (72ac <z_ready_thread+0x90>)
    7282:	f7fe fe2b 	bl	5edc <z_spin_unlock_valid>
    7286:	2800      	cmp	r0, #0
    7288:	d1ef      	bne.n	726a <z_ready_thread+0x4e>
    728a:	4c09      	ldr	r4, [pc, #36]	; (72b0 <z_ready_thread+0x94>)
    728c:	23b9      	movs	r3, #185	; 0xb9
    728e:	4622      	mov	r2, r4
    7290:	490b      	ldr	r1, [pc, #44]	; (72c0 <z_ready_thread+0xa4>)
    7292:	4809      	ldr	r0, [pc, #36]	; (72b8 <z_ready_thread+0x9c>)
    7294:	f002 f879 	bl	938a <assert_print>
    7298:	4904      	ldr	r1, [pc, #16]	; (72ac <z_ready_thread+0x90>)
    729a:	480a      	ldr	r0, [pc, #40]	; (72c4 <z_ready_thread+0xa8>)
    729c:	f002 f875 	bl	938a <assert_print>
    72a0:	21b9      	movs	r1, #185	; 0xb9
    72a2:	4620      	mov	r0, r4
    72a4:	f002 f86a 	bl	937c <assert_post_action>
    72a8:	e7df      	b.n	726a <z_ready_thread+0x4e>
}
    72aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72ac:	200012b4 	.word	0x200012b4
    72b0:	0000a9dc 	.word	0x0000a9dc
    72b4:	0000aa3c 	.word	0x0000aa3c
    72b8:	0000a4cc 	.word	0x0000a4cc
    72bc:	0000aa54 	.word	0x0000aa54
    72c0:	0000aa0c 	.word	0x0000aa0c
    72c4:	0000aa24 	.word	0x0000aa24

000072c8 <z_sched_start>:
{
    72c8:	b570      	push	{r4, r5, r6, lr}
    72ca:	4604      	mov	r4, r0
	__asm__ volatile(
    72cc:	f04f 0320 	mov.w	r3, #32
    72d0:	f3ef 8511 	mrs	r5, BASEPRI
    72d4:	f383 8812 	msr	BASEPRI_MAX, r3
    72d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72dc:	481f      	ldr	r0, [pc, #124]	; (735c <z_sched_start+0x94>)
    72de:	f7fe fded 	bl	5ebc <z_spin_lock_valid>
    72e2:	b188      	cbz	r0, 7308 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    72e4:	481d      	ldr	r0, [pc, #116]	; (735c <z_sched_start+0x94>)
    72e6:	f7fe fe09 	bl	5efc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    72ea:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    72ec:	f013 0f04 	tst.w	r3, #4
    72f0:	d01a      	beq.n	7328 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    72f2:	f023 0304 	bic.w	r3, r3, #4
    72f6:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    72f8:	4620      	mov	r0, r4
    72fa:	f7ff ff39 	bl	7170 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    72fe:	4629      	mov	r1, r5
    7300:	4816      	ldr	r0, [pc, #88]	; (735c <z_sched_start+0x94>)
    7302:	f7ff fc89 	bl	6c18 <z_reschedule>
}
    7306:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7308:	4e15      	ldr	r6, [pc, #84]	; (7360 <z_sched_start+0x98>)
    730a:	238e      	movs	r3, #142	; 0x8e
    730c:	4632      	mov	r2, r6
    730e:	4915      	ldr	r1, [pc, #84]	; (7364 <z_sched_start+0x9c>)
    7310:	4815      	ldr	r0, [pc, #84]	; (7368 <z_sched_start+0xa0>)
    7312:	f002 f83a 	bl	938a <assert_print>
    7316:	4911      	ldr	r1, [pc, #68]	; (735c <z_sched_start+0x94>)
    7318:	4814      	ldr	r0, [pc, #80]	; (736c <z_sched_start+0xa4>)
    731a:	f002 f836 	bl	938a <assert_print>
    731e:	218e      	movs	r1, #142	; 0x8e
    7320:	4630      	mov	r0, r6
    7322:	f002 f82b 	bl	937c <assert_post_action>
    7326:	e7dd      	b.n	72e4 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7328:	480c      	ldr	r0, [pc, #48]	; (735c <z_sched_start+0x94>)
    732a:	f7fe fdd7 	bl	5edc <z_spin_unlock_valid>
    732e:	b120      	cbz	r0, 733a <z_sched_start+0x72>
	__asm__ volatile(
    7330:	f385 8811 	msr	BASEPRI, r5
    7334:	f3bf 8f6f 	isb	sy
		return;
    7338:	e7e5      	b.n	7306 <z_sched_start+0x3e>
    733a:	4c09      	ldr	r4, [pc, #36]	; (7360 <z_sched_start+0x98>)
    733c:	23b9      	movs	r3, #185	; 0xb9
    733e:	4622      	mov	r2, r4
    7340:	490b      	ldr	r1, [pc, #44]	; (7370 <z_sched_start+0xa8>)
    7342:	4809      	ldr	r0, [pc, #36]	; (7368 <z_sched_start+0xa0>)
    7344:	f002 f821 	bl	938a <assert_print>
    7348:	4904      	ldr	r1, [pc, #16]	; (735c <z_sched_start+0x94>)
    734a:	480a      	ldr	r0, [pc, #40]	; (7374 <z_sched_start+0xac>)
    734c:	f002 f81d 	bl	938a <assert_print>
    7350:	21b9      	movs	r1, #185	; 0xb9
    7352:	4620      	mov	r0, r4
    7354:	f002 f812 	bl	937c <assert_post_action>
    7358:	e7ea      	b.n	7330 <z_sched_start+0x68>
    735a:	bf00      	nop
    735c:	200012b4 	.word	0x200012b4
    7360:	0000a9dc 	.word	0x0000a9dc
    7364:	0000aa3c 	.word	0x0000aa3c
    7368:	0000a4cc 	.word	0x0000a4cc
    736c:	0000aa54 	.word	0x0000aa54
    7370:	0000aa0c 	.word	0x0000aa0c
    7374:	0000aa24 	.word	0x0000aa24

00007378 <z_thread_timeout>:
{
    7378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    737c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    737e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    7382:	2500      	movs	r5, #0
	__asm__ volatile(
    7384:	f04f 0320 	mov.w	r3, #32
    7388:	f3ef 8711 	mrs	r7, BASEPRI
    738c:	f383 8812 	msr	BASEPRI_MAX, r3
    7390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7394:	482b      	ldr	r0, [pc, #172]	; (7444 <z_thread_timeout+0xcc>)
    7396:	f7fe fd91 	bl	5ebc <z_spin_lock_valid>
    739a:	b118      	cbz	r0, 73a4 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    739c:	4829      	ldr	r0, [pc, #164]	; (7444 <z_thread_timeout+0xcc>)
    739e:	f7fe fdad 	bl	5efc <z_spin_lock_set_owner>
	return k;
    73a2:	e026      	b.n	73f2 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73a4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 7448 <z_thread_timeout+0xd0>
    73a8:	238e      	movs	r3, #142	; 0x8e
    73aa:	4642      	mov	r2, r8
    73ac:	4927      	ldr	r1, [pc, #156]	; (744c <z_thread_timeout+0xd4>)
    73ae:	4828      	ldr	r0, [pc, #160]	; (7450 <z_thread_timeout+0xd8>)
    73b0:	f001 ffeb 	bl	938a <assert_print>
    73b4:	4923      	ldr	r1, [pc, #140]	; (7444 <z_thread_timeout+0xcc>)
    73b6:	4827      	ldr	r0, [pc, #156]	; (7454 <z_thread_timeout+0xdc>)
    73b8:	f001 ffe7 	bl	938a <assert_print>
    73bc:	218e      	movs	r1, #142	; 0x8e
    73be:	4640      	mov	r0, r8
    73c0:	f001 ffdc 	bl	937c <assert_post_action>
    73c4:	e7ea      	b.n	739c <z_thread_timeout+0x24>
    73c6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    73ca:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    73ce:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    73d2:	f023 0310 	bic.w	r3, r3, #16
    73d6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    73da:	4630      	mov	r0, r6
    73dc:	f7ff fec8 	bl	7170 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73e0:	4818      	ldr	r0, [pc, #96]	; (7444 <z_thread_timeout+0xcc>)
    73e2:	f7fe fd7b 	bl	5edc <z_spin_unlock_valid>
    73e6:	b1d8      	cbz	r0, 7420 <z_thread_timeout+0xa8>
	__asm__ volatile(
    73e8:	f387 8811 	msr	BASEPRI, r7
    73ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    73f0:	2501      	movs	r5, #1
    73f2:	bb2d      	cbnz	r5, 7440 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    73f4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    73f8:	f013 0f28 	tst.w	r3, #40	; 0x28
    73fc:	d1f0      	bne.n	73e0 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    73fe:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7402:	2b00      	cmp	r3, #0
    7404:	d0df      	beq.n	73c6 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7406:	4630      	mov	r0, r6
    7408:	f7ff fb52 	bl	6ab0 <pended_on_thread>
    740c:	4631      	mov	r1, r6
    740e:	f7ff fcd3 	bl	6db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7412:	7b73      	ldrb	r3, [r6, #13]
    7414:	f023 0302 	bic.w	r3, r3, #2
    7418:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    741a:	2300      	movs	r3, #0
    741c:	60b3      	str	r3, [r6, #8]
}
    741e:	e7d2      	b.n	73c6 <z_thread_timeout+0x4e>
    7420:	4d09      	ldr	r5, [pc, #36]	; (7448 <z_thread_timeout+0xd0>)
    7422:	23b9      	movs	r3, #185	; 0xb9
    7424:	462a      	mov	r2, r5
    7426:	490c      	ldr	r1, [pc, #48]	; (7458 <z_thread_timeout+0xe0>)
    7428:	4809      	ldr	r0, [pc, #36]	; (7450 <z_thread_timeout+0xd8>)
    742a:	f001 ffae 	bl	938a <assert_print>
    742e:	4905      	ldr	r1, [pc, #20]	; (7444 <z_thread_timeout+0xcc>)
    7430:	480a      	ldr	r0, [pc, #40]	; (745c <z_thread_timeout+0xe4>)
    7432:	f001 ffaa 	bl	938a <assert_print>
    7436:	21b9      	movs	r1, #185	; 0xb9
    7438:	4628      	mov	r0, r5
    743a:	f001 ff9f 	bl	937c <assert_post_action>
    743e:	e7d3      	b.n	73e8 <z_thread_timeout+0x70>
}
    7440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7444:	200012b4 	.word	0x200012b4
    7448:	0000a9dc 	.word	0x0000a9dc
    744c:	0000aa3c 	.word	0x0000aa3c
    7450:	0000a4cc 	.word	0x0000a4cc
    7454:	0000aa54 	.word	0x0000aa54
    7458:	0000aa0c 	.word	0x0000aa0c
    745c:	0000aa24 	.word	0x0000aa24

00007460 <unready_thread>:
{
    7460:	b510      	push	{r4, lr}
    7462:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    7464:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    7466:	f990 300d 	ldrsb.w	r3, [r0, #13]
    746a:	2b00      	cmp	r3, #0
    746c:	db08      	blt.n	7480 <unready_thread+0x20>
	update_cache(thread == _current);
    746e:	4b08      	ldr	r3, [pc, #32]	; (7490 <unready_thread+0x30>)
    7470:	6898      	ldr	r0, [r3, #8]
    7472:	42a0      	cmp	r0, r4
    7474:	bf14      	ite	ne
    7476:	2000      	movne	r0, #0
    7478:	2001      	moveq	r0, #1
    747a:	f7ff fd1f 	bl	6ebc <update_cache>
}
    747e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7484:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7486:	4601      	mov	r1, r0
    7488:	4802      	ldr	r0, [pc, #8]	; (7494 <unready_thread+0x34>)
    748a:	f7ff fc95 	bl	6db8 <z_priq_dumb_remove>
}
    748e:	e7ee      	b.n	746e <unready_thread+0xe>
    7490:	20001278 	.word	0x20001278
    7494:	20001298 	.word	0x20001298

00007498 <add_to_waitq_locked>:
{
    7498:	b570      	push	{r4, r5, r6, lr}
    749a:	4605      	mov	r5, r0
    749c:	460e      	mov	r6, r1
	unready_thread(thread);
    749e:	f7ff ffdf 	bl	7460 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    74a2:	7b6b      	ldrb	r3, [r5, #13]
    74a4:	f043 0302 	orr.w	r3, r3, #2
    74a8:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    74aa:	b1ce      	cbz	r6, 74e0 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    74ac:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    74ae:	4b17      	ldr	r3, [pc, #92]	; (750c <add_to_waitq_locked+0x74>)
    74b0:	429d      	cmp	r5, r3
    74b2:	d016      	beq.n	74e2 <add_to_waitq_locked+0x4a>
	return list->head == list;
    74b4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74b6:	42a6      	cmp	r6, r4
    74b8:	d025      	beq.n	7506 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    74ba:	b164      	cbz	r4, 74d6 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    74bc:	4621      	mov	r1, r4
    74be:	4628      	mov	r0, r5
    74c0:	f002 fda8 	bl	a014 <z_sched_prio_cmp>
    74c4:	2800      	cmp	r0, #0
    74c6:	dc18      	bgt.n	74fa <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    74c8:	b12c      	cbz	r4, 74d6 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    74ca:	6873      	ldr	r3, [r6, #4]
    74cc:	429c      	cmp	r4, r3
    74ce:	d002      	beq.n	74d6 <add_to_waitq_locked+0x3e>
    74d0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    74d2:	2c00      	cmp	r4, #0
    74d4:	d1f1      	bne.n	74ba <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    74d6:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    74d8:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    74da:	606b      	str	r3, [r5, #4]
	tail->next = node;
    74dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    74de:	6075      	str	r5, [r6, #4]
}
    74e0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    74e2:	4c0b      	ldr	r4, [pc, #44]	; (7510 <add_to_waitq_locked+0x78>)
    74e4:	23ba      	movs	r3, #186	; 0xba
    74e6:	4622      	mov	r2, r4
    74e8:	490a      	ldr	r1, [pc, #40]	; (7514 <add_to_waitq_locked+0x7c>)
    74ea:	480b      	ldr	r0, [pc, #44]	; (7518 <add_to_waitq_locked+0x80>)
    74ec:	f001 ff4d 	bl	938a <assert_print>
    74f0:	21ba      	movs	r1, #186	; 0xba
    74f2:	4620      	mov	r0, r4
    74f4:	f001 ff42 	bl	937c <assert_post_action>
    74f8:	e7dc      	b.n	74b4 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    74fa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    74fc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    74fe:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7500:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7502:	6065      	str	r5, [r4, #4]
}
    7504:	e7ec      	b.n	74e0 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7506:	2400      	movs	r4, #0
    7508:	e7d7      	b.n	74ba <add_to_waitq_locked+0x22>
    750a:	bf00      	nop
    750c:	20000650 	.word	0x20000650
    7510:	0000b820 	.word	0x0000b820
    7514:	0000b85c 	.word	0x0000b85c
    7518:	0000a4cc 	.word	0x0000a4cc

0000751c <pend>:
{
    751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7520:	4605      	mov	r5, r0
    7522:	460e      	mov	r6, r1
    7524:	4691      	mov	r9, r2
    7526:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    7528:	2400      	movs	r4, #0
	__asm__ volatile(
    752a:	f04f 0320 	mov.w	r3, #32
    752e:	f3ef 8711 	mrs	r7, BASEPRI
    7532:	f383 8812 	msr	BASEPRI_MAX, r3
    7536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    753a:	481f      	ldr	r0, [pc, #124]	; (75b8 <pend+0x9c>)
    753c:	f7fe fcbe 	bl	5ebc <z_spin_lock_valid>
    7540:	b118      	cbz	r0, 754a <pend+0x2e>
	z_spin_lock_set_owner(l);
    7542:	481d      	ldr	r0, [pc, #116]	; (75b8 <pend+0x9c>)
    7544:	f7fe fcda 	bl	5efc <z_spin_lock_set_owner>
	return k;
    7548:	e015      	b.n	7576 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    754a:	f8df a070 	ldr.w	sl, [pc, #112]	; 75bc <pend+0xa0>
    754e:	238e      	movs	r3, #142	; 0x8e
    7550:	4652      	mov	r2, sl
    7552:	491b      	ldr	r1, [pc, #108]	; (75c0 <pend+0xa4>)
    7554:	481b      	ldr	r0, [pc, #108]	; (75c4 <pend+0xa8>)
    7556:	f001 ff18 	bl	938a <assert_print>
    755a:	4917      	ldr	r1, [pc, #92]	; (75b8 <pend+0x9c>)
    755c:	481a      	ldr	r0, [pc, #104]	; (75c8 <pend+0xac>)
    755e:	f001 ff14 	bl	938a <assert_print>
    7562:	218e      	movs	r1, #142	; 0x8e
    7564:	4650      	mov	r0, sl
    7566:	f001 ff09 	bl	937c <assert_post_action>
    756a:	e7ea      	b.n	7542 <pend+0x26>
	__asm__ volatile(
    756c:	f387 8811 	msr	BASEPRI, r7
    7570:	f3bf 8f6f 	isb	sy
    7574:	2401      	movs	r4, #1
    7576:	b9c4      	cbnz	r4, 75aa <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    7578:	4631      	mov	r1, r6
    757a:	4628      	mov	r0, r5
    757c:	f7ff ff8c 	bl	7498 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7580:	480d      	ldr	r0, [pc, #52]	; (75b8 <pend+0x9c>)
    7582:	f7fe fcab 	bl	5edc <z_spin_unlock_valid>
    7586:	2800      	cmp	r0, #0
    7588:	d1f0      	bne.n	756c <pend+0x50>
    758a:	4c0c      	ldr	r4, [pc, #48]	; (75bc <pend+0xa0>)
    758c:	23b9      	movs	r3, #185	; 0xb9
    758e:	4622      	mov	r2, r4
    7590:	490e      	ldr	r1, [pc, #56]	; (75cc <pend+0xb0>)
    7592:	480c      	ldr	r0, [pc, #48]	; (75c4 <pend+0xa8>)
    7594:	f001 fef9 	bl	938a <assert_print>
    7598:	4907      	ldr	r1, [pc, #28]	; (75b8 <pend+0x9c>)
    759a:	480d      	ldr	r0, [pc, #52]	; (75d0 <pend+0xb4>)
    759c:	f001 fef5 	bl	938a <assert_print>
    75a0:	21b9      	movs	r1, #185	; 0xb9
    75a2:	4620      	mov	r0, r4
    75a4:	f001 feea 	bl	937c <assert_post_action>
    75a8:	e7e0      	b.n	756c <pend+0x50>
	add_thread_timeout(thread, timeout);
    75aa:	464a      	mov	r2, r9
    75ac:	4643      	mov	r3, r8
    75ae:	4628      	mov	r0, r5
    75b0:	f7ff fa98 	bl	6ae4 <add_thread_timeout>
}
    75b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75b8:	200012b4 	.word	0x200012b4
    75bc:	0000a9dc 	.word	0x0000a9dc
    75c0:	0000aa3c 	.word	0x0000aa3c
    75c4:	0000a4cc 	.word	0x0000a4cc
    75c8:	0000aa54 	.word	0x0000aa54
    75cc:	0000aa0c 	.word	0x0000aa0c
    75d0:	0000aa24 	.word	0x0000aa24

000075d4 <z_pend_curr>:
{
    75d4:	b570      	push	{r4, r5, r6, lr}
    75d6:	4604      	mov	r4, r0
    75d8:	460d      	mov	r5, r1
    75da:	4611      	mov	r1, r2
	pending_current = _current;
    75dc:	4b0f      	ldr	r3, [pc, #60]	; (761c <z_pend_curr+0x48>)
    75de:	6898      	ldr	r0, [r3, #8]
    75e0:	4b0f      	ldr	r3, [pc, #60]	; (7620 <z_pend_curr+0x4c>)
    75e2:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    75e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    75e8:	f7ff ff98 	bl	751c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75ec:	4620      	mov	r0, r4
    75ee:	f7fe fc75 	bl	5edc <z_spin_unlock_valid>
    75f2:	b118      	cbz	r0, 75fc <z_pend_curr+0x28>
    75f4:	4628      	mov	r0, r5
    75f6:	f7fa fdd7 	bl	21a8 <arch_swap>
}
    75fa:	bd70      	pop	{r4, r5, r6, pc}
    75fc:	4e09      	ldr	r6, [pc, #36]	; (7624 <z_pend_curr+0x50>)
    75fe:	23d0      	movs	r3, #208	; 0xd0
    7600:	4632      	mov	r2, r6
    7602:	4909      	ldr	r1, [pc, #36]	; (7628 <z_pend_curr+0x54>)
    7604:	4809      	ldr	r0, [pc, #36]	; (762c <z_pend_curr+0x58>)
    7606:	f001 fec0 	bl	938a <assert_print>
    760a:	4621      	mov	r1, r4
    760c:	4808      	ldr	r0, [pc, #32]	; (7630 <z_pend_curr+0x5c>)
    760e:	f001 febc 	bl	938a <assert_print>
    7612:	21d0      	movs	r1, #208	; 0xd0
    7614:	4630      	mov	r0, r6
    7616:	f001 feb1 	bl	937c <assert_post_action>
    761a:	e7eb      	b.n	75f4 <z_pend_curr+0x20>
    761c:	20001278 	.word	0x20001278
    7620:	200012b0 	.word	0x200012b0
    7624:	0000a9dc 	.word	0x0000a9dc
    7628:	0000aa0c 	.word	0x0000aa0c
    762c:	0000a4cc 	.word	0x0000a4cc
    7630:	0000aa24 	.word	0x0000aa24

00007634 <z_set_prio>:
{
    7634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7638:	4604      	mov	r4, r0
    763a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    763c:	2500      	movs	r5, #0
	__asm__ volatile(
    763e:	f04f 0320 	mov.w	r3, #32
    7642:	f3ef 8811 	mrs	r8, BASEPRI
    7646:	f383 8812 	msr	BASEPRI_MAX, r3
    764a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    764e:	4844      	ldr	r0, [pc, #272]	; (7760 <z_set_prio+0x12c>)
    7650:	f7fe fc34 	bl	5ebc <z_spin_lock_valid>
    7654:	b120      	cbz	r0, 7660 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    7656:	4842      	ldr	r0, [pc, #264]	; (7760 <z_set_prio+0x12c>)
    7658:	f7fe fc50 	bl	5efc <z_spin_lock_set_owner>
	bool need_sched = 0;
    765c:	2700      	movs	r7, #0
	return k;
    765e:	e01d      	b.n	769c <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7660:	4f40      	ldr	r7, [pc, #256]	; (7764 <z_set_prio+0x130>)
    7662:	238e      	movs	r3, #142	; 0x8e
    7664:	463a      	mov	r2, r7
    7666:	4940      	ldr	r1, [pc, #256]	; (7768 <z_set_prio+0x134>)
    7668:	4840      	ldr	r0, [pc, #256]	; (776c <z_set_prio+0x138>)
    766a:	f001 fe8e 	bl	938a <assert_print>
    766e:	493c      	ldr	r1, [pc, #240]	; (7760 <z_set_prio+0x12c>)
    7670:	483f      	ldr	r0, [pc, #252]	; (7770 <z_set_prio+0x13c>)
    7672:	f001 fe8a 	bl	938a <assert_print>
    7676:	218e      	movs	r1, #142	; 0x8e
    7678:	4638      	mov	r0, r7
    767a:	f001 fe7f 	bl	937c <assert_post_action>
    767e:	e7ea      	b.n	7656 <z_set_prio+0x22>
		if (need_sched) {
    7680:	f013 0701 	ands.w	r7, r3, #1
    7684:	d116      	bne.n	76b4 <z_set_prio+0x80>
			thread->base.prio = prio;
    7686:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7688:	4835      	ldr	r0, [pc, #212]	; (7760 <z_set_prio+0x12c>)
    768a:	f7fe fc27 	bl	5edc <z_spin_unlock_valid>
    768e:	2800      	cmp	r0, #0
    7690:	d053      	beq.n	773a <z_set_prio+0x106>
	__asm__ volatile(
    7692:	f388 8811 	msr	BASEPRI, r8
    7696:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    769a:	2501      	movs	r5, #1
    769c:	462b      	mov	r3, r5
    769e:	2d00      	cmp	r5, #0
    76a0:	d15b      	bne.n	775a <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    76a2:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    76a4:	f012 0f1f 	tst.w	r2, #31
    76a8:	d1ea      	bne.n	7680 <z_set_prio+0x4c>
	return node->next != NULL;
    76aa:	69a1      	ldr	r1, [r4, #24]
    76ac:	2900      	cmp	r1, #0
    76ae:	d1e7      	bne.n	7680 <z_set_prio+0x4c>
    76b0:	2301      	movs	r3, #1
    76b2:	e7e5      	b.n	7680 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    76b8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    76ba:	4621      	mov	r1, r4
    76bc:	482d      	ldr	r0, [pc, #180]	; (7774 <z_set_prio+0x140>)
    76be:	f7ff fb7b 	bl	6db8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    76c2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    76c4:	7b63      	ldrb	r3, [r4, #13]
    76c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76ca:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    76cc:	4b2a      	ldr	r3, [pc, #168]	; (7778 <z_set_prio+0x144>)
    76ce:	429c      	cmp	r4, r3
    76d0:	d01f      	beq.n	7712 <z_set_prio+0xde>
	return list->head == list;
    76d2:	4b2a      	ldr	r3, [pc, #168]	; (777c <z_set_prio+0x148>)
    76d4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76d8:	429d      	cmp	r5, r3
    76da:	d02c      	beq.n	7736 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76dc:	b16d      	cbz	r5, 76fa <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    76de:	4629      	mov	r1, r5
    76e0:	4620      	mov	r0, r4
    76e2:	f002 fc97 	bl	a014 <z_sched_prio_cmp>
    76e6:	2800      	cmp	r0, #0
    76e8:	dc1f      	bgt.n	772a <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    76ea:	b135      	cbz	r5, 76fa <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    76ec:	4b23      	ldr	r3, [pc, #140]	; (777c <z_set_prio+0x148>)
    76ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76f0:	429d      	cmp	r5, r3
    76f2:	d002      	beq.n	76fa <z_set_prio+0xc6>
    76f4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76f6:	2d00      	cmp	r5, #0
    76f8:	d1f0      	bne.n	76dc <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    76fa:	4b20      	ldr	r3, [pc, #128]	; (777c <z_set_prio+0x148>)
    76fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    76fe:	f103 0120 	add.w	r1, r3, #32
    7702:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    7704:	6062      	str	r2, [r4, #4]
	tail->next = node;
    7706:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7708:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    770a:	2001      	movs	r0, #1
    770c:	f7ff fbd6 	bl	6ebc <update_cache>
    7710:	e7ba      	b.n	7688 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7712:	4d1b      	ldr	r5, [pc, #108]	; (7780 <z_set_prio+0x14c>)
    7714:	23ba      	movs	r3, #186	; 0xba
    7716:	462a      	mov	r2, r5
    7718:	491a      	ldr	r1, [pc, #104]	; (7784 <z_set_prio+0x150>)
    771a:	4814      	ldr	r0, [pc, #80]	; (776c <z_set_prio+0x138>)
    771c:	f001 fe35 	bl	938a <assert_print>
    7720:	21ba      	movs	r1, #186	; 0xba
    7722:	4628      	mov	r0, r5
    7724:	f001 fe2a 	bl	937c <assert_post_action>
    7728:	e7d3      	b.n	76d2 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    772a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    772c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    772e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    7730:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7732:	606c      	str	r4, [r5, #4]
}
    7734:	e7e9      	b.n	770a <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7736:	2500      	movs	r5, #0
    7738:	e7d0      	b.n	76dc <z_set_prio+0xa8>
    773a:	4d0a      	ldr	r5, [pc, #40]	; (7764 <z_set_prio+0x130>)
    773c:	23b9      	movs	r3, #185	; 0xb9
    773e:	462a      	mov	r2, r5
    7740:	4911      	ldr	r1, [pc, #68]	; (7788 <z_set_prio+0x154>)
    7742:	480a      	ldr	r0, [pc, #40]	; (776c <z_set_prio+0x138>)
    7744:	f001 fe21 	bl	938a <assert_print>
    7748:	4905      	ldr	r1, [pc, #20]	; (7760 <z_set_prio+0x12c>)
    774a:	4810      	ldr	r0, [pc, #64]	; (778c <z_set_prio+0x158>)
    774c:	f001 fe1d 	bl	938a <assert_print>
    7750:	21b9      	movs	r1, #185	; 0xb9
    7752:	4628      	mov	r0, r5
    7754:	f001 fe12 	bl	937c <assert_post_action>
    7758:	e79b      	b.n	7692 <z_set_prio+0x5e>
}
    775a:	4638      	mov	r0, r7
    775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7760:	200012b4 	.word	0x200012b4
    7764:	0000a9dc 	.word	0x0000a9dc
    7768:	0000aa3c 	.word	0x0000aa3c
    776c:	0000a4cc 	.word	0x0000a4cc
    7770:	0000aa54 	.word	0x0000aa54
    7774:	20001298 	.word	0x20001298
    7778:	20000650 	.word	0x20000650
    777c:	20001278 	.word	0x20001278
    7780:	0000b820 	.word	0x0000b820
    7784:	0000b85c 	.word	0x0000b85c
    7788:	0000aa0c 	.word	0x0000aa0c
    778c:	0000aa24 	.word	0x0000aa24

00007790 <z_impl_k_thread_suspend>:
{
    7790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7792:	4604      	mov	r4, r0
    7794:	3018      	adds	r0, #24
    7796:	f000 fd6f 	bl	8278 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    779a:	2500      	movs	r5, #0
	__asm__ volatile(
    779c:	f04f 0320 	mov.w	r3, #32
    77a0:	f3ef 8611 	mrs	r6, BASEPRI
    77a4:	f383 8812 	msr	BASEPRI_MAX, r3
    77a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77ac:	482d      	ldr	r0, [pc, #180]	; (7864 <z_impl_k_thread_suspend+0xd4>)
    77ae:	f7fe fb85 	bl	5ebc <z_spin_lock_valid>
    77b2:	b118      	cbz	r0, 77bc <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    77b4:	482b      	ldr	r0, [pc, #172]	; (7864 <z_impl_k_thread_suspend+0xd4>)
    77b6:	f7fe fba1 	bl	5efc <z_spin_lock_set_owner>
	return k;
    77ba:	e01c      	b.n	77f6 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77bc:	4f2a      	ldr	r7, [pc, #168]	; (7868 <z_impl_k_thread_suspend+0xd8>)
    77be:	238e      	movs	r3, #142	; 0x8e
    77c0:	463a      	mov	r2, r7
    77c2:	492a      	ldr	r1, [pc, #168]	; (786c <z_impl_k_thread_suspend+0xdc>)
    77c4:	482a      	ldr	r0, [pc, #168]	; (7870 <z_impl_k_thread_suspend+0xe0>)
    77c6:	f001 fde0 	bl	938a <assert_print>
    77ca:	4926      	ldr	r1, [pc, #152]	; (7864 <z_impl_k_thread_suspend+0xd4>)
    77cc:	4829      	ldr	r0, [pc, #164]	; (7874 <z_impl_k_thread_suspend+0xe4>)
    77ce:	f001 fddc 	bl	938a <assert_print>
    77d2:	218e      	movs	r1, #142	; 0x8e
    77d4:	4638      	mov	r0, r7
    77d6:	f001 fdd1 	bl	937c <assert_post_action>
    77da:	e7eb      	b.n	77b4 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    77dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    77e0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    77e2:	4621      	mov	r1, r4
    77e4:	4824      	ldr	r0, [pc, #144]	; (7878 <z_impl_k_thread_suspend+0xe8>)
    77e6:	f7ff fae7 	bl	6db8 <z_priq_dumb_remove>
}
    77ea:	e00a      	b.n	7802 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    77ec:	f386 8811 	msr	BASEPRI, r6
    77f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    77f4:	2501      	movs	r5, #1
    77f6:	bb2d      	cbnz	r5, 7844 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    77f8:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    77fa:	f994 300d 	ldrsb.w	r3, [r4, #13]
    77fe:	2b00      	cmp	r3, #0
    7800:	dbec      	blt.n	77dc <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7802:	7b63      	ldrb	r3, [r4, #13]
    7804:	f043 0310 	orr.w	r3, r3, #16
    7808:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    780a:	4b1c      	ldr	r3, [pc, #112]	; (787c <z_impl_k_thread_suspend+0xec>)
    780c:	6898      	ldr	r0, [r3, #8]
    780e:	42a0      	cmp	r0, r4
    7810:	bf14      	ite	ne
    7812:	2000      	movne	r0, #0
    7814:	2001      	moveq	r0, #1
    7816:	f7ff fb51 	bl	6ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    781a:	4812      	ldr	r0, [pc, #72]	; (7864 <z_impl_k_thread_suspend+0xd4>)
    781c:	f7fe fb5e 	bl	5edc <z_spin_unlock_valid>
    7820:	2800      	cmp	r0, #0
    7822:	d1e3      	bne.n	77ec <z_impl_k_thread_suspend+0x5c>
    7824:	4d10      	ldr	r5, [pc, #64]	; (7868 <z_impl_k_thread_suspend+0xd8>)
    7826:	23b9      	movs	r3, #185	; 0xb9
    7828:	462a      	mov	r2, r5
    782a:	4915      	ldr	r1, [pc, #84]	; (7880 <z_impl_k_thread_suspend+0xf0>)
    782c:	4810      	ldr	r0, [pc, #64]	; (7870 <z_impl_k_thread_suspend+0xe0>)
    782e:	f001 fdac 	bl	938a <assert_print>
    7832:	490c      	ldr	r1, [pc, #48]	; (7864 <z_impl_k_thread_suspend+0xd4>)
    7834:	4813      	ldr	r0, [pc, #76]	; (7884 <z_impl_k_thread_suspend+0xf4>)
    7836:	f001 fda8 	bl	938a <assert_print>
    783a:	21b9      	movs	r1, #185	; 0xb9
    783c:	4628      	mov	r0, r5
    783e:	f001 fd9d 	bl	937c <assert_post_action>
    7842:	e7d3      	b.n	77ec <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    7844:	4b0d      	ldr	r3, [pc, #52]	; (787c <z_impl_k_thread_suspend+0xec>)
    7846:	689b      	ldr	r3, [r3, #8]
    7848:	42a3      	cmp	r3, r4
    784a:	d000      	beq.n	784e <z_impl_k_thread_suspend+0xbe>
}
    784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    784e:	f04f 0320 	mov.w	r3, #32
    7852:	f3ef 8011 	mrs	r0, BASEPRI
    7856:	f383 8812 	msr	BASEPRI_MAX, r3
    785a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    785e:	f002 fbe3 	bl	a028 <z_reschedule_irqlock>
    7862:	e7f3      	b.n	784c <z_impl_k_thread_suspend+0xbc>
    7864:	200012b4 	.word	0x200012b4
    7868:	0000a9dc 	.word	0x0000a9dc
    786c:	0000aa3c 	.word	0x0000aa3c
    7870:	0000a4cc 	.word	0x0000a4cc
    7874:	0000aa54 	.word	0x0000aa54
    7878:	20001298 	.word	0x20001298
    787c:	20001278 	.word	0x20001278
    7880:	0000aa0c 	.word	0x0000aa0c
    7884:	0000aa24 	.word	0x0000aa24

00007888 <k_sched_unlock>:
{
    7888:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    788a:	2400      	movs	r4, #0
    788c:	f04f 0320 	mov.w	r3, #32
    7890:	f3ef 8511 	mrs	r5, BASEPRI
    7894:	f383 8812 	msr	BASEPRI_MAX, r3
    7898:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    789c:	4838      	ldr	r0, [pc, #224]	; (7980 <k_sched_unlock+0xf8>)
    789e:	f7fe fb0d 	bl	5ebc <z_spin_lock_valid>
    78a2:	b118      	cbz	r0, 78ac <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    78a4:	4836      	ldr	r0, [pc, #216]	; (7980 <k_sched_unlock+0xf8>)
    78a6:	f7fe fb29 	bl	5efc <z_spin_lock_set_owner>
	return k;
    78aa:	e036      	b.n	791a <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78ac:	4e35      	ldr	r6, [pc, #212]	; (7984 <k_sched_unlock+0xfc>)
    78ae:	238e      	movs	r3, #142	; 0x8e
    78b0:	4632      	mov	r2, r6
    78b2:	4935      	ldr	r1, [pc, #212]	; (7988 <k_sched_unlock+0x100>)
    78b4:	4835      	ldr	r0, [pc, #212]	; (798c <k_sched_unlock+0x104>)
    78b6:	f001 fd68 	bl	938a <assert_print>
    78ba:	4931      	ldr	r1, [pc, #196]	; (7980 <k_sched_unlock+0xf8>)
    78bc:	4834      	ldr	r0, [pc, #208]	; (7990 <k_sched_unlock+0x108>)
    78be:	f001 fd64 	bl	938a <assert_print>
    78c2:	218e      	movs	r1, #142	; 0x8e
    78c4:	4630      	mov	r0, r6
    78c6:	f001 fd59 	bl	937c <assert_post_action>
    78ca:	e7eb      	b.n	78a4 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    78cc:	4c31      	ldr	r4, [pc, #196]	; (7994 <k_sched_unlock+0x10c>)
    78ce:	f240 33bb 	movw	r3, #955	; 0x3bb
    78d2:	4622      	mov	r2, r4
    78d4:	4930      	ldr	r1, [pc, #192]	; (7998 <k_sched_unlock+0x110>)
    78d6:	482d      	ldr	r0, [pc, #180]	; (798c <k_sched_unlock+0x104>)
    78d8:	f001 fd57 	bl	938a <assert_print>
    78dc:	482f      	ldr	r0, [pc, #188]	; (799c <k_sched_unlock+0x114>)
    78de:	f001 fd54 	bl	938a <assert_print>
    78e2:	f240 31bb 	movw	r1, #955	; 0x3bb
    78e6:	4620      	mov	r0, r4
    78e8:	f001 fd48 	bl	937c <assert_post_action>
    78ec:	e01b      	b.n	7926 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    78ee:	4c29      	ldr	r4, [pc, #164]	; (7994 <k_sched_unlock+0x10c>)
    78f0:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    78f4:	4622      	mov	r2, r4
    78f6:	492a      	ldr	r1, [pc, #168]	; (79a0 <k_sched_unlock+0x118>)
    78f8:	4824      	ldr	r0, [pc, #144]	; (798c <k_sched_unlock+0x104>)
    78fa:	f001 fd46 	bl	938a <assert_print>
    78fe:	4827      	ldr	r0, [pc, #156]	; (799c <k_sched_unlock+0x114>)
    7900:	f001 fd43 	bl	938a <assert_print>
    7904:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7908:	4620      	mov	r0, r4
    790a:	f001 fd37 	bl	937c <assert_post_action>
    790e:	e00e      	b.n	792e <k_sched_unlock+0xa6>
	__asm__ volatile(
    7910:	f385 8811 	msr	BASEPRI, r5
    7914:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7918:	2401      	movs	r4, #1
    791a:	bb2c      	cbnz	r4, 7968 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    791c:	4b21      	ldr	r3, [pc, #132]	; (79a4 <k_sched_unlock+0x11c>)
    791e:	689b      	ldr	r3, [r3, #8]
    7920:	7bdb      	ldrb	r3, [r3, #15]
    7922:	2b00      	cmp	r3, #0
    7924:	d0d2      	beq.n	78cc <k_sched_unlock+0x44>
    7926:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    792a:	2b00      	cmp	r3, #0
    792c:	d1df      	bne.n	78ee <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    792e:	4b1d      	ldr	r3, [pc, #116]	; (79a4 <k_sched_unlock+0x11c>)
    7930:	689a      	ldr	r2, [r3, #8]
    7932:	7bd3      	ldrb	r3, [r2, #15]
    7934:	3301      	adds	r3, #1
    7936:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7938:	2000      	movs	r0, #0
    793a:	f7ff fabf 	bl	6ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    793e:	4810      	ldr	r0, [pc, #64]	; (7980 <k_sched_unlock+0xf8>)
    7940:	f7fe facc 	bl	5edc <z_spin_unlock_valid>
    7944:	2800      	cmp	r0, #0
    7946:	d1e3      	bne.n	7910 <k_sched_unlock+0x88>
    7948:	4c0e      	ldr	r4, [pc, #56]	; (7984 <k_sched_unlock+0xfc>)
    794a:	23b9      	movs	r3, #185	; 0xb9
    794c:	4622      	mov	r2, r4
    794e:	4916      	ldr	r1, [pc, #88]	; (79a8 <k_sched_unlock+0x120>)
    7950:	480e      	ldr	r0, [pc, #56]	; (798c <k_sched_unlock+0x104>)
    7952:	f001 fd1a 	bl	938a <assert_print>
    7956:	490a      	ldr	r1, [pc, #40]	; (7980 <k_sched_unlock+0xf8>)
    7958:	4814      	ldr	r0, [pc, #80]	; (79ac <k_sched_unlock+0x124>)
    795a:	f001 fd16 	bl	938a <assert_print>
    795e:	21b9      	movs	r1, #185	; 0xb9
    7960:	4620      	mov	r0, r4
    7962:	f001 fd0b 	bl	937c <assert_post_action>
    7966:	e7d3      	b.n	7910 <k_sched_unlock+0x88>
	__asm__ volatile(
    7968:	f04f 0320 	mov.w	r3, #32
    796c:	f3ef 8011 	mrs	r0, BASEPRI
    7970:	f383 8812 	msr	BASEPRI_MAX, r3
    7974:	f3bf 8f6f 	isb	sy
    7978:	f002 fb56 	bl	a028 <z_reschedule_irqlock>
}
    797c:	bd70      	pop	{r4, r5, r6, pc}
    797e:	bf00      	nop
    7980:	200012b4 	.word	0x200012b4
    7984:	0000a9dc 	.word	0x0000a9dc
    7988:	0000aa3c 	.word	0x0000aa3c
    798c:	0000a4cc 	.word	0x0000a4cc
    7990:	0000aa54 	.word	0x0000aa54
    7994:	0000b820 	.word	0x0000b820
    7998:	0000b8a8 	.word	0x0000b8a8
    799c:	0000b778 	.word	0x0000b778
    79a0:	0000b6f8 	.word	0x0000b6f8
    79a4:	20001278 	.word	0x20001278
    79a8:	0000aa0c 	.word	0x0000aa0c
    79ac:	0000aa24 	.word	0x0000aa24

000079b0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    79b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    79b2:	7b43      	ldrb	r3, [r0, #13]
    79b4:	f013 0f08 	tst.w	r3, #8
    79b8:	d145      	bne.n	7a46 <end_thread+0x96>
    79ba:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    79bc:	f043 0308 	orr.w	r3, r3, #8
    79c0:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    79c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    79c6:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    79c8:	f013 0f80 	tst.w	r3, #128	; 0x80
    79cc:	d12d      	bne.n	7a2a <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    79ce:	68ab      	ldr	r3, [r5, #8]
    79d0:	b15b      	cbz	r3, 79ea <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    79d2:	4628      	mov	r0, r5
    79d4:	f7ff f86c 	bl	6ab0 <pended_on_thread>
    79d8:	4629      	mov	r1, r5
    79da:	f7ff f9ed 	bl	6db8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    79de:	7b6b      	ldrb	r3, [r5, #13]
    79e0:	f023 0302 	bic.w	r3, r3, #2
    79e4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    79e6:	2300      	movs	r3, #0
    79e8:	60ab      	str	r3, [r5, #8]
    79ea:	f105 0018 	add.w	r0, r5, #24
    79ee:	f000 fc43 	bl	8278 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    79f2:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    79f6:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79f8:	42bc      	cmp	r4, r7
    79fa:	d01e      	beq.n	7a3a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    79fc:	b1ec      	cbz	r4, 7a3a <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    79fe:	4620      	mov	r0, r4
    7a00:	f7ff f856 	bl	6ab0 <pended_on_thread>
    7a04:	4621      	mov	r1, r4
    7a06:	f7ff f9d7 	bl	6db8 <z_priq_dumb_remove>
    7a0a:	7b63      	ldrb	r3, [r4, #13]
    7a0c:	f023 0302 	bic.w	r3, r3, #2
    7a10:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7a12:	2600      	movs	r6, #0
    7a14:	60a6      	str	r6, [r4, #8]
    7a16:	f104 0018 	add.w	r0, r4, #24
    7a1a:	f000 fc2d 	bl	8278 <z_abort_timeout>
    7a1e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    7a22:	4620      	mov	r0, r4
    7a24:	f7ff fba4 	bl	7170 <ready_thread>
    7a28:	e7e5      	b.n	79f6 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a2e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7a30:	4601      	mov	r1, r0
    7a32:	4805      	ldr	r0, [pc, #20]	; (7a48 <end_thread+0x98>)
    7a34:	f7ff f9c0 	bl	6db8 <z_priq_dumb_remove>
}
    7a38:	e7c9      	b.n	79ce <end_thread+0x1e>
		update_cache(1);
    7a3a:	2001      	movs	r0, #1
    7a3c:	f7ff fa3e 	bl	6ebc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    7a40:	4628      	mov	r0, r5
    7a42:	f7fe fa63 	bl	5f0c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    7a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a48:	20001298 	.word	0x20001298

00007a4c <z_unpend_first_thread>:
{
    7a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a4e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7a50:	2500      	movs	r5, #0
    7a52:	f04f 0320 	mov.w	r3, #32
    7a56:	f3ef 8711 	mrs	r7, BASEPRI
    7a5a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a62:	4825      	ldr	r0, [pc, #148]	; (7af8 <z_unpend_first_thread+0xac>)
    7a64:	f7fe fa2a 	bl	5ebc <z_spin_lock_valid>
    7a68:	b120      	cbz	r0, 7a74 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    7a6a:	4823      	ldr	r0, [pc, #140]	; (7af8 <z_unpend_first_thread+0xac>)
    7a6c:	f7fe fa46 	bl	5efc <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    7a70:	2400      	movs	r4, #0
	return k;
    7a72:	e018      	b.n	7aa6 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a74:	4c21      	ldr	r4, [pc, #132]	; (7afc <z_unpend_first_thread+0xb0>)
    7a76:	238e      	movs	r3, #142	; 0x8e
    7a78:	4622      	mov	r2, r4
    7a7a:	4921      	ldr	r1, [pc, #132]	; (7b00 <z_unpend_first_thread+0xb4>)
    7a7c:	4821      	ldr	r0, [pc, #132]	; (7b04 <z_unpend_first_thread+0xb8>)
    7a7e:	f001 fc84 	bl	938a <assert_print>
    7a82:	491d      	ldr	r1, [pc, #116]	; (7af8 <z_unpend_first_thread+0xac>)
    7a84:	4820      	ldr	r0, [pc, #128]	; (7b08 <z_unpend_first_thread+0xbc>)
    7a86:	f001 fc80 	bl	938a <assert_print>
    7a8a:	218e      	movs	r1, #142	; 0x8e
    7a8c:	4620      	mov	r0, r4
    7a8e:	f001 fc75 	bl	937c <assert_post_action>
    7a92:	e7ea      	b.n	7a6a <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a94:	4818      	ldr	r0, [pc, #96]	; (7af8 <z_unpend_first_thread+0xac>)
    7a96:	f7fe fa21 	bl	5edc <z_spin_unlock_valid>
    7a9a:	b1d8      	cbz	r0, 7ad4 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    7a9c:	f387 8811 	msr	BASEPRI, r7
    7aa0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7aa4:	2501      	movs	r5, #1
    7aa6:	bb2d      	cbnz	r5, 7af4 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    7aa8:	4630      	mov	r0, r6
    7aaa:	f002 fad2 	bl	a052 <z_priq_dumb_best>
		if (thread != NULL) {
    7aae:	4604      	mov	r4, r0
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d0ef      	beq.n	7a94 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7ab4:	f7fe fffc 	bl	6ab0 <pended_on_thread>
    7ab8:	4621      	mov	r1, r4
    7aba:	f7ff f97d 	bl	6db8 <z_priq_dumb_remove>
    7abe:	7b63      	ldrb	r3, [r4, #13]
    7ac0:	f023 0302 	bic.w	r3, r3, #2
    7ac4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7ac6:	2300      	movs	r3, #0
    7ac8:	60a3      	str	r3, [r4, #8]
    7aca:	f104 0018 	add.w	r0, r4, #24
    7ace:	f000 fbd3 	bl	8278 <z_abort_timeout>
    7ad2:	e7df      	b.n	7a94 <z_unpend_first_thread+0x48>
    7ad4:	4d09      	ldr	r5, [pc, #36]	; (7afc <z_unpend_first_thread+0xb0>)
    7ad6:	23b9      	movs	r3, #185	; 0xb9
    7ad8:	462a      	mov	r2, r5
    7ada:	490c      	ldr	r1, [pc, #48]	; (7b0c <z_unpend_first_thread+0xc0>)
    7adc:	4809      	ldr	r0, [pc, #36]	; (7b04 <z_unpend_first_thread+0xb8>)
    7ade:	f001 fc54 	bl	938a <assert_print>
    7ae2:	4905      	ldr	r1, [pc, #20]	; (7af8 <z_unpend_first_thread+0xac>)
    7ae4:	480a      	ldr	r0, [pc, #40]	; (7b10 <z_unpend_first_thread+0xc4>)
    7ae6:	f001 fc50 	bl	938a <assert_print>
    7aea:	21b9      	movs	r1, #185	; 0xb9
    7aec:	4628      	mov	r0, r5
    7aee:	f001 fc45 	bl	937c <assert_post_action>
    7af2:	e7d3      	b.n	7a9c <z_unpend_first_thread+0x50>
}
    7af4:	4620      	mov	r0, r4
    7af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7af8:	200012b4 	.word	0x200012b4
    7afc:	0000a9dc 	.word	0x0000a9dc
    7b00:	0000aa3c 	.word	0x0000aa3c
    7b04:	0000a4cc 	.word	0x0000a4cc
    7b08:	0000aa54 	.word	0x0000aa54
    7b0c:	0000aa0c 	.word	0x0000aa0c
    7b10:	0000aa24 	.word	0x0000aa24

00007b14 <z_sched_init>:
{
    7b14:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    7b16:	4804      	ldr	r0, [pc, #16]	; (7b28 <z_sched_init+0x14>)
    7b18:	f002 fab2 	bl	a080 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7b1c:	2100      	movs	r1, #0
    7b1e:	4608      	mov	r0, r1
    7b20:	f7ff f804 	bl	6b2c <k_sched_time_slice_set>
}
    7b24:	bd08      	pop	{r3, pc}
    7b26:	bf00      	nop
    7b28:	20001294 	.word	0x20001294

00007b2c <z_impl_k_yield>:
{
    7b2c:	b570      	push	{r4, r5, r6, lr}
    7b2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7b32:	2b00      	cmp	r3, #0
    7b34:	d149      	bne.n	7bca <z_impl_k_yield+0x9e>
	__asm__ volatile(
    7b36:	f04f 0320 	mov.w	r3, #32
    7b3a:	f3ef 8611 	mrs	r6, BASEPRI
    7b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b46:	4843      	ldr	r0, [pc, #268]	; (7c54 <z_impl_k_yield+0x128>)
    7b48:	f7fe f9b8 	bl	5ebc <z_spin_lock_valid>
    7b4c:	2800      	cmp	r0, #0
    7b4e:	d04d      	beq.n	7bec <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    7b50:	4840      	ldr	r0, [pc, #256]	; (7c54 <z_impl_k_yield+0x128>)
    7b52:	f7fe f9d3 	bl	5efc <z_spin_lock_set_owner>
		dequeue_thread(_current);
    7b56:	4c40      	ldr	r4, [pc, #256]	; (7c58 <z_impl_k_yield+0x12c>)
    7b58:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b5a:	7b4b      	ldrb	r3, [r1, #13]
    7b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b60:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7b62:	f104 0020 	add.w	r0, r4, #32
    7b66:	f7ff f927 	bl	6db8 <z_priq_dumb_remove>
	queue_thread(_current);
    7b6a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7b6c:	7b6b      	ldrb	r3, [r5, #13]
    7b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7b72:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7b74:	4b39      	ldr	r3, [pc, #228]	; (7c5c <z_impl_k_yield+0x130>)
    7b76:	429d      	cmp	r5, r3
    7b78:	d048      	beq.n	7c0c <z_impl_k_yield+0xe0>
	return list->head == list;
    7b7a:	4b37      	ldr	r3, [pc, #220]	; (7c58 <z_impl_k_yield+0x12c>)
    7b7c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b80:	429c      	cmp	r4, r3
    7b82:	d055      	beq.n	7c30 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7b84:	b16c      	cbz	r4, 7ba2 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7b86:	4621      	mov	r1, r4
    7b88:	4628      	mov	r0, r5
    7b8a:	f002 fa43 	bl	a014 <z_sched_prio_cmp>
    7b8e:	2800      	cmp	r0, #0
    7b90:	dc48      	bgt.n	7c24 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7b92:	b134      	cbz	r4, 7ba2 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    7b94:	4b30      	ldr	r3, [pc, #192]	; (7c58 <z_impl_k_yield+0x12c>)
    7b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b98:	429c      	cmp	r4, r3
    7b9a:	d002      	beq.n	7ba2 <z_impl_k_yield+0x76>
    7b9c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7b9e:	2c00      	cmp	r4, #0
    7ba0:	d1f0      	bne.n	7b84 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    7ba2:	4b2d      	ldr	r3, [pc, #180]	; (7c58 <z_impl_k_yield+0x12c>)
    7ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    7ba6:	f103 0120 	add.w	r1, r3, #32
    7baa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7bac:	606a      	str	r2, [r5, #4]
	tail->next = node;
    7bae:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7bb0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    7bb2:	2001      	movs	r0, #1
    7bb4:	f7ff f982 	bl	6ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7bb8:	4826      	ldr	r0, [pc, #152]	; (7c54 <z_impl_k_yield+0x128>)
    7bba:	f7fe f98f 	bl	5edc <z_spin_unlock_valid>
    7bbe:	2800      	cmp	r0, #0
    7bc0:	d038      	beq.n	7c34 <z_impl_k_yield+0x108>
    7bc2:	4630      	mov	r0, r6
    7bc4:	f7fa faf0 	bl	21a8 <arch_swap>
}
    7bc8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7bca:	4c25      	ldr	r4, [pc, #148]	; (7c60 <z_impl_k_yield+0x134>)
    7bcc:	f240 5332 	movw	r3, #1330	; 0x532
    7bd0:	4622      	mov	r2, r4
    7bd2:	4924      	ldr	r1, [pc, #144]	; (7c64 <z_impl_k_yield+0x138>)
    7bd4:	4824      	ldr	r0, [pc, #144]	; (7c68 <z_impl_k_yield+0x13c>)
    7bd6:	f001 fbd8 	bl	938a <assert_print>
    7bda:	4824      	ldr	r0, [pc, #144]	; (7c6c <z_impl_k_yield+0x140>)
    7bdc:	f001 fbd5 	bl	938a <assert_print>
    7be0:	f240 5132 	movw	r1, #1330	; 0x532
    7be4:	4620      	mov	r0, r4
    7be6:	f001 fbc9 	bl	937c <assert_post_action>
    7bea:	e7a4      	b.n	7b36 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bec:	4c20      	ldr	r4, [pc, #128]	; (7c70 <z_impl_k_yield+0x144>)
    7bee:	238e      	movs	r3, #142	; 0x8e
    7bf0:	4622      	mov	r2, r4
    7bf2:	4920      	ldr	r1, [pc, #128]	; (7c74 <z_impl_k_yield+0x148>)
    7bf4:	481c      	ldr	r0, [pc, #112]	; (7c68 <z_impl_k_yield+0x13c>)
    7bf6:	f001 fbc8 	bl	938a <assert_print>
    7bfa:	4916      	ldr	r1, [pc, #88]	; (7c54 <z_impl_k_yield+0x128>)
    7bfc:	481e      	ldr	r0, [pc, #120]	; (7c78 <z_impl_k_yield+0x14c>)
    7bfe:	f001 fbc4 	bl	938a <assert_print>
    7c02:	218e      	movs	r1, #142	; 0x8e
    7c04:	4620      	mov	r0, r4
    7c06:	f001 fbb9 	bl	937c <assert_post_action>
    7c0a:	e7a1      	b.n	7b50 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7c0c:	4c14      	ldr	r4, [pc, #80]	; (7c60 <z_impl_k_yield+0x134>)
    7c0e:	23ba      	movs	r3, #186	; 0xba
    7c10:	4622      	mov	r2, r4
    7c12:	491a      	ldr	r1, [pc, #104]	; (7c7c <z_impl_k_yield+0x150>)
    7c14:	4814      	ldr	r0, [pc, #80]	; (7c68 <z_impl_k_yield+0x13c>)
    7c16:	f001 fbb8 	bl	938a <assert_print>
    7c1a:	21ba      	movs	r1, #186	; 0xba
    7c1c:	4620      	mov	r0, r4
    7c1e:	f001 fbad 	bl	937c <assert_post_action>
    7c22:	e7aa      	b.n	7b7a <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    7c24:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7c26:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7c28:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7c2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7c2c:	6065      	str	r5, [r4, #4]
}
    7c2e:	e7c0      	b.n	7bb2 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7c30:	2400      	movs	r4, #0
    7c32:	e7a7      	b.n	7b84 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c34:	4c0e      	ldr	r4, [pc, #56]	; (7c70 <z_impl_k_yield+0x144>)
    7c36:	23d0      	movs	r3, #208	; 0xd0
    7c38:	4622      	mov	r2, r4
    7c3a:	4911      	ldr	r1, [pc, #68]	; (7c80 <z_impl_k_yield+0x154>)
    7c3c:	480a      	ldr	r0, [pc, #40]	; (7c68 <z_impl_k_yield+0x13c>)
    7c3e:	f001 fba4 	bl	938a <assert_print>
    7c42:	4904      	ldr	r1, [pc, #16]	; (7c54 <z_impl_k_yield+0x128>)
    7c44:	480f      	ldr	r0, [pc, #60]	; (7c84 <z_impl_k_yield+0x158>)
    7c46:	f001 fba0 	bl	938a <assert_print>
    7c4a:	21d0      	movs	r1, #208	; 0xd0
    7c4c:	4620      	mov	r0, r4
    7c4e:	f001 fb95 	bl	937c <assert_post_action>
    7c52:	e7b6      	b.n	7bc2 <z_impl_k_yield+0x96>
    7c54:	200012b4 	.word	0x200012b4
    7c58:	20001278 	.word	0x20001278
    7c5c:	20000650 	.word	0x20000650
    7c60:	0000b820 	.word	0x0000b820
    7c64:	0000b6f8 	.word	0x0000b6f8
    7c68:	0000a4cc 	.word	0x0000a4cc
    7c6c:	0000b778 	.word	0x0000b778
    7c70:	0000a9dc 	.word	0x0000a9dc
    7c74:	0000aa3c 	.word	0x0000aa3c
    7c78:	0000aa54 	.word	0x0000aa54
    7c7c:	0000b85c 	.word	0x0000b85c
    7c80:	0000aa0c 	.word	0x0000aa0c
    7c84:	0000aa24 	.word	0x0000aa24

00007c88 <z_tick_sleep>:
{
    7c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c8c:	4604      	mov	r4, r0
    7c8e:	460e      	mov	r6, r1
    7c90:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7c94:	2b00      	cmp	r3, #0
    7c96:	d14e      	bne.n	7d36 <z_tick_sleep+0xae>
	if (ticks == 0) {
    7c98:	ea54 0306 	orrs.w	r3, r4, r6
    7c9c:	d05c      	beq.n	7d58 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    7c9e:	f06f 0301 	mvn.w	r3, #1
    7ca2:	1b1b      	subs	r3, r3, r4
    7ca4:	f04f 32ff 	mov.w	r2, #4294967295
    7ca8:	eb62 0206 	sbc.w	r2, r2, r6
    7cac:	2b01      	cmp	r3, #1
    7cae:	f172 0300 	sbcs.w	r3, r2, #0
    7cb2:	db55      	blt.n	7d60 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7cb4:	f06f 0501 	mvn.w	r5, #1
    7cb8:	1b2d      	subs	r5, r5, r4
    7cba:	f04f 0320 	mov.w	r3, #32
    7cbe:	f3ef 8911 	mrs	r9, BASEPRI
    7cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    7cc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7cca:	4840      	ldr	r0, [pc, #256]	; (7dcc <z_tick_sleep+0x144>)
    7ccc:	f7fe f8f6 	bl	5ebc <z_spin_lock_valid>
    7cd0:	2800      	cmp	r0, #0
    7cd2:	d049      	beq.n	7d68 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    7cd4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 7dcc <z_tick_sleep+0x144>
    7cd8:	4640      	mov	r0, r8
    7cda:	f7fe f90f 	bl	5efc <z_spin_lock_set_owner>
	pending_current = _current;
    7cde:	4f3c      	ldr	r7, [pc, #240]	; (7dd0 <z_tick_sleep+0x148>)
    7ce0:	68b8      	ldr	r0, [r7, #8]
    7ce2:	4b3c      	ldr	r3, [pc, #240]	; (7dd4 <z_tick_sleep+0x14c>)
    7ce4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7ce6:	f7ff fbbb 	bl	7460 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7cea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7cec:	4622      	mov	r2, r4
    7cee:	4633      	mov	r3, r6
    7cf0:	4939      	ldr	r1, [pc, #228]	; (7dd8 <z_tick_sleep+0x150>)
    7cf2:	3018      	adds	r0, #24
    7cf4:	f000 f9dc 	bl	80b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7cf8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7cfa:	7b53      	ldrb	r3, [r2, #13]
    7cfc:	f043 0310 	orr.w	r3, r3, #16
    7d00:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d02:	4640      	mov	r0, r8
    7d04:	f7fe f8ea 	bl	5edc <z_spin_unlock_valid>
    7d08:	2800      	cmp	r0, #0
    7d0a:	d03d      	beq.n	7d88 <z_tick_sleep+0x100>
    7d0c:	4648      	mov	r0, r9
    7d0e:	f7fa fa4b 	bl	21a8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7d12:	4b2f      	ldr	r3, [pc, #188]	; (7dd0 <z_tick_sleep+0x148>)
    7d14:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    7d16:	7b5b      	ldrb	r3, [r3, #13]
    7d18:	f013 0f10 	tst.w	r3, #16
    7d1c:	d144      	bne.n	7da8 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7d1e:	f002 f9ca 	bl	a0b6 <sys_clock_tick_get_32>
    7d22:	1a28      	subs	r0, r5, r0
    7d24:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7d28:	2801      	cmp	r0, #1
    7d2a:	f173 0300 	sbcs.w	r3, r3, #0
    7d2e:	da00      	bge.n	7d32 <z_tick_sleep+0xaa>
	return 0;
    7d30:	2000      	movs	r0, #0
}
    7d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7d36:	4d29      	ldr	r5, [pc, #164]	; (7ddc <z_tick_sleep+0x154>)
    7d38:	f240 534e 	movw	r3, #1358	; 0x54e
    7d3c:	462a      	mov	r2, r5
    7d3e:	4928      	ldr	r1, [pc, #160]	; (7de0 <z_tick_sleep+0x158>)
    7d40:	4828      	ldr	r0, [pc, #160]	; (7de4 <z_tick_sleep+0x15c>)
    7d42:	f001 fb22 	bl	938a <assert_print>
    7d46:	4828      	ldr	r0, [pc, #160]	; (7de8 <z_tick_sleep+0x160>)
    7d48:	f001 fb1f 	bl	938a <assert_print>
    7d4c:	f240 514e 	movw	r1, #1358	; 0x54e
    7d50:	4628      	mov	r0, r5
    7d52:	f001 fb13 	bl	937c <assert_post_action>
    7d56:	e79f      	b.n	7c98 <z_tick_sleep+0x10>
	z_impl_k_yield();
    7d58:	f7ff fee8 	bl	7b2c <z_impl_k_yield>
		return 0;
    7d5c:	2000      	movs	r0, #0
    7d5e:	e7e8      	b.n	7d32 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7d60:	f002 f9a9 	bl	a0b6 <sys_clock_tick_get_32>
    7d64:	1905      	adds	r5, r0, r4
    7d66:	e7a8      	b.n	7cba <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d68:	4f20      	ldr	r7, [pc, #128]	; (7dec <z_tick_sleep+0x164>)
    7d6a:	238e      	movs	r3, #142	; 0x8e
    7d6c:	463a      	mov	r2, r7
    7d6e:	4920      	ldr	r1, [pc, #128]	; (7df0 <z_tick_sleep+0x168>)
    7d70:	481c      	ldr	r0, [pc, #112]	; (7de4 <z_tick_sleep+0x15c>)
    7d72:	f001 fb0a 	bl	938a <assert_print>
    7d76:	4915      	ldr	r1, [pc, #84]	; (7dcc <z_tick_sleep+0x144>)
    7d78:	481e      	ldr	r0, [pc, #120]	; (7df4 <z_tick_sleep+0x16c>)
    7d7a:	f001 fb06 	bl	938a <assert_print>
    7d7e:	218e      	movs	r1, #142	; 0x8e
    7d80:	4638      	mov	r0, r7
    7d82:	f001 fafb 	bl	937c <assert_post_action>
    7d86:	e7a5      	b.n	7cd4 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d88:	4c18      	ldr	r4, [pc, #96]	; (7dec <z_tick_sleep+0x164>)
    7d8a:	23d0      	movs	r3, #208	; 0xd0
    7d8c:	4622      	mov	r2, r4
    7d8e:	491a      	ldr	r1, [pc, #104]	; (7df8 <z_tick_sleep+0x170>)
    7d90:	4814      	ldr	r0, [pc, #80]	; (7de4 <z_tick_sleep+0x15c>)
    7d92:	f001 fafa 	bl	938a <assert_print>
    7d96:	4641      	mov	r1, r8
    7d98:	4818      	ldr	r0, [pc, #96]	; (7dfc <z_tick_sleep+0x174>)
    7d9a:	f001 faf6 	bl	938a <assert_print>
    7d9e:	21d0      	movs	r1, #208	; 0xd0
    7da0:	4620      	mov	r0, r4
    7da2:	f001 faeb 	bl	937c <assert_post_action>
    7da6:	e7b1      	b.n	7d0c <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7da8:	4c0c      	ldr	r4, [pc, #48]	; (7ddc <z_tick_sleep+0x154>)
    7daa:	f240 536f 	movw	r3, #1391	; 0x56f
    7dae:	4622      	mov	r2, r4
    7db0:	4913      	ldr	r1, [pc, #76]	; (7e00 <z_tick_sleep+0x178>)
    7db2:	480c      	ldr	r0, [pc, #48]	; (7de4 <z_tick_sleep+0x15c>)
    7db4:	f001 fae9 	bl	938a <assert_print>
    7db8:	480b      	ldr	r0, [pc, #44]	; (7de8 <z_tick_sleep+0x160>)
    7dba:	f001 fae6 	bl	938a <assert_print>
    7dbe:	f240 516f 	movw	r1, #1391	; 0x56f
    7dc2:	4620      	mov	r0, r4
    7dc4:	f001 fada 	bl	937c <assert_post_action>
    7dc8:	e7a9      	b.n	7d1e <z_tick_sleep+0x96>
    7dca:	bf00      	nop
    7dcc:	200012b4 	.word	0x200012b4
    7dd0:	20001278 	.word	0x20001278
    7dd4:	200012b0 	.word	0x200012b0
    7dd8:	00007379 	.word	0x00007379
    7ddc:	0000b820 	.word	0x0000b820
    7de0:	0000b6f8 	.word	0x0000b6f8
    7de4:	0000a4cc 	.word	0x0000a4cc
    7de8:	0000b778 	.word	0x0000b778
    7dec:	0000a9dc 	.word	0x0000a9dc
    7df0:	0000aa3c 	.word	0x0000aa3c
    7df4:	0000aa54 	.word	0x0000aa54
    7df8:	0000aa0c 	.word	0x0000aa0c
    7dfc:	0000aa24 	.word	0x0000aa24
    7e00:	0000b8dc 	.word	0x0000b8dc

00007e04 <z_impl_k_sleep>:
{
    7e04:	b570      	push	{r4, r5, r6, lr}
    7e06:	4605      	mov	r5, r0
    7e08:	460c      	mov	r4, r1
    7e0a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7e0e:	bb13      	cbnz	r3, 7e56 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7e10:	f1b4 3fff 	cmp.w	r4, #4294967295
    7e14:	bf08      	it	eq
    7e16:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    7e1a:	d02d      	beq.n	7e78 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    7e1c:	4628      	mov	r0, r5
    7e1e:	4621      	mov	r1, r4
    7e20:	f7ff ff32 	bl	7c88 <z_tick_sleep>
    7e24:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    7e26:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    7e28:	0151      	lsls	r1, r2, #5
    7e2a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    7e2e:	0143      	lsls	r3, r0, #5
    7e30:	1a1b      	subs	r3, r3, r0
    7e32:	eb61 0102 	sbc.w	r1, r1, r2
    7e36:	0088      	lsls	r0, r1, #2
    7e38:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    7e3c:	009b      	lsls	r3, r3, #2
    7e3e:	eb13 030c 	adds.w	r3, r3, ip
    7e42:	eb42 0000 	adc.w	r0, r2, r0
    7e46:	00c0      	lsls	r0, r0, #3
    7e48:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    7e4c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    7e50:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    7e54:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7e56:	4e0c      	ldr	r6, [pc, #48]	; (7e88 <z_impl_k_sleep+0x84>)
    7e58:	f240 537e 	movw	r3, #1406	; 0x57e
    7e5c:	4632      	mov	r2, r6
    7e5e:	490b      	ldr	r1, [pc, #44]	; (7e8c <z_impl_k_sleep+0x88>)
    7e60:	480b      	ldr	r0, [pc, #44]	; (7e90 <z_impl_k_sleep+0x8c>)
    7e62:	f001 fa92 	bl	938a <assert_print>
    7e66:	480b      	ldr	r0, [pc, #44]	; (7e94 <z_impl_k_sleep+0x90>)
    7e68:	f001 fa8f 	bl	938a <assert_print>
    7e6c:	f240 517e 	movw	r1, #1406	; 0x57e
    7e70:	4630      	mov	r0, r6
    7e72:	f001 fa83 	bl	937c <assert_post_action>
    7e76:	e7cb      	b.n	7e10 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    7e78:	4b07      	ldr	r3, [pc, #28]	; (7e98 <z_impl_k_sleep+0x94>)
    7e7a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7e7c:	f7ff fc88 	bl	7790 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    7e80:	f04f 30ff 	mov.w	r0, #4294967295
    7e84:	e7e6      	b.n	7e54 <z_impl_k_sleep+0x50>
    7e86:	bf00      	nop
    7e88:	0000b820 	.word	0x0000b820
    7e8c:	0000b6f8 	.word	0x0000b6f8
    7e90:	0000a4cc 	.word	0x0000a4cc
    7e94:	0000b778 	.word	0x0000b778
    7e98:	20001278 	.word	0x20001278

00007e9c <z_impl_z_current_get>:
}
    7e9c:	4b01      	ldr	r3, [pc, #4]	; (7ea4 <z_impl_z_current_get+0x8>)
    7e9e:	6898      	ldr	r0, [r3, #8]
    7ea0:	4770      	bx	lr
    7ea2:	bf00      	nop
    7ea4:	20001278 	.word	0x20001278

00007ea8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    7ea8:	b570      	push	{r4, r5, r6, lr}
    7eaa:	4604      	mov	r4, r0
    7eac:	f04f 0320 	mov.w	r3, #32
    7eb0:	f3ef 8511 	mrs	r5, BASEPRI
    7eb4:	f383 8812 	msr	BASEPRI_MAX, r3
    7eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ebc:	4840      	ldr	r0, [pc, #256]	; (7fc0 <z_thread_abort+0x118>)
    7ebe:	f7fd fffd 	bl	5ebc <z_spin_lock_valid>
    7ec2:	b1b8      	cbz	r0, 7ef4 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    7ec4:	483e      	ldr	r0, [pc, #248]	; (7fc0 <z_thread_abort+0x118>)
    7ec6:	f7fe f819 	bl	5efc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7eca:	7b63      	ldrb	r3, [r4, #13]
    7ecc:	f013 0f08 	tst.w	r3, #8
    7ed0:	d120      	bne.n	7f14 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    7ed2:	4620      	mov	r0, r4
    7ed4:	f7ff fd6c 	bl	79b0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    7ed8:	4b3a      	ldr	r3, [pc, #232]	; (7fc4 <z_thread_abort+0x11c>)
    7eda:	689b      	ldr	r3, [r3, #8]
    7edc:	42a3      	cmp	r3, r4
    7ede:	d032      	beq.n	7f46 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ee0:	4837      	ldr	r0, [pc, #220]	; (7fc0 <z_thread_abort+0x118>)
    7ee2:	f7fd fffb 	bl	5edc <z_spin_unlock_valid>
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d059      	beq.n	7f9e <z_thread_abort+0xf6>
	__asm__ volatile(
    7eea:	f385 8811 	msr	BASEPRI, r5
    7eee:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7ef2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ef4:	4e34      	ldr	r6, [pc, #208]	; (7fc8 <z_thread_abort+0x120>)
    7ef6:	238e      	movs	r3, #142	; 0x8e
    7ef8:	4632      	mov	r2, r6
    7efa:	4934      	ldr	r1, [pc, #208]	; (7fcc <z_thread_abort+0x124>)
    7efc:	4834      	ldr	r0, [pc, #208]	; (7fd0 <z_thread_abort+0x128>)
    7efe:	f001 fa44 	bl	938a <assert_print>
    7f02:	492f      	ldr	r1, [pc, #188]	; (7fc0 <z_thread_abort+0x118>)
    7f04:	4833      	ldr	r0, [pc, #204]	; (7fd4 <z_thread_abort+0x12c>)
    7f06:	f001 fa40 	bl	938a <assert_print>
    7f0a:	218e      	movs	r1, #142	; 0x8e
    7f0c:	4630      	mov	r0, r6
    7f0e:	f001 fa35 	bl	937c <assert_post_action>
    7f12:	e7d7      	b.n	7ec4 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f14:	482a      	ldr	r0, [pc, #168]	; (7fc0 <z_thread_abort+0x118>)
    7f16:	f7fd ffe1 	bl	5edc <z_spin_unlock_valid>
    7f1a:	b120      	cbz	r0, 7f26 <z_thread_abort+0x7e>
    7f1c:	f385 8811 	msr	BASEPRI, r5
    7f20:	f3bf 8f6f 	isb	sy
		return;
    7f24:	e7e5      	b.n	7ef2 <z_thread_abort+0x4a>
    7f26:	4c28      	ldr	r4, [pc, #160]	; (7fc8 <z_thread_abort+0x120>)
    7f28:	23b9      	movs	r3, #185	; 0xb9
    7f2a:	4622      	mov	r2, r4
    7f2c:	492a      	ldr	r1, [pc, #168]	; (7fd8 <z_thread_abort+0x130>)
    7f2e:	4828      	ldr	r0, [pc, #160]	; (7fd0 <z_thread_abort+0x128>)
    7f30:	f001 fa2b 	bl	938a <assert_print>
    7f34:	4922      	ldr	r1, [pc, #136]	; (7fc0 <z_thread_abort+0x118>)
    7f36:	4829      	ldr	r0, [pc, #164]	; (7fdc <z_thread_abort+0x134>)
    7f38:	f001 fa27 	bl	938a <assert_print>
    7f3c:	21b9      	movs	r1, #185	; 0xb9
    7f3e:	4620      	mov	r0, r4
    7f40:	f001 fa1c 	bl	937c <assert_post_action>
    7f44:	e7ea      	b.n	7f1c <z_thread_abort+0x74>
    7f46:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d1c8      	bne.n	7ee0 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f4e:	481c      	ldr	r0, [pc, #112]	; (7fc0 <z_thread_abort+0x118>)
    7f50:	f7fd ffc4 	bl	5edc <z_spin_unlock_valid>
    7f54:	b198      	cbz	r0, 7f7e <z_thread_abort+0xd6>
    7f56:	4628      	mov	r0, r5
    7f58:	f7fa f926 	bl	21a8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7f5c:	4c20      	ldr	r4, [pc, #128]	; (7fe0 <z_thread_abort+0x138>)
    7f5e:	f240 63ac 	movw	r3, #1708	; 0x6ac
    7f62:	4622      	mov	r2, r4
    7f64:	491f      	ldr	r1, [pc, #124]	; (7fe4 <z_thread_abort+0x13c>)
    7f66:	481a      	ldr	r0, [pc, #104]	; (7fd0 <z_thread_abort+0x128>)
    7f68:	f001 fa0f 	bl	938a <assert_print>
    7f6c:	481e      	ldr	r0, [pc, #120]	; (7fe8 <z_thread_abort+0x140>)
    7f6e:	f001 fa0c 	bl	938a <assert_print>
    7f72:	f240 61ac 	movw	r1, #1708	; 0x6ac
    7f76:	4620      	mov	r0, r4
    7f78:	f001 fa00 	bl	937c <assert_post_action>
    7f7c:	e7b0      	b.n	7ee0 <z_thread_abort+0x38>
    7f7e:	4c12      	ldr	r4, [pc, #72]	; (7fc8 <z_thread_abort+0x120>)
    7f80:	23d0      	movs	r3, #208	; 0xd0
    7f82:	4622      	mov	r2, r4
    7f84:	4914      	ldr	r1, [pc, #80]	; (7fd8 <z_thread_abort+0x130>)
    7f86:	4812      	ldr	r0, [pc, #72]	; (7fd0 <z_thread_abort+0x128>)
    7f88:	f001 f9ff 	bl	938a <assert_print>
    7f8c:	490c      	ldr	r1, [pc, #48]	; (7fc0 <z_thread_abort+0x118>)
    7f8e:	4813      	ldr	r0, [pc, #76]	; (7fdc <z_thread_abort+0x134>)
    7f90:	f001 f9fb 	bl	938a <assert_print>
    7f94:	21d0      	movs	r1, #208	; 0xd0
    7f96:	4620      	mov	r0, r4
    7f98:	f001 f9f0 	bl	937c <assert_post_action>
    7f9c:	e7db      	b.n	7f56 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f9e:	4c0a      	ldr	r4, [pc, #40]	; (7fc8 <z_thread_abort+0x120>)
    7fa0:	23b9      	movs	r3, #185	; 0xb9
    7fa2:	4622      	mov	r2, r4
    7fa4:	490c      	ldr	r1, [pc, #48]	; (7fd8 <z_thread_abort+0x130>)
    7fa6:	480a      	ldr	r0, [pc, #40]	; (7fd0 <z_thread_abort+0x128>)
    7fa8:	f001 f9ef 	bl	938a <assert_print>
    7fac:	4904      	ldr	r1, [pc, #16]	; (7fc0 <z_thread_abort+0x118>)
    7fae:	480b      	ldr	r0, [pc, #44]	; (7fdc <z_thread_abort+0x134>)
    7fb0:	f001 f9eb 	bl	938a <assert_print>
    7fb4:	21b9      	movs	r1, #185	; 0xb9
    7fb6:	4620      	mov	r0, r4
    7fb8:	f001 f9e0 	bl	937c <assert_post_action>
    7fbc:	e795      	b.n	7eea <z_thread_abort+0x42>
    7fbe:	bf00      	nop
    7fc0:	200012b4 	.word	0x200012b4
    7fc4:	20001278 	.word	0x20001278
    7fc8:	0000a9dc 	.word	0x0000a9dc
    7fcc:	0000aa3c 	.word	0x0000aa3c
    7fd0:	0000a4cc 	.word	0x0000a4cc
    7fd4:	0000aa54 	.word	0x0000aa54
    7fd8:	0000aa0c 	.word	0x0000aa0c
    7fdc:	0000aa24 	.word	0x0000aa24
    7fe0:	0000b820 	.word	0x0000b820
    7fe4:	0000a690 	.word	0x0000a690
    7fe8:	0000b91c 	.word	0x0000b91c

00007fec <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7fec:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7fee:	4806      	ldr	r0, [pc, #24]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7ff0:	4a06      	ldr	r2, [pc, #24]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7ff2:	1a12      	subs	r2, r2, r0
    7ff4:	4906      	ldr	r1, [pc, #24]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ff6:	f001 ff74 	bl	9ee2 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7ffa:	4a06      	ldr	r2, [pc, #24]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7ffc:	4906      	ldr	r1, [pc, #24]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7ffe:	4807      	ldr	r0, [pc, #28]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    8000:	f001 ff6f 	bl	9ee2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8004:	bd08      	pop	{r3, pc}
    8006:	bf00      	nop
    8008:	20000000 	.word	0x20000000
    800c:	200002c0 	.word	0x200002c0
    8010:	0000bbb8 	.word	0x0000bbb8
    8014:	00000000 	.word	0x00000000
    8018:	0000bbb8 	.word	0x0000bbb8
    801c:	20000000 	.word	0x20000000

00008020 <first>:
	return list->head == list;
    8020:	4b03      	ldr	r3, [pc, #12]	; (8030 <first+0x10>)
    8022:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8024:	4298      	cmp	r0, r3
    8026:	d000      	beq.n	802a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8028:	4770      	bx	lr
    802a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    802c:	e7fc      	b.n	8028 <first+0x8>
    802e:	bf00      	nop
    8030:	200000d8 	.word	0x200000d8

00008034 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8034:	b130      	cbz	r0, 8044 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8036:	4a04      	ldr	r2, [pc, #16]	; (8048 <next+0x14>)
    8038:	6852      	ldr	r2, [r2, #4]
    803a:	4290      	cmp	r0, r2
    803c:	d001      	beq.n	8042 <next+0xe>
    803e:	6800      	ldr	r0, [r0, #0]
    8040:	4770      	bx	lr
    8042:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8044:	4770      	bx	lr
    8046:	bf00      	nop
    8048:	200000d8 	.word	0x200000d8

0000804c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    804c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    804e:	4b04      	ldr	r3, [pc, #16]	; (8060 <elapsed+0x14>)
    8050:	681b      	ldr	r3, [r3, #0]
    8052:	b10b      	cbz	r3, 8058 <elapsed+0xc>
    8054:	2000      	movs	r0, #0
}
    8056:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8058:	f7fb fcb8 	bl	39cc <sys_clock_elapsed>
    805c:	e7fb      	b.n	8056 <elapsed+0xa>
    805e:	bf00      	nop
    8060:	200012c0 	.word	0x200012c0

00008064 <next_timeout>:

static int32_t next_timeout(void)
{
    8064:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    8066:	f7ff ffdb 	bl	8020 <first>
    806a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    806c:	f7ff ffee 	bl	804c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    8070:	b17c      	cbz	r4, 8092 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8072:	6923      	ldr	r3, [r4, #16]
    8074:	6962      	ldr	r2, [r4, #20]
    8076:	1a1b      	subs	r3, r3, r0
    8078:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    807c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8080:	f170 0200 	sbcs.w	r2, r0, #0
    8084:	da08      	bge.n	8098 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    8086:	2800      	cmp	r0, #0
    8088:	db01      	blt.n	808e <next_timeout+0x2a>
    808a:	4618      	mov	r0, r3
    808c:	e006      	b.n	809c <next_timeout+0x38>
    808e:	2300      	movs	r3, #0
    8090:	e7fb      	b.n	808a <next_timeout+0x26>
		ret = MAX_WAIT;
    8092:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8096:	e001      	b.n	809c <next_timeout+0x38>
    8098:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    809c:	4b03      	ldr	r3, [pc, #12]	; (80ac <next_timeout+0x48>)
    809e:	691b      	ldr	r3, [r3, #16]
    80a0:	b113      	cbz	r3, 80a8 <next_timeout+0x44>
    80a2:	4283      	cmp	r3, r0
    80a4:	da00      	bge.n	80a8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    80a6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    80a8:	bd10      	pop	{r4, pc}
    80aa:	bf00      	nop
    80ac:	20001278 	.word	0x20001278

000080b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    80b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    80b4:	bf08      	it	eq
    80b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    80ba:	f000 80c1 	beq.w	8240 <z_add_timeout+0x190>
{
    80be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80c2:	4604      	mov	r4, r0
    80c4:	460f      	mov	r7, r1
    80c6:	4692      	mov	sl, r2
    80c8:	461d      	mov	r5, r3
	return node->next != NULL;
    80ca:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    80cc:	b173      	cbz	r3, 80ec <z_add_timeout+0x3c>
    80ce:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8244 <z_add_timeout+0x194>
    80d2:	2363      	movs	r3, #99	; 0x63
    80d4:	4642      	mov	r2, r8
    80d6:	495c      	ldr	r1, [pc, #368]	; (8248 <z_add_timeout+0x198>)
    80d8:	485c      	ldr	r0, [pc, #368]	; (824c <z_add_timeout+0x19c>)
    80da:	f001 f956 	bl	938a <assert_print>
    80de:	485c      	ldr	r0, [pc, #368]	; (8250 <z_add_timeout+0x1a0>)
    80e0:	f001 f953 	bl	938a <assert_print>
    80e4:	2163      	movs	r1, #99	; 0x63
    80e6:	4640      	mov	r0, r8
    80e8:	f001 f948 	bl	937c <assert_post_action>
	to->fn = fn;
    80ec:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    80ee:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    80f2:	f04f 0320 	mov.w	r3, #32
    80f6:	f3ef 8711 	mrs	r7, BASEPRI
    80fa:	f383 8812 	msr	BASEPRI_MAX, r3
    80fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8102:	4854      	ldr	r0, [pc, #336]	; (8254 <z_add_timeout+0x1a4>)
    8104:	f7fd feda 	bl	5ebc <z_spin_lock_valid>
    8108:	b118      	cbz	r0, 8112 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    810a:	4852      	ldr	r0, [pc, #328]	; (8254 <z_add_timeout+0x1a4>)
    810c:	f7fd fef6 	bl	5efc <z_spin_lock_set_owner>
	return k;
    8110:	e038      	b.n	8184 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8112:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8258 <z_add_timeout+0x1a8>
    8116:	238e      	movs	r3, #142	; 0x8e
    8118:	464a      	mov	r2, r9
    811a:	4950      	ldr	r1, [pc, #320]	; (825c <z_add_timeout+0x1ac>)
    811c:	484b      	ldr	r0, [pc, #300]	; (824c <z_add_timeout+0x19c>)
    811e:	f001 f934 	bl	938a <assert_print>
    8122:	494c      	ldr	r1, [pc, #304]	; (8254 <z_add_timeout+0x1a4>)
    8124:	484e      	ldr	r0, [pc, #312]	; (8260 <z_add_timeout+0x1b0>)
    8126:	f001 f930 	bl	938a <assert_print>
    812a:	218e      	movs	r1, #142	; 0x8e
    812c:	4648      	mov	r0, r9
    812e:	f001 f925 	bl	937c <assert_post_action>
    8132:	e7ea      	b.n	810a <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8134:	f11a 0801 	adds.w	r8, sl, #1
    8138:	f145 0900 	adc.w	r9, r5, #0
    813c:	f7ff ff86 	bl	804c <elapsed>
    8140:	eb18 0300 	adds.w	r3, r8, r0
    8144:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    8148:	6123      	str	r3, [r4, #16]
    814a:	6160      	str	r0, [r4, #20]
    814c:	e03d      	b.n	81ca <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    814e:	1a51      	subs	r1, r2, r1
    8150:	eb66 0303 	sbc.w	r3, r6, r3
    8154:	6101      	str	r1, [r0, #16]
    8156:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    8158:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    815a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    815c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    815e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8160:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8162:	2800      	cmp	r0, #0
    8164:	d045      	beq.n	81f2 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8166:	f7ff ff5b 	bl	8020 <first>
    816a:	4284      	cmp	r4, r0
    816c:	d048      	beq.n	8200 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    816e:	4839      	ldr	r0, [pc, #228]	; (8254 <z_add_timeout+0x1a4>)
    8170:	f7fd feb4 	bl	5edc <z_spin_unlock_valid>
    8174:	2800      	cmp	r0, #0
    8176:	d050      	beq.n	821a <z_add_timeout+0x16a>
	__asm__ volatile(
    8178:	f387 8811 	msr	BASEPRI, r7
    817c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8180:	f04f 0801 	mov.w	r8, #1
    8184:	f1b8 0f00 	cmp.w	r8, #0
    8188:	d158      	bne.n	823c <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    818a:	4653      	mov	r3, sl
    818c:	f06f 0101 	mvn.w	r1, #1
    8190:	ebb1 010a 	subs.w	r1, r1, sl
    8194:	f04f 30ff 	mov.w	r0, #4294967295
    8198:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    819c:	2a00      	cmp	r2, #0
    819e:	dbc9      	blt.n	8134 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    81a0:	4a30      	ldr	r2, [pc, #192]	; (8264 <z_add_timeout+0x1b4>)
    81a2:	6811      	ldr	r1, [r2, #0]
    81a4:	6852      	ldr	r2, [r2, #4]
    81a6:	185b      	adds	r3, r3, r1
    81a8:	eb42 0205 	adc.w	r2, r2, r5
    81ac:	f06f 0101 	mvn.w	r1, #1
    81b0:	1acb      	subs	r3, r1, r3
    81b2:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    81b6:	4618      	mov	r0, r3
    81b8:	4611      	mov	r1, r2
    81ba:	2b01      	cmp	r3, #1
    81bc:	f172 0300 	sbcs.w	r3, r2, #0
    81c0:	da01      	bge.n	81c6 <z_add_timeout+0x116>
    81c2:	2001      	movs	r0, #1
    81c4:	2100      	movs	r1, #0
    81c6:	6120      	str	r0, [r4, #16]
    81c8:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    81ca:	f7ff ff29 	bl	8020 <first>
    81ce:	2800      	cmp	r0, #0
    81d0:	d0c7      	beq.n	8162 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    81d2:	6902      	ldr	r2, [r0, #16]
    81d4:	6946      	ldr	r6, [r0, #20]
    81d6:	6921      	ldr	r1, [r4, #16]
    81d8:	6963      	ldr	r3, [r4, #20]
    81da:	4291      	cmp	r1, r2
    81dc:	eb73 0c06 	sbcs.w	ip, r3, r6
    81e0:	dbb5      	blt.n	814e <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    81e2:	1a89      	subs	r1, r1, r2
    81e4:	eb63 0306 	sbc.w	r3, r3, r6
    81e8:	6121      	str	r1, [r4, #16]
    81ea:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    81ec:	f7ff ff22 	bl	8034 <next>
    81f0:	e7ed      	b.n	81ce <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    81f2:	4b1d      	ldr	r3, [pc, #116]	; (8268 <z_add_timeout+0x1b8>)
    81f4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    81f6:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    81f8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    81fa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    81fc:	605c      	str	r4, [r3, #4]
}
    81fe:	e7b2      	b.n	8166 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8200:	f7ff ff30 	bl	8064 <next_timeout>

			if (next_time == 0 ||
    8204:	4603      	mov	r3, r0
    8206:	b118      	cbz	r0, 8210 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    8208:	4a18      	ldr	r2, [pc, #96]	; (826c <z_add_timeout+0x1bc>)
    820a:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    820c:	4282      	cmp	r2, r0
    820e:	d0ae      	beq.n	816e <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    8210:	2100      	movs	r1, #0
    8212:	4618      	mov	r0, r3
    8214:	f7fb fba8 	bl	3968 <sys_clock_set_timeout>
    8218:	e7a9      	b.n	816e <z_add_timeout+0xbe>
    821a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8258 <z_add_timeout+0x1a8>
    821e:	23b9      	movs	r3, #185	; 0xb9
    8220:	4642      	mov	r2, r8
    8222:	4913      	ldr	r1, [pc, #76]	; (8270 <z_add_timeout+0x1c0>)
    8224:	4809      	ldr	r0, [pc, #36]	; (824c <z_add_timeout+0x19c>)
    8226:	f001 f8b0 	bl	938a <assert_print>
    822a:	490a      	ldr	r1, [pc, #40]	; (8254 <z_add_timeout+0x1a4>)
    822c:	4811      	ldr	r0, [pc, #68]	; (8274 <z_add_timeout+0x1c4>)
    822e:	f001 f8ac 	bl	938a <assert_print>
    8232:	21b9      	movs	r1, #185	; 0xb9
    8234:	4640      	mov	r0, r8
    8236:	f001 f8a1 	bl	937c <assert_post_action>
    823a:	e79d      	b.n	8178 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	0000b940 	.word	0x0000b940
    8248:	0000b964 	.word	0x0000b964
    824c:	0000a4cc 	.word	0x0000a4cc
    8250:	0000b778 	.word	0x0000b778
    8254:	200012c4 	.word	0x200012c4
    8258:	0000a9dc 	.word	0x0000a9dc
    825c:	0000aa3c 	.word	0x0000aa3c
    8260:	0000aa54 	.word	0x0000aa54
    8264:	200007b0 	.word	0x200007b0
    8268:	200000d8 	.word	0x200000d8
    826c:	20001278 	.word	0x20001278
    8270:	0000aa0c 	.word	0x0000aa0c
    8274:	0000aa24 	.word	0x0000aa24

00008278 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    827c:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    827e:	2400      	movs	r4, #0
	__asm__ volatile(
    8280:	f04f 0320 	mov.w	r3, #32
    8284:	f3ef 8711 	mrs	r7, BASEPRI
    8288:	f383 8812 	msr	BASEPRI_MAX, r3
    828c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8290:	481f      	ldr	r0, [pc, #124]	; (8310 <z_abort_timeout+0x98>)
    8292:	f7fd fe13 	bl	5ebc <z_spin_lock_valid>
    8296:	b128      	cbz	r0, 82a4 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8298:	481d      	ldr	r0, [pc, #116]	; (8310 <z_abort_timeout+0x98>)
    829a:	f7fd fe2f 	bl	5efc <z_spin_lock_set_owner>
	int ret = -EINVAL;
    829e:	f06f 0815 	mvn.w	r8, #21
	return k;
    82a2:	e018      	b.n	82d6 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82a4:	4e1b      	ldr	r6, [pc, #108]	; (8314 <z_abort_timeout+0x9c>)
    82a6:	238e      	movs	r3, #142	; 0x8e
    82a8:	4632      	mov	r2, r6
    82aa:	491b      	ldr	r1, [pc, #108]	; (8318 <z_abort_timeout+0xa0>)
    82ac:	481b      	ldr	r0, [pc, #108]	; (831c <z_abort_timeout+0xa4>)
    82ae:	f001 f86c 	bl	938a <assert_print>
    82b2:	4917      	ldr	r1, [pc, #92]	; (8310 <z_abort_timeout+0x98>)
    82b4:	481a      	ldr	r0, [pc, #104]	; (8320 <z_abort_timeout+0xa8>)
    82b6:	f001 f868 	bl	938a <assert_print>
    82ba:	218e      	movs	r1, #142	; 0x8e
    82bc:	4630      	mov	r0, r6
    82be:	f001 f85d 	bl	937c <assert_post_action>
    82c2:	e7e9      	b.n	8298 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82c4:	4812      	ldr	r0, [pc, #72]	; (8310 <z_abort_timeout+0x98>)
    82c6:	f7fd fe09 	bl	5edc <z_spin_unlock_valid>
    82ca:	b170      	cbz	r0, 82ea <z_abort_timeout+0x72>
	__asm__ volatile(
    82cc:	f387 8811 	msr	BASEPRI, r7
    82d0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    82d4:	2401      	movs	r4, #1
    82d6:	4626      	mov	r6, r4
    82d8:	b9bc      	cbnz	r4, 830a <z_abort_timeout+0x92>
	return node->next != NULL;
    82da:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    82dc:	2b00      	cmp	r3, #0
    82de:	d0f1      	beq.n	82c4 <z_abort_timeout+0x4c>
			remove_timeout(to);
    82e0:	4628      	mov	r0, r5
    82e2:	f001 fed1 	bl	a088 <remove_timeout>
			ret = 0;
    82e6:	46b0      	mov	r8, r6
    82e8:	e7ec      	b.n	82c4 <z_abort_timeout+0x4c>
    82ea:	4c0a      	ldr	r4, [pc, #40]	; (8314 <z_abort_timeout+0x9c>)
    82ec:	23b9      	movs	r3, #185	; 0xb9
    82ee:	4622      	mov	r2, r4
    82f0:	490c      	ldr	r1, [pc, #48]	; (8324 <z_abort_timeout+0xac>)
    82f2:	480a      	ldr	r0, [pc, #40]	; (831c <z_abort_timeout+0xa4>)
    82f4:	f001 f849 	bl	938a <assert_print>
    82f8:	4905      	ldr	r1, [pc, #20]	; (8310 <z_abort_timeout+0x98>)
    82fa:	480b      	ldr	r0, [pc, #44]	; (8328 <z_abort_timeout+0xb0>)
    82fc:	f001 f845 	bl	938a <assert_print>
    8300:	21b9      	movs	r1, #185	; 0xb9
    8302:	4620      	mov	r0, r4
    8304:	f001 f83a 	bl	937c <assert_post_action>
    8308:	e7e0      	b.n	82cc <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    830a:	4640      	mov	r0, r8
    830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8310:	200012c4 	.word	0x200012c4
    8314:	0000a9dc 	.word	0x0000a9dc
    8318:	0000aa3c 	.word	0x0000aa3c
    831c:	0000a4cc 	.word	0x0000a4cc
    8320:	0000aa54 	.word	0x0000aa54
    8324:	0000aa0c 	.word	0x0000aa0c
    8328:	0000aa24 	.word	0x0000aa24

0000832c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    832c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    832e:	2500      	movs	r5, #0
	__asm__ volatile(
    8330:	f04f 0320 	mov.w	r3, #32
    8334:	f3ef 8611 	mrs	r6, BASEPRI
    8338:	f383 8812 	msr	BASEPRI_MAX, r3
    833c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8340:	481c      	ldr	r0, [pc, #112]	; (83b4 <z_get_next_timeout_expiry+0x88>)
    8342:	f7fd fdbb 	bl	5ebc <z_spin_lock_valid>
    8346:	b128      	cbz	r0, 8354 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    8348:	481a      	ldr	r0, [pc, #104]	; (83b4 <z_get_next_timeout_expiry+0x88>)
    834a:	f7fd fdd7 	bl	5efc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    834e:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
    8352:	e014      	b.n	837e <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8354:	4c18      	ldr	r4, [pc, #96]	; (83b8 <z_get_next_timeout_expiry+0x8c>)
    8356:	238e      	movs	r3, #142	; 0x8e
    8358:	4622      	mov	r2, r4
    835a:	4918      	ldr	r1, [pc, #96]	; (83bc <z_get_next_timeout_expiry+0x90>)
    835c:	4818      	ldr	r0, [pc, #96]	; (83c0 <z_get_next_timeout_expiry+0x94>)
    835e:	f001 f814 	bl	938a <assert_print>
    8362:	4914      	ldr	r1, [pc, #80]	; (83b4 <z_get_next_timeout_expiry+0x88>)
    8364:	4817      	ldr	r0, [pc, #92]	; (83c4 <z_get_next_timeout_expiry+0x98>)
    8366:	f001 f810 	bl	938a <assert_print>
    836a:	218e      	movs	r1, #142	; 0x8e
    836c:	4620      	mov	r0, r4
    836e:	f001 f805 	bl	937c <assert_post_action>
    8372:	e7e9      	b.n	8348 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    8374:	f386 8811 	msr	BASEPRI, r6
    8378:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    837c:	2501      	movs	r5, #1
    837e:	b9bd      	cbnz	r5, 83b0 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    8380:	f7ff fe70 	bl	8064 <next_timeout>
    8384:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8386:	480b      	ldr	r0, [pc, #44]	; (83b4 <z_get_next_timeout_expiry+0x88>)
    8388:	f7fd fda8 	bl	5edc <z_spin_unlock_valid>
    838c:	2800      	cmp	r0, #0
    838e:	d1f1      	bne.n	8374 <z_get_next_timeout_expiry+0x48>
    8390:	4d09      	ldr	r5, [pc, #36]	; (83b8 <z_get_next_timeout_expiry+0x8c>)
    8392:	23b9      	movs	r3, #185	; 0xb9
    8394:	462a      	mov	r2, r5
    8396:	490c      	ldr	r1, [pc, #48]	; (83c8 <z_get_next_timeout_expiry+0x9c>)
    8398:	4809      	ldr	r0, [pc, #36]	; (83c0 <z_get_next_timeout_expiry+0x94>)
    839a:	f000 fff6 	bl	938a <assert_print>
    839e:	4905      	ldr	r1, [pc, #20]	; (83b4 <z_get_next_timeout_expiry+0x88>)
    83a0:	480a      	ldr	r0, [pc, #40]	; (83cc <z_get_next_timeout_expiry+0xa0>)
    83a2:	f000 fff2 	bl	938a <assert_print>
    83a6:	21b9      	movs	r1, #185	; 0xb9
    83a8:	4628      	mov	r0, r5
    83aa:	f000 ffe7 	bl	937c <assert_post_action>
    83ae:	e7e1      	b.n	8374 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    83b0:	4620      	mov	r0, r4
    83b2:	bd70      	pop	{r4, r5, r6, pc}
    83b4:	200012c4 	.word	0x200012c4
    83b8:	0000a9dc 	.word	0x0000a9dc
    83bc:	0000aa3c 	.word	0x0000aa3c
    83c0:	0000a4cc 	.word	0x0000a4cc
    83c4:	0000aa54 	.word	0x0000aa54
    83c8:	0000aa0c 	.word	0x0000aa0c
    83cc:	0000aa24 	.word	0x0000aa24

000083d0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    83d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83d4:	4606      	mov	r6, r0
    83d6:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    83d8:	2500      	movs	r5, #0
	__asm__ volatile(
    83da:	f04f 0320 	mov.w	r3, #32
    83de:	f3ef 8711 	mrs	r7, BASEPRI
    83e2:	f383 8812 	msr	BASEPRI_MAX, r3
    83e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83ea:	4825      	ldr	r0, [pc, #148]	; (8480 <z_set_timeout_expiry+0xb0>)
    83ec:	f7fd fd66 	bl	5ebc <z_spin_lock_valid>
    83f0:	b118      	cbz	r0, 83fa <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    83f2:	4823      	ldr	r0, [pc, #140]	; (8480 <z_set_timeout_expiry+0xb0>)
    83f4:	f7fd fd82 	bl	5efc <z_spin_lock_set_owner>
	return k;
    83f8:	e01e      	b.n	8438 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83fa:	4c22      	ldr	r4, [pc, #136]	; (8484 <z_set_timeout_expiry+0xb4>)
    83fc:	238e      	movs	r3, #142	; 0x8e
    83fe:	4622      	mov	r2, r4
    8400:	4921      	ldr	r1, [pc, #132]	; (8488 <z_set_timeout_expiry+0xb8>)
    8402:	4822      	ldr	r0, [pc, #136]	; (848c <z_set_timeout_expiry+0xbc>)
    8404:	f000 ffc1 	bl	938a <assert_print>
    8408:	491d      	ldr	r1, [pc, #116]	; (8480 <z_set_timeout_expiry+0xb0>)
    840a:	4821      	ldr	r0, [pc, #132]	; (8490 <z_set_timeout_expiry+0xc0>)
    840c:	f000 ffbd 	bl	938a <assert_print>
    8410:	218e      	movs	r1, #142	; 0x8e
    8412:	4620      	mov	r0, r4
    8414:	f000 ffb2 	bl	937c <assert_post_action>
    8418:	e7eb      	b.n	83f2 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    841a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    841c:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8420:	2801      	cmp	r0, #1
    8422:	dd00      	ble.n	8426 <z_set_timeout_expiry+0x56>
    8424:	b99c      	cbnz	r4, 844e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8426:	4816      	ldr	r0, [pc, #88]	; (8480 <z_set_timeout_expiry+0xb0>)
    8428:	f7fd fd58 	bl	5edc <z_spin_unlock_valid>
    842c:	b1b0      	cbz	r0, 845c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    842e:	f387 8811 	msr	BASEPRI, r7
    8432:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8436:	2501      	movs	r5, #1
    8438:	462c      	mov	r4, r5
    843a:	b9fd      	cbnz	r5, 847c <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    843c:	f7ff fe12 	bl	8064 <next_timeout>
			      || (ticks <= next_to);
    8440:	f1b0 3fff 	cmp.w	r0, #4294967295
    8444:	d0e9      	beq.n	841a <z_set_timeout_expiry+0x4a>
    8446:	42b0      	cmp	r0, r6
    8448:	dbe8      	blt.n	841c <z_set_timeout_expiry+0x4c>
    844a:	2401      	movs	r4, #1
    844c:	e7e6      	b.n	841c <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    844e:	4641      	mov	r1, r8
    8450:	42b0      	cmp	r0, r6
    8452:	bfa8      	it	ge
    8454:	4630      	movge	r0, r6
    8456:	f7fb fa87 	bl	3968 <sys_clock_set_timeout>
    845a:	e7e4      	b.n	8426 <z_set_timeout_expiry+0x56>
    845c:	4c09      	ldr	r4, [pc, #36]	; (8484 <z_set_timeout_expiry+0xb4>)
    845e:	23b9      	movs	r3, #185	; 0xb9
    8460:	4622      	mov	r2, r4
    8462:	490c      	ldr	r1, [pc, #48]	; (8494 <z_set_timeout_expiry+0xc4>)
    8464:	4809      	ldr	r0, [pc, #36]	; (848c <z_set_timeout_expiry+0xbc>)
    8466:	f000 ff90 	bl	938a <assert_print>
    846a:	4905      	ldr	r1, [pc, #20]	; (8480 <z_set_timeout_expiry+0xb0>)
    846c:	480a      	ldr	r0, [pc, #40]	; (8498 <z_set_timeout_expiry+0xc8>)
    846e:	f000 ff8c 	bl	938a <assert_print>
    8472:	21b9      	movs	r1, #185	; 0xb9
    8474:	4620      	mov	r0, r4
    8476:	f000 ff81 	bl	937c <assert_post_action>
    847a:	e7d8      	b.n	842e <z_set_timeout_expiry+0x5e>
		}
	}
}
    847c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8480:	200012c4 	.word	0x200012c4
    8484:	0000a9dc 	.word	0x0000a9dc
    8488:	0000aa3c 	.word	0x0000aa3c
    848c:	0000a4cc 	.word	0x0000a4cc
    8490:	0000aa54 	.word	0x0000aa54
    8494:	0000aa0c 	.word	0x0000aa0c
    8498:	0000aa24 	.word	0x0000aa24

0000849c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    849c:	b570      	push	{r4, r5, r6, lr}
    849e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    84a0:	f7fe fdbe 	bl	7020 <z_time_slice>
	__asm__ volatile(
    84a4:	f04f 0320 	mov.w	r3, #32
    84a8:	f3ef 8511 	mrs	r5, BASEPRI
    84ac:	f383 8812 	msr	BASEPRI_MAX, r3
    84b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84b4:	4854      	ldr	r0, [pc, #336]	; (8608 <sys_clock_announce+0x16c>)
    84b6:	f7fd fd01 	bl	5ebc <z_spin_lock_valid>
    84ba:	b128      	cbz	r0, 84c8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    84bc:	4852      	ldr	r0, [pc, #328]	; (8608 <sys_clock_announce+0x16c>)
    84be:	f7fd fd1d 	bl	5efc <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    84c2:	4b52      	ldr	r3, [pc, #328]	; (860c <sys_clock_announce+0x170>)
    84c4:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    84c6:	e022      	b.n	850e <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84c8:	4e51      	ldr	r6, [pc, #324]	; (8610 <sys_clock_announce+0x174>)
    84ca:	238e      	movs	r3, #142	; 0x8e
    84cc:	4632      	mov	r2, r6
    84ce:	4951      	ldr	r1, [pc, #324]	; (8614 <sys_clock_announce+0x178>)
    84d0:	4851      	ldr	r0, [pc, #324]	; (8618 <sys_clock_announce+0x17c>)
    84d2:	f000 ff5a 	bl	938a <assert_print>
    84d6:	494c      	ldr	r1, [pc, #304]	; (8608 <sys_clock_announce+0x16c>)
    84d8:	4850      	ldr	r0, [pc, #320]	; (861c <sys_clock_announce+0x180>)
    84da:	f000 ff56 	bl	938a <assert_print>
    84de:	218e      	movs	r1, #142	; 0x8e
    84e0:	4630      	mov	r0, r6
    84e2:	f000 ff4b 	bl	937c <assert_post_action>
    84e6:	e7e9      	b.n	84bc <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84e8:	4e49      	ldr	r6, [pc, #292]	; (8610 <sys_clock_announce+0x174>)
    84ea:	23b9      	movs	r3, #185	; 0xb9
    84ec:	4632      	mov	r2, r6
    84ee:	494c      	ldr	r1, [pc, #304]	; (8620 <sys_clock_announce+0x184>)
    84f0:	4849      	ldr	r0, [pc, #292]	; (8618 <sys_clock_announce+0x17c>)
    84f2:	f000 ff4a 	bl	938a <assert_print>
    84f6:	4944      	ldr	r1, [pc, #272]	; (8608 <sys_clock_announce+0x16c>)
    84f8:	484a      	ldr	r0, [pc, #296]	; (8624 <sys_clock_announce+0x188>)
    84fa:	f000 ff46 	bl	938a <assert_print>
    84fe:	21b9      	movs	r1, #185	; 0xb9
    8500:	4630      	mov	r0, r6
    8502:	f000 ff3b 	bl	937c <assert_post_action>
    8506:	e027      	b.n	8558 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    8508:	483f      	ldr	r0, [pc, #252]	; (8608 <sys_clock_announce+0x16c>)
    850a:	f7fd fcf7 	bl	5efc <z_spin_lock_set_owner>
    850e:	f7ff fd87 	bl	8020 <first>
    8512:	4604      	mov	r4, r0
    8514:	2800      	cmp	r0, #0
    8516:	d043      	beq.n	85a0 <sys_clock_announce+0x104>
    8518:	6902      	ldr	r2, [r0, #16]
    851a:	6941      	ldr	r1, [r0, #20]
    851c:	4b3b      	ldr	r3, [pc, #236]	; (860c <sys_clock_announce+0x170>)
    851e:	681b      	ldr	r3, [r3, #0]
    8520:	17d8      	asrs	r0, r3, #31
    8522:	4293      	cmp	r3, r2
    8524:	eb70 0101 	sbcs.w	r1, r0, r1
    8528:	db3a      	blt.n	85a0 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    852a:	483f      	ldr	r0, [pc, #252]	; (8628 <sys_clock_announce+0x18c>)
    852c:	6801      	ldr	r1, [r0, #0]
    852e:	6846      	ldr	r6, [r0, #4]
    8530:	1889      	adds	r1, r1, r2
    8532:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    8536:	6001      	str	r1, [r0, #0]
    8538:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    853a:	1a9b      	subs	r3, r3, r2
    853c:	4a33      	ldr	r2, [pc, #204]	; (860c <sys_clock_announce+0x170>)
    853e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    8540:	2200      	movs	r2, #0
    8542:	2300      	movs	r3, #0
    8544:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8548:	4620      	mov	r0, r4
    854a:	f001 fd9d 	bl	a088 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    854e:	482e      	ldr	r0, [pc, #184]	; (8608 <sys_clock_announce+0x16c>)
    8550:	f7fd fcc4 	bl	5edc <z_spin_unlock_valid>
    8554:	2800      	cmp	r0, #0
    8556:	d0c7      	beq.n	84e8 <sys_clock_announce+0x4c>
	__asm__ volatile(
    8558:	f385 8811 	msr	BASEPRI, r5
    855c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    8560:	68a3      	ldr	r3, [r4, #8]
    8562:	4620      	mov	r0, r4
    8564:	4798      	blx	r3
	__asm__ volatile(
    8566:	f04f 0320 	mov.w	r3, #32
    856a:	f3ef 8511 	mrs	r5, BASEPRI
    856e:	f383 8812 	msr	BASEPRI_MAX, r3
    8572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8576:	4824      	ldr	r0, [pc, #144]	; (8608 <sys_clock_announce+0x16c>)
    8578:	f7fd fca0 	bl	5ebc <z_spin_lock_valid>
    857c:	2800      	cmp	r0, #0
    857e:	d1c3      	bne.n	8508 <sys_clock_announce+0x6c>
    8580:	4c23      	ldr	r4, [pc, #140]	; (8610 <sys_clock_announce+0x174>)
    8582:	238e      	movs	r3, #142	; 0x8e
    8584:	4622      	mov	r2, r4
    8586:	4923      	ldr	r1, [pc, #140]	; (8614 <sys_clock_announce+0x178>)
    8588:	4823      	ldr	r0, [pc, #140]	; (8618 <sys_clock_announce+0x17c>)
    858a:	f000 fefe 	bl	938a <assert_print>
    858e:	491e      	ldr	r1, [pc, #120]	; (8608 <sys_clock_announce+0x16c>)
    8590:	4822      	ldr	r0, [pc, #136]	; (861c <sys_clock_announce+0x180>)
    8592:	f000 fefa 	bl	938a <assert_print>
    8596:	218e      	movs	r1, #142	; 0x8e
    8598:	4620      	mov	r0, r4
    859a:	f000 feef 	bl	937c <assert_post_action>
    859e:	e7b3      	b.n	8508 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    85a0:	b144      	cbz	r4, 85b4 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    85a2:	4b1a      	ldr	r3, [pc, #104]	; (860c <sys_clock_announce+0x170>)
    85a4:	6819      	ldr	r1, [r3, #0]
    85a6:	6923      	ldr	r3, [r4, #16]
    85a8:	6962      	ldr	r2, [r4, #20]
    85aa:	1a5b      	subs	r3, r3, r1
    85ac:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    85b0:	6123      	str	r3, [r4, #16]
    85b2:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    85b4:	4a1c      	ldr	r2, [pc, #112]	; (8628 <sys_clock_announce+0x18c>)
    85b6:	4e15      	ldr	r6, [pc, #84]	; (860c <sys_clock_announce+0x170>)
    85b8:	6830      	ldr	r0, [r6, #0]
    85ba:	6813      	ldr	r3, [r2, #0]
    85bc:	6851      	ldr	r1, [r2, #4]
    85be:	181b      	adds	r3, r3, r0
    85c0:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    85c4:	6013      	str	r3, [r2, #0]
    85c6:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    85c8:	2400      	movs	r4, #0
    85ca:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    85cc:	f7ff fd4a 	bl	8064 <next_timeout>
    85d0:	4621      	mov	r1, r4
    85d2:	f7fb f9c9 	bl	3968 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85d6:	480c      	ldr	r0, [pc, #48]	; (8608 <sys_clock_announce+0x16c>)
    85d8:	f7fd fc80 	bl	5edc <z_spin_unlock_valid>
    85dc:	b120      	cbz	r0, 85e8 <sys_clock_announce+0x14c>
	__asm__ volatile(
    85de:	f385 8811 	msr	BASEPRI, r5
    85e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    85e6:	bd70      	pop	{r4, r5, r6, pc}
    85e8:	4c09      	ldr	r4, [pc, #36]	; (8610 <sys_clock_announce+0x174>)
    85ea:	23b9      	movs	r3, #185	; 0xb9
    85ec:	4622      	mov	r2, r4
    85ee:	490c      	ldr	r1, [pc, #48]	; (8620 <sys_clock_announce+0x184>)
    85f0:	4809      	ldr	r0, [pc, #36]	; (8618 <sys_clock_announce+0x17c>)
    85f2:	f000 feca 	bl	938a <assert_print>
    85f6:	4904      	ldr	r1, [pc, #16]	; (8608 <sys_clock_announce+0x16c>)
    85f8:	480a      	ldr	r0, [pc, #40]	; (8624 <sys_clock_announce+0x188>)
    85fa:	f000 fec6 	bl	938a <assert_print>
    85fe:	21b9      	movs	r1, #185	; 0xb9
    8600:	4620      	mov	r0, r4
    8602:	f000 febb 	bl	937c <assert_post_action>
    8606:	e7ea      	b.n	85de <sys_clock_announce+0x142>
    8608:	200012c4 	.word	0x200012c4
    860c:	200012c0 	.word	0x200012c0
    8610:	0000a9dc 	.word	0x0000a9dc
    8614:	0000aa3c 	.word	0x0000aa3c
    8618:	0000a4cc 	.word	0x0000a4cc
    861c:	0000aa54 	.word	0x0000aa54
    8620:	0000aa0c 	.word	0x0000aa0c
    8624:	0000aa24 	.word	0x0000aa24
    8628:	200007b0 	.word	0x200007b0

0000862c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    862e:	2600      	movs	r6, #0
	__asm__ volatile(
    8630:	f04f 0320 	mov.w	r3, #32
    8634:	f3ef 8711 	mrs	r7, BASEPRI
    8638:	f383 8812 	msr	BASEPRI_MAX, r3
    863c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8640:	481f      	ldr	r0, [pc, #124]	; (86c0 <sys_clock_tick_get+0x94>)
    8642:	f7fd fc3b 	bl	5ebc <z_spin_lock_valid>
    8646:	b128      	cbz	r0, 8654 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    8648:	481d      	ldr	r0, [pc, #116]	; (86c0 <sys_clock_tick_get+0x94>)
    864a:	f7fd fc57 	bl	5efc <z_spin_lock_set_owner>
	uint64_t t = 0U;
    864e:	2400      	movs	r4, #0
    8650:	4625      	mov	r5, r4
	return k;
    8652:	e014      	b.n	867e <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8654:	4c1b      	ldr	r4, [pc, #108]	; (86c4 <sys_clock_tick_get+0x98>)
    8656:	238e      	movs	r3, #142	; 0x8e
    8658:	4622      	mov	r2, r4
    865a:	491b      	ldr	r1, [pc, #108]	; (86c8 <sys_clock_tick_get+0x9c>)
    865c:	481b      	ldr	r0, [pc, #108]	; (86cc <sys_clock_tick_get+0xa0>)
    865e:	f000 fe94 	bl	938a <assert_print>
    8662:	4917      	ldr	r1, [pc, #92]	; (86c0 <sys_clock_tick_get+0x94>)
    8664:	481a      	ldr	r0, [pc, #104]	; (86d0 <sys_clock_tick_get+0xa4>)
    8666:	f000 fe90 	bl	938a <assert_print>
    866a:	218e      	movs	r1, #142	; 0x8e
    866c:	4620      	mov	r0, r4
    866e:	f000 fe85 	bl	937c <assert_post_action>
    8672:	e7e9      	b.n	8648 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    8674:	f387 8811 	msr	BASEPRI, r7
    8678:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    867c:	2601      	movs	r6, #1
    867e:	b9e6      	cbnz	r6, 86ba <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    8680:	f7fb f9a4 	bl	39cc <sys_clock_elapsed>
    8684:	4b13      	ldr	r3, [pc, #76]	; (86d4 <sys_clock_tick_get+0xa8>)
    8686:	681c      	ldr	r4, [r3, #0]
    8688:	685d      	ldr	r5, [r3, #4]
    868a:	1904      	adds	r4, r0, r4
    868c:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8690:	480b      	ldr	r0, [pc, #44]	; (86c0 <sys_clock_tick_get+0x94>)
    8692:	f7fd fc23 	bl	5edc <z_spin_unlock_valid>
    8696:	2800      	cmp	r0, #0
    8698:	d1ec      	bne.n	8674 <sys_clock_tick_get+0x48>
    869a:	4e0a      	ldr	r6, [pc, #40]	; (86c4 <sys_clock_tick_get+0x98>)
    869c:	23b9      	movs	r3, #185	; 0xb9
    869e:	4632      	mov	r2, r6
    86a0:	490d      	ldr	r1, [pc, #52]	; (86d8 <sys_clock_tick_get+0xac>)
    86a2:	480a      	ldr	r0, [pc, #40]	; (86cc <sys_clock_tick_get+0xa0>)
    86a4:	f000 fe71 	bl	938a <assert_print>
    86a8:	4905      	ldr	r1, [pc, #20]	; (86c0 <sys_clock_tick_get+0x94>)
    86aa:	480c      	ldr	r0, [pc, #48]	; (86dc <sys_clock_tick_get+0xb0>)
    86ac:	f000 fe6d 	bl	938a <assert_print>
    86b0:	21b9      	movs	r1, #185	; 0xb9
    86b2:	4630      	mov	r0, r6
    86b4:	f000 fe62 	bl	937c <assert_post_action>
    86b8:	e7dc      	b.n	8674 <sys_clock_tick_get+0x48>
	}
	return t;
}
    86ba:	4620      	mov	r0, r4
    86bc:	4629      	mov	r1, r5
    86be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86c0:	200012c4 	.word	0x200012c4
    86c4:	0000a9dc 	.word	0x0000a9dc
    86c8:	0000aa3c 	.word	0x0000aa3c
    86cc:	0000a4cc 	.word	0x0000a4cc
    86d0:	0000aa54 	.word	0x0000aa54
    86d4:	200007b0 	.word	0x200007b0
    86d8:	0000aa0c 	.word	0x0000aa0c
    86dc:	0000aa24 	.word	0x0000aa24

000086e0 <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	b082      	sub	sp, #8
    86e4:	4606      	mov	r6, r0
    86e6:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    86e8:	2300      	movs	r3, #0
    86ea:	3204      	adds	r2, #4
    86ec:	d222      	bcs.n	8734 <z_heap_aligned_alloc+0x54>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    86ee:	bb1b      	cbnz	r3, 8738 <z_heap_aligned_alloc+0x58>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    86f0:	2000      	movs	r0, #0
    86f2:	2100      	movs	r1, #0
    86f4:	e9cd 0100 	strd	r0, r1, [sp]
    86f8:	f044 0104 	orr.w	r1, r4, #4
    86fc:	4630      	mov	r0, r6
    86fe:	f000 f8b9 	bl	8874 <k_heap_aligned_alloc>
	if (mem == NULL) {
    8702:	4605      	mov	r5, r0
    8704:	b1c8      	cbz	r0, 873a <z_heap_aligned_alloc+0x5a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
    8706:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    870a:	b1b4      	cbz	r4, 873a <z_heap_aligned_alloc+0x5a>
    870c:	1e63      	subs	r3, r4, #1
    870e:	421d      	tst	r5, r3
    8710:	d013      	beq.n	873a <z_heap_aligned_alloc+0x5a>
    8712:	4e0b      	ldr	r6, [pc, #44]	; (8740 <z_heap_aligned_alloc+0x60>)
    8714:	2325      	movs	r3, #37	; 0x25
    8716:	4632      	mov	r2, r6
    8718:	490a      	ldr	r1, [pc, #40]	; (8744 <z_heap_aligned_alloc+0x64>)
    871a:	480b      	ldr	r0, [pc, #44]	; (8748 <z_heap_aligned_alloc+0x68>)
    871c:	f000 fe35 	bl	938a <assert_print>
    8720:	4622      	mov	r2, r4
    8722:	4629      	mov	r1, r5
    8724:	4809      	ldr	r0, [pc, #36]	; (874c <z_heap_aligned_alloc+0x6c>)
    8726:	f000 fe30 	bl	938a <assert_print>
    872a:	2125      	movs	r1, #37	; 0x25
    872c:	4630      	mov	r0, r6
    872e:	f000 fe25 	bl	937c <assert_post_action>
    8732:	e002      	b.n	873a <z_heap_aligned_alloc+0x5a>
    8734:	2301      	movs	r3, #1
    8736:	e7da      	b.n	86ee <z_heap_aligned_alloc+0xe>
		return NULL;
    8738:	2500      	movs	r5, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    873a:	4628      	mov	r0, r5
    873c:	b002      	add	sp, #8
    873e:	bd70      	pop	{r4, r5, r6, pc}
    8740:	0000b984 	.word	0x0000b984
    8744:	0000b9a8 	.word	0x0000b9a8
    8748:	0000a4cc 	.word	0x0000a4cc
    874c:	0000b9dc 	.word	0x0000b9dc

00008750 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    8750:	b570      	push	{r4, r5, r6, lr}
    8752:	4604      	mov	r4, r0
    8754:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    8756:	2803      	cmp	r0, #3
    8758:	d902      	bls.n	8760 <k_aligned_alloc+0x10>
    875a:	f010 0f03 	tst.w	r0, #3
    875e:	d00d      	beq.n	877c <k_aligned_alloc+0x2c>
    8760:	4e12      	ldr	r6, [pc, #72]	; (87ac <k_aligned_alloc+0x5c>)
    8762:	2342      	movs	r3, #66	; 0x42
    8764:	4632      	mov	r2, r6
    8766:	4912      	ldr	r1, [pc, #72]	; (87b0 <k_aligned_alloc+0x60>)
    8768:	4812      	ldr	r0, [pc, #72]	; (87b4 <k_aligned_alloc+0x64>)
    876a:	f000 fe0e 	bl	938a <assert_print>
    876e:	4812      	ldr	r0, [pc, #72]	; (87b8 <k_aligned_alloc+0x68>)
    8770:	f000 fe0b 	bl	938a <assert_print>
    8774:	2142      	movs	r1, #66	; 0x42
    8776:	4630      	mov	r0, r6
    8778:	f000 fe00 	bl	937c <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    877c:	1e63      	subs	r3, r4, #1
    877e:	4223      	tst	r3, r4
    8780:	d105      	bne.n	878e <k_aligned_alloc+0x3e>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    8782:	462a      	mov	r2, r5
    8784:	4621      	mov	r1, r4
    8786:	480d      	ldr	r0, [pc, #52]	; (87bc <k_aligned_alloc+0x6c>)
    8788:	f7ff ffaa 	bl	86e0 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    878c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((align & (align - 1)) == 0,
    878e:	4e07      	ldr	r6, [pc, #28]	; (87ac <k_aligned_alloc+0x5c>)
    8790:	2346      	movs	r3, #70	; 0x46
    8792:	4632      	mov	r2, r6
    8794:	490a      	ldr	r1, [pc, #40]	; (87c0 <k_aligned_alloc+0x70>)
    8796:	4807      	ldr	r0, [pc, #28]	; (87b4 <k_aligned_alloc+0x64>)
    8798:	f000 fdf7 	bl	938a <assert_print>
    879c:	4809      	ldr	r0, [pc, #36]	; (87c4 <k_aligned_alloc+0x74>)
    879e:	f000 fdf4 	bl	938a <assert_print>
    87a2:	2146      	movs	r1, #70	; 0x46
    87a4:	4630      	mov	r0, r6
    87a6:	f000 fde9 	bl	937c <assert_post_action>
    87aa:	e7ea      	b.n	8782 <k_aligned_alloc+0x32>
    87ac:	0000b984 	.word	0x0000b984
    87b0:	0000ba04 	.word	0x0000ba04
    87b4:	0000a4cc 	.word	0x0000a4cc
    87b8:	0000ba44 	.word	0x0000ba44
    87bc:	20000244 	.word	0x20000244
    87c0:	0000ab40 	.word	0x0000ab40
    87c4:	0000ab5c 	.word	0x0000ab5c

000087c8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    87c8:	4b01      	ldr	r3, [pc, #4]	; (87d0 <k_thread_system_pool_assign+0x8>)
    87ca:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    87ce:	4770      	bx	lr
    87d0:	20000244 	.word	0x20000244

000087d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    87d4:	b538      	push	{r3, r4, r5, lr}
    87d6:	4604      	mov	r4, r0
    87d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    87da:	f001 fbbe 	bl	9f5a <k_is_in_isr>
    87de:	b948      	cbnz	r0, 87f4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    87e0:	4b05      	ldr	r3, [pc, #20]	; (87f8 <z_thread_aligned_alloc+0x24>)
    87e2:	689b      	ldr	r3, [r3, #8]
    87e4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    87e8:	b118      	cbz	r0, 87f2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    87ea:	462a      	mov	r2, r5
    87ec:	4621      	mov	r1, r4
    87ee:	f7ff ff77 	bl	86e0 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    87f2:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    87f4:	4801      	ldr	r0, [pc, #4]	; (87fc <z_thread_aligned_alloc+0x28>)
    87f6:	e7f7      	b.n	87e8 <z_thread_aligned_alloc+0x14>
    87f8:	20001278 	.word	0x20001278
    87fc:	20000244 	.word	0x20000244

00008800 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    8800:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8802:	4a03      	ldr	r2, [pc, #12]	; (8810 <boot_banner+0x10>)
    8804:	4903      	ldr	r1, [pc, #12]	; (8814 <boot_banner+0x14>)
    8806:	4804      	ldr	r0, [pc, #16]	; (8818 <boot_banner+0x18>)
    8808:	f000 fb31 	bl	8e6e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    880c:	bd08      	pop	{r3, pc}
    880e:	bf00      	nop
    8810:	0000af80 	.word	0x0000af80
    8814:	0000ba74 	.word	0x0000ba74
    8818:	0000ba84 	.word	0x0000ba84

0000881c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    881c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    881e:	4c0f      	ldr	r4, [pc, #60]	; (885c <statics_init+0x40>)
    8820:	e008      	b.n	8834 <statics_init+0x18>
    8822:	4b0f      	ldr	r3, [pc, #60]	; (8860 <statics_init+0x44>)
    8824:	429c      	cmp	r4, r3
    8826:	d217      	bcs.n	8858 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8828:	68a2      	ldr	r2, [r4, #8]
    882a:	6861      	ldr	r1, [r4, #4]
    882c:	4620      	mov	r0, r4
    882e:	f001 fc89 	bl	a144 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8832:	3418      	adds	r4, #24
    8834:	4b0a      	ldr	r3, [pc, #40]	; (8860 <statics_init+0x44>)
    8836:	429c      	cmp	r4, r3
    8838:	d9f3      	bls.n	8822 <statics_init+0x6>
    883a:	4d0a      	ldr	r5, [pc, #40]	; (8864 <statics_init+0x48>)
    883c:	2318      	movs	r3, #24
    883e:	462a      	mov	r2, r5
    8840:	4909      	ldr	r1, [pc, #36]	; (8868 <statics_init+0x4c>)
    8842:	480a      	ldr	r0, [pc, #40]	; (886c <statics_init+0x50>)
    8844:	f000 fda1 	bl	938a <assert_print>
    8848:	4809      	ldr	r0, [pc, #36]	; (8870 <statics_init+0x54>)
    884a:	f000 fd9e 	bl	938a <assert_print>
    884e:	2118      	movs	r1, #24
    8850:	4628      	mov	r0, r5
    8852:	f000 fd93 	bl	937c <assert_post_action>
    8856:	e7e4      	b.n	8822 <statics_init+0x6>
		}
	}
	return 0;
}
    8858:	2000      	movs	r0, #0
    885a:	bd38      	pop	{r3, r4, r5, pc}
    885c:	20000244 	.word	0x20000244
    8860:	2000025c 	.word	0x2000025c
    8864:	0000baac 	.word	0x0000baac
    8868:	0000bad0 	.word	0x0000bad0
    886c:	0000a4cc 	.word	0x0000a4cc
    8870:	0000b52c 	.word	0x0000b52c

00008874 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    8874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8878:	b085      	sub	sp, #20
    887a:	4680      	mov	r8, r0
    887c:	468b      	mov	fp, r1
    887e:	9203      	str	r2, [sp, #12]
    8880:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    8884:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8886:	4648      	mov	r0, r9
    8888:	4621      	mov	r1, r4
    888a:	f001 fc1e 	bl	a0ca <sys_clock_timeout_end_calc>
    888e:	4607      	mov	r7, r0
    8890:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8892:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
    8896:	f04f 0320 	mov.w	r3, #32
    889a:	f3ef 8511 	mrs	r5, BASEPRI
    889e:	f383 8812 	msr	BASEPRI_MAX, r3
    88a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88a6:	4630      	mov	r0, r6
    88a8:	f7fd fb08 	bl	5ebc <z_spin_lock_valid>
    88ac:	b160      	cbz	r0, 88c8 <k_heap_aligned_alloc+0x54>
	z_spin_lock_set_owner(l);
    88ae:	4630      	mov	r0, r6
    88b0:	f7fd fb24 	bl	5efc <z_spin_lock_set_owner>
    88b4:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    88b8:	b113      	cbz	r3, 88c0 <k_heap_aligned_alloc+0x4c>
    88ba:	ea54 0309 	orrs.w	r3, r4, r9
    88be:	d112      	bne.n	88e6 <k_heap_aligned_alloc+0x72>

	bool blocked_alloc = false;
    88c0:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
    88c4:	464c      	mov	r4, r9

	while (ret == NULL) {
    88c6:	e034      	b.n	8932 <k_heap_aligned_alloc+0xbe>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88c8:	238e      	movs	r3, #142	; 0x8e
    88ca:	4a3b      	ldr	r2, [pc, #236]	; (89b8 <k_heap_aligned_alloc+0x144>)
    88cc:	493b      	ldr	r1, [pc, #236]	; (89bc <k_heap_aligned_alloc+0x148>)
    88ce:	483c      	ldr	r0, [pc, #240]	; (89c0 <k_heap_aligned_alloc+0x14c>)
    88d0:	f000 fd5b 	bl	938a <assert_print>
    88d4:	4631      	mov	r1, r6
    88d6:	483b      	ldr	r0, [pc, #236]	; (89c4 <k_heap_aligned_alloc+0x150>)
    88d8:	f000 fd57 	bl	938a <assert_print>
    88dc:	218e      	movs	r1, #142	; 0x8e
    88de:	4836      	ldr	r0, [pc, #216]	; (89b8 <k_heap_aligned_alloc+0x144>)
    88e0:	f000 fd4c 	bl	937c <assert_post_action>
    88e4:	e7e3      	b.n	88ae <k_heap_aligned_alloc+0x3a>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    88e6:	4c38      	ldr	r4, [pc, #224]	; (89c8 <k_heap_aligned_alloc+0x154>)
    88e8:	2349      	movs	r3, #73	; 0x49
    88ea:	4622      	mov	r2, r4
    88ec:	4937      	ldr	r1, [pc, #220]	; (89cc <k_heap_aligned_alloc+0x158>)
    88ee:	4834      	ldr	r0, [pc, #208]	; (89c0 <k_heap_aligned_alloc+0x14c>)
    88f0:	f000 fd4b 	bl	938a <assert_print>
    88f4:	4836      	ldr	r0, [pc, #216]	; (89d0 <k_heap_aligned_alloc+0x15c>)
    88f6:	f000 fd48 	bl	938a <assert_print>
    88fa:	2149      	movs	r1, #73	; 0x49
    88fc:	4620      	mov	r0, r4
    88fe:	f000 fd3d 	bl	937c <assert_post_action>
    8902:	e7dd      	b.n	88c0 <k_heap_aligned_alloc+0x4c>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    8904:	9000      	str	r0, [sp, #0]
    8906:	9101      	str	r1, [sp, #4]
    8908:	f108 020c 	add.w	r2, r8, #12
    890c:	4629      	mov	r1, r5
    890e:	4630      	mov	r0, r6
    8910:	f7fe fe60 	bl	75d4 <z_pend_curr>
    8914:	f04f 0320 	mov.w	r3, #32
    8918:	f3ef 8511 	mrs	r5, BASEPRI
    891c:	f383 8812 	msr	BASEPRI_MAX, r3
    8920:	f3bf 8f6f 	isb	sy
    8924:	4630      	mov	r0, r6
    8926:	f7fd fac9 	bl	5ebc <z_spin_lock_valid>
    892a:	b1c8      	cbz	r0, 8960 <k_heap_aligned_alloc+0xec>
	z_spin_lock_set_owner(l);
    892c:	4630      	mov	r0, r6
    892e:	f7fd fae5 	bl	5efc <z_spin_lock_set_owner>
	while (ret == NULL) {
    8932:	bb24      	cbnz	r4, 897e <k_heap_aligned_alloc+0x10a>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    8934:	9a03      	ldr	r2, [sp, #12]
    8936:	4659      	mov	r1, fp
    8938:	4640      	mov	r0, r8
    893a:	f7f8 fb1d 	bl	f78 <sys_heap_aligned_alloc>
    893e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    8940:	f7ff fe74 	bl	862c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    8944:	b9dc      	cbnz	r4, 897e <k_heap_aligned_alloc+0x10a>
		    (ret != NULL) || ((end - now) <= 0)) {
    8946:	1a38      	subs	r0, r7, r0
    8948:	eb6a 0101 	sbc.w	r1, sl, r1
    894c:	2801      	cmp	r0, #1
    894e:	f171 0300 	sbcs.w	r3, r1, #0
    8952:	db14      	blt.n	897e <k_heap_aligned_alloc+0x10a>
		if (!blocked_alloc) {
    8954:	f1b9 0f00 	cmp.w	r9, #0
    8958:	d1d4      	bne.n	8904 <k_heap_aligned_alloc+0x90>
			blocked_alloc = true;
    895a:	f04f 0901 	mov.w	r9, #1
    895e:	e7d1      	b.n	8904 <k_heap_aligned_alloc+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8960:	238e      	movs	r3, #142	; 0x8e
    8962:	4a15      	ldr	r2, [pc, #84]	; (89b8 <k_heap_aligned_alloc+0x144>)
    8964:	4915      	ldr	r1, [pc, #84]	; (89bc <k_heap_aligned_alloc+0x148>)
    8966:	4816      	ldr	r0, [pc, #88]	; (89c0 <k_heap_aligned_alloc+0x14c>)
    8968:	f000 fd0f 	bl	938a <assert_print>
    896c:	4631      	mov	r1, r6
    896e:	4815      	ldr	r0, [pc, #84]	; (89c4 <k_heap_aligned_alloc+0x150>)
    8970:	f000 fd0b 	bl	938a <assert_print>
    8974:	218e      	movs	r1, #142	; 0x8e
    8976:	4810      	ldr	r0, [pc, #64]	; (89b8 <k_heap_aligned_alloc+0x144>)
    8978:	f000 fd00 	bl	937c <assert_post_action>
    897c:	e7d6      	b.n	892c <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    897e:	4630      	mov	r0, r6
    8980:	f7fd faac 	bl	5edc <z_spin_unlock_valid>
    8984:	b138      	cbz	r0, 8996 <k_heap_aligned_alloc+0x122>
	__asm__ volatile(
    8986:	f385 8811 	msr	BASEPRI, r5
    898a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    898e:	4620      	mov	r0, r4
    8990:	b005      	add	sp, #20
    8992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8996:	4f08      	ldr	r7, [pc, #32]	; (89b8 <k_heap_aligned_alloc+0x144>)
    8998:	23b9      	movs	r3, #185	; 0xb9
    899a:	463a      	mov	r2, r7
    899c:	490d      	ldr	r1, [pc, #52]	; (89d4 <k_heap_aligned_alloc+0x160>)
    899e:	4808      	ldr	r0, [pc, #32]	; (89c0 <k_heap_aligned_alloc+0x14c>)
    89a0:	f000 fcf3 	bl	938a <assert_print>
    89a4:	4631      	mov	r1, r6
    89a6:	480c      	ldr	r0, [pc, #48]	; (89d8 <k_heap_aligned_alloc+0x164>)
    89a8:	f000 fcef 	bl	938a <assert_print>
    89ac:	21b9      	movs	r1, #185	; 0xb9
    89ae:	4638      	mov	r0, r7
    89b0:	f000 fce4 	bl	937c <assert_post_action>
    89b4:	e7e7      	b.n	8986 <k_heap_aligned_alloc+0x112>
    89b6:	bf00      	nop
    89b8:	0000a9dc 	.word	0x0000a9dc
    89bc:	0000aa3c 	.word	0x0000aa3c
    89c0:	0000a4cc 	.word	0x0000a4cc
    89c4:	0000aa54 	.word	0x0000aa54
    89c8:	0000baac 	.word	0x0000baac
    89cc:	0000bae8 	.word	0x0000bae8
    89d0:	0000b778 	.word	0x0000b778
    89d4:	0000aa0c 	.word	0x0000aa0c
    89d8:	0000aa24 	.word	0x0000aa24

000089dc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    89dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89e0:	4604      	mov	r4, r0
    89e2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    89e4:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    89e8:	f04f 0320 	mov.w	r3, #32
    89ec:	f3ef 8711 	mrs	r7, BASEPRI
    89f0:	f383 8812 	msr	BASEPRI_MAX, r3
    89f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89f8:	4628      	mov	r0, r5
    89fa:	f7fd fa5f 	bl	5ebc <z_spin_lock_valid>
    89fe:	b188      	cbz	r0, 8a24 <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
    8a00:	4628      	mov	r0, r5
    8a02:	f7fd fa7b 	bl	5efc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    8a06:	4631      	mov	r1, r6
    8a08:	4620      	mov	r0, r4
    8a0a:	f7f8 fa5f 	bl	ecc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    8a0e:	f104 000c 	add.w	r0, r4, #12
    8a12:	f001 fb25 	bl	a060 <z_unpend_all>
    8a16:	b1b0      	cbz	r0, 8a46 <k_heap_free+0x6a>
		z_reschedule(&h->lock, key);
    8a18:	4639      	mov	r1, r7
    8a1a:	4628      	mov	r0, r5
    8a1c:	f7fe f8fc 	bl	6c18 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    8a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a24:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8a78 <k_heap_free+0x9c>
    8a28:	238e      	movs	r3, #142	; 0x8e
    8a2a:	4642      	mov	r2, r8
    8a2c:	4913      	ldr	r1, [pc, #76]	; (8a7c <k_heap_free+0xa0>)
    8a2e:	4814      	ldr	r0, [pc, #80]	; (8a80 <k_heap_free+0xa4>)
    8a30:	f000 fcab 	bl	938a <assert_print>
    8a34:	4629      	mov	r1, r5
    8a36:	4813      	ldr	r0, [pc, #76]	; (8a84 <k_heap_free+0xa8>)
    8a38:	f000 fca7 	bl	938a <assert_print>
    8a3c:	218e      	movs	r1, #142	; 0x8e
    8a3e:	4640      	mov	r0, r8
    8a40:	f000 fc9c 	bl	937c <assert_post_action>
    8a44:	e7dc      	b.n	8a00 <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a46:	4628      	mov	r0, r5
    8a48:	f7fd fa48 	bl	5edc <z_spin_unlock_valid>
    8a4c:	b120      	cbz	r0, 8a58 <k_heap_free+0x7c>
	__asm__ volatile(
    8a4e:	f387 8811 	msr	BASEPRI, r7
    8a52:	f3bf 8f6f 	isb	sy
    8a56:	e7e3      	b.n	8a20 <k_heap_free+0x44>
    8a58:	4c07      	ldr	r4, [pc, #28]	; (8a78 <k_heap_free+0x9c>)
    8a5a:	23b9      	movs	r3, #185	; 0xb9
    8a5c:	4622      	mov	r2, r4
    8a5e:	490a      	ldr	r1, [pc, #40]	; (8a88 <k_heap_free+0xac>)
    8a60:	4807      	ldr	r0, [pc, #28]	; (8a80 <k_heap_free+0xa4>)
    8a62:	f000 fc92 	bl	938a <assert_print>
    8a66:	4629      	mov	r1, r5
    8a68:	4808      	ldr	r0, [pc, #32]	; (8a8c <k_heap_free+0xb0>)
    8a6a:	f000 fc8e 	bl	938a <assert_print>
    8a6e:	21b9      	movs	r1, #185	; 0xb9
    8a70:	4620      	mov	r0, r4
    8a72:	f000 fc83 	bl	937c <assert_post_action>
    8a76:	e7ea      	b.n	8a4e <k_heap_free+0x72>
    8a78:	0000a9dc 	.word	0x0000a9dc
    8a7c:	0000aa3c 	.word	0x0000aa3c
    8a80:	0000a4cc 	.word	0x0000a4cc
    8a84:	0000aa54 	.word	0x0000aa54
    8a88:	0000aa0c 	.word	0x0000aa0c
    8a8c:	0000aa24 	.word	0x0000aa24

00008a90 <nrf_cc3xx_platform_init_no_rng>:
    8a90:	b510      	push	{r4, lr}
    8a92:	4c0a      	ldr	r4, [pc, #40]	; (8abc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8a94:	6823      	ldr	r3, [r4, #0]
    8a96:	b11b      	cbz	r3, 8aa0 <nrf_cc3xx_platform_init_no_rng+0x10>
    8a98:	2301      	movs	r3, #1
    8a9a:	6023      	str	r3, [r4, #0]
    8a9c:	2000      	movs	r0, #0
    8a9e:	bd10      	pop	{r4, pc}
    8aa0:	f000 f8ce 	bl	8c40 <CC_LibInitNoRng>
    8aa4:	2800      	cmp	r0, #0
    8aa6:	d0f7      	beq.n	8a98 <nrf_cc3xx_platform_init_no_rng+0x8>
    8aa8:	3801      	subs	r0, #1
    8aaa:	2806      	cmp	r0, #6
    8aac:	d803      	bhi.n	8ab6 <nrf_cc3xx_platform_init_no_rng+0x26>
    8aae:	4b04      	ldr	r3, [pc, #16]	; (8ac0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8ab0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8ab4:	bd10      	pop	{r4, pc}
    8ab6:	4803      	ldr	r0, [pc, #12]	; (8ac4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8ab8:	bd10      	pop	{r4, pc}
    8aba:	bf00      	nop
    8abc:	200012c8 	.word	0x200012c8
    8ac0:	0000bb30 	.word	0x0000bb30
    8ac4:	ffff8ffe 	.word	0xffff8ffe

00008ac8 <nrf_cc3xx_platform_abort>:
    8ac8:	f3bf 8f4f 	dsb	sy
    8acc:	4905      	ldr	r1, [pc, #20]	; (8ae4 <nrf_cc3xx_platform_abort+0x1c>)
    8ace:	4b06      	ldr	r3, [pc, #24]	; (8ae8 <nrf_cc3xx_platform_abort+0x20>)
    8ad0:	68ca      	ldr	r2, [r1, #12]
    8ad2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8ad6:	4313      	orrs	r3, r2
    8ad8:	60cb      	str	r3, [r1, #12]
    8ada:	f3bf 8f4f 	dsb	sy
    8ade:	bf00      	nop
    8ae0:	e7fd      	b.n	8ade <nrf_cc3xx_platform_abort+0x16>
    8ae2:	bf00      	nop
    8ae4:	e000ed00 	.word	0xe000ed00
    8ae8:	05fa0004 	.word	0x05fa0004

00008aec <CC_PalAbort>:
    8aec:	b410      	push	{r4}
    8aee:	4b09      	ldr	r3, [pc, #36]	; (8b14 <CC_PalAbort+0x28>)
    8af0:	4909      	ldr	r1, [pc, #36]	; (8b18 <CC_PalAbort+0x2c>)
    8af2:	4c0a      	ldr	r4, [pc, #40]	; (8b1c <CC_PalAbort+0x30>)
    8af4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8af8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8afc:	6849      	ldr	r1, [r1, #4]
    8afe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8b02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8b06:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8b0a:	2300      	movs	r3, #0
    8b0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8b10:	bc10      	pop	{r4}
    8b12:	4708      	bx	r1
    8b14:	5002b000 	.word	0x5002b000
    8b18:	200000e0 	.word	0x200000e0
    8b1c:	5002a000 	.word	0x5002a000

00008b20 <nrf_cc3xx_platform_set_abort>:
    8b20:	e9d0 1200 	ldrd	r1, r2, [r0]
    8b24:	4b01      	ldr	r3, [pc, #4]	; (8b2c <nrf_cc3xx_platform_set_abort+0xc>)
    8b26:	e9c3 1200 	strd	r1, r2, [r3]
    8b2a:	4770      	bx	lr
    8b2c:	200000e0 	.word	0x200000e0

00008b30 <mutex_free>:
    8b30:	b510      	push	{r4, lr}
    8b32:	4604      	mov	r4, r0
    8b34:	b130      	cbz	r0, 8b44 <mutex_free+0x14>
    8b36:	6863      	ldr	r3, [r4, #4]
    8b38:	06db      	lsls	r3, r3, #27
    8b3a:	d502      	bpl.n	8b42 <mutex_free+0x12>
    8b3c:	2300      	movs	r3, #0
    8b3e:	6023      	str	r3, [r4, #0]
    8b40:	6063      	str	r3, [r4, #4]
    8b42:	bd10      	pop	{r4, pc}
    8b44:	4b02      	ldr	r3, [pc, #8]	; (8b50 <mutex_free+0x20>)
    8b46:	4803      	ldr	r0, [pc, #12]	; (8b54 <mutex_free+0x24>)
    8b48:	685b      	ldr	r3, [r3, #4]
    8b4a:	4798      	blx	r3
    8b4c:	e7f3      	b.n	8b36 <mutex_free+0x6>
    8b4e:	bf00      	nop
    8b50:	200000e0 	.word	0x200000e0
    8b54:	0000bb4c 	.word	0x0000bb4c

00008b58 <mutex_lock>:
    8b58:	b1b0      	cbz	r0, 8b88 <mutex_lock+0x30>
    8b5a:	6843      	ldr	r3, [r0, #4]
    8b5c:	b193      	cbz	r3, 8b84 <mutex_lock+0x2c>
    8b5e:	06db      	lsls	r3, r3, #27
    8b60:	d50e      	bpl.n	8b80 <mutex_lock+0x28>
    8b62:	2301      	movs	r3, #1
    8b64:	e850 2f00 	ldrex	r2, [r0]
    8b68:	4619      	mov	r1, r3
    8b6a:	e840 1c00 	strex	ip, r1, [r0]
    8b6e:	f09c 0f00 	teq	ip, #0
    8b72:	d1f7      	bne.n	8b64 <mutex_lock+0xc>
    8b74:	2a01      	cmp	r2, #1
    8b76:	d0f5      	beq.n	8b64 <mutex_lock+0xc>
    8b78:	f3bf 8f5f 	dmb	sy
    8b7c:	2000      	movs	r0, #0
    8b7e:	4770      	bx	lr
    8b80:	4803      	ldr	r0, [pc, #12]	; (8b90 <mutex_lock+0x38>)
    8b82:	4770      	bx	lr
    8b84:	4803      	ldr	r0, [pc, #12]	; (8b94 <mutex_lock+0x3c>)
    8b86:	4770      	bx	lr
    8b88:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b8c:	4770      	bx	lr
    8b8e:	bf00      	nop
    8b90:	ffff8fe9 	.word	0xffff8fe9
    8b94:	ffff8fea 	.word	0xffff8fea

00008b98 <mutex_unlock>:
    8b98:	b168      	cbz	r0, 8bb6 <mutex_unlock+0x1e>
    8b9a:	6843      	ldr	r3, [r0, #4]
    8b9c:	b13b      	cbz	r3, 8bae <mutex_unlock+0x16>
    8b9e:	06db      	lsls	r3, r3, #27
    8ba0:	d507      	bpl.n	8bb2 <mutex_unlock+0x1a>
    8ba2:	f3bf 8f5f 	dmb	sy
    8ba6:	2300      	movs	r3, #0
    8ba8:	6003      	str	r3, [r0, #0]
    8baa:	4618      	mov	r0, r3
    8bac:	4770      	bx	lr
    8bae:	4803      	ldr	r0, [pc, #12]	; (8bbc <mutex_unlock+0x24>)
    8bb0:	4770      	bx	lr
    8bb2:	4803      	ldr	r0, [pc, #12]	; (8bc0 <mutex_unlock+0x28>)
    8bb4:	4770      	bx	lr
    8bb6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8bba:	4770      	bx	lr
    8bbc:	ffff8fea 	.word	0xffff8fea
    8bc0:	ffff8fe9 	.word	0xffff8fe9

00008bc4 <mutex_init>:
    8bc4:	b510      	push	{r4, lr}
    8bc6:	4604      	mov	r4, r0
    8bc8:	b120      	cbz	r0, 8bd4 <mutex_init+0x10>
    8bca:	2200      	movs	r2, #0
    8bcc:	2311      	movs	r3, #17
    8bce:	6022      	str	r2, [r4, #0]
    8bd0:	6063      	str	r3, [r4, #4]
    8bd2:	bd10      	pop	{r4, pc}
    8bd4:	4801      	ldr	r0, [pc, #4]	; (8bdc <mutex_init+0x18>)
    8bd6:	f7ff ff89 	bl	8aec <CC_PalAbort>
    8bda:	e7f6      	b.n	8bca <mutex_init+0x6>
    8bdc:	0000bb74 	.word	0x0000bb74

00008be0 <nrf_cc3xx_platform_set_mutexes>:
    8be0:	b570      	push	{r4, r5, r6, lr}
    8be2:	e9d0 2300 	ldrd	r2, r3, [r0]
    8be6:	4c13      	ldr	r4, [pc, #76]	; (8c34 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8be8:	4d13      	ldr	r5, [pc, #76]	; (8c38 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8bea:	6063      	str	r3, [r4, #4]
    8bec:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8bf0:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8bf4:	6022      	str	r2, [r4, #0]
    8bf6:	4b11      	ldr	r3, [pc, #68]	; (8c3c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8bf8:	6808      	ldr	r0, [r1, #0]
    8bfa:	6018      	str	r0, [r3, #0]
    8bfc:	6848      	ldr	r0, [r1, #4]
    8bfe:	6058      	str	r0, [r3, #4]
    8c00:	6888      	ldr	r0, [r1, #8]
    8c02:	6098      	str	r0, [r3, #8]
    8c04:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8c08:	60d8      	str	r0, [r3, #12]
    8c0a:	6119      	str	r1, [r3, #16]
    8c0c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    8c10:	06db      	lsls	r3, r3, #27
    8c12:	d50d      	bpl.n	8c30 <nrf_cc3xx_platform_set_mutexes+0x50>
    8c14:	2300      	movs	r3, #0
    8c16:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    8c1a:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    8c1e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8c22:	4790      	blx	r2
    8c24:	6823      	ldr	r3, [r4, #0]
    8c26:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c2e:	4718      	bx	r3
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	bf00      	nop
    8c34:	200000f0 	.word	0x200000f0
    8c38:	200012e0 	.word	0x200012e0
    8c3c:	20000100 	.word	0x20000100

00008c40 <CC_LibInitNoRng>:
    8c40:	b538      	push	{r3, r4, r5, lr}
    8c42:	f000 f82f 	bl	8ca4 <CC_HalInit>
    8c46:	b120      	cbz	r0, 8c52 <CC_LibInitNoRng+0x12>
    8c48:	2403      	movs	r4, #3
    8c4a:	f000 f863 	bl	8d14 <CC_PalTerminate>
    8c4e:	4620      	mov	r0, r4
    8c50:	bd38      	pop	{r3, r4, r5, pc}
    8c52:	f000 f831 	bl	8cb8 <CC_PalInit>
    8c56:	b998      	cbnz	r0, 8c80 <CC_LibInitNoRng+0x40>
    8c58:	f000 f8ac 	bl	8db4 <CC_PalPowerSaveModeSelect>
    8c5c:	b998      	cbnz	r0, 8c86 <CC_LibInitNoRng+0x46>
    8c5e:	4d0f      	ldr	r5, [pc, #60]	; (8c9c <CC_LibInitNoRng+0x5c>)
    8c60:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8c64:	0e1b      	lsrs	r3, r3, #24
    8c66:	2bf0      	cmp	r3, #240	; 0xf0
    8c68:	d108      	bne.n	8c7c <CC_LibInitNoRng+0x3c>
    8c6a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8c6e:	4b0c      	ldr	r3, [pc, #48]	; (8ca0 <CC_LibInitNoRng+0x60>)
    8c70:	429a      	cmp	r2, r3
    8c72:	d00a      	beq.n	8c8a <CC_LibInitNoRng+0x4a>
    8c74:	2407      	movs	r4, #7
    8c76:	f000 f817 	bl	8ca8 <CC_HalTerminate>
    8c7a:	e7e6      	b.n	8c4a <CC_LibInitNoRng+0xa>
    8c7c:	2406      	movs	r4, #6
    8c7e:	e7fa      	b.n	8c76 <CC_LibInitNoRng+0x36>
    8c80:	2404      	movs	r4, #4
    8c82:	4620      	mov	r0, r4
    8c84:	bd38      	pop	{r3, r4, r5, pc}
    8c86:	2400      	movs	r4, #0
    8c88:	e7f5      	b.n	8c76 <CC_LibInitNoRng+0x36>
    8c8a:	2001      	movs	r0, #1
    8c8c:	f000 f892 	bl	8db4 <CC_PalPowerSaveModeSelect>
    8c90:	4604      	mov	r4, r0
    8c92:	2800      	cmp	r0, #0
    8c94:	d1f7      	bne.n	8c86 <CC_LibInitNoRng+0x46>
    8c96:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8c9a:	e7d8      	b.n	8c4e <CC_LibInitNoRng+0xe>
    8c9c:	5002b000 	.word	0x5002b000
    8ca0:	20e00000 	.word	0x20e00000

00008ca4 <CC_HalInit>:
    8ca4:	2000      	movs	r0, #0
    8ca6:	4770      	bx	lr

00008ca8 <CC_HalTerminate>:
    8ca8:	2000      	movs	r0, #0
    8caa:	4770      	bx	lr

00008cac <CC_HalMaskInterrupt>:
    8cac:	4b01      	ldr	r3, [pc, #4]	; (8cb4 <CC_HalMaskInterrupt+0x8>)
    8cae:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    8cb2:	4770      	bx	lr
    8cb4:	5002b000 	.word	0x5002b000

00008cb8 <CC_PalInit>:
    8cb8:	b510      	push	{r4, lr}
    8cba:	4811      	ldr	r0, [pc, #68]	; (8d00 <CC_PalInit+0x48>)
    8cbc:	f000 f848 	bl	8d50 <CC_PalMutexCreate>
    8cc0:	b100      	cbz	r0, 8cc4 <CC_PalInit+0xc>
    8cc2:	bd10      	pop	{r4, pc}
    8cc4:	480f      	ldr	r0, [pc, #60]	; (8d04 <CC_PalInit+0x4c>)
    8cc6:	f000 f843 	bl	8d50 <CC_PalMutexCreate>
    8cca:	2800      	cmp	r0, #0
    8ccc:	d1f9      	bne.n	8cc2 <CC_PalInit+0xa>
    8cce:	4c0e      	ldr	r4, [pc, #56]	; (8d08 <CC_PalInit+0x50>)
    8cd0:	4620      	mov	r0, r4
    8cd2:	f000 f83d 	bl	8d50 <CC_PalMutexCreate>
    8cd6:	2800      	cmp	r0, #0
    8cd8:	d1f3      	bne.n	8cc2 <CC_PalInit+0xa>
    8cda:	4b0c      	ldr	r3, [pc, #48]	; (8d0c <CC_PalInit+0x54>)
    8cdc:	480c      	ldr	r0, [pc, #48]	; (8d10 <CC_PalInit+0x58>)
    8cde:	601c      	str	r4, [r3, #0]
    8ce0:	f000 f836 	bl	8d50 <CC_PalMutexCreate>
    8ce4:	4601      	mov	r1, r0
    8ce6:	2800      	cmp	r0, #0
    8ce8:	d1eb      	bne.n	8cc2 <CC_PalInit+0xa>
    8cea:	f000 f82d 	bl	8d48 <CC_PalDmaInit>
    8cee:	4604      	mov	r4, r0
    8cf0:	b108      	cbz	r0, 8cf6 <CC_PalInit+0x3e>
    8cf2:	4620      	mov	r0, r4
    8cf4:	bd10      	pop	{r4, pc}
    8cf6:	f000 f83f 	bl	8d78 <CC_PalPowerSaveModeInit>
    8cfa:	4620      	mov	r0, r4
    8cfc:	e7fa      	b.n	8cf4 <CC_PalInit+0x3c>
    8cfe:	bf00      	nop
    8d00:	20000138 	.word	0x20000138
    8d04:	2000012c 	.word	0x2000012c
    8d08:	20000134 	.word	0x20000134
    8d0c:	2000013c 	.word	0x2000013c
    8d10:	20000130 	.word	0x20000130

00008d14 <CC_PalTerminate>:
    8d14:	b508      	push	{r3, lr}
    8d16:	4808      	ldr	r0, [pc, #32]	; (8d38 <CC_PalTerminate+0x24>)
    8d18:	f000 f824 	bl	8d64 <CC_PalMutexDestroy>
    8d1c:	4807      	ldr	r0, [pc, #28]	; (8d3c <CC_PalTerminate+0x28>)
    8d1e:	f000 f821 	bl	8d64 <CC_PalMutexDestroy>
    8d22:	4807      	ldr	r0, [pc, #28]	; (8d40 <CC_PalTerminate+0x2c>)
    8d24:	f000 f81e 	bl	8d64 <CC_PalMutexDestroy>
    8d28:	4806      	ldr	r0, [pc, #24]	; (8d44 <CC_PalTerminate+0x30>)
    8d2a:	f000 f81b 	bl	8d64 <CC_PalMutexDestroy>
    8d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8d32:	f000 b80b 	b.w	8d4c <CC_PalDmaTerminate>
    8d36:	bf00      	nop
    8d38:	20000138 	.word	0x20000138
    8d3c:	2000012c 	.word	0x2000012c
    8d40:	20000134 	.word	0x20000134
    8d44:	20000130 	.word	0x20000130

00008d48 <CC_PalDmaInit>:
    8d48:	2000      	movs	r0, #0
    8d4a:	4770      	bx	lr

00008d4c <CC_PalDmaTerminate>:
    8d4c:	4770      	bx	lr
    8d4e:	bf00      	nop

00008d50 <CC_PalMutexCreate>:
    8d50:	b508      	push	{r3, lr}
    8d52:	4b03      	ldr	r3, [pc, #12]	; (8d60 <CC_PalMutexCreate+0x10>)
    8d54:	6802      	ldr	r2, [r0, #0]
    8d56:	681b      	ldr	r3, [r3, #0]
    8d58:	6810      	ldr	r0, [r2, #0]
    8d5a:	4798      	blx	r3
    8d5c:	2000      	movs	r0, #0
    8d5e:	bd08      	pop	{r3, pc}
    8d60:	200000f0 	.word	0x200000f0

00008d64 <CC_PalMutexDestroy>:
    8d64:	b508      	push	{r3, lr}
    8d66:	4b03      	ldr	r3, [pc, #12]	; (8d74 <CC_PalMutexDestroy+0x10>)
    8d68:	6802      	ldr	r2, [r0, #0]
    8d6a:	685b      	ldr	r3, [r3, #4]
    8d6c:	6810      	ldr	r0, [r2, #0]
    8d6e:	4798      	blx	r3
    8d70:	2000      	movs	r0, #0
    8d72:	bd08      	pop	{r3, pc}
    8d74:	200000f0 	.word	0x200000f0

00008d78 <CC_PalPowerSaveModeInit>:
    8d78:	b570      	push	{r4, r5, r6, lr}
    8d7a:	4c09      	ldr	r4, [pc, #36]	; (8da0 <CC_PalPowerSaveModeInit+0x28>)
    8d7c:	4d09      	ldr	r5, [pc, #36]	; (8da4 <CC_PalPowerSaveModeInit+0x2c>)
    8d7e:	6920      	ldr	r0, [r4, #16]
    8d80:	68ab      	ldr	r3, [r5, #8]
    8d82:	4798      	blx	r3
    8d84:	b118      	cbz	r0, 8d8e <CC_PalPowerSaveModeInit+0x16>
    8d86:	4b08      	ldr	r3, [pc, #32]	; (8da8 <CC_PalPowerSaveModeInit+0x30>)
    8d88:	4808      	ldr	r0, [pc, #32]	; (8dac <CC_PalPowerSaveModeInit+0x34>)
    8d8a:	685b      	ldr	r3, [r3, #4]
    8d8c:	4798      	blx	r3
    8d8e:	4a08      	ldr	r2, [pc, #32]	; (8db0 <CC_PalPowerSaveModeInit+0x38>)
    8d90:	68eb      	ldr	r3, [r5, #12]
    8d92:	6920      	ldr	r0, [r4, #16]
    8d94:	2100      	movs	r1, #0
    8d96:	6011      	str	r1, [r2, #0]
    8d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d9c:	4718      	bx	r3
    8d9e:	bf00      	nop
    8da0:	20000100 	.word	0x20000100
    8da4:	200000f0 	.word	0x200000f0
    8da8:	200000e0 	.word	0x200000e0
    8dac:	0000bb98 	.word	0x0000bb98
    8db0:	200012dc 	.word	0x200012dc

00008db4 <CC_PalPowerSaveModeSelect>:
    8db4:	b570      	push	{r4, r5, r6, lr}
    8db6:	4d1b      	ldr	r5, [pc, #108]	; (8e24 <CC_PalPowerSaveModeSelect+0x70>)
    8db8:	4e1b      	ldr	r6, [pc, #108]	; (8e28 <CC_PalPowerSaveModeSelect+0x74>)
    8dba:	4604      	mov	r4, r0
    8dbc:	68b2      	ldr	r2, [r6, #8]
    8dbe:	6928      	ldr	r0, [r5, #16]
    8dc0:	4790      	blx	r2
    8dc2:	b9f8      	cbnz	r0, 8e04 <CC_PalPowerSaveModeSelect+0x50>
    8dc4:	b15c      	cbz	r4, 8dde <CC_PalPowerSaveModeSelect+0x2a>
    8dc6:	4c19      	ldr	r4, [pc, #100]	; (8e2c <CC_PalPowerSaveModeSelect+0x78>)
    8dc8:	6823      	ldr	r3, [r4, #0]
    8dca:	b1b3      	cbz	r3, 8dfa <CC_PalPowerSaveModeSelect+0x46>
    8dcc:	2b01      	cmp	r3, #1
    8dce:	d01b      	beq.n	8e08 <CC_PalPowerSaveModeSelect+0x54>
    8dd0:	3b01      	subs	r3, #1
    8dd2:	6023      	str	r3, [r4, #0]
    8dd4:	6928      	ldr	r0, [r5, #16]
    8dd6:	68f3      	ldr	r3, [r6, #12]
    8dd8:	4798      	blx	r3
    8dda:	2000      	movs	r0, #0
    8ddc:	bd70      	pop	{r4, r5, r6, pc}
    8dde:	4c13      	ldr	r4, [pc, #76]	; (8e2c <CC_PalPowerSaveModeSelect+0x78>)
    8de0:	6821      	ldr	r1, [r4, #0]
    8de2:	b941      	cbnz	r1, 8df6 <CC_PalPowerSaveModeSelect+0x42>
    8de4:	4b12      	ldr	r3, [pc, #72]	; (8e30 <CC_PalPowerSaveModeSelect+0x7c>)
    8de6:	2201      	movs	r2, #1
    8de8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8dec:	4a11      	ldr	r2, [pc, #68]	; (8e34 <CC_PalPowerSaveModeSelect+0x80>)
    8dee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8df2:	2b00      	cmp	r3, #0
    8df4:	d1fb      	bne.n	8dee <CC_PalPowerSaveModeSelect+0x3a>
    8df6:	3101      	adds	r1, #1
    8df8:	6021      	str	r1, [r4, #0]
    8dfa:	68f3      	ldr	r3, [r6, #12]
    8dfc:	6928      	ldr	r0, [r5, #16]
    8dfe:	4798      	blx	r3
    8e00:	2000      	movs	r0, #0
    8e02:	bd70      	pop	{r4, r5, r6, pc}
    8e04:	480c      	ldr	r0, [pc, #48]	; (8e38 <CC_PalPowerSaveModeSelect+0x84>)
    8e06:	bd70      	pop	{r4, r5, r6, pc}
    8e08:	4a0a      	ldr	r2, [pc, #40]	; (8e34 <CC_PalPowerSaveModeSelect+0x80>)
    8e0a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d1fb      	bne.n	8e0a <CC_PalPowerSaveModeSelect+0x56>
    8e12:	4a07      	ldr	r2, [pc, #28]	; (8e30 <CC_PalPowerSaveModeSelect+0x7c>)
    8e14:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8e18:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8e1c:	f7ff ff46 	bl	8cac <CC_HalMaskInterrupt>
    8e20:	6823      	ldr	r3, [r4, #0]
    8e22:	e7d5      	b.n	8dd0 <CC_PalPowerSaveModeSelect+0x1c>
    8e24:	20000100 	.word	0x20000100
    8e28:	200000f0 	.word	0x200000f0
    8e2c:	200012dc 	.word	0x200012dc
    8e30:	5002a000 	.word	0x5002a000
    8e34:	5002b000 	.word	0x5002b000
    8e38:	ffff8fe9 	.word	0xffff8fe9

00008e3c <sys_notify_validate>:
	if (notify == NULL) {
    8e3c:	4602      	mov	r2, r0
    8e3e:	b158      	cbz	r0, 8e58 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8e40:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8e42:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    8e46:	2b01      	cmp	r3, #1
    8e48:	d003      	beq.n	8e52 <sys_notify_validate+0x16>
    8e4a:	2b03      	cmp	r3, #3
    8e4c:	d107      	bne.n	8e5e <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    8e4e:	6803      	ldr	r3, [r0, #0]
    8e50:	b143      	cbz	r3, 8e64 <sys_notify_validate+0x28>
		notify->result = 0;
    8e52:	2000      	movs	r0, #0
    8e54:	6090      	str	r0, [r2, #8]
    8e56:	4770      	bx	lr
		return -EINVAL;
    8e58:	f06f 0015 	mvn.w	r0, #21
    8e5c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    8e5e:	f06f 0015 	mvn.w	r0, #21
    8e62:	4770      	bx	lr
			rv = -EINVAL;
    8e64:	f06f 0015 	mvn.w	r0, #21
}
    8e68:	4770      	bx	lr

00008e6a <arch_printk_char_out>:
}
    8e6a:	2000      	movs	r0, #0
    8e6c:	4770      	bx	lr

00008e6e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8e6e:	b40f      	push	{r0, r1, r2, r3}
    8e70:	b500      	push	{lr}
    8e72:	b083      	sub	sp, #12
    8e74:	a904      	add	r1, sp, #16
    8e76:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8e7a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8e7c:	f7f7 fcc4 	bl	808 <vprintk>

	va_end(ap);
}
    8e80:	b003      	add	sp, #12
    8e82:	f85d eb04 	ldr.w	lr, [sp], #4
    8e86:	b004      	add	sp, #16
    8e88:	4770      	bx	lr

00008e8a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    8e8a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8e8e:	8b81      	ldrh	r1, [r0, #28]
    8e90:	f021 0107 	bic.w	r1, r1, #7
    8e94:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    8e96:	8381      	strh	r1, [r0, #28]
}
    8e98:	4770      	bx	lr

00008e9a <notify_monitors>:
{
    8e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e9e:	4606      	mov	r6, r0
    8ea0:	460f      	mov	r7, r1
    8ea2:	4690      	mov	r8, r2
	return list->head;
    8ea4:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8ea6:	b119      	cbz	r1, 8eb0 <notify_monitors+0x16>
    8ea8:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    8eaa:	b131      	cbz	r1, 8eba <notify_monitors+0x20>
	return node->next;
    8eac:	680c      	ldr	r4, [r1, #0]
    8eae:	e004      	b.n	8eba <notify_monitors+0x20>
    8eb0:	460c      	mov	r4, r1
    8eb2:	e002      	b.n	8eba <notify_monitors+0x20>
    8eb4:	4623      	mov	r3, r4
    8eb6:	4621      	mov	r1, r4
    8eb8:	461c      	mov	r4, r3
    8eba:	b159      	cbz	r1, 8ed4 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    8ebc:	684d      	ldr	r5, [r1, #4]
    8ebe:	4643      	mov	r3, r8
    8ec0:	463a      	mov	r2, r7
    8ec2:	4630      	mov	r0, r6
    8ec4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8ec6:	2c00      	cmp	r4, #0
    8ec8:	d0f4      	beq.n	8eb4 <notify_monitors+0x1a>
    8eca:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    8ecc:	2c00      	cmp	r4, #0
    8ece:	d0f2      	beq.n	8eb6 <notify_monitors+0x1c>
	return node->next;
    8ed0:	6823      	ldr	r3, [r4, #0]
    8ed2:	e7f0      	b.n	8eb6 <notify_monitors+0x1c>
}
    8ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008ed8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8ed8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8eda:	f013 0307 	ands.w	r3, r3, #7
    8ede:	d103      	bne.n	8ee8 <process_recheck+0x10>
	return list->head;
    8ee0:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    8ee2:	b10a      	cbz	r2, 8ee8 <process_recheck+0x10>
		evt = EVT_START;
    8ee4:	2003      	movs	r0, #3
    8ee6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8ee8:	2b02      	cmp	r3, #2
    8eea:	d003      	beq.n	8ef4 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    8eec:	2b01      	cmp	r3, #1
    8eee:	d006      	beq.n	8efe <process_recheck+0x26>
	int evt = EVT_NOP;
    8ef0:	2000      	movs	r0, #0
    8ef2:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    8ef4:	8bc2      	ldrh	r2, [r0, #30]
    8ef6:	2a00      	cmp	r2, #0
    8ef8:	d1f8      	bne.n	8eec <process_recheck+0x14>
		evt = EVT_STOP;
    8efa:	2004      	movs	r0, #4
    8efc:	4770      	bx	lr
    8efe:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    8f00:	b10b      	cbz	r3, 8f06 <process_recheck+0x2e>
		evt = EVT_RESET;
    8f02:	2005      	movs	r0, #5
}
    8f04:	4770      	bx	lr
	int evt = EVT_NOP;
    8f06:	2000      	movs	r0, #0
    8f08:	4770      	bx	lr

00008f0a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    8f0a:	b158      	cbz	r0, 8f24 <validate_args+0x1a>
{
    8f0c:	b510      	push	{r4, lr}
    8f0e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8f10:	b159      	cbz	r1, 8f2a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    8f12:	1d08      	adds	r0, r1, #4
    8f14:	f7ff ff92 	bl	8e3c <sys_notify_validate>
	if ((rv == 0)
    8f18:	b918      	cbnz	r0, 8f22 <validate_args+0x18>
	    && ((cli->notify.flags
    8f1a:	68a3      	ldr	r3, [r4, #8]
    8f1c:	f033 0303 	bics.w	r3, r3, #3
    8f20:	d106      	bne.n	8f30 <validate_args+0x26>
}
    8f22:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8f24:	f06f 0015 	mvn.w	r0, #21
}
    8f28:	4770      	bx	lr
		return -EINVAL;
    8f2a:	f06f 0015 	mvn.w	r0, #21
    8f2e:	e7f8      	b.n	8f22 <validate_args+0x18>
		rv = -EINVAL;
    8f30:	f06f 0015 	mvn.w	r0, #21
    8f34:	e7f5      	b.n	8f22 <validate_args+0x18>

00008f36 <notify_one>:
{
    8f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f3a:	4607      	mov	r7, r0
    8f3c:	460c      	mov	r4, r1
    8f3e:	4616      	mov	r6, r2
    8f40:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8f42:	4619      	mov	r1, r3
    8f44:	1d20      	adds	r0, r4, #4
    8f46:	f7f7 fc2b 	bl	7a0 <sys_notify_finalize>
	if (cb) {
    8f4a:	b128      	cbz	r0, 8f58 <notify_one+0x22>
    8f4c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    8f4e:	462b      	mov	r3, r5
    8f50:	4632      	mov	r2, r6
    8f52:	4621      	mov	r1, r4
    8f54:	4638      	mov	r0, r7
    8f56:	47c0      	blx	r8
}
    8f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008f5c <notify_all>:
{
    8f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f60:	4680      	mov	r8, r0
    8f62:	460c      	mov	r4, r1
    8f64:	4617      	mov	r7, r2
    8f66:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    8f68:	e004      	b.n	8f74 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    8f6a:	4633      	mov	r3, r6
    8f6c:	463a      	mov	r2, r7
    8f6e:	4640      	mov	r0, r8
    8f70:	f7ff ffe1 	bl	8f36 <notify_one>
    8f74:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    8f76:	b131      	cbz	r1, 8f86 <notify_all+0x2a>
	return node->next;
    8f78:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    8f7a:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8f7c:	6863      	ldr	r3, [r4, #4]
    8f7e:	428b      	cmp	r3, r1
    8f80:	d1f3      	bne.n	8f6a <notify_all+0xe>
	list->tail = node;
    8f82:	6065      	str	r5, [r4, #4]
}
    8f84:	e7f1      	b.n	8f6a <notify_all+0xe>
}
    8f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008f8a <onoff_manager_init>:
	if ((mgr == NULL)
    8f8a:	b170      	cbz	r0, 8faa <onoff_manager_init+0x20>
{
    8f8c:	b538      	push	{r3, r4, r5, lr}
    8f8e:	460c      	mov	r4, r1
    8f90:	4605      	mov	r5, r0
	    || (transitions == NULL)
    8f92:	b169      	cbz	r1, 8fb0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    8f94:	680b      	ldr	r3, [r1, #0]
    8f96:	b173      	cbz	r3, 8fb6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    8f98:	684b      	ldr	r3, [r1, #4]
    8f9a:	b17b      	cbz	r3, 8fbc <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8f9c:	2220      	movs	r2, #32
    8f9e:	2100      	movs	r1, #0
    8fa0:	f000 fb0d 	bl	95be <memset>
    8fa4:	612c      	str	r4, [r5, #16]
	return 0;
    8fa6:	2000      	movs	r0, #0
}
    8fa8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8faa:	f06f 0015 	mvn.w	r0, #21
}
    8fae:	4770      	bx	lr
		return -EINVAL;
    8fb0:	f06f 0015 	mvn.w	r0, #21
    8fb4:	e7f8      	b.n	8fa8 <onoff_manager_init+0x1e>
    8fb6:	f06f 0015 	mvn.w	r0, #21
    8fba:	e7f5      	b.n	8fa8 <onoff_manager_init+0x1e>
    8fbc:	f06f 0015 	mvn.w	r0, #21
    8fc0:	e7f2      	b.n	8fa8 <onoff_manager_init+0x1e>

00008fc2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8fc2:	b508      	push	{r3, lr}
    8fc4:	4604      	mov	r4, r0
    8fc6:	4608      	mov	r0, r1
    8fc8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8fca:	461a      	mov	r2, r3
    8fcc:	47a0      	blx	r4
	return z_impl_z_current_get();
    8fce:	f7fe ff65 	bl	7e9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8fd2:	f7f9 fbd9 	bl	2788 <z_impl_k_thread_abort>

00008fd6 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    8fd6:	00c9      	lsls	r1, r1, #3
    8fd8:	3104      	adds	r1, #4
}
    8fda:	4408      	add	r0, r1
    8fdc:	4770      	bx	lr

00008fde <free_list_remove_bidx>:
	void *cmem = &buf[c];
    8fde:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		return ((uint16_t *)cmem)[f];
    8fe2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    8fe6:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
    8fe8:	4299      	cmp	r1, r3
    8fea:	d00c      	beq.n	9006 <free_list_remove_bidx+0x28>
    8fec:	4484      	add	ip, r0
    8fee:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = second;
    8ff2:	3204      	adds	r2, #4
    8ff4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    8ff8:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
    8ffa:	3206      	adds	r2, #6
    8ffc:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
    8ffe:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    9000:	3304      	adds	r3, #4
    9002:	52c1      	strh	r1, [r0, r3]
}
    9004:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
    9006:	2301      	movs	r3, #1
    9008:	fa03 f102 	lsl.w	r1, r3, r2
    900c:	68c3      	ldr	r3, [r0, #12]
    900e:	ea23 0301 	bic.w	r3, r3, r1
    9012:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    9014:	3204      	adds	r2, #4
    9016:	2300      	movs	r3, #0
    9018:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    901c:	4770      	bx	lr

0000901e <free_list_add_bidx>:
{
    901e:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    9020:	1d13      	adds	r3, r2, #4
    9022:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    9026:	b97c      	cbnz	r4, 9048 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    9028:	2301      	movs	r3, #1
    902a:	fa03 f402 	lsl.w	r4, r3, r2
    902e:	68c3      	ldr	r3, [r0, #12]
    9030:	4323      	orrs	r3, r4
    9032:	60c3      	str	r3, [r0, #12]
		b->next = c;
    9034:	3204      	adds	r2, #4
    9036:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    903a:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    903c:	1d1a      	adds	r2, r3, #4
    903e:	b289      	uxth	r1, r1
    9040:	5281      	strh	r1, [r0, r2]
    9042:	3306      	adds	r3, #6
    9044:	52c1      	strh	r1, [r0, r3]
}
    9046:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    9048:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    904a:	3204      	adds	r2, #4
    904c:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    904e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    9052:	f10c 0e04 	add.w	lr, ip, #4
    9056:	f820 300e 	strh.w	r3, [r0, lr]
    905a:	f10c 0c06 	add.w	ip, ip, #6
    905e:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    9062:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    9064:	3306      	adds	r3, #6
    9066:	b289      	uxth	r1, r1
    9068:	52c1      	strh	r1, [r0, r3]
    906a:	5281      	strh	r1, [r0, r2]
    906c:	e7eb      	b.n	9046 <free_list_add_bidx+0x28>

0000906e <split_chunks>:
{
    906e:	b500      	push	{lr}
	void *cmem = &buf[c];
    9070:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
    9072:	3302      	adds	r3, #2
    9074:	f830 e003 	ldrh.w	lr, [r0, r3]
	chunksz_t lsz = rc - lc;
    9078:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
    907c:	1a89      	subs	r1, r1, r2
    907e:	eb01 015e 	add.w	r1, r1, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9082:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
    9086:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    908a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
    908e:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
    9090:	3302      	adds	r3, #2
    9092:	f820 e003 	strh.w	lr, [r0, r3]
    9096:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
    909a:	5ac3      	ldrh	r3, [r0, r3]
	return c + chunk_size(h, c);
    909c:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
    90a0:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
    90a4:	f85d fb04 	ldr.w	pc, [sp], #4

000090a8 <merge_chunks>:
{
    90a8:	b500      	push	{lr}
	void *cmem = &buf[c];
    90aa:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
    90ac:	3102      	adds	r1, #2
    90ae:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
    90b2:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
    90b6:	f10c 0c02 	add.w	ip, ip, #2
    90ba:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    90be:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    90c0:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    90c4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
    90c8:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
    90cc:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
    90d0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
    90d4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
    90d8:	f85d fb04 	ldr.w	pc, [sp], #4

000090dc <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    90dc:	3904      	subs	r1, #4
    90de:	1a08      	subs	r0, r1, r0
}
    90e0:	08c0      	lsrs	r0, r0, #3
    90e2:	4770      	bx	lr

000090e4 <free_list_remove>:
{
    90e4:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    90e6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    90ea:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    90ec:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    90ee:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    90f2:	f1c2 021f 	rsb	r2, r2, #31
    90f6:	f7ff ff72 	bl	8fde <free_list_remove_bidx>
}
    90fa:	bd08      	pop	{r3, pc}

000090fc <free_list_add>:
{
    90fc:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    90fe:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    9102:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9104:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    9106:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    910a:	f1c2 021f 	rsb	r2, r2, #31
    910e:	f7ff ff86 	bl	901e <free_list_add_bidx>
}
    9112:	bd08      	pop	{r3, pc}

00009114 <free_chunk>:
{
    9114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9116:	4604      	mov	r4, r0
    9118:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    911a:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
    911c:	1cb7      	adds	r7, r6, #2
    911e:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
    9120:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
    9124:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    9128:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    912a:	f013 0f01 	tst.w	r3, #1
    912e:	d00c      	beq.n	914a <free_chunk+0x36>
    9130:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    9132:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
    9134:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    9138:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    913a:	f013 0f01 	tst.w	r3, #1
    913e:	d00e      	beq.n	915e <free_chunk+0x4a>
	free_list_add(h, c);
    9140:	4629      	mov	r1, r5
    9142:	4620      	mov	r0, r4
    9144:	f7ff ffda 	bl	90fc <free_list_add>
}
    9148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
    914a:	f7ff ffcb 	bl	90e4 <free_list_remove>
    914e:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
    9150:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    9154:	4629      	mov	r1, r5
    9156:	4620      	mov	r0, r4
    9158:	f7ff ffa6 	bl	90a8 <merge_chunks>
    915c:	e7e8      	b.n	9130 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
    915e:	4620      	mov	r0, r4
    9160:	f7ff ffc0 	bl	90e4 <free_list_remove>
    9164:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    9166:	462a      	mov	r2, r5
    9168:	1a69      	subs	r1, r5, r1
    916a:	4620      	mov	r0, r4
    916c:	f7ff ff9c 	bl	90a8 <merge_chunks>
    9170:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    9172:	1aed      	subs	r5, r5, r3
    9174:	e7e4      	b.n	9140 <free_chunk+0x2c>

00009176 <alloc_chunk>:
{
    9176:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
    9178:	fab1 f381 	clz	r3, r1
	if (b->next) {
    917c:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    9180:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    9184:	b1cd      	cbz	r5, 91ba <alloc_chunk+0x44>
    9186:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    918a:	f04f 0e03 	mov.w	lr, #3
			chunkid_t c = b->next;
    918e:	1d14      	adds	r4, r2, #4
    9190:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    9194:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
    9198:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    919c:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
    919e:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
    91a2:	d914      	bls.n	91ce <alloc_chunk+0x58>
    91a4:	4484      	add	ip, r0
    91a6:	f8bc 4006 	ldrh.w	r4, [ip, #6]
			b->next = next_free_chunk(h, c);
    91aa:	1d16      	adds	r6, r2, #4
    91ac:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
		} while (--i && b->next != first);
    91b0:	f1be 0e01 	subs.w	lr, lr, #1
    91b4:	d001      	beq.n	91ba <alloc_chunk+0x44>
    91b6:	42a5      	cmp	r5, r4
    91b8:	d1e9      	bne.n	918e <alloc_chunk+0x18>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    91ba:	68c4      	ldr	r4, [r0, #12]
    91bc:	f1c3 0220 	rsb	r2, r3, #32
    91c0:	2301      	movs	r3, #1
    91c2:	4093      	lsls	r3, r2
    91c4:	425b      	negs	r3, r3
	if (bmask != 0U) {
    91c6:	401c      	ands	r4, r3
    91c8:	d105      	bne.n	91d6 <alloc_chunk+0x60>
}
    91ca:	4620      	mov	r0, r4
    91cc:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
    91ce:	4621      	mov	r1, r4
    91d0:	f7ff ff05 	bl	8fde <free_list_remove_bidx>
				return c;
    91d4:	e7f9      	b.n	91ca <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
    91d6:	fa94 f2a4 	rbit	r2, r4
    91da:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    91de:	1d13      	adds	r3, r2, #4
    91e0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    91e4:	4621      	mov	r1, r4
    91e6:	f7ff fefa 	bl	8fde <free_list_remove_bidx>
		return c;
    91ea:	e7ee      	b.n	91ca <alloc_chunk+0x54>

000091ec <sys_heap_alloc>:
{
    91ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    91ee:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    91f0:	b341      	cbz	r1, 9244 <sys_heap_alloc+0x58>
    91f2:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    91f4:	68aa      	ldr	r2, [r5, #8]
    91f6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    91fa:	d925      	bls.n	9248 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    91fc:	330b      	adds	r3, #11
    91fe:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9200:	4621      	mov	r1, r4
    9202:	4628      	mov	r0, r5
    9204:	f7ff ffb7 	bl	9176 <alloc_chunk>
	if (c == 0U) {
    9208:	4607      	mov	r7, r0
    920a:	b1f8      	cbz	r0, 924c <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
    920c:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
    920e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
    9212:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
    9214:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    9218:	d309      	bcc.n	922e <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
    921a:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    921c:	885a      	ldrh	r2, [r3, #2]
    921e:	f042 0201 	orr.w	r2, r2, #1
    9222:	805a      	strh	r2, [r3, #2]
	mem = chunk_mem(h, c);
    9224:	4639      	mov	r1, r7
    9226:	4628      	mov	r0, r5
    9228:	f7ff fed5 	bl	8fd6 <chunk_mem>
}
    922c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
    922e:	4404      	add	r4, r0
    9230:	4622      	mov	r2, r4
    9232:	4601      	mov	r1, r0
    9234:	4628      	mov	r0, r5
    9236:	f7ff ff1a 	bl	906e <split_chunks>
		free_list_add(h, c + chunk_sz);
    923a:	4621      	mov	r1, r4
    923c:	4628      	mov	r0, r5
    923e:	f7ff ff5d 	bl	90fc <free_list_add>
    9242:	e7ea      	b.n	921a <sys_heap_alloc+0x2e>
		return NULL;
    9244:	2000      	movs	r0, #0
    9246:	e7f1      	b.n	922c <sys_heap_alloc+0x40>
    9248:	2000      	movs	r0, #0
    924a:	e7ef      	b.n	922c <sys_heap_alloc+0x40>
		return NULL;
    924c:	2000      	movs	r0, #0
    924e:	e7ed      	b.n	922c <sys_heap_alloc+0x40>

00009250 <extract_decimal>:
{
    9250:	4684      	mov	ip, r0
	const char *sp = *str;
    9252:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    9254:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    9256:	e005      	b.n	9264 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    9258:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    925c:	3201      	adds	r2, #1
    925e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    9262:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9264:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9266:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    926a:	2909      	cmp	r1, #9
    926c:	d9f4      	bls.n	9258 <extract_decimal+0x8>
	*str = sp;
    926e:	f8cc 2000 	str.w	r2, [ip]
}
    9272:	4770      	bx	lr

00009274 <encode_uint>:
{
    9274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9278:	b083      	sub	sp, #12
    927a:	4604      	mov	r4, r0
    927c:	460d      	mov	r5, r1
    927e:	9201      	str	r2, [sp, #4]
    9280:	469a      	mov	sl, r3
    9282:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    9284:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9286:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    928a:	2b6f      	cmp	r3, #111	; 0x6f
    928c:	d00f      	beq.n	92ae <encode_uint+0x3a>
    928e:	d906      	bls.n	929e <encode_uint+0x2a>
    9290:	2b70      	cmp	r3, #112	; 0x70
    9292:	d00f      	beq.n	92b4 <encode_uint+0x40>
    9294:	2b78      	cmp	r3, #120	; 0x78
    9296:	d110      	bne.n	92ba <encode_uint+0x46>
		return 16;
    9298:	f04f 0910 	mov.w	r9, #16
    929c:	e026      	b.n	92ec <encode_uint+0x78>
	switch (specifier) {
    929e:	2b58      	cmp	r3, #88	; 0x58
    92a0:	d002      	beq.n	92a8 <encode_uint+0x34>
    92a2:	f04f 090a 	mov.w	r9, #10
    92a6:	e021      	b.n	92ec <encode_uint+0x78>
		return 16;
    92a8:	f04f 0910 	mov.w	r9, #16
    92ac:	e01e      	b.n	92ec <encode_uint+0x78>
		return 8;
    92ae:	f04f 0908 	mov.w	r9, #8
    92b2:	e01b      	b.n	92ec <encode_uint+0x78>
		return 16;
    92b4:	f04f 0910 	mov.w	r9, #16
    92b8:	e018      	b.n	92ec <encode_uint+0x78>
	switch (specifier) {
    92ba:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    92be:	e015      	b.n	92ec <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    92c0:	f1bb 0f19 	cmp.w	fp, #25
    92c4:	d821      	bhi.n	930a <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    92c6:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    92c8:	3237      	adds	r2, #55	; 0x37
    92ca:	b2d2      	uxtb	r2, r2
    92cc:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    92d0:	463a      	mov	r2, r7
    92d2:	4643      	mov	r3, r8
    92d4:	4620      	mov	r0, r4
    92d6:	4629      	mov	r1, r5
    92d8:	f7f6 ff12 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    92dc:	42bc      	cmp	r4, r7
    92de:	f175 0300 	sbcs.w	r3, r5, #0
    92e2:	d316      	bcc.n	9312 <encode_uint+0x9e>
    92e4:	4556      	cmp	r6, sl
    92e6:	d914      	bls.n	9312 <encode_uint+0x9e>
		value /= radix;
    92e8:	4604      	mov	r4, r0
    92ea:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    92ec:	f04f 0800 	mov.w	r8, #0
    92f0:	464f      	mov	r7, r9
    92f2:	464a      	mov	r2, r9
    92f4:	4643      	mov	r3, r8
    92f6:	4620      	mov	r0, r4
    92f8:	4629      	mov	r1, r5
    92fa:	f7f6 ff01 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    92fe:	2a09      	cmp	r2, #9
    9300:	d8de      	bhi.n	92c0 <encode_uint+0x4c>
    9302:	b2d2      	uxtb	r2, r2
    9304:	3230      	adds	r2, #48	; 0x30
    9306:	b2d2      	uxtb	r2, r2
    9308:	e7e0      	b.n	92cc <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    930a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    930c:	3257      	adds	r2, #87	; 0x57
    930e:	b2d2      	uxtb	r2, r2
    9310:	e7dc      	b.n	92cc <encode_uint+0x58>
	if (conv->flag_hash) {
    9312:	9b01      	ldr	r3, [sp, #4]
    9314:	781b      	ldrb	r3, [r3, #0]
    9316:	f013 0f20 	tst.w	r3, #32
    931a:	d005      	beq.n	9328 <encode_uint+0xb4>
		if (radix == 8) {
    931c:	f1b9 0f08 	cmp.w	r9, #8
    9320:	d006      	beq.n	9330 <encode_uint+0xbc>
		} else if (radix == 16) {
    9322:	f1b9 0f10 	cmp.w	r9, #16
    9326:	d009      	beq.n	933c <encode_uint+0xc8>
}
    9328:	4630      	mov	r0, r6
    932a:	b003      	add	sp, #12
    932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    9330:	9a01      	ldr	r2, [sp, #4]
    9332:	7893      	ldrb	r3, [r2, #2]
    9334:	f043 0308 	orr.w	r3, r3, #8
    9338:	7093      	strb	r3, [r2, #2]
    933a:	e7f5      	b.n	9328 <encode_uint+0xb4>
			conv->altform_0c = true;
    933c:	9a01      	ldr	r2, [sp, #4]
    933e:	7893      	ldrb	r3, [r2, #2]
    9340:	f043 0310 	orr.w	r3, r3, #16
    9344:	7093      	strb	r3, [r2, #2]
    9346:	e7ef      	b.n	9328 <encode_uint+0xb4>

00009348 <outs>:
{
    9348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    934c:	4607      	mov	r7, r0
    934e:	460e      	mov	r6, r1
    9350:	4614      	mov	r4, r2
    9352:	4698      	mov	r8, r3
	size_t count = 0;
    9354:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9356:	e006      	b.n	9366 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    9358:	4631      	mov	r1, r6
    935a:	f814 0b01 	ldrb.w	r0, [r4], #1
    935e:	47b8      	blx	r7
		if (rc < 0) {
    9360:	2800      	cmp	r0, #0
    9362:	db09      	blt.n	9378 <outs+0x30>
		++count;
    9364:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9366:	4544      	cmp	r4, r8
    9368:	d3f6      	bcc.n	9358 <outs+0x10>
    936a:	f1b8 0f00 	cmp.w	r8, #0
    936e:	d102      	bne.n	9376 <outs+0x2e>
    9370:	7823      	ldrb	r3, [r4, #0]
    9372:	2b00      	cmp	r3, #0
    9374:	d1f0      	bne.n	9358 <outs+0x10>
	return (int)count;
    9376:	4628      	mov	r0, r5
}
    9378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000937c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    937c:	4040      	eors	r0, r0
    937e:	f380 8811 	msr	BASEPRI, r0
    9382:	f04f 0004 	mov.w	r0, #4
    9386:	df02      	svc	2
}
    9388:	4770      	bx	lr

0000938a <assert_print>:

void assert_print(const char *fmt, ...)
{
    938a:	b40f      	push	{r0, r1, r2, r3}
    938c:	b500      	push	{lr}
    938e:	b083      	sub	sp, #12
    9390:	a904      	add	r1, sp, #16
    9392:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9396:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9398:	f7f7 fa36 	bl	808 <vprintk>

	va_end(ap);
}
    939c:	b003      	add	sp, #12
    939e:	f85d eb04 	ldr.w	lr, [sp], #4
    93a2:	b004      	add	sp, #16
    93a4:	4770      	bx	lr

000093a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    93a6:	4770      	bx	lr

000093a8 <abort_function>:
{
    93a8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    93aa:	2000      	movs	r0, #0
    93ac:	f7f8 fb90 	bl	1ad0 <sys_reboot>

000093b0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    93b0:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    93b2:	f7fc fb3d 	bl	5a30 <z_fatal_error>
}
    93b6:	bd08      	pop	{r3, pc}

000093b8 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    93b8:	b508      	push	{r3, lr}
    93ba:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    93bc:	6800      	ldr	r0, [r0, #0]
    93be:	f7ff fff7 	bl	93b0 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    93c2:	bd08      	pop	{r3, pc}

000093c4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    93c4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    93c6:	2100      	movs	r1, #0
    93c8:	2001      	movs	r0, #1
    93ca:	f7ff fff1 	bl	93b0 <z_arm_fatal_error>
}
    93ce:	bd08      	pop	{r3, pc}

000093d0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    93d0:	b508      	push	{r3, lr}
	handler();
    93d2:	f7f8 fec9 	bl	2168 <z_SysNmiOnReset>
	z_arm_int_exit();
    93d6:	f7f8 ffbf 	bl	2358 <z_arm_exc_exit>
}
    93da:	bd08      	pop	{r3, pc}

000093dc <memory_fault_recoverable>:
}
    93dc:	2000      	movs	r0, #0
    93de:	4770      	bx	lr

000093e0 <debug_monitor>:
	*recoverable = false;
    93e0:	2300      	movs	r3, #0
    93e2:	700b      	strb	r3, [r1, #0]
}
    93e4:	4770      	bx	lr

000093e6 <fault_handle>:
{
    93e6:	b508      	push	{r3, lr}
	*recoverable = false;
    93e8:	2300      	movs	r3, #0
    93ea:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    93ec:	1ecb      	subs	r3, r1, #3
    93ee:	2b09      	cmp	r3, #9
    93f0:	d81a      	bhi.n	9428 <fault_handle+0x42>
    93f2:	e8df f003 	tbb	[pc, r3]
    93f6:	0905      	.short	0x0905
    93f8:	1919110d 	.word	0x1919110d
    93fc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    9400:	4611      	mov	r1, r2
    9402:	f7f9 f861 	bl	24c8 <hard_fault>
		break;
    9406:	e010      	b.n	942a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    9408:	2100      	movs	r1, #0
    940a:	f7f8 ffef 	bl	23ec <mem_manage_fault>
		break;
    940e:	e00c      	b.n	942a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    9410:	2100      	movs	r1, #0
    9412:	f7f8 ffaf 	bl	2374 <bus_fault>
		break;
    9416:	e008      	b.n	942a <fault_handle+0x44>
		reason = usage_fault(esf);
    9418:	f7f8 ffd6 	bl	23c8 <usage_fault>
		break;
    941c:	e005      	b.n	942a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    941e:	4611      	mov	r1, r2
    9420:	f7ff ffde 	bl	93e0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    9424:	2000      	movs	r0, #0
		break;
    9426:	e000      	b.n	942a <fault_handle+0x44>
	switch (fault) {
    9428:	2000      	movs	r0, #0
}
    942a:	bd08      	pop	{r3, pc}

0000942c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    942c:	6843      	ldr	r3, [r0, #4]
    942e:	1e5a      	subs	r2, r3, #1
		&&
    9430:	4213      	tst	r3, r2
    9432:	d106      	bne.n	9442 <mpu_partition_is_valid+0x16>
		&&
    9434:	2b1f      	cmp	r3, #31
    9436:	d906      	bls.n	9446 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    9438:	6803      	ldr	r3, [r0, #0]
		&&
    943a:	421a      	tst	r2, r3
    943c:	d005      	beq.n	944a <mpu_partition_is_valid+0x1e>
    943e:	2000      	movs	r0, #0
    9440:	4770      	bx	lr
    9442:	2000      	movs	r0, #0
    9444:	4770      	bx	lr
    9446:	2000      	movs	r0, #0
    9448:	4770      	bx	lr
    944a:	2001      	movs	r0, #1
}
    944c:	4770      	bx	lr

0000944e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    944e:	2807      	cmp	r0, #7
    9450:	d805      	bhi.n	945e <region_allocate_and_init+0x10>
{
    9452:	b510      	push	{r4, lr}
    9454:	4604      	mov	r4, r0
	region_init(index, region_conf);
    9456:	f7f9 f9d1 	bl	27fc <region_init>
	return index;
    945a:	4620      	mov	r0, r4
}
    945c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    945e:	f06f 0015 	mvn.w	r0, #21
}
    9462:	4770      	bx	lr

00009464 <mpu_configure_region>:
{
    9464:	b500      	push	{lr}
    9466:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    9468:	680b      	ldr	r3, [r1, #0]
    946a:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    946c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    946e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    9470:	2b20      	cmp	r3, #32
    9472:	d912      	bls.n	949a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    9474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9478:	d811      	bhi.n	949e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    947a:	3b01      	subs	r3, #1
    947c:	fab3 f383 	clz	r3, r3
    9480:	f1c3 031f 	rsb	r3, r3, #31
    9484:	005b      	lsls	r3, r3, #1
    9486:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    948a:	4313      	orrs	r3, r2
    948c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    948e:	a901      	add	r1, sp, #4
    9490:	f7ff ffdd 	bl	944e <region_allocate_and_init>
}
    9494:	b005      	add	sp, #20
    9496:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    949a:	2308      	movs	r3, #8
    949c:	e7f5      	b.n	948a <mpu_configure_region+0x26>
		return REGION_4G;
    949e:	233e      	movs	r3, #62	; 0x3e
    94a0:	e7f3      	b.n	948a <mpu_configure_region+0x26>

000094a2 <mpu_configure_regions>:
{
    94a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    94a6:	4680      	mov	r8, r0
    94a8:	460f      	mov	r7, r1
    94aa:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    94ac:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    94ae:	2500      	movs	r5, #0
    94b0:	e009      	b.n	94c6 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    94b2:	4621      	mov	r1, r4
    94b4:	b2f0      	uxtb	r0, r6
    94b6:	f7ff ffd5 	bl	9464 <mpu_configure_region>
    94ba:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    94bc:	f110 0f16 	cmn.w	r0, #22
    94c0:	d014      	beq.n	94ec <mpu_configure_regions+0x4a>
		reg_index++;
    94c2:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    94c4:	3501      	adds	r5, #1
    94c6:	42bd      	cmp	r5, r7
    94c8:	da10      	bge.n	94ec <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    94ca:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    94ce:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    94d2:	6862      	ldr	r2, [r4, #4]
    94d4:	2a00      	cmp	r2, #0
    94d6:	d0f5      	beq.n	94c4 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    94d8:	f1b9 0f00 	cmp.w	r9, #0
    94dc:	d0e9      	beq.n	94b2 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    94de:	4620      	mov	r0, r4
    94e0:	f7ff ffa4 	bl	942c <mpu_partition_is_valid>
		if (do_sanity_check &&
    94e4:	2800      	cmp	r0, #0
    94e6:	d1e4      	bne.n	94b2 <mpu_configure_regions+0x10>
			return -EINVAL;
    94e8:	f06f 0615 	mvn.w	r6, #21
}
    94ec:	4630      	mov	r0, r6
    94ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000094f2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    94f2:	4602      	mov	r2, r0
    94f4:	e002      	b.n	94fc <strcpy+0xa>
		*d = *s;
    94f6:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    94fa:	3101      	adds	r1, #1
	while (*s != '\0') {
    94fc:	780b      	ldrb	r3, [r1, #0]
    94fe:	2b00      	cmp	r3, #0
    9500:	d1f9      	bne.n	94f6 <strcpy+0x4>
	}

	*d = '\0';
    9502:	7013      	strb	r3, [r2, #0]

	return dest;
}
    9504:	4770      	bx	lr

00009506 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    9506:	4603      	mov	r3, r0
    9508:	b1a2      	cbz	r2, 9534 <strncpy+0x2e>
{
    950a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    950c:	780c      	ldrb	r4, [r1, #0]
    950e:	b12c      	cbz	r4, 951c <strncpy+0x16>
		*d = *s;
    9510:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    9514:	3101      	adds	r1, #1
		d++;
		n--;
    9516:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    9518:	2a00      	cmp	r2, #0
    951a:	d1f7      	bne.n	950c <strncpy+0x6>
	}

	while (n > 0) {
    951c:	b122      	cbz	r2, 9528 <strncpy+0x22>
		*d = '\0';
    951e:	2100      	movs	r1, #0
    9520:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    9524:	3a01      	subs	r2, #1
    9526:	e7f9      	b.n	951c <strncpy+0x16>
	}

	return dest;
}
    9528:	bc10      	pop	{r4}
    952a:	4770      	bx	lr
		*d = '\0';
    952c:	2100      	movs	r1, #0
    952e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9532:	3a01      	subs	r2, #1
	while (n > 0) {
    9534:	2a00      	cmp	r2, #0
    9536:	d1f9      	bne.n	952c <strncpy+0x26>
    9538:	4770      	bx	lr

0000953a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    953a:	4603      	mov	r3, r0
	size_t n = 0;
    953c:	2000      	movs	r0, #0

	while (*s != '\0') {
    953e:	e001      	b.n	9544 <strlen+0xa>
		s++;
    9540:	3301      	adds	r3, #1
		n++;
    9542:	3001      	adds	r0, #1
	while (*s != '\0') {
    9544:	781a      	ldrb	r2, [r3, #0]
    9546:	2a00      	cmp	r2, #0
    9548:	d1fa      	bne.n	9540 <strlen+0x6>
	}

	return n;
}
    954a:	4770      	bx	lr

0000954c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    954c:	4603      	mov	r3, r0
	size_t n = 0;
    954e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9550:	e001      	b.n	9556 <strnlen+0xa>
		s++;
    9552:	3301      	adds	r3, #1
		n++;
    9554:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    9556:	781a      	ldrb	r2, [r3, #0]
    9558:	b10a      	cbz	r2, 955e <strnlen+0x12>
    955a:	4288      	cmp	r0, r1
    955c:	d3f9      	bcc.n	9552 <strnlen+0x6>
	}

	return n;
}
    955e:	4770      	bx	lr

00009560 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    9560:	ea80 0301 	eor.w	r3, r0, r1
    9564:	f013 0f03 	tst.w	r3, #3
    9568:	d001      	beq.n	956e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    956a:	4603      	mov	r3, r0
    956c:	e023      	b.n	95b6 <memcpy+0x56>
    956e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    9570:	f013 0f03 	tst.w	r3, #3
    9574:	d00f      	beq.n	9596 <memcpy+0x36>
			if (n == 0) {
    9576:	b30a      	cbz	r2, 95bc <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    9578:	f811 cb01 	ldrb.w	ip, [r1], #1
    957c:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    9580:	3a01      	subs	r2, #1
    9582:	e7f5      	b.n	9570 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    9584:	f811 cb01 	ldrb.w	ip, [r1], #1
    9588:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    958c:	3a01      	subs	r2, #1
	while (n > 0) {
    958e:	2a00      	cmp	r2, #0
    9590:	d1f8      	bne.n	9584 <memcpy+0x24>
	}

	return d;
}
    9592:	bc10      	pop	{r4}
    9594:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    9596:	2a03      	cmp	r2, #3
    9598:	d90d      	bls.n	95b6 <memcpy+0x56>
{
    959a:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    959c:	f851 4b04 	ldr.w	r4, [r1], #4
    95a0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    95a4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    95a6:	2a03      	cmp	r2, #3
    95a8:	d8f8      	bhi.n	959c <memcpy+0x3c>
    95aa:	e7f0      	b.n	958e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    95ac:	f811 cb01 	ldrb.w	ip, [r1], #1
    95b0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    95b4:	3a01      	subs	r2, #1
	while (n > 0) {
    95b6:	2a00      	cmp	r2, #0
    95b8:	d1f8      	bne.n	95ac <memcpy+0x4c>
    95ba:	4770      	bx	lr
}
    95bc:	4770      	bx	lr

000095be <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    95be:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    95c2:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    95c4:	e002      	b.n	95cc <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    95c6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    95ca:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    95cc:	f013 0f03 	tst.w	r3, #3
    95d0:	d002      	beq.n	95d8 <memset+0x1a>
		if (n == 0) {
    95d2:	2a00      	cmp	r2, #0
    95d4:	d1f7      	bne.n	95c6 <memset+0x8>
    95d6:	e00f      	b.n	95f8 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    95d8:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    95da:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    95de:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    95e2:	2a03      	cmp	r2, #3
    95e4:	d906      	bls.n	95f4 <memset+0x36>
		*(d_word++) = c_word;
    95e6:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    95ea:	3a04      	subs	r2, #4
    95ec:	e7f9      	b.n	95e2 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    95ee:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    95f2:	3a01      	subs	r2, #1
	while (n > 0) {
    95f4:	2a00      	cmp	r2, #0
    95f6:	d1fa      	bne.n	95ee <memset+0x30>
	}

	return buf;
}
    95f8:	4770      	bx	lr

000095fa <_stdout_hook_default>:
}
    95fa:	f04f 30ff 	mov.w	r0, #4294967295
    95fe:	4770      	bx	lr

00009600 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9604:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9608:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    960c:	2a08      	cmp	r2, #8
    960e:	d001      	beq.n	9614 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    9610:	2000      	movs	r0, #0
    9612:	4770      	bx	lr
                switch(var2)
    9614:	2b02      	cmp	r3, #2
    9616:	d001      	beq.n	961c <nrf52_errata_197+0x1c>
                        return false;
    9618:	2000      	movs	r0, #0
    961a:	4770      	bx	lr
                        return true;
    961c:	2001      	movs	r0, #1
    #endif
}
    961e:	4770      	bx	lr

00009620 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9620:	2806      	cmp	r0, #6
    9622:	d000      	beq.n	9626 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9624:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    962a:	2201      	movs	r2, #1
    962c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9630:	f3bf 8f4f 	dsb	sy
        __WFE();
    9634:	bf20      	wfe
    while (true)
    9636:	e7fd      	b.n	9634 <pm_state_set+0x14>

00009638 <pm_state_exit_post_ops>:
    9638:	2300      	movs	r3, #0
    963a:	f383 8811 	msr	BASEPRI, r3
    963e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9642:	4770      	bx	lr

00009644 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    9644:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    9646:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    964a:	0089      	lsls	r1, r1, #2
    964c:	3140      	adds	r1, #64	; 0x40
}
    964e:	4408      	add	r0, r1
    9650:	4770      	bx	lr

00009652 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    9652:	6840      	ldr	r0, [r0, #4]
}
    9654:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    9658:	4770      	bx	lr

0000965a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    965a:	6900      	ldr	r0, [r0, #16]
}
    965c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    9660:	4770      	bx	lr

00009662 <set_off_state>:
	__asm__ volatile(
    9662:	f04f 0320 	mov.w	r3, #32
    9666:	f3ef 8211 	mrs	r2, BASEPRI
    966a:	f383 8812 	msr	BASEPRI_MAX, r3
    966e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9672:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9674:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    9678:	d001      	beq.n	967e <set_off_state+0x1c>
    967a:	428b      	cmp	r3, r1
    967c:	d107      	bne.n	968e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    967e:	2301      	movs	r3, #1
    9680:	6003      	str	r3, [r0, #0]
	int err = 0;
    9682:	2000      	movs	r0, #0
	__asm__ volatile(
    9684:	f382 8811 	msr	BASEPRI, r2
    9688:	f3bf 8f6f 	isb	sy
}
    968c:	4770      	bx	lr
		err = -EPERM;
    968e:	f04f 30ff 	mov.w	r0, #4294967295
    9692:	e7f7      	b.n	9684 <set_off_state+0x22>

00009694 <set_starting_state>:
	__asm__ volatile(
    9694:	f04f 0320 	mov.w	r3, #32
    9698:	f3ef 8211 	mrs	r2, BASEPRI
    969c:	f383 8812 	msr	BASEPRI_MAX, r3
    96a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    96a4:	6803      	ldr	r3, [r0, #0]
    96a6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    96aa:	f003 0307 	and.w	r3, r3, #7
    96ae:	2b01      	cmp	r3, #1
    96b0:	d008      	beq.n	96c4 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    96b2:	458c      	cmp	ip, r1
    96b4:	d009      	beq.n	96ca <set_starting_state+0x36>
		err = -EPERM;
    96b6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    96ba:	f382 8811 	msr	BASEPRI, r2
    96be:	f3bf 8f6f 	isb	sy
}
    96c2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    96c4:	6001      	str	r1, [r0, #0]
	int err = 0;
    96c6:	2000      	movs	r0, #0
    96c8:	e7f7      	b.n	96ba <set_starting_state+0x26>
		err = -EALREADY;
    96ca:	f06f 0077 	mvn.w	r0, #119	; 0x77
    96ce:	e7f4      	b.n	96ba <set_starting_state+0x26>

000096d0 <set_on_state>:
	__asm__ volatile(
    96d0:	f04f 0320 	mov.w	r3, #32
    96d4:	f3ef 8211 	mrs	r2, BASEPRI
    96d8:	f383 8812 	msr	BASEPRI_MAX, r3
    96dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    96e0:	6803      	ldr	r3, [r0, #0]
    96e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    96e6:	f043 0302 	orr.w	r3, r3, #2
    96ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    96ec:	f382 8811 	msr	BASEPRI, r2
    96f0:	f3bf 8f6f 	isb	sy
}
    96f4:	4770      	bx	lr

000096f6 <clkstarted_handle>:
{
    96f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96f8:	4606      	mov	r6, r0
    96fa:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    96fc:	f7ff ffa2 	bl	9644 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    9700:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    9702:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    9704:	2300      	movs	r3, #0
    9706:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    970a:	f7ff ffe1 	bl	96d0 <set_on_state>
	if (callback) {
    970e:	b11d      	cbz	r5, 9718 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9710:	463a      	mov	r2, r7
    9712:	4621      	mov	r1, r4
    9714:	4630      	mov	r0, r6
    9716:	47a8      	blx	r5
}
    9718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000971a <async_start>:
{
    971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    971e:	4606      	mov	r6, r0
    9720:	4690      	mov	r8, r2
    9722:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    9724:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9726:	4629      	mov	r1, r5
    9728:	f7ff ff8c 	bl	9644 <get_sub_data>
    972c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    972e:	9906      	ldr	r1, [sp, #24]
    9730:	3008      	adds	r0, #8
    9732:	f7ff ffaf 	bl	9694 <set_starting_state>
	if (err < 0) {
    9736:	2800      	cmp	r0, #0
    9738:	db09      	blt.n	974e <async_start+0x34>
	subdata->cb = cb;
    973a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    973e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    9740:	4629      	mov	r1, r5
    9742:	4630      	mov	r0, r6
    9744:	f7ff ff85 	bl	9652 <get_sub_config>
    9748:	6803      	ldr	r3, [r0, #0]
    974a:	4798      	blx	r3
	return 0;
    974c:	2000      	movs	r0, #0
}
    974e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009752 <api_start>:
{
    9752:	b510      	push	{r4, lr}
    9754:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9756:	2480      	movs	r4, #128	; 0x80
    9758:	9400      	str	r4, [sp, #0]
    975a:	f7ff ffde 	bl	971a <async_start>
}
    975e:	b002      	add	sp, #8
    9760:	bd10      	pop	{r4, pc}

00009762 <onoff_started_callback>:
{
    9762:	b510      	push	{r4, lr}
    9764:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    9766:	b2c9      	uxtb	r1, r1
    9768:	f7ff ff77 	bl	965a <get_onoff_manager>
	notify(mgr, 0);
    976c:	2100      	movs	r1, #0
    976e:	47a0      	blx	r4
}
    9770:	bd10      	pop	{r4, pc}

00009772 <hfclk_start>:
{
    9772:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9774:	2001      	movs	r0, #1
    9776:	f7fb f833 	bl	47e0 <nrfx_clock_start>
}
    977a:	bd08      	pop	{r3, pc}

0000977c <lfclk_start>:
{
    977c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    977e:	2000      	movs	r0, #0
    9780:	f7fb f82e 	bl	47e0 <nrfx_clock_start>
}
    9784:	bd08      	pop	{r3, pc}

00009786 <hfclk_stop>:
{
    9786:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9788:	2001      	movs	r0, #1
    978a:	f7fb f89f 	bl	48cc <nrfx_clock_stop>
}
    978e:	bd08      	pop	{r3, pc}

00009790 <lfclk_stop>:
{
    9790:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9792:	2000      	movs	r0, #0
    9794:	f7fb f89a 	bl	48cc <nrfx_clock_stop>
}
    9798:	bd08      	pop	{r3, pc}

0000979a <api_stop>:
{
    979a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    979c:	2280      	movs	r2, #128	; 0x80
    979e:	f7f9 f9c5 	bl	2b2c <stop>
}
    97a2:	bd08      	pop	{r3, pc}

000097a4 <blocking_start_callback>:
{
    97a4:	b508      	push	{r3, lr}
    97a6:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    97a8:	f7fd f8a8 	bl	68fc <z_impl_k_sem_give>
}
    97ac:	bd08      	pop	{r3, pc}

000097ae <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    97ae:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    97b2:	f020 0001 	bic.w	r0, r0, #1
    97b6:	0540      	lsls	r0, r0, #21
    97b8:	0d40      	lsrs	r0, r0, #21
    97ba:	f240 2306 	movw	r3, #518	; 0x206
    97be:	4298      	cmp	r0, r3
    97c0:	d033      	beq.n	982a <get_drive+0x7c>
    97c2:	d816      	bhi.n	97f2 <get_drive+0x44>
    97c4:	2806      	cmp	r0, #6
    97c6:	d02c      	beq.n	9822 <get_drive+0x74>
    97c8:	d906      	bls.n	97d8 <get_drive+0x2a>
    97ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    97ce:	d10d      	bne.n	97ec <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    97d0:	2301      	movs	r3, #1
    97d2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    97d4:	2000      	movs	r0, #0
		break;
    97d6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    97d8:	b300      	cbz	r0, 981c <get_drive+0x6e>
    97da:	2802      	cmp	r0, #2
    97dc:	d103      	bne.n	97e6 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    97de:	2304      	movs	r3, #4
    97e0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    97e2:	2000      	movs	r0, #0
		break;
    97e4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    97e6:	f06f 0015 	mvn.w	r0, #21
    97ea:	4770      	bx	lr
    97ec:	f06f 0015 	mvn.w	r0, #21
    97f0:	4770      	bx	lr
    97f2:	f240 4302 	movw	r3, #1026	; 0x402
    97f6:	4298      	cmp	r0, r3
    97f8:	d01b      	beq.n	9832 <get_drive+0x84>
    97fa:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    97fe:	d103      	bne.n	9808 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    9800:	2303      	movs	r3, #3
    9802:	700b      	strb	r3, [r1, #0]
	int err = 0;
    9804:	2000      	movs	r0, #0
		break;
    9806:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    9808:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    980c:	d103      	bne.n	9816 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    980e:	2302      	movs	r3, #2
    9810:	700b      	strb	r3, [r1, #0]
	int err = 0;
    9812:	2000      	movs	r0, #0
		break;
    9814:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    9816:	f06f 0015 	mvn.w	r0, #21
    981a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    981c:	2000      	movs	r0, #0
    981e:	7008      	strb	r0, [r1, #0]
		break;
    9820:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    9822:	2306      	movs	r3, #6
    9824:	700b      	strb	r3, [r1, #0]
	int err = 0;
    9826:	2000      	movs	r0, #0
		break;
    9828:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    982a:	2307      	movs	r3, #7
    982c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    982e:	2000      	movs	r0, #0
		break;
    9830:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    9832:	2305      	movs	r3, #5
    9834:	700b      	strb	r3, [r1, #0]
	int err = 0;
    9836:	2000      	movs	r0, #0
}
    9838:	4770      	bx	lr

0000983a <get_pull>:
	if (flags & GPIO_PULL_UP) {
    983a:	f010 0f10 	tst.w	r0, #16
    983e:	d104      	bne.n	984a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    9840:	f010 0f20 	tst.w	r0, #32
    9844:	d103      	bne.n	984e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    9846:	2000      	movs	r0, #0
    9848:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    984a:	2003      	movs	r0, #3
    984c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    984e:	2001      	movs	r0, #1
}
    9850:	4770      	bx	lr

00009852 <gpio_nrfx_port_get_raw>:
	return port->config;
    9852:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9854:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9856:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    985a:	600b      	str	r3, [r1, #0]
}
    985c:	2000      	movs	r0, #0
    985e:	4770      	bx	lr

00009860 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    9860:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9862:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9864:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9868:	4042      	eors	r2, r0
    986a:	400a      	ands	r2, r1
    986c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    986e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9872:	2000      	movs	r0, #0
    9874:	4770      	bx	lr

00009876 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    9876:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9878:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    987a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    987e:	2000      	movs	r0, #0
    9880:	4770      	bx	lr

00009882 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    9882:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9884:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    9886:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    988a:	2000      	movs	r0, #0
    988c:	4770      	bx	lr

0000988e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    988e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9890:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9892:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9896:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9898:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    989c:	2000      	movs	r0, #0
    989e:	4770      	bx	lr

000098a0 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    98a0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    98a4:	d007      	beq.n	98b6 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    98a6:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    98aa:	d00d      	beq.n	98c8 <get_trigger+0x28>
    98ac:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    98b0:	d008      	beq.n	98c4 <get_trigger+0x24>
    98b2:	2001      	movs	r0, #1
}
    98b4:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    98b6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    98ba:	d001      	beq.n	98c0 <get_trigger+0x20>
    98bc:	2005      	movs	r0, #5
    98be:	4770      	bx	lr
    98c0:	2004      	movs	r0, #4
    98c2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    98c4:	2002      	movs	r0, #2
    98c6:	4770      	bx	lr
    98c8:	2003      	movs	r0, #3
    98ca:	4770      	bx	lr

000098cc <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    98cc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    98ce:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    98d0:	f04f 0120 	mov.w	r1, #32
    98d4:	f3ef 8211 	mrs	r2, BASEPRI
    98d8:	f381 8812 	msr	BASEPRI_MAX, r1
    98dc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    98e0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    98e4:	b131      	cbz	r1, 98f4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98e6:	2100      	movs	r1, #0
    98e8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    98ec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98f0:	2101      	movs	r1, #1
    98f2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    98f4:	f382 8811 	msr	BASEPRI, r2
    98f8:	f3bf 8f6f 	isb	sy
}
    98fc:	4770      	bx	lr

000098fe <uarte_nrfx_isr_int>:
{
    98fe:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9900:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    9902:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    9904:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9908:	f413 7f80 	tst.w	r3, #256	; 0x100
    990c:	d002      	beq.n	9914 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    990e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9912:	b9d3      	cbnz	r3, 994a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9914:	686b      	ldr	r3, [r5, #4]
    9916:	f013 0f10 	tst.w	r3, #16
    991a:	d015      	beq.n	9948 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    991c:	f04f 0220 	mov.w	r2, #32
    9920:	f3ef 8311 	mrs	r3, BASEPRI
    9924:	f382 8812 	msr	BASEPRI_MAX, r2
    9928:	f3bf 8f6f 	isb	sy
    992c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9930:	b112      	cbz	r2, 9938 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9932:	2200      	movs	r2, #0
    9934:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    9938:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    993c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    9940:	f383 8811 	msr	BASEPRI, r3
    9944:	f3bf 8f6f 	isb	sy
}
    9948:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    994a:	f7ff ffbf 	bl	98cc <endtx_isr>
    994e:	e7e1      	b.n	9914 <uarte_nrfx_isr_int+0x16>

00009950 <uarte_nrfx_configure>:
{
    9950:	b570      	push	{r4, r5, r6, lr}
    9952:	b082      	sub	sp, #8
    9954:	4606      	mov	r6, r0
    9956:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    9958:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    995a:	794b      	ldrb	r3, [r1, #5]
    995c:	2b01      	cmp	r3, #1
    995e:	d006      	beq.n	996e <uarte_nrfx_configure+0x1e>
    9960:	2b03      	cmp	r3, #3
    9962:	d011      	beq.n	9988 <uarte_nrfx_configure+0x38>
    9964:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    9968:	4618      	mov	r0, r3
    996a:	b002      	add	sp, #8
    996c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    996e:	2300      	movs	r3, #0
    9970:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    9974:	79a3      	ldrb	r3, [r4, #6]
    9976:	2b03      	cmp	r3, #3
    9978:	d137      	bne.n	99ea <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    997a:	79e3      	ldrb	r3, [r4, #7]
    997c:	b143      	cbz	r3, 9990 <uarte_nrfx_configure+0x40>
    997e:	2b01      	cmp	r3, #1
    9980:	d010      	beq.n	99a4 <uarte_nrfx_configure+0x54>
    9982:	f06f 0385 	mvn.w	r3, #133	; 0x85
    9986:	e7ef      	b.n	9968 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    9988:	2310      	movs	r3, #16
    998a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    998e:	e7f1      	b.n	9974 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    9990:	2300      	movs	r3, #0
    9992:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    9996:	7923      	ldrb	r3, [r4, #4]
    9998:	b143      	cbz	r3, 99ac <uarte_nrfx_configure+0x5c>
    999a:	2b02      	cmp	r3, #2
    999c:	d021      	beq.n	99e2 <uarte_nrfx_configure+0x92>
    999e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    99a2:	e7e1      	b.n	9968 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    99a4:	2301      	movs	r3, #1
    99a6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    99aa:	e7f4      	b.n	9996 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    99ac:	2300      	movs	r3, #0
    99ae:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    99b2:	6821      	ldr	r1, [r4, #0]
    99b4:	4630      	mov	r0, r6
    99b6:	f7f9 fcc1 	bl	333c <baudrate_set>
    99ba:	4603      	mov	r3, r0
    99bc:	b9c0      	cbnz	r0, 99f0 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    99be:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    99c0:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    99c2:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    99c6:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    99ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
    99ce:	4331      	orrs	r1, r6
    99d0:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    99d2:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    99d6:	3504      	adds	r5, #4
    99d8:	e894 0003 	ldmia.w	r4, {r0, r1}
    99dc:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    99e0:	e7c2      	b.n	9968 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    99e2:	230e      	movs	r3, #14
    99e4:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    99e8:	e7e3      	b.n	99b2 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    99ea:	f06f 0385 	mvn.w	r3, #133	; 0x85
    99ee:	e7bb      	b.n	9968 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    99f0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    99f4:	e7b8      	b.n	9968 <uarte_nrfx_configure+0x18>

000099f6 <uarte_nrfx_config_get>:
{
    99f6:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    99f8:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    99fa:	3304      	adds	r3, #4
    99fc:	e893 0003 	ldmia.w	r3, {r0, r1}
    9a00:	e882 0003 	stmia.w	r2, {r0, r1}
}
    9a04:	2000      	movs	r0, #0
    9a06:	4770      	bx	lr

00009a08 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    9a08:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9a0a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9a0c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9a10:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9a14:	4770      	bx	lr

00009a16 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    9a16:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9a18:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9a1a:	685b      	ldr	r3, [r3, #4]
    9a1c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a20:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9a24:	b929      	cbnz	r1, 9a32 <is_tx_ready+0x1c>
    9a26:	b933      	cbnz	r3, 9a36 <is_tx_ready+0x20>
    9a28:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    9a2c:	b92b      	cbnz	r3, 9a3a <is_tx_ready+0x24>
    9a2e:	2000      	movs	r0, #0
    9a30:	4770      	bx	lr
    9a32:	2001      	movs	r0, #1
    9a34:	4770      	bx	lr
    9a36:	2000      	movs	r0, #0
    9a38:	4770      	bx	lr
    9a3a:	2001      	movs	r0, #1
}
    9a3c:	4770      	bx	lr

00009a3e <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    9a3e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9a40:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9a42:	2208      	movs	r2, #8
    9a44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9a48:	4770      	bx	lr

00009a4a <tx_start>:
{
    9a4a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9a4c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9a4e:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9a50:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9a54:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a58:	2200      	movs	r2, #0
    9a5a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9a5e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    9a62:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    9a66:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9a6a:	685b      	ldr	r3, [r3, #4]
    9a6c:	f013 0f10 	tst.w	r3, #16
    9a70:	d102      	bne.n	9a78 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a72:	2301      	movs	r3, #1
    9a74:	60a3      	str	r3, [r4, #8]
}
    9a76:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    9a78:	2101      	movs	r1, #1
    9a7a:	f7ff ffe0 	bl	9a3e <uarte_enable>
    p_reg->INTENSET = mask;
    9a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    9a82:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    9a86:	e7f4      	b.n	9a72 <tx_start+0x28>

00009a88 <uarte_nrfx_poll_in>:
{
    9a88:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    9a8a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    9a8c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9a8e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a90:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9a94:	b152      	cbz	r2, 9aac <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    9a96:	7c62      	ldrb	r2, [r4, #17]
    9a98:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a9a:	2000      	movs	r0, #0
    9a9c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9aa0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9aa4:	2201      	movs	r2, #1
    9aa6:	601a      	str	r2, [r3, #0]
}
    9aa8:	bc10      	pop	{r4}
    9aaa:	4770      	bx	lr
		return -1;
    9aac:	f04f 30ff 	mov.w	r0, #4294967295
    9ab0:	e7fa      	b.n	9aa8 <uarte_nrfx_poll_in+0x20>

00009ab2 <wait_tx_ready>:
{
    9ab2:	b570      	push	{r4, r5, r6, lr}
    9ab4:	4606      	mov	r6, r0
    9ab6:	e014      	b.n	9ae2 <wait_tx_ready+0x30>
		if (res) {
    9ab8:	b17d      	cbz	r5, 9ada <wait_tx_ready+0x28>
	__asm__ volatile(
    9aba:	f04f 0320 	mov.w	r3, #32
    9abe:	f3ef 8411 	mrs	r4, BASEPRI
    9ac2:	f383 8812 	msr	BASEPRI_MAX, r3
    9ac6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    9aca:	4630      	mov	r0, r6
    9acc:	f7ff ffa3 	bl	9a16 <is_tx_ready>
    9ad0:	b9a0      	cbnz	r0, 9afc <wait_tx_ready+0x4a>
	__asm__ volatile(
    9ad2:	f384 8811 	msr	BASEPRI, r4
    9ad6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    9ada:	2021      	movs	r0, #33	; 0x21
    9adc:	2100      	movs	r1, #0
    9ade:	f7fe f991 	bl	7e04 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    9ae2:	2464      	movs	r4, #100	; 0x64
    9ae4:	4630      	mov	r0, r6
    9ae6:	f7ff ff96 	bl	9a16 <is_tx_ready>
    9aea:	4605      	mov	r5, r0
    9aec:	2800      	cmp	r0, #0
    9aee:	d1e3      	bne.n	9ab8 <wait_tx_ready+0x6>
    9af0:	2001      	movs	r0, #1
    9af2:	f000 f9a3 	bl	9e3c <nrfx_busy_wait>
    9af6:	3c01      	subs	r4, #1
    9af8:	d1f4      	bne.n	9ae4 <wait_tx_ready+0x32>
    9afa:	e7dd      	b.n	9ab8 <wait_tx_ready+0x6>
}
    9afc:	4620      	mov	r0, r4
    9afe:	bd70      	pop	{r4, r5, r6, pc}

00009b00 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    9b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9b04:	b083      	sub	sp, #12
    9b06:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    9b08:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    9b0a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    9b0c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9b10:	2100      	movs	r1, #0
    9b12:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    9b16:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    9b1a:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    9b1e:	aa01      	add	r2, sp, #4
    9b20:	4648      	mov	r0, r9
    9b22:	f000 f8e2 	bl	9cea <pinctrl_lookup_state>
	if (ret < 0) {
    9b26:	1e04      	subs	r4, r0, #0
    9b28:	db07      	blt.n	9b3a <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    9b2a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    9b2c:	f8d9 2000 	ldr.w	r2, [r9]
    9b30:	7919      	ldrb	r1, [r3, #4]
    9b32:	6818      	ldr	r0, [r3, #0]
    9b34:	f7f9 ffb4 	bl	3aa0 <pinctrl_configure_pins>
    9b38:	4604      	mov	r4, r0
	if (err < 0) {
    9b3a:	2c00      	cmp	r4, #0
    9b3c:	db35      	blt.n	9baa <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    9b3e:	f108 0104 	add.w	r1, r8, #4
    9b42:	4628      	mov	r0, r5
    9b44:	f7ff ff04 	bl	9950 <uarte_nrfx_configure>
	if (err) {
    9b48:	4604      	mov	r4, r0
    9b4a:	bb70      	cbnz	r0, 9baa <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9b4c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9b4e:	f013 0f02 	tst.w	r3, #2
    9b52:	d12e      	bne.n	9bb2 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9b54:	2308      	movs	r3, #8
    9b56:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    9b5a:	7a3b      	ldrb	r3, [r7, #8]
    9b5c:	b95b      	cbnz	r3, 9b76 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b5e:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    9b62:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9b66:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9b6a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9b6e:	2301      	movs	r3, #1
    9b70:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b74:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9b76:	687b      	ldr	r3, [r7, #4]
    9b78:	f013 0f02 	tst.w	r3, #2
    9b7c:	d103      	bne.n	9b86 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    9b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
    9b82:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9b86:	687b      	ldr	r3, [r7, #4]
    9b88:	f013 0f10 	tst.w	r3, #16
    9b8c:	d003      	beq.n	9b96 <uarte_instance_init+0x96>
    9b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    9b92:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    9b96:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9b9a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9b9e:	2300      	movs	r3, #0
    9ba0:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9ba4:	2301      	movs	r3, #1
    9ba6:	60b3      	str	r3, [r6, #8]
    9ba8:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    9baa:	4620      	mov	r0, r4
    9bac:	b003      	add	sp, #12
    9bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    9bb2:	4641      	mov	r1, r8
    9bb4:	4630      	mov	r0, r6
    9bb6:	f7f9 fca1 	bl	34fc <endtx_stoptx_ppi_init>
		if (err < 0) {
    9bba:	2800      	cmp	r0, #0
    9bbc:	daca      	bge.n	9b54 <uarte_instance_init+0x54>
			return err;
    9bbe:	4604      	mov	r4, r0
    9bc0:	e7f3      	b.n	9baa <uarte_instance_init+0xaa>

00009bc2 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9bc2:	b510      	push	{r4, lr}
    9bc4:	4604      	mov	r4, r0
    9bc6:	2200      	movs	r2, #0
    9bc8:	2101      	movs	r1, #1
    9bca:	2002      	movs	r0, #2
    9bcc:	f7f8 fa96 	bl	20fc <z_arm_irq_priority_set>
    9bd0:	2002      	movs	r0, #2
    9bd2:	f7f8 fa77 	bl	20c4 <arch_irq_enable>
    9bd6:	2100      	movs	r1, #0
    9bd8:	4620      	mov	r0, r4
    9bda:	f7ff ff91 	bl	9b00 <uarte_instance_init>
    9bde:	bd10      	pop	{r4, pc}

00009be0 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9be0:	b510      	push	{r4, lr}
    9be2:	4604      	mov	r4, r0
    9be4:	2200      	movs	r2, #0
    9be6:	2101      	movs	r1, #1
    9be8:	2028      	movs	r0, #40	; 0x28
    9bea:	f7f8 fa87 	bl	20fc <z_arm_irq_priority_set>
    9bee:	2028      	movs	r0, #40	; 0x28
    9bf0:	f7f8 fa68 	bl	20c4 <arch_irq_enable>
    9bf4:	2100      	movs	r1, #0
    9bf6:	4620      	mov	r0, r4
    9bf8:	f7ff ff82 	bl	9b00 <uarte_instance_init>
    9bfc:	bd10      	pop	{r4, pc}

00009bfe <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9bfe:	4770      	bx	lr

00009c00 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    9c00:	1a40      	subs	r0, r0, r1
}
    9c02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9c06:	4770      	bx	lr

00009c08 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9c08:	f100 0350 	add.w	r3, r0, #80	; 0x50
    9c0c:	009b      	lsls	r3, r3, #2
    9c0e:	b29b      	uxth	r3, r3
    9c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9c14:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9c18:	2200      	movs	r2, #0
    9c1a:	601a      	str	r2, [r3, #0]
    9c1c:	681b      	ldr	r3, [r3, #0]
}
    9c1e:	4770      	bx	lr

00009c20 <absolute_time_to_cc>:
}
    9c20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9c24:	4770      	bx	lr

00009c26 <full_int_lock>:
	__asm__ volatile(
    9c26:	f04f 0320 	mov.w	r3, #32
    9c2a:	f3ef 8011 	mrs	r0, BASEPRI
    9c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    9c32:	f3bf 8f6f 	isb	sy
}
    9c36:	4770      	bx	lr

00009c38 <full_int_unlock>:
	__asm__ volatile(
    9c38:	f380 8811 	msr	BASEPRI, r0
    9c3c:	f3bf 8f6f 	isb	sy
}
    9c40:	4770      	bx	lr

00009c42 <set_absolute_alarm>:
{
    9c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c44:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    9c46:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    9c4a:	f7f9 fc85 	bl	3558 <get_comparator>
    9c4e:	4607      	mov	r7, r0
    9c50:	e019      	b.n	9c86 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    9c52:	2013      	movs	r0, #19
    9c54:	f000 fa33 	bl	a0be <z_impl_k_busy_wait>
}
    9c58:	e022      	b.n	9ca0 <set_absolute_alarm+0x5e>
		event_clear(chan);
    9c5a:	4630      	mov	r0, r6
    9c5c:	f7ff ffd4 	bl	9c08 <event_clear>
		event_enable(chan);
    9c60:	4630      	mov	r0, r6
    9c62:	f7f9 fc81 	bl	3568 <event_enable>
		set_comparator(chan, cc_val);
    9c66:	4629      	mov	r1, r5
    9c68:	4630      	mov	r0, r6
    9c6a:	f7f9 fc6b 	bl	3544 <set_comparator>
		now2 = counter();
    9c6e:	f7f9 fc8f 	bl	3590 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    9c72:	4284      	cmp	r4, r0
    9c74:	d01e      	beq.n	9cb4 <set_absolute_alarm+0x72>
    9c76:	1c81      	adds	r1, r0, #2
    9c78:	4628      	mov	r0, r5
    9c7a:	f7ff ffc1 	bl	9c00 <counter_sub>
	} while ((now2 != now) &&
    9c7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9c82:	d917      	bls.n	9cb4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    9c84:	462f      	mov	r7, r5
		now = counter();
    9c86:	f7f9 fc83 	bl	3590 <counter>
    9c8a:	4604      	mov	r4, r0
		set_comparator(chan, now);
    9c8c:	4601      	mov	r1, r0
    9c8e:	4630      	mov	r0, r6
    9c90:	f7f9 fc58 	bl	3544 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    9c94:	4621      	mov	r1, r4
    9c96:	4638      	mov	r0, r7
    9c98:	f7ff ffb2 	bl	9c00 <counter_sub>
    9c9c:	2801      	cmp	r0, #1
    9c9e:	d0d8      	beq.n	9c52 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    9ca0:	1ca7      	adds	r7, r4, #2
    9ca2:	4639      	mov	r1, r7
    9ca4:	4628      	mov	r0, r5
    9ca6:	f7ff ffab 	bl	9c00 <counter_sub>
    9caa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9cae:	d9d4      	bls.n	9c5a <set_absolute_alarm+0x18>
			cc_val = now + 2;
    9cb0:	463d      	mov	r5, r7
    9cb2:	e7d2      	b.n	9c5a <set_absolute_alarm+0x18>
}
    9cb4:	4628      	mov	r0, r5
    9cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009cb8 <compare_set>:
{
    9cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cba:	b083      	sub	sp, #12
    9cbc:	4604      	mov	r4, r0
    9cbe:	4617      	mov	r7, r2
    9cc0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    9cc2:	f7f9 fc6b 	bl	359c <compare_int_lock>
    9cc6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    9cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cca:	9301      	str	r3, [sp, #4]
    9ccc:	9b08      	ldr	r3, [sp, #32]
    9cce:	9300      	str	r3, [sp, #0]
    9cd0:	463a      	mov	r2, r7
    9cd2:	462b      	mov	r3, r5
    9cd4:	4620      	mov	r0, r4
    9cd6:	f7f9 fd51 	bl	377c <compare_set_nolocks>
    9cda:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    9cdc:	4631      	mov	r1, r6
    9cde:	4620      	mov	r0, r4
    9ce0:	f7f9 fcc0 	bl	3664 <compare_int_unlock>
}
    9ce4:	4628      	mov	r0, r5
    9ce6:	b003      	add	sp, #12
    9ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009cea <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9cea:	b410      	push	{r4}
	*state = &config->states[0];
    9cec:	6843      	ldr	r3, [r0, #4]
    9cee:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9cf0:	e001      	b.n	9cf6 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    9cf2:	3408      	adds	r4, #8
    9cf4:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9cf6:	6814      	ldr	r4, [r2, #0]
    9cf8:	7a03      	ldrb	r3, [r0, #8]
    9cfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    9cfe:	3b01      	subs	r3, #1
    9d00:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9d04:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    9d08:	429c      	cmp	r4, r3
    9d0a:	d804      	bhi.n	9d16 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    9d0c:	7963      	ldrb	r3, [r4, #5]
    9d0e:	428b      	cmp	r3, r1
    9d10:	d1ef      	bne.n	9cf2 <pinctrl_lookup_state+0x8>
			return 0;
    9d12:	2000      	movs	r0, #0
    9d14:	e001      	b.n	9d1a <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    9d16:	f06f 0001 	mvn.w	r0, #1
}
    9d1a:	bc10      	pop	{r4}
    9d1c:	4770      	bx	lr

00009d1e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9d1e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    9d20:	2000      	movs	r0, #0
    9d22:	f7f8 fe85 	bl	2a30 <sys_arch_reboot>

00009d26 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    9d26:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9d28:	f7fe feb2 	bl	8a90 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    9d2c:	bd08      	pop	{r3, pc}

00009d2e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    9d2e:	b510      	push	{r4, lr}
    9d30:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9d32:	f7f8 f8d7 	bl	1ee4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9d36:	f7f8 f993 	bl	2060 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7ff fff3 	bl	9d26 <hw_cc3xx_init_internal>
	return res;
}
    9d40:	bd10      	pop	{r4, pc}

00009d42 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9d46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9d4a:	2b08      	cmp	r3, #8
    9d4c:	d001      	beq.n	9d52 <nrf52_errata_36+0x10>
        return false;
    9d4e:	2000      	movs	r0, #0
    9d50:	4770      	bx	lr
                        return true;
    9d52:	2001      	movs	r0, #1
}
    9d54:	4770      	bx	lr

00009d56 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9d56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9d5a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9d5e:	2b08      	cmp	r3, #8
    9d60:	d001      	beq.n	9d66 <nrf52_errata_66+0x10>
        return false;
    9d62:	2000      	movs	r0, #0
    9d64:	4770      	bx	lr
                        return true;
    9d66:	2001      	movs	r0, #1
}
    9d68:	4770      	bx	lr

00009d6a <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9d6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9d6e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9d72:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9d76:	2a08      	cmp	r2, #8
    9d78:	d001      	beq.n	9d7e <nrf52_errata_98+0x14>
        return false;
    9d7a:	2000      	movs	r0, #0
    9d7c:	4770      	bx	lr
                switch(var2)
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d804      	bhi.n	9d8c <nrf52_errata_98+0x22>
    9d82:	e8df f003 	tbb	[pc, r3]
    9d86:	01          	.byte	0x01
    9d87:	00          	.byte	0x00
    9d88:	2001      	movs	r0, #1
    9d8a:	4770      	bx	lr
                        return false;
    9d8c:	2000      	movs	r0, #0
}
    9d8e:	4770      	bx	lr

00009d90 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9d90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9d94:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9d98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9d9c:	2a08      	cmp	r2, #8
    9d9e:	d001      	beq.n	9da4 <nrf52_errata_103+0x14>
        return false;
    9da0:	2000      	movs	r0, #0
    9da2:	4770      	bx	lr
                switch(var2)
    9da4:	2b00      	cmp	r3, #0
    9da6:	d804      	bhi.n	9db2 <nrf52_errata_103+0x22>
    9da8:	e8df f003 	tbb	[pc, r3]
    9dac:	01          	.byte	0x01
    9dad:	00          	.byte	0x00
    9dae:	2001      	movs	r0, #1
    9db0:	4770      	bx	lr
                        return false;
    9db2:	2000      	movs	r0, #0
}
    9db4:	4770      	bx	lr

00009db6 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9dba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9dbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9dc2:	2a08      	cmp	r2, #8
    9dc4:	d001      	beq.n	9dca <nrf52_errata_115+0x14>
        return false;
    9dc6:	2000      	movs	r0, #0
    9dc8:	4770      	bx	lr
                switch(var2)
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d804      	bhi.n	9dd8 <nrf52_errata_115+0x22>
    9dce:	e8df f003 	tbb	[pc, r3]
    9dd2:	01          	.byte	0x01
    9dd3:	00          	.byte	0x00
    9dd4:	2001      	movs	r0, #1
    9dd6:	4770      	bx	lr
                        return false;
    9dd8:	2000      	movs	r0, #0
}
    9dda:	4770      	bx	lr

00009ddc <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9de0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9de4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9de8:	2a08      	cmp	r2, #8
    9dea:	d001      	beq.n	9df0 <nrf52_errata_120+0x14>
        return false;
    9dec:	2000      	movs	r0, #0
    9dee:	4770      	bx	lr
                switch(var2)
    9df0:	2b00      	cmp	r3, #0
    9df2:	d804      	bhi.n	9dfe <nrf52_errata_120+0x22>
    9df4:	e8df f003 	tbb	[pc, r3]
    9df8:	01          	.byte	0x01
    9df9:	00          	.byte	0x00
    9dfa:	2001      	movs	r0, #1
    9dfc:	4770      	bx	lr
                        return false;
    9dfe:	2000      	movs	r0, #0
}
    9e00:	4770      	bx	lr

00009e02 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9e02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9e06:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9e0a:	2b08      	cmp	r3, #8
    9e0c:	d001      	beq.n	9e12 <nrf52_errata_136+0x10>
        return false;
    9e0e:	2000      	movs	r0, #0
    9e10:	4770      	bx	lr
                        return true;
    9e12:	2001      	movs	r0, #1
}
    9e14:	4770      	bx	lr

00009e16 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9e1a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9e1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9e22:	2a08      	cmp	r2, #8
    9e24:	d001      	beq.n	9e2a <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    9e26:	2000      	movs	r0, #0
    9e28:	4770      	bx	lr
                switch(var2)
    9e2a:	2b04      	cmp	r3, #4
    9e2c:	d801      	bhi.n	9e32 <nrf52_configuration_249+0x1c>
    9e2e:	2000      	movs	r0, #0
    9e30:	4770      	bx	lr
                        return true;
    9e32:	2001      	movs	r0, #1
    #endif
}
    9e34:	4770      	bx	lr

00009e36 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    9e36:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    9e38:	4780      	blx	r0
}
    9e3a:	bd08      	pop	{r3, pc}

00009e3c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    9e3c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    9e3e:	f000 f93e 	bl	a0be <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    9e42:	bd08      	pop	{r3, pc}

00009e44 <clock_initial_lfclksrc_get>:
}
    9e44:	2000      	movs	r0, #0
    9e46:	4770      	bx	lr

00009e48 <clock_lfclksrc_tweak>:
{
    9e48:	b538      	push	{r3, r4, r5, lr}
    9e4a:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    9e4c:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9e4e:	2b01      	cmp	r3, #1
    9e50:	d002      	beq.n	9e58 <clock_lfclksrc_tweak+0x10>
    9e52:	b933      	cbnz	r3, 9e62 <clock_lfclksrc_tweak+0x1a>
    9e54:	2301      	movs	r3, #1
    9e56:	e000      	b.n	9e5a <clock_lfclksrc_tweak+0x12>
    9e58:	2301      	movs	r3, #1
    if (!is_correct_clk)
    9e5a:	461d      	mov	r5, r3
    9e5c:	b11b      	cbz	r3, 9e66 <clock_lfclksrc_tweak+0x1e>
}
    9e5e:	4628      	mov	r0, r5
    9e60:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9e62:	2300      	movs	r3, #0
    9e64:	e7f9      	b.n	9e5a <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9e66:	2000      	movs	r0, #0
    9e68:	f7fa fbdc 	bl	4624 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9e6c:	f7ff ffea 	bl	9e44 <clock_initial_lfclksrc_get>
    9e70:	6020      	str	r0, [r4, #0]
    9e72:	e7f4      	b.n	9e5e <clock_lfclksrc_tweak+0x16>

00009e74 <pin_is_task_output>:
{
    9e74:	b510      	push	{r4, lr}
    9e76:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9e78:	f7fa fda6 	bl	49c8 <pin_is_output>
    9e7c:	b128      	cbz	r0, 9e8a <pin_is_task_output+0x16>
    9e7e:	4620      	mov	r0, r4
    9e80:	f7fa fd8c 	bl	499c <pin_in_use_by_te>
    9e84:	b118      	cbz	r0, 9e8e <pin_is_task_output+0x1a>
    9e86:	2001      	movs	r0, #1
    9e88:	e000      	b.n	9e8c <pin_is_task_output+0x18>
    9e8a:	2000      	movs	r0, #0
}
    9e8c:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9e8e:	2000      	movs	r0, #0
    9e90:	e7fc      	b.n	9e8c <pin_is_task_output+0x18>

00009e92 <pin_is_input>:
{
    9e92:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    9e94:	f7fa fd98 	bl	49c8 <pin_is_output>
    9e98:	f080 0001 	eor.w	r0, r0, #1
}
    9e9c:	b2c0      	uxtb	r0, r0
    9e9e:	bd08      	pop	{r3, pc}

00009ea0 <gpiote_polarity_to_trigger>:
}
    9ea0:	4770      	bx	lr

00009ea2 <gpiote_trigger_to_polarity>:
}
    9ea2:	4770      	bx	lr

00009ea4 <is_level>:
}
    9ea4:	2803      	cmp	r0, #3
    9ea6:	bf94      	ite	ls
    9ea8:	2000      	movls	r0, #0
    9eaa:	2001      	movhi	r0, #1
    9eac:	4770      	bx	lr

00009eae <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    9eae:	b508      	push	{r3, lr}
  _DoInit();
    9eb0:	f7fb fd54 	bl	595c <_DoInit>
}
    9eb4:	bd08      	pop	{r3, pc}

00009eb6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9eb6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9eb8:	f7ff fff9 	bl	9eae <SEGGER_RTT_Init>

	return 0;
}
    9ebc:	2000      	movs	r0, #0
    9ebe:	bd08      	pop	{r3, pc}

00009ec0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9ec0:	b148      	cbz	r0, 9ed6 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9ec2:	68c3      	ldr	r3, [r0, #12]
    9ec4:	8818      	ldrh	r0, [r3, #0]
    9ec6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9eca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    9ece:	bf14      	ite	ne
    9ed0:	2000      	movne	r0, #0
    9ed2:	2001      	moveq	r0, #1
    9ed4:	4770      	bx	lr
		return false;
    9ed6:	2000      	movs	r0, #0
}
    9ed8:	4770      	bx	lr

00009eda <z_early_memset>:
{
    9eda:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    9edc:	f7ff fb6f 	bl	95be <memset>
}
    9ee0:	bd08      	pop	{r3, pc}

00009ee2 <z_early_memcpy>:
{
    9ee2:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    9ee4:	f7ff fb3c 	bl	9560 <memcpy>
}
    9ee8:	bd08      	pop	{r3, pc}

00009eea <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9eea:	6902      	ldr	r2, [r0, #16]
    9eec:	6943      	ldr	r3, [r0, #20]
    9eee:	431a      	orrs	r2, r3
    9ef0:	f012 0203 	ands.w	r2, r2, #3
    9ef4:	d10d      	bne.n	9f12 <create_free_list+0x28>
	slab->free_list = NULL;
    9ef6:	2100      	movs	r1, #0
    9ef8:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9efa:	e005      	b.n	9f08 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    9efc:	6981      	ldr	r1, [r0, #24]
    9efe:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    9f00:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    9f02:	6901      	ldr	r1, [r0, #16]
    9f04:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    9f06:	3201      	adds	r2, #1
    9f08:	68c1      	ldr	r1, [r0, #12]
    9f0a:	4291      	cmp	r1, r2
    9f0c:	d8f6      	bhi.n	9efc <create_free_list+0x12>
	return 0;
    9f0e:	2000      	movs	r0, #0
    9f10:	4770      	bx	lr
		return -EINVAL;
    9f12:	f06f 0015 	mvn.w	r0, #21
}
    9f16:	4770      	bx	lr

00009f18 <k_mem_slab_init>:
{
    9f18:	b510      	push	{r4, lr}
    9f1a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    9f1c:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    9f1e:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    9f20:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    9f22:	2300      	movs	r3, #0
    9f24:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9f26:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    9f28:	f7ff ffdf 	bl	9eea <create_free_list>
	if (rc < 0) {
    9f2c:	2800      	cmp	r0, #0
    9f2e:	db01      	blt.n	9f34 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    9f30:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    9f32:	6064      	str	r4, [r4, #4]
}
    9f34:	bd10      	pop	{r4, pc}

00009f36 <setup_thread_stack>:
{
    9f36:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9f38:	3207      	adds	r2, #7
    9f3a:	f022 0207 	bic.w	r2, r2, #7
    9f3e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    9f42:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    9f46:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    9f4a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    9f4e:	2200      	movs	r2, #0
    9f50:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    9f54:	18c8      	adds	r0, r1, r3
    9f56:	bc10      	pop	{r4}
    9f58:	4770      	bx	lr

00009f5a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9f5a:	f3ef 8005 	mrs	r0, IPSR
}
    9f5e:	3800      	subs	r0, #0
    9f60:	bf18      	it	ne
    9f62:	2001      	movne	r0, #1
    9f64:	4770      	bx	lr

00009f66 <z_impl_k_thread_start>:
{
    9f66:	b508      	push	{r3, lr}
	z_sched_start(thread);
    9f68:	f7fd f9ae 	bl	72c8 <z_sched_start>
}
    9f6c:	bd08      	pop	{r3, pc}

00009f6e <z_init_thread_base>:
{
    9f6e:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    9f70:	2400      	movs	r4, #0
    9f72:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    9f74:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9f76:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    9f78:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    9f7a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    9f7c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    9f7e:	61c4      	str	r4, [r0, #28]
}
    9f80:	bc10      	pop	{r4}
    9f82:	4770      	bx	lr

00009f84 <z_pm_save_idle_exit>:
{
    9f84:	b508      	push	{r3, lr}
	pm_system_resume();
    9f86:	f7f7 fdb7 	bl	1af8 <pm_system_resume>
	sys_clock_idle_exit();
    9f8a:	f7ff fe38 	bl	9bfe <sys_clock_idle_exit>
}
    9f8e:	bd08      	pop	{r3, pc}

00009f90 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    9f90:	4288      	cmp	r0, r1
    9f92:	da00      	bge.n	9f96 <new_prio_for_inheritance+0x6>
    9f94:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9f96:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    9f9a:	db01      	blt.n	9fa0 <new_prio_for_inheritance+0x10>
    9f9c:	4608      	mov	r0, r1
    9f9e:	4770      	bx	lr
    9fa0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    9fa4:	4770      	bx	lr

00009fa6 <adjust_owner_prio>:
{
    9fa6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    9fa8:	6880      	ldr	r0, [r0, #8]
    9faa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9fae:	428b      	cmp	r3, r1
    9fb0:	d101      	bne.n	9fb6 <adjust_owner_prio+0x10>
	return false;
    9fb2:	2000      	movs	r0, #0
}
    9fb4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    9fb6:	f7fd fb3d 	bl	7634 <z_set_prio>
    9fba:	e7fb      	b.n	9fb4 <adjust_owner_prio+0xe>

00009fbc <z_impl_k_mutex_init>:
{
    9fbc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9fbe:	2000      	movs	r0, #0
    9fc0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    9fc2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    9fc4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    9fc6:	605b      	str	r3, [r3, #4]
}
    9fc8:	4770      	bx	lr

00009fca <prepare_thread_to_run>:
{
    9fca:	b508      	push	{r3, lr}
    9fcc:	2200      	movs	r2, #0
    9fce:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    9fd2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    9fd4:	f7fd f922 	bl	721c <z_ready_thread>
}
    9fd8:	bd08      	pop	{r3, pc}

00009fda <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    9fda:	b160      	cbz	r0, 9ff6 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9fdc:	6803      	ldr	r3, [r0, #0]
    9fde:	f013 0f03 	tst.w	r3, #3
    9fe2:	d008      	beq.n	9ff6 <z_queue_node_peek+0x1c>
{
    9fe4:	b510      	push	{r4, lr}
		ret = anode->data;
    9fe6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    9fe8:	b909      	cbnz	r1, 9fee <z_queue_node_peek+0x14>
		ret = anode->data;
    9fea:	4620      	mov	r0, r4
}
    9fec:	bd10      	pop	{r4, pc}
			k_free(anode);
    9fee:	f000 f898 	bl	a122 <k_free>
		ret = anode->data;
    9ff2:	4620      	mov	r0, r4
    9ff4:	e7fa      	b.n	9fec <z_queue_node_peek+0x12>
}
    9ff6:	4770      	bx	lr

00009ff8 <k_queue_append>:
{
    9ff8:	b500      	push	{lr}
    9ffa:	b083      	sub	sp, #12
    9ffc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    9ffe:	2301      	movs	r3, #1
    a000:	9300      	str	r3, [sp, #0]
    a002:	2300      	movs	r3, #0
    a004:	4619      	mov	r1, r3
    a006:	f7fc fb43 	bl	6690 <queue_insert>
}
    a00a:	b003      	add	sp, #12
    a00c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a010 <thread_active_elsewhere>:
}
    a010:	2000      	movs	r0, #0
    a012:	4770      	bx	lr

0000a014 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    a014:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a018:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    a01c:	4283      	cmp	r3, r0
    a01e:	d001      	beq.n	a024 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    a020:	1ac0      	subs	r0, r0, r3
    a022:	4770      	bx	lr
	return 0;
    a024:	2000      	movs	r0, #0
}
    a026:	4770      	bx	lr

0000a028 <z_reschedule_irqlock>:
{
    a028:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a02a:	4603      	mov	r3, r0
    a02c:	b920      	cbnz	r0, a038 <z_reschedule_irqlock+0x10>
    a02e:	f3ef 8205 	mrs	r2, IPSR
    a032:	b942      	cbnz	r2, a046 <z_reschedule_irqlock+0x1e>
    a034:	2201      	movs	r2, #1
    a036:	e000      	b.n	a03a <z_reschedule_irqlock+0x12>
    a038:	2200      	movs	r2, #0
	if (resched(key)) {
    a03a:	b932      	cbnz	r2, a04a <z_reschedule_irqlock+0x22>
    a03c:	f383 8811 	msr	BASEPRI, r3
    a040:	f3bf 8f6f 	isb	sy
}
    a044:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a046:	2200      	movs	r2, #0
    a048:	e7f7      	b.n	a03a <z_reschedule_irqlock+0x12>
    a04a:	4618      	mov	r0, r3
    a04c:	f7f8 f8ac 	bl	21a8 <arch_swap>
	return ret;
    a050:	e7f8      	b.n	a044 <z_reschedule_irqlock+0x1c>

0000a052 <z_priq_dumb_best>:
{
    a052:	4603      	mov	r3, r0
	return list->head == list;
    a054:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a056:	4283      	cmp	r3, r0
    a058:	d000      	beq.n	a05c <z_priq_dumb_best+0xa>
}
    a05a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a05c:	2000      	movs	r0, #0
	return thread;
    a05e:	e7fc      	b.n	a05a <z_priq_dumb_best+0x8>

0000a060 <z_unpend_all>:
{
    a060:	b538      	push	{r3, r4, r5, lr}
    a062:	4605      	mov	r5, r0
	int need_sched = 0;
    a064:	2000      	movs	r0, #0
	return list->head == list;
    a066:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a068:	42a5      	cmp	r5, r4
    a06a:	d008      	beq.n	a07e <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a06c:	b13c      	cbz	r4, a07e <z_unpend_all+0x1e>
		z_unpend_thread(thread);
    a06e:	4620      	mov	r0, r4
    a070:	f7fc fec6 	bl	6e00 <z_unpend_thread>
		z_ready_thread(thread);
    a074:	4620      	mov	r0, r4
    a076:	f7fd f8d1 	bl	721c <z_ready_thread>
		need_sched = 1;
    a07a:	2001      	movs	r0, #1
    a07c:	e7f3      	b.n	a066 <z_unpend_all+0x6>
}
    a07e:	bd38      	pop	{r3, r4, r5, pc}

0000a080 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    a080:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    a082:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    a084:	6083      	str	r3, [r0, #8]
}
    a086:	4770      	bx	lr

0000a088 <remove_timeout>:
{
    a088:	b510      	push	{r4, lr}
    a08a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    a08c:	f7fd ffd2 	bl	8034 <next>
    a090:	b148      	cbz	r0, a0a6 <remove_timeout+0x1e>
    a092:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    a094:	6920      	ldr	r0, [r4, #16]
    a096:	6961      	ldr	r1, [r4, #20]
    a098:	6913      	ldr	r3, [r2, #16]
    a09a:	181b      	adds	r3, r3, r0
    a09c:	6950      	ldr	r0, [r2, #20]
    a09e:	eb41 0100 	adc.w	r1, r1, r0
    a0a2:	6113      	str	r3, [r2, #16]
    a0a4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    a0a6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    a0a8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    a0aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a0ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a0ae:	2300      	movs	r3, #0
    a0b0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    a0b2:	6063      	str	r3, [r4, #4]
}
    a0b4:	bd10      	pop	{r4, pc}

0000a0b6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a0b6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a0b8:	f7fe fab8 	bl	862c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a0bc:	bd08      	pop	{r3, pc}

0000a0be <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a0be:	b900      	cbnz	r0, a0c2 <z_impl_k_busy_wait+0x4>
    a0c0:	4770      	bx	lr
{
    a0c2:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a0c4:	f7f8 fcca 	bl	2a5c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a0c8:	bd08      	pop	{r3, pc}

0000a0ca <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a0ca:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0ce:	bf08      	it	eq
    a0d0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    a0d4:	d021      	beq.n	a11a <sys_clock_timeout_end_calc+0x50>
{
    a0d6:	b538      	push	{r3, r4, r5, lr}
    a0d8:	4605      	mov	r5, r0
    a0da:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a0dc:	ea51 0300 	orrs.w	r3, r1, r0
    a0e0:	d009      	beq.n	a0f6 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a0e2:	f06f 0301 	mvn.w	r3, #1
    a0e6:	1a18      	subs	r0, r3, r0
    a0e8:	f04f 33ff 	mov.w	r3, #4294967295
    a0ec:	eb63 0101 	sbc.w	r1, r3, r1
    a0f0:	2900      	cmp	r1, #0
    a0f2:	db03      	blt.n	a0fc <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    a0f4:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    a0f6:	f7fe fa99 	bl	862c <sys_clock_tick_get>
    a0fa:	e7fb      	b.n	a0f4 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
    a0fc:	f7fe fa96 	bl	862c <sys_clock_tick_get>
    a100:	4603      	mov	r3, r0
    a102:	4628      	mov	r0, r5
    a104:	4622      	mov	r2, r4
    a106:	2d01      	cmp	r5, #1
    a108:	f174 0400 	sbcs.w	r4, r4, #0
    a10c:	da01      	bge.n	a112 <sys_clock_timeout_end_calc+0x48>
    a10e:	2001      	movs	r0, #1
    a110:	2200      	movs	r2, #0
    a112:	1818      	adds	r0, r3, r0
    a114:	eb41 0102 	adc.w	r1, r1, r2
    a118:	e7ec      	b.n	a0f4 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
    a11a:	f04f 30ff 	mov.w	r0, #4294967295
    a11e:	4601      	mov	r1, r0
}
    a120:	4770      	bx	lr

0000a122 <k_free>:
	if (ptr != NULL) {
    a122:	b130      	cbz	r0, a132 <k_free+0x10>
{
    a124:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    a126:	1f01      	subs	r1, r0, #4
    a128:	f850 0c04 	ldr.w	r0, [r0, #-4]
    a12c:	f7fe fc56 	bl	89dc <k_heap_free>
}
    a130:	bd08      	pop	{r3, pc}
    a132:	4770      	bx	lr

0000a134 <k_malloc>:
{
    a134:	b508      	push	{r3, lr}
    a136:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    a138:	2004      	movs	r0, #4
    a13a:	f7fe fb09 	bl	8750 <k_aligned_alloc>
}
    a13e:	bd08      	pop	{r3, pc}

0000a140 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    a140:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
    a142:	4770      	bx	lr

0000a144 <k_heap_init>:
{
    a144:	b510      	push	{r4, lr}
    a146:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    a14a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    a14c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    a14e:	f7f6 ffa1 	bl	1094 <sys_heap_init>
}
    a152:	bd10      	pop	{r4, pc}

0000a154 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a154:	4770      	bx	lr
	...

0000a158 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a158:	f7fa b944 	b.w	43e4 <SystemInit>
